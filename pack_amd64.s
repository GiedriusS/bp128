// Generated by PeachPy 0.2.0 from pack.py

// func pack32_1(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_1(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x01 // PSLLD xmm2, 1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x02 // PSLLD xmm3, 2
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x03 // PSLLD xmm4, 3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x04 // PSLLD xmm5, 4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x05 // PSLLD xmm6, 5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x06 // PSLLD xmm7, 6
	MOVO 112(AX), X8
	MOVO 128(AX), X9
	MOVO 144(AX), X10
	MOVO 160(AX), X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x07 // PSLLD xmm8, 7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x08 // PSLLD xmm9, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x09 // PSLLD xmm10, 9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0A // PSLLD xmm11, 10
	MOVO 176(AX), X12
	MOVO 192(AX), X13
	MOVO 208(AX), X14
	MOVO 224(AX), X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0B // PSLLD xmm12, 11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0C // PSLLD xmm13, 12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0D // PSLLD xmm14, 13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0E // PSLLD xmm15, 14
	POR X1, X2
	POR X3, X4
	POR X5, X6
	POR X7, X8
	POR X9, X10
	POR X11, X12
	POR X13, X14
	POR X15, X2
	POR X4, X6
	POR X8, X10
	POR X12, X14
	POR X2, X6
	POR X10, X14
	POR X6, X14
	MOVO 240(AX), X0
	MOVO 256(AX), X1
	MOVO 272(AX), X3
	MOVO 288(AX), X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0F // PSLLD xmm0, 15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x10 // PSLLD xmm1, 16
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x11 // PSLLD xmm3, 17
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x12 // PSLLD xmm5, 18
	MOVO 304(AX), X7
	MOVO 320(AX), X9
	MOVO 336(AX), X11
	MOVO 352(AX), X13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x13 // PSLLD xmm7, 19
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x14 // PSLLD xmm9, 20
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x15 // PSLLD xmm11, 21
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x16 // PSLLD xmm13, 22
	MOVO 368(AX), X15
	MOVO 384(AX), X4
	MOVO 400(AX), X8
	MOVO 416(AX), X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x17 // PSLLD xmm15, 23
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x18 // PSLLD xmm4, 24
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x19 // PSLLD xmm8, 25
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x1A // PSLLD xmm12, 26
	POR X14, X0
	POR X1, X3
	POR X5, X7
	POR X9, X11
	POR X13, X15
	POR X4, X8
	POR X12, X0
	POR X3, X7
	POR X11, X15
	POR X8, X0
	POR X7, X15
	POR X0, X15
	MOVO 432(AX), X2
	MOVO 448(AX), X10
	MOVO 464(AX), X6
	MOVO 480(AX), X14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1B // PSLLD xmm2, 27
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1C // PSLLD xmm10, 28
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1D // PSLLD xmm6, 29
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1E // PSLLD xmm14, 30
	MOVO 496(AX), X1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1F // PSLLD xmm1, 31
	POR X15, X2
	POR X10, X6
	POR X14, X1
	POR X2, X6
	POR X1, X6
	MOVO X6, 0(BX)
	RET

// func pack32_2(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_2(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x02 // PSLLD xmm2, 2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x04 // PSLLD xmm3, 4
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x06 // PSLLD xmm4, 6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x08 // PSLLD xmm5, 8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0A // PSLLD xmm6, 10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0C // PSLLD xmm7, 12
	MOVO 112(AX), X8
	MOVO 128(AX), X9
	MOVO 144(AX), X10
	MOVO 160(AX), X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0E // PSLLD xmm8, 14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x10 // PSLLD xmm9, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x12 // PSLLD xmm10, 18
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x14 // PSLLD xmm11, 20
	MOVO 176(AX), X12
	MOVO 192(AX), X13
	MOVO 208(AX), X14
	MOVO 224(AX), X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x16 // PSLLD xmm12, 22
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x18 // PSLLD xmm13, 24
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1A // PSLLD xmm14, 26
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1C // PSLLD xmm15, 28
	POR X1, X2
	POR X3, X4
	POR X5, X6
	POR X7, X8
	POR X9, X10
	POR X11, X12
	POR X13, X14
	POR X15, X2
	POR X4, X6
	POR X8, X10
	POR X12, X14
	POR X2, X6
	POR X10, X14
	POR X6, X14
	MOVO 240(AX), X0
	MOVO 256(AX), X1
	MOVO 272(AX), X3
	MOVO 288(AX), X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1E // PSLLD xmm0, 30
	POR X14, X0
	MOVO X0, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x02 // PSLLD xmm3, 2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x04 // PSLLD xmm5, 4
	MOVO 304(AX), X7
	MOVO 320(AX), X9
	MOVO 336(AX), X11
	MOVO 352(AX), X13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x06 // PSLLD xmm7, 6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x08 // PSLLD xmm9, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0A // PSLLD xmm11, 10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0C // PSLLD xmm13, 12
	MOVO 368(AX), X15
	MOVO 384(AX), X4
	MOVO 400(AX), X8
	MOVO 416(AX), X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0E // PSLLD xmm15, 14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x10 // PSLLD xmm4, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x12 // PSLLD xmm8, 18
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x14 // PSLLD xmm12, 20
	MOVO 432(AX), X2
	MOVO 448(AX), X10
	MOVO 464(AX), X6
	MOVO 480(AX), X14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x16 // PSLLD xmm2, 22
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x18 // PSLLD xmm10, 24
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1A // PSLLD xmm6, 26
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1C // PSLLD xmm14, 28
	POR X1, X3
	POR X5, X7
	POR X9, X11
	POR X13, X15
	POR X4, X8
	POR X12, X2
	POR X10, X6
	POR X14, X3
	POR X7, X11
	POR X15, X8
	POR X2, X6
	POR X3, X11
	POR X8, X6
	POR X11, X6
	MOVO 496(AX), X0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1E // PSLLD xmm0, 30
	POR X6, X0
	MOVO X0, 16(BX)
	RET

// func pack32_3(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_3(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x03 // PSLLD xmm2, 3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x06 // PSLLD xmm3, 6
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x09 // PSLLD xmm4, 9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0C // PSLLD xmm5, 12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0F // PSLLD xmm6, 15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x12 // PSLLD xmm7, 18
	MOVO 112(AX), X8
	MOVO 128(AX), X9
	MOVO 144(AX), X10
	MOVO 160(AX), X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x15 // PSLLD xmm8, 21
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x18 // PSLLD xmm9, 24
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1B // PSLLD xmm10, 27
	MOVO X11, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1E // PSLLD xmm11, 30
	POR X1, X2
	POR X3, X4
	POR X5, X6
	POR X7, X8
	POR X9, X10
	POR X11, X2
	POR X4, X6
	POR X8, X10
	POR X2, X6
	POR X10, X6
	MOVO X6, 0(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x02 // PSRLD xmm12, 2
	MOVO 176(AX), X13
	MOVO 192(AX), X14
	MOVO 208(AX), X15
	MOVO 224(AX), X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x01 // PSLLD xmm13, 1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x04 // PSLLD xmm14, 4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x07 // PSLLD xmm15, 7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0A // PSLLD xmm0, 10
	MOVO 240(AX), X1
	MOVO 256(AX), X3
	MOVO 272(AX), X5
	MOVO 288(AX), X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0D // PSLLD xmm1, 13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x10 // PSLLD xmm3, 16
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x13 // PSLLD xmm5, 19
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x16 // PSLLD xmm7, 22
	MOVO 304(AX), X9
	MOVO 320(AX), X11
	MOVO 336(AX), X4
	MOVO 352(AX), X8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x19 // PSLLD xmm9, 25
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1C // PSLLD xmm11, 28
	MOVO X4, X2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x1F // PSLLD xmm4, 31
	POR X12, X13
	POR X14, X15
	POR X0, X1
	POR X3, X5
	POR X7, X9
	POR X11, X4
	POR X13, X15
	POR X1, X5
	POR X9, X4
	POR X15, X5
	POR X4, X5
	MOVO X5, 16(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x01 // PSRLD xmm2, 1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x02 // PSLLD xmm8, 2
	MOVO 368(AX), X10
	MOVO 384(AX), X6
	MOVO 400(AX), X12
	MOVO 416(AX), X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x05 // PSLLD xmm10, 5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x08 // PSLLD xmm6, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0B // PSLLD xmm12, 11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0E // PSLLD xmm14, 14
	MOVO 432(AX), X0
	MOVO 448(AX), X3
	MOVO 464(AX), X7
	MOVO 480(AX), X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x11 // PSLLD xmm0, 17
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x14 // PSLLD xmm3, 20
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x17 // PSLLD xmm7, 23
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1A // PSLLD xmm11, 26
	MOVO 496(AX), X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x1D // PSLLD xmm13, 29
	POR X2, X8
	POR X10, X6
	POR X12, X14
	POR X0, X3
	POR X7, X11
	POR X13, X8
	POR X6, X14
	POR X3, X11
	POR X8, X14
	POR X11, X14
	MOVO X14, 32(BX)
	RET

// func pack32_4(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_4(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x04 // PSLLD xmm2, 4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x08 // PSLLD xmm3, 8
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0C // PSLLD xmm4, 12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x10 // PSLLD xmm5, 16
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x14 // PSLLD xmm6, 20
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x18 // PSLLD xmm7, 24
	MOVO 112(AX), X8
	MOVO 128(AX), X9
	MOVO 144(AX), X10
	MOVO 160(AX), X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1C // PSLLD xmm8, 28
	POR X1, X2
	POR X3, X4
	POR X5, X6
	POR X7, X8
	POR X2, X4
	POR X6, X8
	POR X4, X8
	MOVO X8, 0(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x04 // PSLLD xmm10, 4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x08 // PSLLD xmm11, 8
	MOVO 176(AX), X12
	MOVO 192(AX), X13
	MOVO 208(AX), X14
	MOVO 224(AX), X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0C // PSLLD xmm12, 12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x10 // PSLLD xmm13, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x14 // PSLLD xmm14, 20
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x18 // PSLLD xmm15, 24
	MOVO 240(AX), X0
	MOVO 256(AX), X1
	MOVO 272(AX), X3
	MOVO 288(AX), X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1C // PSLLD xmm0, 28
	POR X9, X10
	POR X11, X12
	POR X13, X14
	POR X15, X0
	POR X10, X12
	POR X14, X0
	POR X12, X0
	MOVO X0, 16(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x04 // PSLLD xmm3, 4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x08 // PSLLD xmm5, 8
	MOVO 304(AX), X7
	MOVO 320(AX), X2
	MOVO 336(AX), X6
	MOVO 352(AX), X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0C // PSLLD xmm7, 12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x10 // PSLLD xmm2, 16
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x14 // PSLLD xmm6, 20
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x18 // PSLLD xmm4, 24
	MOVO 368(AX), X8
	MOVO 384(AX), X9
	MOVO 400(AX), X11
	MOVO 416(AX), X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1C // PSLLD xmm8, 28
	POR X1, X3
	POR X5, X7
	POR X2, X6
	POR X4, X8
	POR X3, X7
	POR X6, X8
	POR X7, X8
	MOVO X8, 32(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x04 // PSLLD xmm11, 4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x08 // PSLLD xmm13, 8
	MOVO 432(AX), X15
	MOVO 448(AX), X10
	MOVO 464(AX), X14
	MOVO 480(AX), X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0C // PSLLD xmm15, 12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x10 // PSLLD xmm10, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x14 // PSLLD xmm14, 20
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x18 // PSLLD xmm12, 24
	MOVO 496(AX), X0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1C // PSLLD xmm0, 28
	POR X9, X11
	POR X13, X15
	POR X10, X14
	POR X12, X0
	POR X11, X15
	POR X14, X0
	POR X15, X0
	MOVO X0, 48(BX)
	RET

// func pack32_5(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_5(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x05 // PSLLD xmm2, 5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0A // PSLLD xmm3, 10
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0F // PSLLD xmm4, 15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x14 // PSLLD xmm5, 20
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x19 // PSLLD xmm6, 25
	MOVO X7, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1E // PSLLD xmm7, 30
	POR X1, X2
	POR X3, X4
	POR X5, X6
	POR X7, X2
	POR X4, X6
	POR X2, X6
	MOVO X6, 0(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x02 // PSRLD xmm8, 2
	MOVO 112(AX), X9
	MOVO 128(AX), X10
	MOVO 144(AX), X11
	MOVO 160(AX), X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x03 // PSLLD xmm9, 3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x08 // PSLLD xmm10, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0D // PSLLD xmm11, 13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x12 // PSLLD xmm12, 18
	MOVO 176(AX), X13
	MOVO 192(AX), X14
	MOVO 208(AX), X15
	MOVO 224(AX), X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x17 // PSLLD xmm13, 23
	MOVO X14, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1C // PSLLD xmm14, 28
	POR X8, X9
	POR X10, X11
	POR X12, X13
	POR X14, X9
	POR X11, X13
	POR X9, X13
	MOVO X13, 16(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x04 // PSRLD xmm1, 4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x01 // PSLLD xmm15, 1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x06 // PSLLD xmm0, 6
	MOVO 240(AX), X3
	MOVO 256(AX), X5
	MOVO 272(AX), X7
	MOVO 288(AX), X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0B // PSLLD xmm3, 11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x10 // PSLLD xmm5, 16
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x15 // PSLLD xmm7, 21
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x1A // PSLLD xmm4, 26
	MOVO 304(AX), X2
	MOVO 320(AX), X6
	MOVO 336(AX), X8
	MOVO 352(AX), X10
	MOVO X2, X12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1F // PSLLD xmm2, 31
	POR X1, X15
	POR X0, X3
	POR X5, X7
	POR X4, X2
	POR X15, X3
	POR X7, X2
	POR X3, X2
	MOVO X2, 32(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x01 // PSRLD xmm12, 1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x04 // PSLLD xmm6, 4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x09 // PSLLD xmm8, 9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0E // PSLLD xmm10, 14
	MOVO 368(AX), X14
	MOVO 384(AX), X11
	MOVO 400(AX), X9
	MOVO 416(AX), X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x13 // PSLLD xmm14, 19
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x18 // PSLLD xmm11, 24
	MOVO X9, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1D // PSLLD xmm9, 29
	POR X12, X6
	POR X8, X10
	POR X14, X11
	POR X9, X6
	POR X10, X11
	POR X6, X11
	MOVO X11, 48(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x03 // PSRLD xmm1, 3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x02 // PSLLD xmm13, 2
	MOVO 432(AX), X0
	MOVO 448(AX), X5
	MOVO 464(AX), X4
	MOVO 480(AX), X15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x07 // PSLLD xmm0, 7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0C // PSLLD xmm5, 12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x11 // PSLLD xmm4, 17
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x16 // PSLLD xmm15, 22
	MOVO 496(AX), X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1B // PSLLD xmm7, 27
	POR X1, X13
	POR X0, X5
	POR X4, X15
	POR X7, X13
	POR X5, X15
	POR X13, X15
	MOVO X15, 64(BX)
	RET

// func pack32_6(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_6(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x06 // PSLLD xmm2, 6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0C // PSLLD xmm3, 12
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x12 // PSLLD xmm4, 18
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x18 // PSLLD xmm5, 24
	MOVO X6, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1E // PSLLD xmm6, 30
	POR X1, X2
	POR X3, X4
	POR X5, X6
	POR X2, X4
	POR X6, X4
	MOVO X4, 0(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x02 // PSRLD xmm8, 2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x04 // PSLLD xmm7, 4
	MOVO 112(AX), X9
	MOVO 128(AX), X10
	MOVO 144(AX), X11
	MOVO 160(AX), X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0A // PSLLD xmm9, 10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x10 // PSLLD xmm10, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x16 // PSLLD xmm11, 22
	MOVO X12, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x1C // PSLLD xmm12, 28
	POR X8, X7
	POR X9, X10
	POR X11, X12
	POR X7, X10
	POR X12, X10
	MOVO X10, 16(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x04 // PSRLD xmm13, 4
	MOVO 176(AX), X14
	MOVO 192(AX), X15
	MOVO 208(AX), X0
	MOVO 224(AX), X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x02 // PSLLD xmm14, 2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x08 // PSLLD xmm15, 8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0E // PSLLD xmm0, 14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x14 // PSLLD xmm1, 20
	MOVO 240(AX), X3
	MOVO 256(AX), X5
	MOVO 272(AX), X2
	MOVO 288(AX), X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1A // PSLLD xmm3, 26
	POR X13, X14
	POR X15, X0
	POR X1, X3
	POR X14, X0
	POR X3, X0
	MOVO X0, 32(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x06 // PSLLD xmm2, 6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0C // PSLLD xmm6, 12
	MOVO 304(AX), X4
	MOVO 320(AX), X8
	MOVO 336(AX), X9
	MOVO 352(AX), X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x12 // PSLLD xmm4, 18
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x18 // PSLLD xmm8, 24
	MOVO X9, X7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1E // PSLLD xmm9, 30
	POR X5, X2
	POR X6, X4
	POR X8, X9
	POR X2, X4
	POR X9, X4
	MOVO X4, 48(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x02 // PSRLD xmm7, 2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x04 // PSLLD xmm11, 4
	MOVO 368(AX), X12
	MOVO 384(AX), X10
	MOVO 400(AX), X13
	MOVO 416(AX), X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0A // PSLLD xmm12, 10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x10 // PSLLD xmm10, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x16 // PSLLD xmm13, 22
	MOVO X15, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1C // PSLLD xmm15, 28
	POR X7, X11
	POR X12, X10
	POR X13, X15
	POR X11, X10
	POR X15, X10
	MOVO X10, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x04 // PSRLD xmm1, 4
	MOVO 432(AX), X14
	MOVO 448(AX), X3
	MOVO 464(AX), X0
	MOVO 480(AX), X5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x02 // PSLLD xmm14, 2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x08 // PSLLD xmm3, 8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0E // PSLLD xmm0, 14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x14 // PSLLD xmm5, 20
	MOVO 496(AX), X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1A // PSLLD xmm6, 26
	POR X1, X14
	POR X3, X0
	POR X5, X6
	POR X14, X0
	POR X6, X0
	MOVO X0, 80(BX)
	RET

// func pack32_7(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_7(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x07 // PSLLD xmm2, 7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0E // PSLLD xmm3, 14
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x15 // PSLLD xmm4, 21
	MOVO X5, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x1C // PSLLD xmm5, 28
	POR X1, X2
	POR X3, X4
	POR X5, X2
	POR X4, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x04 // PSRLD xmm8, 4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x03 // PSLLD xmm6, 3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0A // PSLLD xmm7, 10
	MOVO 112(AX), X9
	MOVO 128(AX), X10
	MOVO 144(AX), X11
	MOVO 160(AX), X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x11 // PSLLD xmm9, 17
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x18 // PSLLD xmm10, 24
	MOVO X11, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1F // PSLLD xmm11, 31
	POR X8, X6
	POR X7, X9
	POR X10, X11
	POR X6, X9
	POR X11, X9
	MOVO X9, 16(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x01 // PSRLD xmm13, 1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x06 // PSLLD xmm12, 6
	MOVO 176(AX), X14
	MOVO 192(AX), X15
	MOVO 208(AX), X0
	MOVO 224(AX), X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0D // PSLLD xmm14, 13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x14 // PSLLD xmm15, 20
	MOVO X0, X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1B // PSLLD xmm0, 27
	POR X13, X12
	POR X14, X15
	POR X0, X12
	POR X15, X12
	MOVO X12, 32(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x05 // PSRLD xmm3, 5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x02 // PSLLD xmm1, 2
	MOVO 240(AX), X5
	MOVO 256(AX), X4
	MOVO 272(AX), X2
	MOVO 288(AX), X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x09 // PSLLD xmm5, 9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x10 // PSLLD xmm4, 16
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x17 // PSLLD xmm2, 23
	MOVO X8, X7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1E // PSLLD xmm8, 30
	POR X3, X1
	POR X5, X4
	POR X2, X8
	POR X1, X4
	POR X8, X4
	MOVO X4, 48(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x02 // PSRLD xmm7, 2
	MOVO 304(AX), X10
	MOVO 320(AX), X6
	MOVO 336(AX), X11
	MOVO 352(AX), X9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x05 // PSLLD xmm10, 5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0C // PSLLD xmm6, 12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x13 // PSLLD xmm11, 19
	MOVO X9, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1A // PSLLD xmm9, 26
	POR X7, X10
	POR X6, X11
	POR X9, X10
	POR X11, X10
	MOVO X10, 64(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x06 // PSRLD xmm13, 6
	MOVO 368(AX), X14
	MOVO 384(AX), X0
	MOVO 400(AX), X15
	MOVO 416(AX), X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x01 // PSLLD xmm14, 1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x08 // PSLLD xmm0, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0F // PSLLD xmm15, 15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x16 // PSLLD xmm12, 22
	MOVO 432(AX), X3
	MOVO 448(AX), X5
	MOVO 464(AX), X2
	MOVO 480(AX), X1
	MOVO X3, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1D // PSLLD xmm3, 29
	POR X13, X14
	POR X0, X15
	POR X12, X3
	POR X14, X15
	POR X3, X15
	MOVO X15, 80(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x03 // PSRLD xmm8, 3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x04 // PSLLD xmm5, 4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0B // PSLLD xmm2, 11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x12 // PSLLD xmm1, 18
	MOVO 496(AX), X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x19 // PSLLD xmm4, 25
	POR X8, X5
	POR X2, X1
	POR X4, X5
	POR X1, X5
	MOVO X5, 96(BX)
	RET

// func pack32_8(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_8(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x08 // PSLLD xmm2, 8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x10 // PSLLD xmm3, 16
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x18 // PSLLD xmm4, 24
	POR X1, X2
	POR X3, X4
	POR X2, X4
	MOVO X4, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x08 // PSLLD xmm6, 8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x10 // PSLLD xmm7, 16
	MOVO 112(AX), X8
	MOVO 128(AX), X9
	MOVO 144(AX), X10
	MOVO 160(AX), X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x18 // PSLLD xmm8, 24
	POR X5, X6
	POR X7, X8
	POR X6, X8
	MOVO X8, 16(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x08 // PSLLD xmm10, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x10 // PSLLD xmm11, 16
	MOVO 176(AX), X12
	MOVO 192(AX), X13
	MOVO 208(AX), X14
	MOVO 224(AX), X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x18 // PSLLD xmm12, 24
	POR X9, X10
	POR X11, X12
	POR X10, X12
	MOVO X12, 32(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x08 // PSLLD xmm14, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x10 // PSLLD xmm15, 16
	MOVO 240(AX), X0
	MOVO 256(AX), X1
	MOVO 272(AX), X3
	MOVO 288(AX), X2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x18 // PSLLD xmm0, 24
	POR X13, X14
	POR X15, X0
	POR X14, X0
	MOVO X0, 48(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x08 // PSLLD xmm3, 8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x10 // PSLLD xmm2, 16
	MOVO 304(AX), X4
	MOVO 320(AX), X5
	MOVO 336(AX), X7
	MOVO 352(AX), X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x18 // PSLLD xmm4, 24
	POR X1, X3
	POR X2, X4
	POR X3, X4
	MOVO X4, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x08 // PSLLD xmm7, 8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x10 // PSLLD xmm6, 16
	MOVO 368(AX), X8
	MOVO 384(AX), X9
	MOVO 400(AX), X11
	MOVO 416(AX), X10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x18 // PSLLD xmm8, 24
	POR X5, X7
	POR X6, X8
	POR X7, X8
	MOVO X8, 80(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x08 // PSLLD xmm11, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x10 // PSLLD xmm10, 16
	MOVO 432(AX), X12
	MOVO 448(AX), X13
	MOVO 464(AX), X15
	MOVO 480(AX), X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x18 // PSLLD xmm12, 24
	POR X9, X11
	POR X10, X12
	POR X11, X12
	MOVO X12, 96(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x08 // PSLLD xmm15, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x10 // PSLLD xmm14, 16
	MOVO 496(AX), X0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x18 // PSLLD xmm0, 24
	POR X13, X15
	POR X14, X0
	POR X15, X0
	MOVO X0, 112(BX)
	RET

// func pack32_9(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_9(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x09 // PSLLD xmm2, 9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x12 // PSLLD xmm3, 18
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	MOVO X4, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x1B // PSLLD xmm4, 27
	POR X1, X2
	POR X3, X4
	POR X2, X4
	MOVO X4, 0(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x05 // PSRLD xmm8, 5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x04 // PSLLD xmm5, 4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0D // PSLLD xmm6, 13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x16 // PSLLD xmm7, 22
	MOVO 112(AX), X9
	MOVO 128(AX), X10
	MOVO 144(AX), X11
	MOVO 160(AX), X12
	MOVO X9, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1F // PSLLD xmm9, 31
	POR X8, X5
	POR X6, X7
	POR X9, X5
	POR X7, X5
	MOVO X5, 16(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x01 // PSRLD xmm13, 1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x08 // PSLLD xmm10, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x11 // PSLLD xmm11, 17
	MOVO X12, X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x1A // PSLLD xmm12, 26
	POR X13, X10
	POR X11, X12
	POR X10, X12
	MOVO X12, 32(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x06 // PSRLD xmm14, 6
	MOVO 176(AX), X15
	MOVO 192(AX), X0
	MOVO 208(AX), X1
	MOVO 224(AX), X3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x03 // PSLLD xmm15, 3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0C // PSLLD xmm0, 12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x15 // PSLLD xmm1, 21
	MOVO X3, X2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1E // PSLLD xmm3, 30
	POR X14, X15
	POR X0, X1
	POR X3, X15
	POR X1, X15
	MOVO X15, 48(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x02 // PSRLD xmm2, 2
	MOVO 240(AX), X4
	MOVO 256(AX), X8
	MOVO 272(AX), X6
	MOVO 288(AX), X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x07 // PSLLD xmm4, 7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x10 // PSLLD xmm8, 16
	MOVO X6, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x19 // PSLLD xmm6, 25
	POR X2, X4
	POR X8, X6
	POR X4, X6
	MOVO X6, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x07 // PSRLD xmm7, 7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x02 // PSLLD xmm9, 2
	MOVO 304(AX), X5
	MOVO 320(AX), X13
	MOVO 336(AX), X11
	MOVO 352(AX), X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0B // PSLLD xmm5, 11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x14 // PSLLD xmm13, 20
	MOVO X11, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1D // PSLLD xmm11, 29
	POR X7, X9
	POR X5, X13
	POR X11, X9
	POR X13, X9
	MOVO X9, 80(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x03 // PSRLD xmm12, 3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x06 // PSLLD xmm10, 6
	MOVO 368(AX), X14
	MOVO 384(AX), X0
	MOVO 400(AX), X3
	MOVO 416(AX), X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0F // PSLLD xmm14, 15
	MOVO X0, X15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x18 // PSLLD xmm0, 24
	POR X12, X10
	POR X14, X0
	POR X10, X0
	MOVO X0, 96(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x08 // PSRLD xmm15, 8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x01 // PSLLD xmm3, 1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0A // PSLLD xmm1, 10
	MOVO 432(AX), X2
	MOVO 448(AX), X8
	MOVO 464(AX), X4
	MOVO 480(AX), X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x13 // PSLLD xmm2, 19
	MOVO X8, X7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1C // PSLLD xmm8, 28
	POR X15, X3
	POR X1, X2
	POR X8, X3
	POR X2, X3
	MOVO X3, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x04 // PSRLD xmm7, 4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x05 // PSLLD xmm4, 5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0E // PSLLD xmm6, 14
	MOVO 496(AX), X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x17 // PSLLD xmm5, 23
	POR X7, X4
	POR X6, X5
	POR X4, X5
	MOVO X5, 128(BX)
	RET

// func pack32_10(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_10(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0A // PSLLD xmm2, 10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x14 // PSLLD xmm3, 20
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	MOVO X4, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x1E // PSLLD xmm4, 30
	POR X1, X2
	POR X3, X4
	POR X2, X4
	MOVO X4, 0(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x02 // PSRLD xmm8, 2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x08 // PSLLD xmm5, 8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x12 // PSLLD xmm6, 18
	MOVO X7, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1C // PSLLD xmm7, 28
	POR X8, X5
	POR X6, X7
	POR X5, X7
	MOVO X7, 16(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x04 // PSRLD xmm9, 4
	MOVO 112(AX), X10
	MOVO 128(AX), X11
	MOVO 144(AX), X12
	MOVO 160(AX), X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x06 // PSLLD xmm10, 6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x10 // PSLLD xmm11, 16
	MOVO X12, X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x1A // PSLLD xmm12, 26
	POR X9, X10
	POR X11, X12
	POR X10, X12
	MOVO X12, 32(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x06 // PSRLD xmm14, 6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x04 // PSLLD xmm13, 4
	MOVO 176(AX), X15
	MOVO 192(AX), X0
	MOVO 208(AX), X1
	MOVO 224(AX), X3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0E // PSLLD xmm15, 14
	MOVO X0, X2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x18 // PSLLD xmm0, 24
	POR X14, X13
	POR X15, X0
	POR X13, X0
	MOVO X0, 48(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x08 // PSRLD xmm2, 8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x02 // PSLLD xmm1, 2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0C // PSLLD xmm3, 12
	MOVO 240(AX), X4
	MOVO 256(AX), X8
	MOVO 272(AX), X6
	MOVO 288(AX), X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x16 // PSLLD xmm4, 22
	POR X2, X1
	POR X3, X4
	POR X1, X4
	MOVO X4, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0A // PSLLD xmm6, 10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x14 // PSLLD xmm5, 20
	MOVO 304(AX), X7
	MOVO 320(AX), X9
	MOVO 336(AX), X11
	MOVO 352(AX), X10
	MOVO X7, X12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1E // PSLLD xmm7, 30
	POR X8, X6
	POR X5, X7
	POR X6, X7
	MOVO X7, 80(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x02 // PSRLD xmm12, 2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x08 // PSLLD xmm9, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x12 // PSLLD xmm11, 18
	MOVO X10, X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1C // PSLLD xmm10, 28
	POR X12, X9
	POR X11, X10
	POR X9, X10
	MOVO X10, 96(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x04 // PSRLD xmm14, 4
	MOVO 368(AX), X15
	MOVO 384(AX), X13
	MOVO 400(AX), X0
	MOVO 416(AX), X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x06 // PSLLD xmm15, 6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x10 // PSLLD xmm13, 16
	MOVO X0, X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1A // PSLLD xmm0, 26
	POR X14, X15
	POR X13, X0
	POR X15, X0
	MOVO X0, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x06 // PSRLD xmm3, 6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x04 // PSLLD xmm2, 4
	MOVO 432(AX), X1
	MOVO 448(AX), X4
	MOVO 464(AX), X8
	MOVO 480(AX), X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0E // PSLLD xmm1, 14
	MOVO X4, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x18 // PSLLD xmm4, 24
	POR X3, X2
	POR X1, X4
	POR X2, X4
	MOVO X4, 128(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x08 // PSRLD xmm6, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x02 // PSLLD xmm8, 2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0C // PSLLD xmm5, 12
	MOVO 496(AX), X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x16 // PSLLD xmm7, 22
	POR X6, X8
	POR X5, X7
	POR X8, X7
	MOVO X7, 144(BX)
	RET

// func pack32_11(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_11(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0B // PSLLD xmm2, 11
	MOVO X3, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x16 // PSLLD xmm3, 22
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x0A // PSRLD xmm4, 10
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x01 // PSLLD xmm5, 1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0C // PSLLD xmm6, 12
	MOVO X7, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x17 // PSLLD xmm7, 23
	POR X4, X5
	POR X6, X7
	POR X5, X7
	MOVO X7, 16(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x09 // PSRLD xmm9, 9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x02 // PSLLD xmm8, 2
	MOVO 112(AX), X10
	MOVO 128(AX), X11
	MOVO 144(AX), X12
	MOVO 160(AX), X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0D // PSLLD xmm10, 13
	MOVO X11, X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x18 // PSLLD xmm11, 24
	POR X9, X8
	POR X10, X11
	POR X8, X11
	MOVO X11, 32(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x08 // PSRLD xmm14, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x03 // PSLLD xmm12, 3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0E // PSLLD xmm13, 14
	MOVO 176(AX), X15
	MOVO 192(AX), X0
	MOVO 208(AX), X1
	MOVO 224(AX), X3
	MOVO X15, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x19 // PSLLD xmm15, 25
	POR X14, X12
	POR X13, X15
	POR X12, X15
	MOVO X15, 48(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x07 // PSRLD xmm2, 7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x04 // PSLLD xmm0, 4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0F // PSLLD xmm1, 15
	MOVO X3, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1A // PSLLD xmm3, 26
	POR X2, X0
	POR X1, X3
	POR X0, X3
	MOVO X3, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x06 // PSRLD xmm4, 6
	MOVO 240(AX), X6
	MOVO 256(AX), X5
	MOVO 272(AX), X7
	MOVO 288(AX), X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x05 // PSLLD xmm6, 5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x10 // PSLLD xmm5, 16
	MOVO X7, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1B // PSLLD xmm7, 27
	POR X4, X6
	POR X5, X7
	POR X6, X7
	MOVO X7, 80(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x05 // PSRLD xmm10, 5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x06 // PSLLD xmm9, 6
	MOVO 304(AX), X8
	MOVO 320(AX), X11
	MOVO 336(AX), X14
	MOVO 352(AX), X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x11 // PSLLD xmm8, 17
	MOVO X11, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1C // PSLLD xmm11, 28
	POR X10, X9
	POR X8, X11
	POR X9, X11
	MOVO X11, 96(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x04 // PSRLD xmm12, 4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x07 // PSLLD xmm14, 7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x12 // PSLLD xmm13, 18
	MOVO 368(AX), X15
	MOVO 384(AX), X2
	MOVO 400(AX), X1
	MOVO 416(AX), X0
	MOVO X15, X3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1D // PSLLD xmm15, 29
	POR X12, X14
	POR X13, X15
	POR X14, X15
	MOVO X15, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x03 // PSRLD xmm3, 3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x08 // PSLLD xmm2, 8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x13 // PSLLD xmm1, 19
	MOVO X0, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1E // PSLLD xmm0, 30
	POR X3, X2
	POR X1, X0
	POR X2, X0
	MOVO X0, 128(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x02 // PSRLD xmm4, 2
	MOVO 432(AX), X5
	MOVO 448(AX), X6
	MOVO 464(AX), X7
	MOVO 480(AX), X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x09 // PSLLD xmm5, 9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x14 // PSLLD xmm6, 20
	MOVO X7, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1F // PSLLD xmm7, 31
	POR X4, X5
	POR X6, X7
	POR X5, X7
	MOVO X7, 144(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x01 // PSRLD xmm8, 1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0A // PSLLD xmm10, 10
	MOVO 496(AX), X9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x15 // PSLLD xmm9, 21
	POR X8, X10
	POR X9, X10
	MOVO X10, 160(BX)
	RET

// func pack32_12(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_12(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0C // PSLLD xmm2, 12
	MOVO X3, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x18 // PSLLD xmm3, 24
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x08 // PSRLD xmm4, 8
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x04 // PSLLD xmm5, 4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x10 // PSLLD xmm6, 16
	MOVO X7, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1C // PSLLD xmm7, 28
	POR X4, X5
	POR X6, X7
	POR X5, X7
	MOVO X7, 16(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x04 // PSRLD xmm9, 4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x08 // PSLLD xmm8, 8
	MOVO 112(AX), X10
	MOVO 128(AX), X11
	MOVO 144(AX), X12
	MOVO 160(AX), X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x14 // PSLLD xmm10, 20
	POR X9, X8
	POR X10, X8
	MOVO X8, 32(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0C // PSLLD xmm12, 12
	MOVO X13, X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x18 // PSLLD xmm13, 24
	POR X11, X12
	POR X13, X12
	MOVO X12, 48(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x08 // PSRLD xmm14, 8
	MOVO 176(AX), X15
	MOVO 192(AX), X0
	MOVO 208(AX), X1
	MOVO 224(AX), X3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x04 // PSLLD xmm15, 4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x10 // PSLLD xmm0, 16
	MOVO X1, X2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1C // PSLLD xmm1, 28
	POR X14, X15
	POR X0, X1
	POR X15, X1
	MOVO X1, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x04 // PSRLD xmm2, 4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x08 // PSLLD xmm3, 8
	MOVO 240(AX), X4
	MOVO 256(AX), X6
	MOVO 272(AX), X5
	MOVO 288(AX), X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x14 // PSLLD xmm4, 20
	POR X2, X3
	POR X4, X3
	MOVO X3, 80(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0C // PSLLD xmm5, 12
	MOVO X7, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x18 // PSLLD xmm7, 24
	POR X6, X5
	POR X7, X5
	MOVO X5, 96(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x08 // PSRLD xmm9, 8
	MOVO 304(AX), X10
	MOVO 320(AX), X8
	MOVO 336(AX), X11
	MOVO 352(AX), X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x04 // PSLLD xmm10, 4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x10 // PSLLD xmm8, 16
	MOVO X11, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1C // PSLLD xmm11, 28
	POR X9, X10
	POR X8, X11
	POR X10, X11
	MOVO X11, 112(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x04 // PSRLD xmm12, 4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x08 // PSLLD xmm13, 8
	MOVO 368(AX), X14
	MOVO 384(AX), X0
	MOVO 400(AX), X15
	MOVO 416(AX), X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x14 // PSLLD xmm14, 20
	POR X12, X13
	POR X14, X13
	MOVO X13, 128(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0C // PSLLD xmm15, 12
	MOVO X1, X2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x18 // PSLLD xmm1, 24
	POR X0, X15
	POR X1, X15
	MOVO X15, 144(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x08 // PSRLD xmm2, 8
	MOVO 432(AX), X4
	MOVO 448(AX), X3
	MOVO 464(AX), X6
	MOVO 480(AX), X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x04 // PSLLD xmm4, 4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x10 // PSLLD xmm3, 16
	MOVO X6, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1C // PSLLD xmm6, 28
	POR X2, X4
	POR X3, X6
	POR X4, X6
	MOVO X6, 160(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x04 // PSRLD xmm5, 4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x08 // PSLLD xmm7, 8
	MOVO 496(AX), X9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x14 // PSLLD xmm9, 20
	POR X5, X7
	POR X9, X7
	MOVO X7, 176(BX)
	RET

// func pack32_13(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_13(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0D // PSLLD xmm2, 13
	MOVO X3, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1A // PSLLD xmm3, 26
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x06 // PSRLD xmm4, 6
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x07 // PSLLD xmm5, 7
	MOVO X6, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x14 // PSLLD xmm6, 20
	POR X4, X5
	POR X6, X5
	MOVO X5, 16(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x0C // PSRLD xmm9, 12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x01 // PSLLD xmm7, 1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0E // PSLLD xmm8, 14
	MOVO 112(AX), X10
	MOVO 128(AX), X11
	MOVO 144(AX), X12
	MOVO 160(AX), X13
	MOVO X10, X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1B // PSLLD xmm10, 27
	POR X9, X7
	POR X8, X10
	POR X7, X10
	MOVO X10, 32(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x05 // PSRLD xmm14, 5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x08 // PSLLD xmm11, 8
	MOVO X12, X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x15 // PSLLD xmm12, 21
	POR X14, X11
	POR X12, X11
	MOVO X11, 48(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x0B // PSRLD xmm15, 11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x02 // PSLLD xmm13, 2
	MOVO 176(AX), X0
	MOVO 192(AX), X1
	MOVO 208(AX), X3
	MOVO 224(AX), X2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0F // PSLLD xmm0, 15
	MOVO X1, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1C // PSLLD xmm1, 28
	POR X15, X13
	POR X0, X1
	POR X13, X1
	MOVO X1, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x04 // PSRLD xmm4, 4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x09 // PSLLD xmm3, 9
	MOVO X2, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x16 // PSLLD xmm2, 22
	POR X4, X3
	POR X2, X3
	MOVO X3, 80(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x0A // PSRLD xmm6, 10
	MOVO 240(AX), X5
	MOVO 256(AX), X9
	MOVO 272(AX), X8
	MOVO 288(AX), X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x03 // PSLLD xmm5, 3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x10 // PSLLD xmm9, 16
	MOVO X8, X10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1D // PSLLD xmm8, 29
	POR X6, X5
	POR X9, X8
	POR X5, X8
	MOVO X8, 96(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x03 // PSRLD xmm10, 3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0A // PSLLD xmm7, 10
	MOVO 304(AX), X14
	MOVO 320(AX), X12
	MOVO 336(AX), X11
	MOVO 352(AX), X15
	MOVO X14, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x17 // PSLLD xmm14, 23
	POR X10, X7
	POR X14, X7
	MOVO X7, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x09 // PSRLD xmm0, 9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x04 // PSLLD xmm12, 4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x11 // PSLLD xmm11, 17
	MOVO X15, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1E // PSLLD xmm15, 30
	POR X0, X12
	POR X11, X15
	POR X12, X15
	MOVO X15, 128(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x02 // PSRLD xmm13, 2
	MOVO 368(AX), X1
	MOVO 384(AX), X4
	MOVO 400(AX), X2
	MOVO 416(AX), X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0B // PSLLD xmm1, 11
	MOVO X4, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x18 // PSLLD xmm4, 24
	POR X13, X1
	POR X4, X1
	MOVO X1, 144(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x08 // PSRLD xmm6, 8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x05 // PSLLD xmm2, 5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x12 // PSLLD xmm3, 18
	MOVO 432(AX), X9
	MOVO 448(AX), X5
	MOVO 464(AX), X8
	MOVO 480(AX), X10
	MOVO X9, X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1F // PSLLD xmm9, 31
	POR X6, X2
	POR X3, X9
	POR X2, X9
	MOVO X9, 160(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x01 // PSRLD xmm14, 1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0C // PSLLD xmm5, 12
	MOVO X8, X7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x19 // PSLLD xmm8, 25
	POR X14, X5
	POR X8, X5
	MOVO X5, 176(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x07 // PSRLD xmm7, 7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x06 // PSLLD xmm10, 6
	MOVO 496(AX), X0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x13 // PSLLD xmm0, 19
	POR X7, X10
	POR X0, X10
	MOVO X10, 192(BX)
	RET

// func pack32_14(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_14(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0E // PSLLD xmm2, 14
	MOVO X3, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1C // PSLLD xmm3, 28
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x04 // PSRLD xmm4, 4
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0A // PSLLD xmm5, 10
	MOVO X6, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x18 // PSLLD xmm6, 24
	POR X4, X5
	POR X6, X5
	MOVO X5, 16(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x08 // PSRLD xmm9, 8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x06 // PSLLD xmm7, 6
	MOVO X8, X10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x14 // PSLLD xmm8, 20
	POR X9, X7
	POR X8, X7
	MOVO X7, 32(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x0C // PSRLD xmm10, 12
	MOVO 112(AX), X11
	MOVO 128(AX), X12
	MOVO 144(AX), X13
	MOVO 160(AX), X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x02 // PSLLD xmm11, 2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x10 // PSLLD xmm12, 16
	MOVO X13, X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x1E // PSLLD xmm13, 30
	POR X10, X11
	POR X12, X13
	POR X11, X13
	MOVO X13, 48(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x02 // PSRLD xmm15, 2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0C // PSLLD xmm14, 12
	MOVO 176(AX), X0
	MOVO 192(AX), X1
	MOVO 208(AX), X3
	MOVO 224(AX), X2
	MOVO X0, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1A // PSLLD xmm0, 26
	POR X15, X14
	POR X0, X14
	MOVO X14, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x06 // PSRLD xmm4, 6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x08 // PSLLD xmm1, 8
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x16 // PSLLD xmm3, 22
	POR X4, X1
	POR X3, X1
	MOVO X1, 80(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x0A // PSRLD xmm6, 10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x04 // PSLLD xmm2, 4
	MOVO 240(AX), X5
	MOVO 256(AX), X9
	MOVO 272(AX), X8
	MOVO 288(AX), X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x12 // PSLLD xmm5, 18
	POR X6, X2
	POR X5, X2
	MOVO X2, 96(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0E // PSLLD xmm8, 14
	MOVO X7, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1C // PSLLD xmm7, 28
	POR X9, X8
	POR X7, X8
	MOVO X8, 112(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x04 // PSRLD xmm10, 4
	MOVO 304(AX), X12
	MOVO 320(AX), X11
	MOVO 336(AX), X13
	MOVO 352(AX), X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0A // PSLLD xmm12, 10
	MOVO X11, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x18 // PSLLD xmm11, 24
	POR X10, X12
	POR X11, X12
	MOVO X12, 128(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x08 // PSRLD xmm0, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x06 // PSLLD xmm13, 6
	MOVO X15, X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x14 // PSLLD xmm15, 20
	POR X0, X13
	POR X15, X13
	MOVO X13, 144(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x0C // PSRLD xmm14, 12
	MOVO 368(AX), X4
	MOVO 384(AX), X3
	MOVO 400(AX), X1
	MOVO 416(AX), X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x02 // PSLLD xmm4, 2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x10 // PSLLD xmm3, 16
	MOVO X1, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1E // PSLLD xmm1, 30
	POR X14, X4
	POR X3, X1
	POR X4, X1
	MOVO X1, 160(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x02 // PSRLD xmm5, 2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0C // PSLLD xmm6, 12
	MOVO 432(AX), X2
	MOVO 448(AX), X9
	MOVO 464(AX), X7
	MOVO 480(AX), X8
	MOVO X2, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1A // PSLLD xmm2, 26
	POR X5, X6
	POR X2, X6
	MOVO X6, 176(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x06 // PSRLD xmm10, 6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x08 // PSLLD xmm9, 8
	MOVO X7, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x16 // PSLLD xmm7, 22
	POR X10, X9
	POR X7, X9
	MOVO X9, 192(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x0A // PSRLD xmm11, 10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x04 // PSLLD xmm8, 4
	MOVO 496(AX), X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x12 // PSLLD xmm12, 18
	POR X11, X8
	POR X12, X8
	MOVO X8, 208(BX)
	RET

// func pack32_15(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_15(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0F // PSLLD xmm2, 15
	MOVO X3, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1E // PSLLD xmm3, 30
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x02 // PSRLD xmm4, 2
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0D // PSLLD xmm5, 13
	MOVO X6, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1C // PSLLD xmm6, 28
	POR X4, X5
	POR X6, X5
	MOVO X5, 16(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x04 // PSRLD xmm9, 4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0B // PSLLD xmm7, 11
	MOVO X8, X10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1A // PSLLD xmm8, 26
	POR X9, X7
	POR X8, X7
	MOVO X7, 32(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x06 // PSRLD xmm10, 6
	MOVO 112(AX), X11
	MOVO 128(AX), X12
	MOVO 144(AX), X13
	MOVO 160(AX), X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x09 // PSLLD xmm11, 9
	MOVO X12, X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x18 // PSLLD xmm12, 24
	POR X10, X11
	POR X12, X11
	MOVO X11, 48(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x08 // PSRLD xmm15, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x07 // PSLLD xmm13, 7
	MOVO X14, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x16 // PSLLD xmm14, 22
	POR X15, X13
	POR X14, X13
	MOVO X13, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x0A // PSRLD xmm0, 10
	MOVO 176(AX), X1
	MOVO 192(AX), X3
	MOVO 208(AX), X2
	MOVO 224(AX), X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x05 // PSLLD xmm1, 5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x14 // PSLLD xmm3, 20
	POR X0, X1
	POR X3, X1
	MOVO X1, 80(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x0C // PSRLD xmm6, 12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x03 // PSLLD xmm2, 3
	MOVO X4, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x12 // PSLLD xmm4, 18
	POR X6, X2
	POR X4, X2
	MOVO X2, 96(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x0E // PSRLD xmm5, 14
	MOVO 240(AX), X9
	MOVO 256(AX), X8
	MOVO 272(AX), X7
	MOVO 288(AX), X10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x01 // PSLLD xmm9, 1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x10 // PSLLD xmm8, 16
	MOVO X7, X12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1F // PSLLD xmm7, 31
	POR X5, X9
	POR X8, X7
	POR X9, X7
	MOVO X7, 112(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x01 // PSRLD xmm12, 1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0E // PSLLD xmm10, 14
	MOVO 304(AX), X11
	MOVO 320(AX), X15
	MOVO 336(AX), X14
	MOVO 352(AX), X13
	MOVO X11, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1D // PSLLD xmm11, 29
	POR X12, X10
	POR X11, X10
	MOVO X10, 128(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x03 // PSRLD xmm0, 3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0C // PSLLD xmm15, 12
	MOVO X14, X3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1B // PSLLD xmm14, 27
	POR X0, X15
	POR X14, X15
	MOVO X15, 144(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x05 // PSRLD xmm3, 5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0A // PSLLD xmm13, 10
	MOVO 368(AX), X1
	MOVO 384(AX), X6
	MOVO 400(AX), X4
	MOVO 416(AX), X2
	MOVO X1, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x19 // PSLLD xmm1, 25
	POR X3, X13
	POR X1, X13
	MOVO X13, 160(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x07 // PSRLD xmm5, 7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x08 // PSLLD xmm6, 8
	MOVO X4, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x17 // PSLLD xmm4, 23
	POR X5, X6
	POR X4, X6
	MOVO X6, 176(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x09 // PSRLD xmm8, 9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x06 // PSLLD xmm2, 6
	MOVO 432(AX), X9
	MOVO 448(AX), X7
	MOVO 464(AX), X12
	MOVO 480(AX), X11
	MOVO X9, X10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x15 // PSLLD xmm9, 21
	POR X8, X2
	POR X9, X2
	MOVO X2, 192(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x0B // PSRLD xmm10, 11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x04 // PSLLD xmm7, 4
	MOVO X12, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x13 // PSLLD xmm12, 19
	POR X10, X7
	POR X12, X7
	MOVO X7, 208(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x0D // PSRLD xmm0, 13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x02 // PSLLD xmm11, 2
	MOVO 496(AX), X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x11 // PSLLD xmm14, 17
	POR X0, X11
	POR X14, X11
	MOVO X11, 224(BX)
	RET

// func pack32_16(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_16(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x10 // PSLLD xmm2, 16
	POR X1, X2
	MOVO X2, 0(BX)
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x10 // PSLLD xmm4, 16
	POR X3, X4
	MOVO X4, 16(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x10 // PSLLD xmm6, 16
	POR X5, X6
	MOVO X6, 32(BX)
	MOVO 112(AX), X8
	MOVO 128(AX), X9
	MOVO 144(AX), X10
	MOVO 160(AX), X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x10 // PSLLD xmm8, 16
	POR X7, X8
	MOVO X8, 48(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x10 // PSLLD xmm10, 16
	POR X9, X10
	MOVO X10, 64(BX)
	MOVO 176(AX), X12
	MOVO 192(AX), X13
	MOVO 208(AX), X14
	MOVO 224(AX), X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x10 // PSLLD xmm12, 16
	POR X11, X12
	MOVO X12, 80(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x10 // PSLLD xmm14, 16
	POR X13, X14
	MOVO X14, 96(BX)
	MOVO 240(AX), X0
	MOVO 256(AX), X1
	MOVO 272(AX), X2
	MOVO 288(AX), X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x10 // PSLLD xmm0, 16
	POR X15, X0
	MOVO X0, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x10 // PSLLD xmm2, 16
	POR X1, X2
	MOVO X2, 128(BX)
	MOVO 304(AX), X4
	MOVO 320(AX), X5
	MOVO 336(AX), X6
	MOVO 352(AX), X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x10 // PSLLD xmm4, 16
	POR X3, X4
	MOVO X4, 144(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x10 // PSLLD xmm6, 16
	POR X5, X6
	MOVO X6, 160(BX)
	MOVO 368(AX), X8
	MOVO 384(AX), X9
	MOVO 400(AX), X10
	MOVO 416(AX), X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x10 // PSLLD xmm8, 16
	POR X7, X8
	MOVO X8, 176(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x10 // PSLLD xmm10, 16
	POR X9, X10
	MOVO X10, 192(BX)
	MOVO 432(AX), X12
	MOVO 448(AX), X13
	MOVO 464(AX), X14
	MOVO 480(AX), X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x10 // PSLLD xmm12, 16
	POR X11, X12
	MOVO X12, 208(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x10 // PSLLD xmm14, 16
	POR X13, X14
	MOVO X14, 224(BX)
	MOVO 496(AX), X0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x10 // PSLLD xmm0, 16
	POR X15, X0
	MOVO X0, 240(BX)
	RET

// func pack32_17(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_17(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x11 // PSLLD xmm2, 17
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x0F // PSRLD xmm4, 15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x02 // PSLLD xmm3, 2
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	MOVO X5, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x13 // PSLLD xmm5, 19
	POR X4, X3
	POR X5, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x0D // PSRLD xmm9, 13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x04 // PSLLD xmm6, 4
	MOVO X7, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x15 // PSLLD xmm7, 21
	POR X9, X6
	POR X7, X6
	MOVO X6, 32(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x0B // PSRLD xmm10, 11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x06 // PSLLD xmm8, 6
	MOVO 112(AX), X11
	MOVO 128(AX), X12
	MOVO 144(AX), X13
	MOVO 160(AX), X14
	MOVO X11, X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x17 // PSLLD xmm11, 23
	POR X10, X8
	POR X11, X8
	MOVO X8, 48(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x09 // PSRLD xmm15, 9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x08 // PSLLD xmm12, 8
	MOVO X13, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x19 // PSLLD xmm13, 25
	POR X15, X12
	POR X13, X12
	MOVO X12, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x07 // PSRLD xmm0, 7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0A // PSLLD xmm14, 10
	MOVO 176(AX), X1
	MOVO 192(AX), X2
	MOVO 208(AX), X4
	MOVO 224(AX), X5
	MOVO X1, X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1B // PSLLD xmm1, 27
	POR X0, X14
	POR X1, X14
	MOVO X14, 80(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x05 // PSRLD xmm3, 5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0C // PSLLD xmm2, 12
	MOVO X4, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x1D // PSLLD xmm4, 29
	POR X3, X2
	POR X4, X2
	MOVO X2, 96(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x03 // PSRLD xmm9, 3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0E // PSLLD xmm5, 14
	MOVO 240(AX), X7
	MOVO 256(AX), X6
	MOVO 272(AX), X10
	MOVO 288(AX), X11
	MOVO X7, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1F // PSLLD xmm7, 31
	POR X9, X5
	POR X7, X5
	MOVO X5, 112(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x01 // PSRLD xmm8, 1
	MOVO X6, X15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x10 // PSLLD xmm6, 16
	POR X8, X6
	MOVO X6, 128(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x10 // PSRLD xmm15, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x01 // PSLLD xmm10, 1
	MOVO X11, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x12 // PSLLD xmm11, 18
	POR X15, X10
	POR X11, X10
	MOVO X10, 144(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x0E // PSRLD xmm13, 14
	MOVO 304(AX), X12
	MOVO 320(AX), X0
	MOVO 336(AX), X1
	MOVO 352(AX), X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x03 // PSLLD xmm12, 3
	MOVO X0, X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x14 // PSLLD xmm0, 20
	POR X13, X12
	POR X0, X12
	MOVO X12, 160(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x0C // PSRLD xmm3, 12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x05 // PSLLD xmm1, 5
	MOVO X14, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x16 // PSLLD xmm14, 22
	POR X3, X1
	POR X14, X1
	MOVO X1, 176(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x0A // PSRLD xmm4, 10
	MOVO 368(AX), X2
	MOVO 384(AX), X9
	MOVO 400(AX), X7
	MOVO 416(AX), X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x07 // PSLLD xmm2, 7
	MOVO X9, X8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x18 // PSLLD xmm9, 24
	POR X4, X2
	POR X9, X2
	MOVO X2, 192(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x08 // PSRLD xmm8, 8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x09 // PSLLD xmm7, 9
	MOVO X5, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x1A // PSLLD xmm5, 26
	POR X8, X7
	POR X5, X7
	MOVO X7, 208(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x06 // PSRLD xmm6, 6
	MOVO 432(AX), X15
	MOVO 448(AX), X11
	MOVO 464(AX), X10
	MOVO 480(AX), X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0B // PSLLD xmm15, 11
	MOVO X11, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1C // PSLLD xmm11, 28
	POR X6, X15
	POR X11, X15
	MOVO X15, 224(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x04 // PSRLD xmm0, 4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0D // PSLLD xmm10, 13
	MOVO X13, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x1E // PSLLD xmm13, 30
	POR X0, X10
	POR X13, X10
	MOVO X10, 240(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x02 // PSRLD xmm12, 2
	MOVO 496(AX), X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0F // PSLLD xmm3, 15
	POR X12, X3
	MOVO X3, 256(BX)
	RET

// func pack32_18(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_18(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x12 // PSLLD xmm2, 18
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x0E // PSRLD xmm4, 14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x04 // PSLLD xmm3, 4
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	MOVO X5, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x16 // PSLLD xmm5, 22
	POR X4, X3
	POR X5, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x0A // PSRLD xmm9, 10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x08 // PSLLD xmm6, 8
	MOVO X7, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1A // PSLLD xmm7, 26
	POR X9, X6
	POR X7, X6
	MOVO X6, 32(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x06 // PSRLD xmm10, 6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0C // PSLLD xmm8, 12
	MOVO 112(AX), X11
	MOVO 128(AX), X12
	MOVO 144(AX), X13
	MOVO 160(AX), X14
	MOVO X11, X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1E // PSLLD xmm11, 30
	POR X10, X8
	POR X11, X8
	MOVO X8, 48(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x02 // PSRLD xmm15, 2
	MOVO X12, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x10 // PSLLD xmm12, 16
	POR X15, X12
	MOVO X12, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x10 // PSRLD xmm0, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x02 // PSLLD xmm13, 2
	MOVO X14, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x14 // PSLLD xmm14, 20
	POR X0, X13
	POR X14, X13
	MOVO X13, 80(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x0C // PSRLD xmm1, 12
	MOVO 176(AX), X2
	MOVO 192(AX), X4
	MOVO 208(AX), X5
	MOVO 224(AX), X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x06 // PSLLD xmm2, 6
	MOVO X4, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x18 // PSLLD xmm4, 24
	POR X1, X2
	POR X4, X2
	MOVO X2, 96(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x08 // PSRLD xmm9, 8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0A // PSLLD xmm5, 10
	MOVO X3, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1C // PSLLD xmm3, 28
	POR X9, X5
	POR X3, X5
	MOVO X5, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x04 // PSRLD xmm7, 4
	MOVO 240(AX), X6
	MOVO 256(AX), X10
	MOVO 272(AX), X11
	MOVO 288(AX), X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0E // PSLLD xmm6, 14
	POR X7, X6
	MOVO X6, 128(BX)
	MOVO X11, X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x12 // PSLLD xmm11, 18
	POR X10, X11
	MOVO X11, 144(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x0E // PSRLD xmm15, 14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x04 // PSLLD xmm8, 4
	MOVO 304(AX), X12
	MOVO 320(AX), X0
	MOVO 336(AX), X14
	MOVO 352(AX), X13
	MOVO X12, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x16 // PSLLD xmm12, 22
	POR X15, X8
	POR X12, X8
	MOVO X8, 160(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x0A // PSRLD xmm1, 10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x08 // PSLLD xmm0, 8
	MOVO X14, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1A // PSLLD xmm14, 26
	POR X1, X0
	POR X14, X0
	MOVO X0, 176(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x06 // PSRLD xmm4, 6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0C // PSLLD xmm13, 12
	MOVO 368(AX), X2
	MOVO 384(AX), X9
	MOVO 400(AX), X3
	MOVO 416(AX), X5
	MOVO X2, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1E // PSLLD xmm2, 30
	POR X4, X13
	POR X2, X13
	MOVO X13, 192(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x02 // PSRLD xmm7, 2
	MOVO X9, X6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x10 // PSLLD xmm9, 16
	POR X7, X9
	MOVO X9, 208(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x10 // PSRLD xmm6, 16
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x02 // PSLLD xmm3, 2
	MOVO X5, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x14 // PSLLD xmm5, 20
	POR X6, X3
	POR X5, X3
	MOVO X3, 224(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x0C // PSRLD xmm10, 12
	MOVO 432(AX), X11
	MOVO 448(AX), X15
	MOVO 464(AX), X12
	MOVO 480(AX), X8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x06 // PSLLD xmm11, 6
	MOVO X15, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x18 // PSLLD xmm15, 24
	POR X10, X11
	POR X15, X11
	MOVO X11, 240(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x08 // PSRLD xmm1, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0A // PSLLD xmm12, 10
	MOVO X8, X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1C // PSLLD xmm8, 28
	POR X1, X12
	POR X8, X12
	MOVO X12, 256(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x04 // PSRLD xmm14, 4
	MOVO 496(AX), X0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0E // PSLLD xmm0, 14
	POR X14, X0
	MOVO X0, 272(BX)
	RET

// func pack32_19(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_19(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x13 // PSLLD xmm2, 19
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x0D // PSRLD xmm4, 13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x06 // PSLLD xmm3, 6
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	MOVO X5, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x19 // PSLLD xmm5, 25
	POR X4, X3
	POR X5, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x07 // PSRLD xmm9, 7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0C // PSLLD xmm6, 12
	MOVO X7, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1F // PSLLD xmm7, 31
	POR X9, X6
	POR X7, X6
	MOVO X6, 32(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x01 // PSRLD xmm10, 1
	MOVO X8, X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x12 // PSLLD xmm8, 18
	POR X10, X8
	MOVO X8, 48(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x0E // PSRLD xmm11, 14
	MOVO 112(AX), X12
	MOVO 128(AX), X13
	MOVO 144(AX), X14
	MOVO 160(AX), X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x05 // PSLLD xmm12, 5
	MOVO X13, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x18 // PSLLD xmm13, 24
	POR X11, X12
	POR X13, X12
	MOVO X12, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x08 // PSRLD xmm0, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0B // PSLLD xmm14, 11
	MOVO X15, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1E // PSLLD xmm15, 30
	POR X0, X14
	POR X15, X14
	MOVO X14, 80(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x02 // PSRLD xmm1, 2
	MOVO 176(AX), X2
	MOVO 192(AX), X4
	MOVO 208(AX), X5
	MOVO 224(AX), X3
	MOVO X2, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x11 // PSLLD xmm2, 17
	POR X1, X2
	MOVO X2, 96(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x0F // PSRLD xmm9, 15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x04 // PSLLD xmm4, 4
	MOVO X5, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x17 // PSLLD xmm5, 23
	POR X9, X4
	POR X5, X4
	MOVO X4, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x09 // PSRLD xmm7, 9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0A // PSLLD xmm3, 10
	MOVO 240(AX), X6
	MOVO 256(AX), X10
	MOVO 272(AX), X8
	MOVO 288(AX), X11
	MOVO X6, X13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1D // PSLLD xmm6, 29
	POR X7, X3
	POR X6, X3
	MOVO X3, 128(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x03 // PSRLD xmm13, 3
	MOVO X10, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x10 // PSLLD xmm10, 16
	POR X13, X10
	MOVO X10, 144(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x10 // PSRLD xmm12, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x03 // PSLLD xmm8, 3
	MOVO X11, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x16 // PSLLD xmm11, 22
	POR X12, X8
	POR X11, X8
	MOVO X8, 160(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x0A // PSRLD xmm0, 10
	MOVO 304(AX), X15
	MOVO 320(AX), X14
	MOVO 336(AX), X1
	MOVO 352(AX), X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x09 // PSLLD xmm15, 9
	MOVO X14, X9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1C // PSLLD xmm14, 28
	POR X0, X15
	POR X14, X15
	MOVO X15, 176(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x04 // PSRLD xmm9, 4
	MOVO X1, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0F // PSLLD xmm1, 15
	POR X9, X1
	MOVO X1, 192(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x11 // PSRLD xmm5, 17
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x02 // PSLLD xmm2, 2
	MOVO 368(AX), X4
	MOVO 384(AX), X7
	MOVO 400(AX), X6
	MOVO 416(AX), X3
	MOVO X4, X13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x15 // PSLLD xmm4, 21
	POR X5, X2
	POR X4, X2
	MOVO X2, 208(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x0B // PSRLD xmm13, 11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x08 // PSLLD xmm7, 8
	MOVO X6, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1B // PSLLD xmm6, 27
	POR X13, X7
	POR X6, X7
	MOVO X7, 224(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x05 // PSRLD xmm10, 5
	MOVO X3, X12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0E // PSLLD xmm3, 14
	POR X10, X3
	MOVO X3, 240(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x12 // PSRLD xmm12, 18
	MOVO 432(AX), X11
	MOVO 448(AX), X8
	MOVO 464(AX), X0
	MOVO 480(AX), X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x01 // PSLLD xmm11, 1
	MOVO X8, X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x14 // PSLLD xmm8, 20
	POR X12, X11
	POR X8, X11
	MOVO X11, 256(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x0C // PSRLD xmm15, 12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x07 // PSLLD xmm0, 7
	MOVO X14, X9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1A // PSLLD xmm14, 26
	POR X15, X0
	POR X14, X0
	MOVO X0, 272(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x06 // PSRLD xmm9, 6
	MOVO 496(AX), X1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0D // PSLLD xmm1, 13
	POR X9, X1
	MOVO X1, 288(BX)
	RET

// func pack32_20(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_20(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x14 // PSLLD xmm2, 20
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x0C // PSRLD xmm4, 12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x08 // PSLLD xmm3, 8
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	MOVO X5, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x1C // PSLLD xmm5, 28
	POR X4, X3
	POR X5, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x04 // PSRLD xmm9, 4
	MOVO X6, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x10 // PSLLD xmm6, 16
	POR X9, X6
	MOVO X6, 32(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x10 // PSRLD xmm10, 16
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x04 // PSLLD xmm7, 4
	MOVO X8, X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x18 // PSLLD xmm8, 24
	POR X10, X7
	POR X8, X7
	MOVO X7, 48(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x08 // PSRLD xmm11, 8
	MOVO 112(AX), X12
	MOVO 128(AX), X13
	MOVO 144(AX), X14
	MOVO 160(AX), X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0C // PSLLD xmm12, 12
	POR X11, X12
	MOVO X12, 64(BX)
	MOVO X14, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x14 // PSLLD xmm14, 20
	POR X13, X14
	MOVO X14, 80(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x0C // PSRLD xmm0, 12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x08 // PSLLD xmm15, 8
	MOVO 176(AX), X1
	MOVO 192(AX), X2
	MOVO 208(AX), X4
	MOVO 224(AX), X5
	MOVO X1, X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1C // PSLLD xmm1, 28
	POR X0, X15
	POR X1, X15
	MOVO X15, 96(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x04 // PSRLD xmm3, 4
	MOVO X2, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x10 // PSLLD xmm2, 16
	POR X3, X2
	MOVO X2, 112(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x10 // PSRLD xmm9, 16
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x04 // PSLLD xmm4, 4
	MOVO X5, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x18 // PSLLD xmm5, 24
	POR X9, X4
	POR X5, X4
	MOVO X4, 128(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x08 // PSRLD xmm6, 8
	MOVO 240(AX), X10
	MOVO 256(AX), X8
	MOVO 272(AX), X7
	MOVO 288(AX), X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0C // PSLLD xmm10, 12
	POR X6, X10
	MOVO X10, 144(BX)
	MOVO X7, X12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x14 // PSLLD xmm7, 20
	POR X8, X7
	MOVO X7, 160(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x0C // PSRLD xmm12, 12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x08 // PSLLD xmm11, 8
	MOVO 304(AX), X13
	MOVO 320(AX), X14
	MOVO 336(AX), X0
	MOVO 352(AX), X1
	MOVO X13, X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x1C // PSLLD xmm13, 28
	POR X12, X11
	POR X13, X11
	MOVO X11, 176(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x04 // PSRLD xmm15, 4
	MOVO X14, X3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x10 // PSLLD xmm14, 16
	POR X15, X14
	MOVO X14, 192(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x10 // PSRLD xmm3, 16
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x04 // PSLLD xmm0, 4
	MOVO X1, X2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x18 // PSLLD xmm1, 24
	POR X3, X0
	POR X1, X0
	MOVO X0, 208(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x08 // PSRLD xmm2, 8
	MOVO 368(AX), X9
	MOVO 384(AX), X5
	MOVO 400(AX), X4
	MOVO 416(AX), X6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0C // PSLLD xmm9, 12
	POR X2, X9
	MOVO X9, 224(BX)
	MOVO X4, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x14 // PSLLD xmm4, 20
	POR X5, X4
	MOVO X4, 240(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x0C // PSRLD xmm10, 12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x08 // PSLLD xmm6, 8
	MOVO 432(AX), X8
	MOVO 448(AX), X7
	MOVO 464(AX), X12
	MOVO 480(AX), X13
	MOVO X8, X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1C // PSLLD xmm8, 28
	POR X10, X6
	POR X8, X6
	MOVO X6, 256(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x04 // PSRLD xmm11, 4
	MOVO X7, X15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x10 // PSLLD xmm7, 16
	POR X11, X7
	MOVO X7, 272(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x10 // PSRLD xmm15, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x04 // PSLLD xmm12, 4
	MOVO X13, X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x18 // PSLLD xmm13, 24
	POR X15, X12
	POR X13, X12
	MOVO X12, 288(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x08 // PSRLD xmm14, 8
	MOVO 496(AX), X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0C // PSLLD xmm3, 12
	POR X14, X3
	MOVO X3, 304(BX)
	RET

// func pack32_21(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_21(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x15 // PSLLD xmm2, 21
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x0B // PSRLD xmm4, 11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0A // PSLLD xmm3, 10
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	MOVO X5, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x1F // PSLLD xmm5, 31
	POR X4, X3
	POR X5, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x01 // PSRLD xmm9, 1
	MOVO X6, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x14 // PSLLD xmm6, 20
	POR X9, X6
	MOVO X6, 32(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x0C // PSRLD xmm10, 12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x09 // PSLLD xmm7, 9
	MOVO X8, X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1E // PSLLD xmm8, 30
	POR X10, X7
	POR X8, X7
	MOVO X7, 48(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x02 // PSRLD xmm11, 2
	MOVO 112(AX), X12
	MOVO 128(AX), X13
	MOVO 144(AX), X14
	MOVO 160(AX), X15
	MOVO X12, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x13 // PSLLD xmm12, 19
	POR X11, X12
	MOVO X12, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x0D // PSRLD xmm0, 13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x08 // PSLLD xmm13, 8
	MOVO X14, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1D // PSLLD xmm14, 29
	POR X0, X13
	POR X14, X13
	MOVO X13, 80(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x03 // PSRLD xmm1, 3
	MOVO X15, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x12 // PSLLD xmm15, 18
	POR X1, X15
	MOVO X15, 96(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x0E // PSRLD xmm2, 14
	MOVO 176(AX), X4
	MOVO 192(AX), X5
	MOVO 208(AX), X3
	MOVO 224(AX), X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x07 // PSLLD xmm4, 7
	MOVO X5, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x1C // PSLLD xmm5, 28
	POR X2, X4
	POR X5, X4
	MOVO X4, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x04 // PSRLD xmm6, 4
	MOVO X3, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x11 // PSLLD xmm3, 17
	POR X6, X3
	MOVO X3, 128(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x0F // PSRLD xmm10, 15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x06 // PSLLD xmm9, 6
	MOVO 240(AX), X8
	MOVO 256(AX), X7
	MOVO 272(AX), X11
	MOVO 288(AX), X12
	MOVO X8, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1B // PSLLD xmm8, 27
	POR X10, X9
	POR X8, X9
	MOVO X9, 144(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x05 // PSRLD xmm0, 5
	MOVO X7, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x10 // PSLLD xmm7, 16
	POR X0, X7
	MOVO X7, 160(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x10 // PSRLD xmm14, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x05 // PSLLD xmm11, 5
	MOVO X12, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x1A // PSLLD xmm12, 26
	POR X14, X11
	POR X12, X11
	MOVO X11, 176(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x06 // PSRLD xmm13, 6
	MOVO 304(AX), X1
	MOVO 320(AX), X15
	MOVO 336(AX), X2
	MOVO 352(AX), X5
	MOVO X1, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0F // PSLLD xmm1, 15
	POR X13, X1
	MOVO X1, 192(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x11 // PSRLD xmm4, 17
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x04 // PSLLD xmm15, 4
	MOVO X2, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x19 // PSLLD xmm2, 25
	POR X4, X15
	POR X2, X15
	MOVO X15, 208(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x07 // PSRLD xmm6, 7
	MOVO X5, X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0E // PSLLD xmm5, 14
	POR X6, X5
	MOVO X5, 224(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x12 // PSRLD xmm3, 18
	MOVO 368(AX), X10
	MOVO 384(AX), X8
	MOVO 400(AX), X9
	MOVO 416(AX), X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x03 // PSLLD xmm10, 3
	MOVO X8, X7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x18 // PSLLD xmm8, 24
	POR X3, X10
	POR X8, X10
	MOVO X10, 240(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x08 // PSRLD xmm7, 8
	MOVO X9, X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0D // PSLLD xmm9, 13
	POR X7, X9
	MOVO X9, 256(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x13 // PSRLD xmm14, 19
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x02 // PSLLD xmm0, 2
	MOVO 432(AX), X12
	MOVO 448(AX), X11
	MOVO 464(AX), X13
	MOVO 480(AX), X1
	MOVO X12, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x17 // PSLLD xmm12, 23
	POR X14, X0
	POR X12, X0
	MOVO X0, 272(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x09 // PSRLD xmm4, 9
	MOVO X11, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0C // PSLLD xmm11, 12
	POR X4, X11
	MOVO X11, 288(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x14 // PSRLD xmm2, 20
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x01 // PSLLD xmm13, 1
	MOVO X1, X15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x16 // PSLLD xmm1, 22
	POR X2, X13
	POR X1, X13
	MOVO X13, 304(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x0A // PSRLD xmm15, 10
	MOVO 496(AX), X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0B // PSLLD xmm6, 11
	POR X15, X6
	MOVO X6, 320(BX)
	RET

// func pack32_22(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_22(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x16 // PSLLD xmm2, 22
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x0A // PSRLD xmm4, 10
	MOVO X3, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0C // PSLLD xmm3, 12
	POR X4, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x14 // PSRLD xmm5, 20
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x02 // PSLLD xmm6, 2
	MOVO X7, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x18 // PSLLD xmm7, 24
	POR X5, X6
	POR X7, X6
	MOVO X6, 32(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x08 // PSRLD xmm10, 8
	MOVO X8, X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0E // PSLLD xmm8, 14
	POR X10, X8
	MOVO X8, 48(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x12 // PSRLD xmm11, 18
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x04 // PSLLD xmm9, 4
	MOVO 112(AX), X12
	MOVO 128(AX), X13
	MOVO 144(AX), X14
	MOVO 160(AX), X15
	MOVO X12, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x1A // PSLLD xmm12, 26
	POR X11, X9
	POR X12, X9
	MOVO X9, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x06 // PSRLD xmm0, 6
	MOVO X13, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x10 // PSLLD xmm13, 16
	POR X0, X13
	MOVO X13, 80(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x10 // PSRLD xmm1, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x06 // PSLLD xmm14, 6
	MOVO X15, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1C // PSLLD xmm15, 28
	POR X1, X14
	POR X15, X14
	MOVO X14, 96(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x04 // PSRLD xmm2, 4
	MOVO 176(AX), X4
	MOVO 192(AX), X3
	MOVO 208(AX), X5
	MOVO 224(AX), X7
	MOVO X4, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x12 // PSLLD xmm4, 18
	POR X2, X4
	MOVO X4, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x0E // PSRLD xmm6, 14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x08 // PSLLD xmm3, 8
	MOVO X5, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x1E // PSLLD xmm5, 30
	POR X6, X3
	POR X5, X3
	MOVO X3, 128(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x02 // PSRLD xmm10, 2
	MOVO X7, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x14 // PSLLD xmm7, 20
	POR X10, X7
	MOVO X7, 144(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x0C // PSRLD xmm8, 12
	MOVO 240(AX), X11
	MOVO 256(AX), X12
	MOVO 272(AX), X9
	MOVO 288(AX), X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0A // PSLLD xmm11, 10
	POR X8, X11
	MOVO X11, 160(BX)
	MOVO X9, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x16 // PSLLD xmm9, 22
	POR X12, X9
	MOVO X9, 176(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x0A // PSRLD xmm13, 10
	MOVO X0, X1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0C // PSLLD xmm0, 12
	POR X13, X0
	MOVO X0, 192(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x14 // PSRLD xmm1, 20
	MOVO 304(AX), X15
	MOVO 320(AX), X14
	MOVO 336(AX), X2
	MOVO 352(AX), X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x02 // PSLLD xmm15, 2
	MOVO X14, X6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x18 // PSLLD xmm14, 24
	POR X1, X15
	POR X14, X15
	MOVO X15, 208(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x08 // PSRLD xmm6, 8
	MOVO X2, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0E // PSLLD xmm2, 14
	POR X6, X2
	MOVO X2, 224(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x12 // PSRLD xmm5, 18
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x04 // PSLLD xmm4, 4
	MOVO 368(AX), X3
	MOVO 384(AX), X10
	MOVO 400(AX), X7
	MOVO 416(AX), X8
	MOVO X3, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1A // PSLLD xmm3, 26
	POR X5, X4
	POR X3, X4
	MOVO X4, 240(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x06 // PSRLD xmm11, 6
	MOVO X10, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x10 // PSLLD xmm10, 16
	POR X11, X10
	MOVO X10, 256(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x10 // PSRLD xmm12, 16
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x06 // PSLLD xmm7, 6
	MOVO X8, X9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1C // PSLLD xmm8, 28
	POR X12, X7
	POR X8, X7
	MOVO X7, 272(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x04 // PSRLD xmm9, 4
	MOVO 432(AX), X13
	MOVO 448(AX), X0
	MOVO 464(AX), X1
	MOVO 480(AX), X14
	MOVO X13, X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x12 // PSLLD xmm13, 18
	POR X9, X13
	MOVO X13, 288(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x0E // PSRLD xmm15, 14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x08 // PSLLD xmm0, 8
	MOVO X1, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1E // PSLLD xmm1, 30
	POR X15, X0
	POR X1, X0
	MOVO X0, 304(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x02 // PSRLD xmm6, 2
	MOVO X14, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x14 // PSLLD xmm14, 20
	POR X6, X14
	MOVO X14, 320(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x0C // PSRLD xmm2, 12
	MOVO 496(AX), X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0A // PSLLD xmm5, 10
	POR X2, X5
	MOVO X5, 336(BX)
	RET

// func pack32_23(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_23(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x17 // PSLLD xmm2, 23
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x09 // PSRLD xmm4, 9
	MOVO X3, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0E // PSLLD xmm3, 14
	POR X4, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x12 // PSRLD xmm5, 18
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x05 // PSLLD xmm6, 5
	MOVO X7, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1C // PSLLD xmm7, 28
	POR X5, X6
	POR X7, X6
	MOVO X6, 32(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x04 // PSRLD xmm10, 4
	MOVO X8, X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x13 // PSLLD xmm8, 19
	POR X10, X8
	MOVO X8, 48(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x0D // PSRLD xmm11, 13
	MOVO X9, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0A // PSLLD xmm9, 10
	POR X11, X9
	MOVO X9, 64(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x16 // PSRLD xmm12, 22
	MOVO 112(AX), X13
	MOVO 128(AX), X14
	MOVO 144(AX), X15
	MOVO 160(AX), X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x01 // PSLLD xmm13, 1
	MOVO X14, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x18 // PSLLD xmm14, 24
	POR X12, X13
	POR X14, X13
	MOVO X13, 80(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x08 // PSRLD xmm1, 8
	MOVO X15, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0F // PSLLD xmm15, 15
	POR X1, X15
	MOVO X15, 96(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x11 // PSRLD xmm2, 17
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x06 // PSLLD xmm0, 6
	MOVO 176(AX), X4
	MOVO 192(AX), X3
	MOVO 208(AX), X5
	MOVO 224(AX), X7
	MOVO X4, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x1D // PSLLD xmm4, 29
	POR X2, X0
	POR X4, X0
	MOVO X0, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x03 // PSRLD xmm6, 3
	MOVO X3, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x14 // PSLLD xmm3, 20
	POR X6, X3
	MOVO X3, 128(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x0C // PSRLD xmm10, 12
	MOVO X5, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0B // PSLLD xmm5, 11
	POR X10, X5
	MOVO X5, 144(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x15 // PSRLD xmm8, 21
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x02 // PSLLD xmm7, 2
	MOVO 240(AX), X11
	MOVO 256(AX), X9
	MOVO 272(AX), X12
	MOVO 288(AX), X14
	MOVO X11, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x19 // PSLLD xmm11, 25
	POR X8, X7
	POR X11, X7
	MOVO X7, 160(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x07 // PSRLD xmm13, 7
	MOVO X9, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x10 // PSLLD xmm9, 16
	POR X13, X9
	MOVO X9, 176(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x10 // PSRLD xmm1, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x07 // PSLLD xmm12, 7
	MOVO X14, X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1E // PSLLD xmm14, 30
	POR X1, X12
	POR X14, X12
	MOVO X12, 192(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x02 // PSRLD xmm15, 2
	MOVO 304(AX), X2
	MOVO 320(AX), X4
	MOVO 336(AX), X0
	MOVO 352(AX), X6
	MOVO X2, X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x15 // PSLLD xmm2, 21
	POR X15, X2
	MOVO X2, 208(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x0B // PSRLD xmm3, 11
	MOVO X4, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0C // PSLLD xmm4, 12
	POR X3, X4
	MOVO X4, 224(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x14 // PSRLD xmm10, 20
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x03 // PSLLD xmm0, 3
	MOVO X6, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1A // PSLLD xmm6, 26
	POR X10, X0
	POR X6, X0
	MOVO X0, 240(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x06 // PSRLD xmm5, 6
	MOVO 368(AX), X8
	MOVO 384(AX), X11
	MOVO 400(AX), X7
	MOVO 416(AX), X13
	MOVO X8, X9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x11 // PSLLD xmm8, 17
	POR X5, X8
	MOVO X8, 256(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x0F // PSRLD xmm9, 15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x08 // PSLLD xmm11, 8
	MOVO X7, X1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1F // PSLLD xmm7, 31
	POR X9, X11
	POR X7, X11
	MOVO X11, 272(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x01 // PSRLD xmm1, 1
	MOVO X13, X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x16 // PSLLD xmm13, 22
	POR X1, X13
	MOVO X13, 288(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x0A // PSRLD xmm14, 10
	MOVO 432(AX), X12
	MOVO 448(AX), X15
	MOVO 464(AX), X2
	MOVO 480(AX), X3
	MOVO X12, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0D // PSLLD xmm12, 13
	POR X14, X12
	MOVO X12, 304(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x13 // PSRLD xmm4, 19
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x04 // PSLLD xmm15, 4
	MOVO X2, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1B // PSLLD xmm2, 27
	POR X4, X15
	POR X2, X15
	MOVO X15, 320(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x05 // PSRLD xmm10, 5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x12 // PSLLD xmm3, 18
	POR X10, X3
	MOVO X3, 336(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x0E // PSRLD xmm6, 14
	MOVO 496(AX), X0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x09 // PSLLD xmm0, 9
	POR X6, X0
	MOVO X0, 352(BX)
	RET

// func pack32_24(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_24(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x18 // PSLLD xmm2, 24
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x08 // PSRLD xmm4, 8
	MOVO X3, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x10 // PSLLD xmm3, 16
	POR X4, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x10 // PSRLD xmm5, 16
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x08 // PSLLD xmm6, 8
	POR X5, X6
	MOVO X6, 32(BX)
	MOVO X8, X10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x18 // PSLLD xmm8, 24
	POR X7, X8
	MOVO X8, 48(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x08 // PSRLD xmm10, 8
	MOVO X9, X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x10 // PSLLD xmm9, 16
	POR X10, X9
	MOVO X9, 64(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x10 // PSRLD xmm11, 16
	MOVO 112(AX), X12
	MOVO 128(AX), X13
	MOVO 144(AX), X14
	MOVO 160(AX), X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x08 // PSLLD xmm12, 8
	POR X11, X12
	MOVO X12, 80(BX)
	MOVO X14, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x18 // PSLLD xmm14, 24
	POR X13, X14
	MOVO X14, 96(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x08 // PSRLD xmm0, 8
	MOVO X15, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x10 // PSLLD xmm15, 16
	POR X0, X15
	MOVO X15, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x10 // PSRLD xmm1, 16
	MOVO 176(AX), X2
	MOVO 192(AX), X4
	MOVO 208(AX), X3
	MOVO 224(AX), X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x08 // PSLLD xmm2, 8
	POR X1, X2
	MOVO X2, 128(BX)
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x18 // PSLLD xmm3, 24
	POR X4, X3
	MOVO X3, 144(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x08 // PSRLD xmm6, 8
	MOVO X5, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x10 // PSLLD xmm5, 16
	POR X6, X5
	MOVO X5, 160(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x10 // PSRLD xmm7, 16
	MOVO 240(AX), X8
	MOVO 256(AX), X10
	MOVO 272(AX), X9
	MOVO 288(AX), X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x08 // PSLLD xmm8, 8
	POR X7, X8
	MOVO X8, 176(BX)
	MOVO X9, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x18 // PSLLD xmm9, 24
	POR X10, X9
	MOVO X9, 192(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x08 // PSRLD xmm12, 8
	MOVO X11, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x10 // PSLLD xmm11, 16
	POR X12, X11
	MOVO X11, 208(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x10 // PSRLD xmm13, 16
	MOVO 304(AX), X14
	MOVO 320(AX), X0
	MOVO 336(AX), X15
	MOVO 352(AX), X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x08 // PSLLD xmm14, 8
	POR X13, X14
	MOVO X14, 224(BX)
	MOVO X15, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x18 // PSLLD xmm15, 24
	POR X0, X15
	MOVO X15, 240(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x08 // PSRLD xmm2, 8
	MOVO X1, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x10 // PSLLD xmm1, 16
	POR X2, X1
	MOVO X1, 256(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x10 // PSRLD xmm4, 16
	MOVO 368(AX), X3
	MOVO 384(AX), X6
	MOVO 400(AX), X5
	MOVO 416(AX), X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x08 // PSLLD xmm3, 8
	POR X4, X3
	MOVO X3, 272(BX)
	MOVO X5, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x18 // PSLLD xmm5, 24
	POR X6, X5
	MOVO X5, 288(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x08 // PSRLD xmm8, 8
	MOVO X7, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x10 // PSLLD xmm7, 16
	POR X8, X7
	MOVO X7, 304(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x10 // PSRLD xmm10, 16
	MOVO 432(AX), X9
	MOVO 448(AX), X12
	MOVO 464(AX), X11
	MOVO 480(AX), X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x08 // PSLLD xmm9, 8
	POR X10, X9
	MOVO X9, 320(BX)
	MOVO X11, X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x18 // PSLLD xmm11, 24
	POR X12, X11
	MOVO X11, 336(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x08 // PSRLD xmm14, 8
	MOVO X13, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x10 // PSLLD xmm13, 16
	POR X14, X13
	MOVO X13, 352(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x10 // PSRLD xmm0, 16
	MOVO 496(AX), X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x08 // PSLLD xmm15, 8
	POR X0, X15
	MOVO X15, 368(BX)
	RET

// func pack32_25(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_25(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x19 // PSLLD xmm2, 25
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x07 // PSRLD xmm4, 7
	MOVO X3, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x12 // PSLLD xmm3, 18
	POR X4, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x0E // PSRLD xmm5, 14
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	MOVO X6, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0B // PSLLD xmm6, 11
	POR X5, X6
	MOVO X6, 32(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x15 // PSRLD xmm10, 21
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x04 // PSLLD xmm7, 4
	MOVO X8, X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1D // PSLLD xmm8, 29
	POR X10, X7
	POR X8, X7
	MOVO X7, 48(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x03 // PSRLD xmm11, 3
	MOVO X9, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x16 // PSLLD xmm9, 22
	POR X11, X9
	MOVO X9, 64(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x0A // PSRLD xmm12, 10
	MOVO 112(AX), X13
	MOVO 128(AX), X14
	MOVO 144(AX), X15
	MOVO 160(AX), X0
	MOVO X13, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0F // PSLLD xmm13, 15
	POR X12, X13
	MOVO X13, 80(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x11 // PSRLD xmm1, 17
	MOVO X14, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x08 // PSLLD xmm14, 8
	POR X1, X14
	MOVO X14, 96(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x18 // PSRLD xmm2, 24
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x01 // PSLLD xmm15, 1
	MOVO X0, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1A // PSLLD xmm0, 26
	POR X2, X15
	POR X0, X15
	MOVO X15, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x06 // PSRLD xmm4, 6
	MOVO 176(AX), X3
	MOVO 192(AX), X5
	MOVO 208(AX), X6
	MOVO 224(AX), X10
	MOVO X3, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x13 // PSLLD xmm3, 19
	POR X4, X3
	MOVO X3, 128(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x0D // PSRLD xmm8, 13
	MOVO X5, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0C // PSLLD xmm5, 12
	POR X8, X5
	MOVO X5, 144(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x14 // PSRLD xmm7, 20
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x05 // PSLLD xmm6, 5
	MOVO X10, X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1E // PSLLD xmm10, 30
	POR X7, X6
	POR X10, X6
	MOVO X6, 160(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x02 // PSRLD xmm11, 2
	MOVO 240(AX), X9
	MOVO 256(AX), X12
	MOVO 272(AX), X13
	MOVO 288(AX), X1
	MOVO X9, X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x17 // PSLLD xmm9, 23
	POR X11, X9
	MOVO X9, 176(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x09 // PSRLD xmm14, 9
	MOVO X12, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x10 // PSLLD xmm12, 16
	POR X14, X12
	MOVO X12, 192(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x10 // PSRLD xmm2, 16
	MOVO X13, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x09 // PSLLD xmm13, 9
	POR X2, X13
	MOVO X13, 208(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x17 // PSRLD xmm0, 23
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x02 // PSLLD xmm1, 2
	MOVO 304(AX), X15
	MOVO 320(AX), X4
	MOVO 336(AX), X3
	MOVO 352(AX), X8
	MOVO X15, X5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1B // PSLLD xmm15, 27
	POR X0, X1
	POR X15, X1
	MOVO X1, 224(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x05 // PSRLD xmm5, 5
	MOVO X4, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x14 // PSLLD xmm4, 20
	POR X5, X4
	MOVO X4, 240(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x0C // PSRLD xmm7, 12
	MOVO X3, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0D // PSLLD xmm3, 13
	POR X7, X3
	MOVO X3, 256(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x13 // PSRLD xmm10, 19
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x06 // PSLLD xmm8, 6
	MOVO 368(AX), X6
	MOVO 384(AX), X11
	MOVO 400(AX), X9
	MOVO 416(AX), X14
	MOVO X6, X12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1F // PSLLD xmm6, 31
	POR X10, X8
	POR X6, X8
	MOVO X8, 272(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x01 // PSRLD xmm12, 1
	MOVO X11, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x18 // PSLLD xmm11, 24
	POR X12, X11
	MOVO X11, 288(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x08 // PSRLD xmm2, 8
	MOVO X9, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x11 // PSLLD xmm9, 17
	POR X2, X9
	MOVO X9, 304(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x0F // PSRLD xmm13, 15
	MOVO X14, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0A // PSLLD xmm14, 10
	POR X13, X14
	MOVO X14, 320(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x16 // PSRLD xmm0, 22
	MOVO 432(AX), X15
	MOVO 448(AX), X1
	MOVO 464(AX), X5
	MOVO 480(AX), X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x03 // PSLLD xmm15, 3
	MOVO X1, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1C // PSLLD xmm1, 28
	POR X0, X15
	POR X1, X15
	MOVO X15, 336(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x04 // PSRLD xmm7, 4
	MOVO X5, X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x15 // PSLLD xmm5, 21
	POR X7, X5
	MOVO X5, 352(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x0B // PSRLD xmm3, 11
	MOVO X4, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0E // PSLLD xmm4, 14
	POR X3, X4
	MOVO X4, 368(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x12 // PSRLD xmm10, 18
	MOVO 496(AX), X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x07 // PSLLD xmm6, 7
	POR X10, X6
	MOVO X6, 384(BX)
	RET

// func pack32_26(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_26(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1A // PSLLD xmm2, 26
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x06 // PSRLD xmm4, 6
	MOVO X3, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x14 // PSLLD xmm3, 20
	POR X4, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x0C // PSRLD xmm5, 12
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	MOVO X6, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0E // PSLLD xmm6, 14
	POR X5, X6
	MOVO X6, 32(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x12 // PSRLD xmm10, 18
	MOVO X7, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x08 // PSLLD xmm7, 8
	POR X10, X7
	MOVO X7, 48(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x18 // PSRLD xmm11, 24
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x02 // PSLLD xmm8, 2
	MOVO X9, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1C // PSLLD xmm9, 28
	POR X11, X8
	POR X9, X8
	MOVO X8, 64(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x04 // PSRLD xmm12, 4
	MOVO 112(AX), X13
	MOVO 128(AX), X14
	MOVO 144(AX), X15
	MOVO 160(AX), X0
	MOVO X13, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x16 // PSLLD xmm13, 22
	POR X12, X13
	MOVO X13, 80(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x0A // PSRLD xmm1, 10
	MOVO X14, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x10 // PSLLD xmm14, 16
	POR X1, X14
	MOVO X14, 96(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x10 // PSRLD xmm2, 16
	MOVO X15, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0A // PSLLD xmm15, 10
	POR X2, X15
	MOVO X15, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x16 // PSRLD xmm4, 22
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x04 // PSLLD xmm0, 4
	MOVO 176(AX), X3
	MOVO 192(AX), X5
	MOVO 208(AX), X6
	MOVO 224(AX), X10
	MOVO X3, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1E // PSLLD xmm3, 30
	POR X4, X0
	POR X3, X0
	MOVO X0, 128(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x02 // PSRLD xmm7, 2
	MOVO X5, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x18 // PSLLD xmm5, 24
	POR X7, X5
	MOVO X5, 144(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x08 // PSRLD xmm11, 8
	MOVO X6, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x12 // PSLLD xmm6, 18
	POR X11, X6
	MOVO X6, 160(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x0E // PSRLD xmm9, 14
	MOVO X10, X8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0C // PSLLD xmm10, 12
	POR X9, X10
	MOVO X10, 176(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x14 // PSRLD xmm8, 20
	MOVO 240(AX), X12
	MOVO 256(AX), X13
	MOVO 272(AX), X1
	MOVO 288(AX), X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x06 // PSLLD xmm12, 6
	POR X8, X12
	MOVO X12, 192(BX)
	MOVO X1, X2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1A // PSLLD xmm1, 26
	POR X13, X1
	MOVO X1, 208(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x06 // PSRLD xmm2, 6
	MOVO X14, X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x14 // PSLLD xmm14, 20
	POR X2, X14
	MOVO X14, 224(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x0C // PSRLD xmm15, 12
	MOVO 304(AX), X4
	MOVO 320(AX), X3
	MOVO 336(AX), X0
	MOVO 352(AX), X7
	MOVO X4, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0E // PSLLD xmm4, 14
	POR X15, X4
	MOVO X4, 240(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x12 // PSRLD xmm5, 18
	MOVO X3, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x08 // PSLLD xmm3, 8
	POR X5, X3
	MOVO X3, 256(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x18 // PSRLD xmm11, 24
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x02 // PSLLD xmm0, 2
	MOVO X7, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1C // PSLLD xmm7, 28
	POR X11, X0
	POR X7, X0
	MOVO X0, 272(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x04 // PSRLD xmm6, 4
	MOVO 368(AX), X9
	MOVO 384(AX), X10
	MOVO 400(AX), X8
	MOVO 416(AX), X12
	MOVO X9, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x16 // PSLLD xmm9, 22
	POR X6, X9
	MOVO X9, 288(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x0A // PSRLD xmm13, 10
	MOVO X10, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x10 // PSLLD xmm10, 16
	POR X13, X10
	MOVO X10, 304(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x10 // PSRLD xmm1, 16
	MOVO X8, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0A // PSLLD xmm8, 10
	POR X1, X8
	MOVO X8, 320(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x16 // PSRLD xmm2, 22
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x04 // PSLLD xmm12, 4
	MOVO 432(AX), X14
	MOVO 448(AX), X15
	MOVO 464(AX), X4
	MOVO 480(AX), X5
	MOVO X14, X3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1E // PSLLD xmm14, 30
	POR X2, X12
	POR X14, X12
	MOVO X12, 336(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x02 // PSRLD xmm3, 2
	MOVO X15, X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x18 // PSLLD xmm15, 24
	POR X3, X15
	MOVO X15, 352(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x08 // PSRLD xmm11, 8
	MOVO X4, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x12 // PSLLD xmm4, 18
	POR X11, X4
	MOVO X4, 368(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x0E // PSRLD xmm7, 14
	MOVO X5, X0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0C // PSLLD xmm5, 12
	POR X7, X5
	MOVO X5, 384(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x14 // PSRLD xmm0, 20
	MOVO 496(AX), X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x06 // PSLLD xmm6, 6
	POR X0, X6
	MOVO X6, 400(BX)
	RET

// func pack32_27(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_27(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1B // PSLLD xmm2, 27
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x05 // PSRLD xmm4, 5
	MOVO X3, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x16 // PSLLD xmm3, 22
	POR X4, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x0A // PSRLD xmm5, 10
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	MOVO X6, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x11 // PSLLD xmm6, 17
	POR X5, X6
	MOVO X6, 32(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x0F // PSRLD xmm10, 15
	MOVO X7, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0C // PSLLD xmm7, 12
	POR X10, X7
	MOVO X7, 48(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x14 // PSRLD xmm11, 20
	MOVO X8, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x07 // PSLLD xmm8, 7
	POR X11, X8
	MOVO X8, 64(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x19 // PSRLD xmm12, 25
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x02 // PSLLD xmm9, 2
	MOVO 112(AX), X13
	MOVO 128(AX), X14
	MOVO 144(AX), X15
	MOVO 160(AX), X0
	MOVO X13, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x1D // PSLLD xmm13, 29
	POR X12, X9
	POR X13, X9
	MOVO X9, 80(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x03 // PSRLD xmm1, 3
	MOVO X14, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x18 // PSLLD xmm14, 24
	POR X1, X14
	MOVO X14, 96(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x08 // PSRLD xmm2, 8
	MOVO X15, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x13 // PSLLD xmm15, 19
	POR X2, X15
	MOVO X15, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x0D // PSRLD xmm4, 13
	MOVO X0, X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0E // PSLLD xmm0, 14
	POR X4, X0
	MOVO X0, 128(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x12 // PSRLD xmm3, 18
	MOVO 176(AX), X5
	MOVO 192(AX), X6
	MOVO 208(AX), X10
	MOVO 224(AX), X7
	MOVO X5, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x09 // PSLLD xmm5, 9
	POR X3, X5
	MOVO X5, 144(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x17 // PSRLD xmm11, 23
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x04 // PSLLD xmm6, 4
	MOVO X10, X8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1F // PSLLD xmm10, 31
	POR X11, X6
	POR X10, X6
	MOVO X6, 160(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x01 // PSRLD xmm8, 1
	MOVO X7, X12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1A // PSLLD xmm7, 26
	POR X8, X7
	MOVO X7, 176(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x06 // PSRLD xmm12, 6
	MOVO 240(AX), X13
	MOVO 256(AX), X9
	MOVO 272(AX), X1
	MOVO 288(AX), X14
	MOVO X13, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x15 // PSLLD xmm13, 21
	POR X12, X13
	MOVO X13, 192(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x0B // PSRLD xmm2, 11
	MOVO X9, X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x10 // PSLLD xmm9, 16
	POR X2, X9
	MOVO X9, 208(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x10 // PSRLD xmm15, 16
	MOVO X1, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0B // PSLLD xmm1, 11
	POR X15, X1
	MOVO X1, 224(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x15 // PSRLD xmm4, 21
	MOVO X14, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x06 // PSLLD xmm14, 6
	POR X4, X14
	MOVO X14, 240(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x1A // PSRLD xmm0, 26
	MOVO 304(AX), X3
	MOVO 320(AX), X5
	MOVO 336(AX), X11
	MOVO 352(AX), X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x01 // PSLLD xmm3, 1
	MOVO X5, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x1C // PSLLD xmm5, 28
	POR X0, X3
	POR X5, X3
	MOVO X3, 256(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x04 // PSRLD xmm6, 4
	MOVO X11, X8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x17 // PSLLD xmm11, 23
	POR X6, X11
	MOVO X11, 272(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x09 // PSRLD xmm8, 9
	MOVO X10, X7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x12 // PSLLD xmm10, 18
	POR X8, X10
	MOVO X10, 288(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x0E // PSRLD xmm7, 14
	MOVO 368(AX), X12
	MOVO 384(AX), X13
	MOVO 400(AX), X2
	MOVO 416(AX), X9
	MOVO X12, X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0D // PSLLD xmm12, 13
	POR X7, X12
	MOVO X12, 304(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x13 // PSRLD xmm15, 19
	MOVO X13, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x08 // PSLLD xmm13, 8
	POR X15, X13
	MOVO X13, 320(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x18 // PSRLD xmm1, 24
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x03 // PSLLD xmm2, 3
	MOVO X9, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1E // PSLLD xmm9, 30
	POR X1, X2
	POR X9, X2
	MOVO X2, 336(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x02 // PSRLD xmm4, 2
	MOVO 432(AX), X14
	MOVO 448(AX), X0
	MOVO 464(AX), X5
	MOVO 480(AX), X3
	MOVO X14, X6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x19 // PSLLD xmm14, 25
	POR X4, X14
	MOVO X14, 352(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x07 // PSRLD xmm6, 7
	MOVO X0, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x14 // PSLLD xmm0, 20
	POR X6, X0
	MOVO X0, 368(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x0C // PSRLD xmm11, 12
	MOVO X5, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0F // PSLLD xmm5, 15
	POR X11, X5
	MOVO X5, 384(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x11 // PSRLD xmm8, 17
	MOVO X3, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0A // PSLLD xmm3, 10
	POR X8, X3
	MOVO X3, 400(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x16 // PSRLD xmm10, 22
	MOVO 496(AX), X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x05 // PSLLD xmm7, 5
	POR X10, X7
	MOVO X7, 416(BX)
	RET

// func pack32_28(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_28(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1C // PSLLD xmm2, 28
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x04 // PSRLD xmm4, 4
	MOVO X3, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x18 // PSLLD xmm3, 24
	POR X4, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x08 // PSRLD xmm5, 8
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	MOVO X6, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x14 // PSLLD xmm6, 20
	POR X5, X6
	MOVO X6, 32(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x0C // PSRLD xmm10, 12
	MOVO X7, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x10 // PSLLD xmm7, 16
	POR X10, X7
	MOVO X7, 48(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x10 // PSRLD xmm11, 16
	MOVO X8, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0C // PSLLD xmm8, 12
	POR X11, X8
	MOVO X8, 64(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x14 // PSRLD xmm12, 20
	MOVO X9, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x08 // PSLLD xmm9, 8
	POR X12, X9
	MOVO X9, 80(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x18 // PSRLD xmm13, 24
	MOVO 112(AX), X14
	MOVO 128(AX), X15
	MOVO 144(AX), X0
	MOVO 160(AX), X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x04 // PSLLD xmm14, 4
	POR X13, X14
	MOVO X14, 96(BX)
	MOVO X0, X2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1C // PSLLD xmm0, 28
	POR X15, X0
	MOVO X0, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x04 // PSRLD xmm2, 4
	MOVO X1, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x18 // PSLLD xmm1, 24
	POR X2, X1
	MOVO X1, 128(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x08 // PSRLD xmm4, 8
	MOVO 176(AX), X3
	MOVO 192(AX), X5
	MOVO 208(AX), X6
	MOVO 224(AX), X10
	MOVO X3, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x14 // PSLLD xmm3, 20
	POR X4, X3
	MOVO X3, 144(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x0C // PSRLD xmm7, 12
	MOVO X5, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x10 // PSLLD xmm5, 16
	POR X7, X5
	MOVO X5, 160(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x10 // PSRLD xmm11, 16
	MOVO X6, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0C // PSLLD xmm6, 12
	POR X11, X6
	MOVO X6, 176(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x14 // PSRLD xmm8, 20
	MOVO X10, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x08 // PSLLD xmm10, 8
	POR X8, X10
	MOVO X10, 192(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x18 // PSRLD xmm12, 24
	MOVO 240(AX), X9
	MOVO 256(AX), X13
	MOVO 272(AX), X14
	MOVO 288(AX), X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x04 // PSLLD xmm9, 4
	POR X12, X9
	MOVO X9, 208(BX)
	MOVO X14, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1C // PSLLD xmm14, 28
	POR X13, X14
	MOVO X14, 224(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x04 // PSRLD xmm0, 4
	MOVO X15, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x18 // PSLLD xmm15, 24
	POR X0, X15
	MOVO X15, 240(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x08 // PSRLD xmm2, 8
	MOVO 304(AX), X1
	MOVO 320(AX), X4
	MOVO 336(AX), X3
	MOVO 352(AX), X7
	MOVO X1, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x14 // PSLLD xmm1, 20
	POR X2, X1
	MOVO X1, 256(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x0C // PSRLD xmm5, 12
	MOVO X4, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x10 // PSLLD xmm4, 16
	POR X5, X4
	MOVO X4, 272(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x10 // PSRLD xmm11, 16
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0C // PSLLD xmm3, 12
	POR X11, X3
	MOVO X3, 288(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x14 // PSRLD xmm6, 20
	MOVO X7, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x08 // PSLLD xmm7, 8
	POR X6, X7
	MOVO X7, 304(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x18 // PSRLD xmm8, 24
	MOVO 368(AX), X10
	MOVO 384(AX), X12
	MOVO 400(AX), X9
	MOVO 416(AX), X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x04 // PSLLD xmm10, 4
	POR X8, X10
	MOVO X10, 320(BX)
	MOVO X9, X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1C // PSLLD xmm9, 28
	POR X12, X9
	MOVO X9, 336(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x04 // PSRLD xmm14, 4
	MOVO X13, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x18 // PSLLD xmm13, 24
	POR X14, X13
	MOVO X13, 352(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x08 // PSRLD xmm0, 8
	MOVO 432(AX), X15
	MOVO 448(AX), X2
	MOVO 464(AX), X1
	MOVO 480(AX), X5
	MOVO X15, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x14 // PSLLD xmm15, 20
	POR X0, X15
	MOVO X15, 368(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x0C // PSRLD xmm4, 12
	MOVO X2, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x10 // PSLLD xmm2, 16
	POR X4, X2
	MOVO X2, 384(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x10 // PSRLD xmm11, 16
	MOVO X1, X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0C // PSLLD xmm1, 12
	POR X11, X1
	MOVO X1, 400(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x14 // PSRLD xmm3, 20
	MOVO X5, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x08 // PSLLD xmm5, 8
	POR X3, X5
	MOVO X5, 416(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x18 // PSRLD xmm6, 24
	MOVO 496(AX), X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x04 // PSLLD xmm7, 4
	POR X6, X7
	MOVO X7, 432(BX)
	RET

// func pack32_29(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_29(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1D // PSLLD xmm2, 29
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x03 // PSRLD xmm4, 3
	MOVO X3, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1A // PSLLD xmm3, 26
	POR X4, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x06 // PSRLD xmm5, 6
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	MOVO X6, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x17 // PSLLD xmm6, 23
	POR X5, X6
	MOVO X6, 32(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x09 // PSRLD xmm10, 9
	MOVO X7, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x14 // PSLLD xmm7, 20
	POR X10, X7
	MOVO X7, 48(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x0C // PSRLD xmm11, 12
	MOVO X8, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x11 // PSLLD xmm8, 17
	POR X11, X8
	MOVO X8, 64(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x0F // PSRLD xmm12, 15
	MOVO X9, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0E // PSLLD xmm9, 14
	POR X12, X9
	MOVO X9, 80(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x12 // PSRLD xmm13, 18
	MOVO 112(AX), X14
	MOVO 128(AX), X15
	MOVO 144(AX), X0
	MOVO 160(AX), X1
	MOVO X14, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0B // PSLLD xmm14, 11
	POR X13, X14
	MOVO X14, 96(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x15 // PSRLD xmm2, 21
	MOVO X15, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x08 // PSLLD xmm15, 8
	POR X2, X15
	MOVO X15, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x18 // PSRLD xmm4, 24
	MOVO X0, X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x05 // PSLLD xmm0, 5
	POR X4, X0
	MOVO X0, 128(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x1B // PSRLD xmm3, 27
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x02 // PSLLD xmm1, 2
	MOVO 176(AX), X5
	MOVO 192(AX), X6
	MOVO 208(AX), X10
	MOVO 224(AX), X7
	MOVO X5, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x1F // PSLLD xmm5, 31
	POR X3, X1
	POR X5, X1
	MOVO X1, 144(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x01 // PSRLD xmm11, 1
	MOVO X6, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1C // PSLLD xmm6, 28
	POR X11, X6
	MOVO X6, 160(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x04 // PSRLD xmm8, 4
	MOVO X10, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x19 // PSLLD xmm10, 25
	POR X8, X10
	MOVO X10, 176(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x07 // PSRLD xmm12, 7
	MOVO X7, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x16 // PSLLD xmm7, 22
	POR X12, X7
	MOVO X7, 192(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x0A // PSRLD xmm9, 10
	MOVO 240(AX), X13
	MOVO 256(AX), X14
	MOVO 272(AX), X2
	MOVO 288(AX), X15
	MOVO X13, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x13 // PSLLD xmm13, 19
	POR X9, X13
	MOVO X13, 208(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x0D // PSRLD xmm4, 13
	MOVO X14, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x10 // PSLLD xmm14, 16
	POR X4, X14
	MOVO X14, 224(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x10 // PSRLD xmm0, 16
	MOVO X2, X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0D // PSLLD xmm2, 13
	POR X0, X2
	MOVO X2, 240(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x13 // PSRLD xmm3, 19
	MOVO X15, X5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0A // PSLLD xmm15, 10
	POR X3, X15
	MOVO X15, 256(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x16 // PSRLD xmm5, 22
	MOVO 304(AX), X1
	MOVO 320(AX), X11
	MOVO 336(AX), X6
	MOVO 352(AX), X8
	MOVO X1, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x07 // PSLLD xmm1, 7
	POR X5, X1
	MOVO X1, 272(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x19 // PSRLD xmm10, 25
	MOVO X11, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x04 // PSLLD xmm11, 4
	POR X10, X11
	MOVO X11, 288(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x1C // PSRLD xmm12, 28
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x01 // PSLLD xmm6, 1
	MOVO X8, X7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1E // PSLLD xmm8, 30
	POR X12, X6
	POR X8, X6
	MOVO X6, 304(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x02 // PSRLD xmm7, 2
	MOVO 368(AX), X9
	MOVO 384(AX), X13
	MOVO 400(AX), X4
	MOVO 416(AX), X14
	MOVO X9, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1B // PSLLD xmm9, 27
	POR X7, X9
	MOVO X9, 320(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x05 // PSRLD xmm0, 5
	MOVO X13, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x18 // PSLLD xmm13, 24
	POR X0, X13
	MOVO X13, 336(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x08 // PSRLD xmm2, 8
	MOVO X4, X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x15 // PSLLD xmm4, 21
	POR X2, X4
	MOVO X4, 352(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x0B // PSRLD xmm3, 11
	MOVO X14, X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x12 // PSLLD xmm14, 18
	POR X3, X14
	MOVO X14, 368(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x0E // PSRLD xmm15, 14
	MOVO 432(AX), X5
	MOVO 448(AX), X1
	MOVO 464(AX), X10
	MOVO 480(AX), X11
	MOVO X5, X12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0F // PSLLD xmm5, 15
	POR X15, X5
	MOVO X5, 384(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x11 // PSRLD xmm12, 17
	MOVO X1, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0C // PSLLD xmm1, 12
	POR X12, X1
	MOVO X1, 400(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x14 // PSRLD xmm8, 20
	MOVO X10, X6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x09 // PSLLD xmm10, 9
	POR X8, X10
	MOVO X10, 416(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x17 // PSRLD xmm6, 23
	MOVO X11, X7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x06 // PSLLD xmm11, 6
	POR X6, X11
	MOVO X11, 432(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x1A // PSRLD xmm7, 26
	MOVO 496(AX), X9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x03 // PSLLD xmm9, 3
	POR X7, X9
	MOVO X9, 448(BX)
	RET

// func pack32_30(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_30(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1E // PSLLD xmm2, 30
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x02 // PSRLD xmm4, 2
	MOVO X3, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1C // PSLLD xmm3, 28
	POR X4, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x04 // PSRLD xmm5, 4
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	MOVO X6, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1A // PSLLD xmm6, 26
	POR X5, X6
	MOVO X6, 32(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x06 // PSRLD xmm10, 6
	MOVO X7, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x18 // PSLLD xmm7, 24
	POR X10, X7
	MOVO X7, 48(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x08 // PSRLD xmm11, 8
	MOVO X8, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x16 // PSLLD xmm8, 22
	POR X11, X8
	MOVO X8, 64(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x0A // PSRLD xmm12, 10
	MOVO X9, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x14 // PSLLD xmm9, 20
	POR X12, X9
	MOVO X9, 80(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x0C // PSRLD xmm13, 12
	MOVO 112(AX), X14
	MOVO 128(AX), X15
	MOVO 144(AX), X0
	MOVO 160(AX), X1
	MOVO X14, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x12 // PSLLD xmm14, 18
	POR X13, X14
	MOVO X14, 96(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x0E // PSRLD xmm2, 14
	MOVO X15, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x10 // PSLLD xmm15, 16
	POR X2, X15
	MOVO X15, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x10 // PSRLD xmm4, 16
	MOVO X0, X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0E // PSLLD xmm0, 14
	POR X4, X0
	MOVO X0, 128(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x12 // PSRLD xmm3, 18
	MOVO X1, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0C // PSLLD xmm1, 12
	POR X3, X1
	MOVO X1, 144(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x14 // PSRLD xmm5, 20
	MOVO 176(AX), X6
	MOVO 192(AX), X10
	MOVO 208(AX), X7
	MOVO 224(AX), X11
	MOVO X6, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0A // PSLLD xmm6, 10
	POR X5, X6
	MOVO X6, 160(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x16 // PSRLD xmm8, 22
	MOVO X10, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x08 // PSLLD xmm10, 8
	POR X8, X10
	MOVO X10, 176(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x18 // PSRLD xmm12, 24
	MOVO X7, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x06 // PSLLD xmm7, 6
	POR X12, X7
	MOVO X7, 192(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x1A // PSRLD xmm9, 26
	MOVO X11, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x04 // PSLLD xmm11, 4
	POR X9, X11
	MOVO X11, 208(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x1C // PSRLD xmm13, 28
	MOVO 240(AX), X14
	MOVO 256(AX), X2
	MOVO 272(AX), X15
	MOVO 288(AX), X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x02 // PSLLD xmm14, 2
	POR X13, X14
	MOVO X14, 224(BX)
	MOVO X15, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1E // PSLLD xmm15, 30
	POR X2, X15
	MOVO X15, 240(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x02 // PSRLD xmm0, 2
	MOVO X4, X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x1C // PSLLD xmm4, 28
	POR X0, X4
	MOVO X4, 256(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x04 // PSRLD xmm3, 4
	MOVO 304(AX), X1
	MOVO 320(AX), X5
	MOVO 336(AX), X6
	MOVO 352(AX), X8
	MOVO X1, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1A // PSLLD xmm1, 26
	POR X3, X1
	MOVO X1, 272(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x06 // PSRLD xmm10, 6
	MOVO X5, X12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x18 // PSLLD xmm5, 24
	POR X10, X5
	MOVO X5, 288(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x08 // PSRLD xmm12, 8
	MOVO X6, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x16 // PSLLD xmm6, 22
	POR X12, X6
	MOVO X6, 304(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x0A // PSRLD xmm7, 10
	MOVO X8, X9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x14 // PSLLD xmm8, 20
	POR X7, X8
	MOVO X8, 320(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x0C // PSRLD xmm9, 12
	MOVO 368(AX), X11
	MOVO 384(AX), X13
	MOVO 400(AX), X14
	MOVO 416(AX), X2
	MOVO X11, X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x12 // PSLLD xmm11, 18
	POR X9, X11
	MOVO X11, 336(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x0E // PSRLD xmm15, 14
	MOVO X13, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x10 // PSLLD xmm13, 16
	POR X15, X13
	MOVO X13, 352(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x10 // PSRLD xmm0, 16
	MOVO X14, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0E // PSLLD xmm14, 14
	POR X0, X14
	MOVO X14, 368(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x12 // PSRLD xmm4, 18
	MOVO X2, X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0C // PSLLD xmm2, 12
	POR X4, X2
	MOVO X2, 384(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x14 // PSRLD xmm3, 20
	MOVO 432(AX), X1
	MOVO 448(AX), X10
	MOVO 464(AX), X5
	MOVO 480(AX), X12
	MOVO X1, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0A // PSLLD xmm1, 10
	POR X3, X1
	MOVO X1, 400(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x16 // PSRLD xmm6, 22
	MOVO X10, X7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x08 // PSLLD xmm10, 8
	POR X6, X10
	MOVO X10, 416(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x18 // PSRLD xmm7, 24
	MOVO X5, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x06 // PSLLD xmm5, 6
	POR X7, X5
	MOVO X5, 432(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x1A // PSRLD xmm8, 26
	MOVO X12, X9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x04 // PSLLD xmm12, 4
	POR X8, X12
	MOVO X12, 448(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x1C // PSRLD xmm9, 28
	MOVO 496(AX), X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x02 // PSLLD xmm11, 2
	POR X9, X11
	MOVO X11, 464(BX)
	RET

// func pack32_31(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_31(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1F // PSLLD xmm2, 31
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x01 // PSRLD xmm4, 1
	MOVO X3, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1E // PSLLD xmm3, 30
	POR X4, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x02 // PSRLD xmm5, 2
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	MOVO X6, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1D // PSLLD xmm6, 29
	POR X5, X6
	MOVO X6, 32(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x03 // PSRLD xmm10, 3
	MOVO X7, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1C // PSLLD xmm7, 28
	POR X10, X7
	MOVO X7, 48(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x04 // PSRLD xmm11, 4
	MOVO X8, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1B // PSLLD xmm8, 27
	POR X11, X8
	MOVO X8, 64(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x05 // PSRLD xmm12, 5
	MOVO X9, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1A // PSLLD xmm9, 26
	POR X12, X9
	MOVO X9, 80(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x06 // PSRLD xmm13, 6
	MOVO 112(AX), X14
	MOVO 128(AX), X15
	MOVO 144(AX), X0
	MOVO 160(AX), X1
	MOVO X14, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x19 // PSLLD xmm14, 25
	POR X13, X14
	MOVO X14, 96(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x07 // PSRLD xmm2, 7
	MOVO X15, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x18 // PSLLD xmm15, 24
	POR X2, X15
	MOVO X15, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x08 // PSRLD xmm4, 8
	MOVO X0, X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x17 // PSLLD xmm0, 23
	POR X4, X0
	MOVO X0, 128(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x09 // PSRLD xmm3, 9
	MOVO X1, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x16 // PSLLD xmm1, 22
	POR X3, X1
	MOVO X1, 144(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x0A // PSRLD xmm5, 10
	MOVO 176(AX), X6
	MOVO 192(AX), X10
	MOVO 208(AX), X7
	MOVO 224(AX), X11
	MOVO X6, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x15 // PSLLD xmm6, 21
	POR X5, X6
	MOVO X6, 160(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x0B // PSRLD xmm8, 11
	MOVO X10, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x14 // PSLLD xmm10, 20
	POR X8, X10
	MOVO X10, 176(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x0C // PSRLD xmm12, 12
	MOVO X7, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x13 // PSLLD xmm7, 19
	POR X12, X7
	MOVO X7, 192(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x0D // PSRLD xmm9, 13
	MOVO X11, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x12 // PSLLD xmm11, 18
	POR X9, X11
	MOVO X11, 208(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x0E // PSRLD xmm13, 14
	MOVO 240(AX), X14
	MOVO 256(AX), X2
	MOVO 272(AX), X15
	MOVO 288(AX), X4
	MOVO X14, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x11 // PSLLD xmm14, 17
	POR X13, X14
	MOVO X14, 224(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x0F // PSRLD xmm0, 15
	MOVO X2, X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x10 // PSLLD xmm2, 16
	POR X0, X2
	MOVO X2, 240(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x10 // PSRLD xmm3, 16
	MOVO X15, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0F // PSLLD xmm15, 15
	POR X3, X15
	MOVO X15, 256(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x11 // PSRLD xmm1, 17
	MOVO X4, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0E // PSLLD xmm4, 14
	POR X1, X4
	MOVO X4, 272(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x12 // PSRLD xmm5, 18
	MOVO 304(AX), X6
	MOVO 320(AX), X8
	MOVO 336(AX), X10
	MOVO 352(AX), X12
	MOVO X6, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0D // PSLLD xmm6, 13
	POR X5, X6
	MOVO X6, 288(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x13 // PSRLD xmm7, 19
	MOVO X8, X9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0C // PSLLD xmm8, 12
	POR X7, X8
	MOVO X8, 304(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x14 // PSRLD xmm9, 20
	MOVO X10, X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0B // PSLLD xmm10, 11
	POR X9, X10
	MOVO X10, 320(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x15 // PSRLD xmm11, 21
	MOVO X12, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0A // PSLLD xmm12, 10
	POR X11, X12
	MOVO X12, 336(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x16 // PSRLD xmm13, 22
	MOVO 368(AX), X14
	MOVO 384(AX), X0
	MOVO 400(AX), X2
	MOVO 416(AX), X3
	MOVO X14, X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x09 // PSLLD xmm14, 9
	POR X13, X14
	MOVO X14, 352(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x17 // PSRLD xmm15, 23
	MOVO X0, X1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x08 // PSLLD xmm0, 8
	POR X15, X0
	MOVO X0, 368(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x18 // PSRLD xmm1, 24
	MOVO X2, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x07 // PSLLD xmm2, 7
	POR X1, X2
	MOVO X2, 384(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x19 // PSRLD xmm4, 25
	MOVO X3, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x06 // PSLLD xmm3, 6
	POR X4, X3
	MOVO X3, 400(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x1A // PSRLD xmm5, 26
	MOVO 432(AX), X6
	MOVO 448(AX), X7
	MOVO 464(AX), X8
	MOVO 480(AX), X9
	MOVO X6, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x05 // PSLLD xmm6, 5
	POR X5, X6
	MOVO X6, 416(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x1B // PSRLD xmm10, 27
	MOVO X7, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x04 // PSLLD xmm7, 4
	POR X10, X7
	MOVO X7, 432(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x1C // PSRLD xmm11, 28
	MOVO X8, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x03 // PSLLD xmm8, 3
	POR X11, X8
	MOVO X8, 448(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x1D // PSRLD xmm12, 29
	MOVO X9, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x02 // PSLLD xmm9, 2
	POR X12, X9
	MOVO X9, 464(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x1E // PSRLD xmm13, 30
	MOVO 496(AX), X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x01 // PSLLD xmm14, 1
	POR X13, X14
	MOVO X14, 480(BX)
	RET

// func pack32_32(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack32_32(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, 0(BX)
	MOVO X2, 16(BX)
	MOVO X3, 32(BX)
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	MOVO X4, 48(BX)
	MOVO X5, 64(BX)
	MOVO X6, 80(BX)
	MOVO X7, 96(BX)
	MOVO 112(AX), X8
	MOVO 128(AX), X9
	MOVO 144(AX), X10
	MOVO 160(AX), X11
	MOVO X8, 112(BX)
	MOVO X9, 128(BX)
	MOVO X10, 144(BX)
	MOVO X11, 160(BX)
	MOVO 176(AX), X12
	MOVO 192(AX), X13
	MOVO 208(AX), X14
	MOVO 224(AX), X15
	MOVO X12, 176(BX)
	MOVO X13, 192(BX)
	MOVO X14, 208(BX)
	MOVO X15, 224(BX)
	MOVO 240(AX), X0
	MOVO 256(AX), X1
	MOVO 272(AX), X2
	MOVO 288(AX), X3
	MOVO X0, 240(BX)
	MOVO X1, 256(BX)
	MOVO X2, 272(BX)
	MOVO X3, 288(BX)
	MOVO 304(AX), X4
	MOVO 320(AX), X5
	MOVO 336(AX), X6
	MOVO 352(AX), X7
	MOVO X4, 304(BX)
	MOVO X5, 320(BX)
	MOVO X6, 336(BX)
	MOVO X7, 352(BX)
	MOVO 368(AX), X8
	MOVO 384(AX), X9
	MOVO 400(AX), X10
	MOVO 416(AX), X11
	MOVO X8, 368(BX)
	MOVO X9, 384(BX)
	MOVO X10, 400(BX)
	MOVO X11, 416(BX)
	MOVO 432(AX), X12
	MOVO 448(AX), X13
	MOVO 464(AX), X14
	MOVO 480(AX), X15
	MOVO X12, 432(BX)
	MOVO X13, 448(BX)
	MOVO X14, 464(BX)
	MOVO X15, 480(BX)
	MOVO 496(AX), X0
	MOVO X0, 496(BX)
	RET

// func pack64_1(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_1(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $1, X2
	PSLLQ $2, X3
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	PSLLQ $3, X4
	PSLLQ $4, X5
	PSLLQ $5, X6
	PSLLQ $6, X7
	MOVO 112(AX), X8
	MOVO 128(AX), X9
	MOVO 144(AX), X10
	MOVO 160(AX), X11
	PSLLQ $7, X8
	PSLLQ $8, X9
	PSLLQ $9, X10
	PSLLQ $10, X11
	MOVO 176(AX), X12
	MOVO 192(AX), X13
	MOVO 208(AX), X14
	MOVO 224(AX), X15
	PSLLQ $11, X12
	PSLLQ $12, X13
	PSLLQ $13, X14
	PSLLQ $14, X15
	POR X1, X2
	POR X3, X4
	POR X5, X6
	POR X7, X8
	POR X9, X10
	POR X11, X12
	POR X13, X14
	POR X15, X2
	POR X4, X6
	POR X8, X10
	POR X12, X14
	POR X2, X6
	POR X10, X14
	POR X6, X14
	MOVO 240(AX), X0
	MOVO 256(AX), X1
	MOVO 272(AX), X3
	MOVO 288(AX), X5
	PSLLQ $15, X0
	PSLLQ $16, X1
	PSLLQ $17, X3
	PSLLQ $18, X5
	MOVO 304(AX), X7
	MOVO 320(AX), X9
	MOVO 336(AX), X11
	MOVO 352(AX), X13
	PSLLQ $19, X7
	PSLLQ $20, X9
	PSLLQ $21, X11
	PSLLQ $22, X13
	MOVO 368(AX), X15
	MOVO 384(AX), X4
	MOVO 400(AX), X8
	MOVO 416(AX), X12
	PSLLQ $23, X15
	PSLLQ $24, X4
	PSLLQ $25, X8
	PSLLQ $26, X12
	POR X14, X0
	POR X1, X3
	POR X5, X7
	POR X9, X11
	POR X13, X15
	POR X4, X8
	POR X12, X0
	POR X3, X7
	POR X11, X15
	POR X8, X0
	POR X7, X15
	POR X0, X15
	MOVO 432(AX), X2
	MOVO 448(AX), X10
	MOVO 464(AX), X6
	MOVO 480(AX), X14
	PSLLQ $27, X2
	PSLLQ $28, X10
	PSLLQ $29, X6
	PSLLQ $30, X14
	MOVO 496(AX), X1
	MOVO 512(AX), X5
	MOVO 528(AX), X9
	MOVO 544(AX), X13
	PSLLQ $31, X1
	PSLLQ $32, X5
	PSLLQ $33, X9
	PSLLQ $34, X13
	MOVO 560(AX), X4
	MOVO 576(AX), X12
	MOVO 592(AX), X3
	MOVO 608(AX), X11
	PSLLQ $35, X4
	PSLLQ $36, X12
	PSLLQ $37, X3
	PSLLQ $38, X11
	POR X15, X2
	POR X10, X6
	POR X14, X1
	POR X5, X9
	POR X13, X4
	POR X12, X3
	POR X11, X2
	POR X6, X1
	POR X9, X4
	POR X3, X2
	POR X1, X4
	POR X2, X4
	MOVO 624(AX), X8
	MOVO 640(AX), X7
	MOVO 656(AX), X0
	MOVO 672(AX), X15
	PSLLQ $39, X8
	PSLLQ $40, X7
	PSLLQ $41, X0
	PSLLQ $42, X15
	MOVO 688(AX), X10
	MOVO 704(AX), X14
	MOVO 720(AX), X5
	MOVO 736(AX), X13
	PSLLQ $43, X10
	PSLLQ $44, X14
	PSLLQ $45, X5
	PSLLQ $46, X13
	MOVO 752(AX), X12
	MOVO 768(AX), X11
	MOVO 784(AX), X6
	MOVO 800(AX), X9
	PSLLQ $47, X12
	PSLLQ $48, X11
	PSLLQ $49, X6
	PSLLQ $50, X9
	POR X4, X8
	POR X7, X0
	POR X15, X10
	POR X14, X5
	POR X13, X12
	POR X11, X6
	POR X9, X8
	POR X0, X10
	POR X5, X12
	POR X6, X8
	POR X10, X12
	POR X8, X12
	MOVO 816(AX), X3
	MOVO 832(AX), X1
	MOVO 848(AX), X2
	MOVO 864(AX), X4
	PSLLQ $51, X3
	PSLLQ $52, X1
	PSLLQ $53, X2
	PSLLQ $54, X4
	MOVO 880(AX), X7
	MOVO 896(AX), X15
	MOVO 912(AX), X14
	MOVO 928(AX), X13
	PSLLQ $55, X7
	PSLLQ $56, X15
	PSLLQ $57, X14
	PSLLQ $58, X13
	MOVO 944(AX), X11
	MOVO 960(AX), X9
	MOVO 976(AX), X0
	MOVO 992(AX), X5
	PSLLQ $59, X11
	PSLLQ $60, X9
	PSLLQ $61, X0
	PSLLQ $62, X5
	POR X12, X3
	POR X1, X2
	POR X4, X7
	POR X15, X14
	POR X13, X11
	POR X9, X0
	POR X5, X3
	POR X2, X7
	POR X14, X11
	POR X0, X3
	POR X7, X11
	POR X3, X11
	MOVO 1008(AX), X6
	PSLLQ $63, X6
	POR X11, X6
	MOVO X6, 0(BX)
	RET

// func pack64_2(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_2(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $2, X2
	PSLLQ $4, X3
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	PSLLQ $6, X4
	PSLLQ $8, X5
	PSLLQ $10, X6
	PSLLQ $12, X7
	MOVO 112(AX), X8
	MOVO 128(AX), X9
	MOVO 144(AX), X10
	MOVO 160(AX), X11
	PSLLQ $14, X8
	PSLLQ $16, X9
	PSLLQ $18, X10
	PSLLQ $20, X11
	MOVO 176(AX), X12
	MOVO 192(AX), X13
	MOVO 208(AX), X14
	MOVO 224(AX), X15
	PSLLQ $22, X12
	PSLLQ $24, X13
	PSLLQ $26, X14
	PSLLQ $28, X15
	POR X1, X2
	POR X3, X4
	POR X5, X6
	POR X7, X8
	POR X9, X10
	POR X11, X12
	POR X13, X14
	POR X15, X2
	POR X4, X6
	POR X8, X10
	POR X12, X14
	POR X2, X6
	POR X10, X14
	POR X6, X14
	MOVO 240(AX), X0
	MOVO 256(AX), X1
	MOVO 272(AX), X3
	MOVO 288(AX), X5
	PSLLQ $30, X0
	PSLLQ $32, X1
	PSLLQ $34, X3
	PSLLQ $36, X5
	MOVO 304(AX), X7
	MOVO 320(AX), X9
	MOVO 336(AX), X11
	MOVO 352(AX), X13
	PSLLQ $38, X7
	PSLLQ $40, X9
	PSLLQ $42, X11
	PSLLQ $44, X13
	MOVO 368(AX), X15
	MOVO 384(AX), X4
	MOVO 400(AX), X8
	MOVO 416(AX), X12
	PSLLQ $46, X15
	PSLLQ $48, X4
	PSLLQ $50, X8
	PSLLQ $52, X12
	POR X14, X0
	POR X1, X3
	POR X5, X7
	POR X9, X11
	POR X13, X15
	POR X4, X8
	POR X12, X0
	POR X3, X7
	POR X11, X15
	POR X8, X0
	POR X7, X15
	POR X0, X15
	MOVO 432(AX), X2
	MOVO 448(AX), X10
	MOVO 464(AX), X6
	MOVO 480(AX), X14
	PSLLQ $54, X2
	PSLLQ $56, X10
	PSLLQ $58, X6
	PSLLQ $60, X14
	MOVO 496(AX), X1
	MOVO 512(AX), X5
	MOVO 528(AX), X9
	MOVO 544(AX), X13
	PSLLQ $62, X1
	POR X15, X2
	POR X10, X6
	POR X14, X1
	POR X2, X6
	POR X1, X6
	MOVO X6, 0(BX)
	PSLLQ $2, X9
	PSLLQ $4, X13
	MOVO 560(AX), X4
	MOVO 576(AX), X12
	MOVO 592(AX), X3
	MOVO 608(AX), X11
	PSLLQ $6, X4
	PSLLQ $8, X12
	PSLLQ $10, X3
	PSLLQ $12, X11
	MOVO 624(AX), X8
	MOVO 640(AX), X7
	MOVO 656(AX), X0
	MOVO 672(AX), X15
	PSLLQ $14, X8
	PSLLQ $16, X7
	PSLLQ $18, X0
	PSLLQ $20, X15
	MOVO 688(AX), X10
	MOVO 704(AX), X14
	MOVO 720(AX), X2
	MOVO 736(AX), X1
	PSLLQ $22, X10
	PSLLQ $24, X14
	PSLLQ $26, X2
	PSLLQ $28, X1
	POR X5, X9
	POR X13, X4
	POR X12, X3
	POR X11, X8
	POR X7, X0
	POR X15, X10
	POR X14, X2
	POR X1, X9
	POR X4, X3
	POR X8, X0
	POR X10, X2
	POR X9, X3
	POR X0, X2
	POR X3, X2
	MOVO 752(AX), X6
	MOVO 768(AX), X5
	MOVO 784(AX), X13
	MOVO 800(AX), X12
	PSLLQ $30, X6
	PSLLQ $32, X5
	PSLLQ $34, X13
	PSLLQ $36, X12
	MOVO 816(AX), X11
	MOVO 832(AX), X7
	MOVO 848(AX), X15
	MOVO 864(AX), X14
	PSLLQ $38, X11
	PSLLQ $40, X7
	PSLLQ $42, X15
	PSLLQ $44, X14
	MOVO 880(AX), X1
	MOVO 896(AX), X4
	MOVO 912(AX), X8
	MOVO 928(AX), X10
	PSLLQ $46, X1
	PSLLQ $48, X4
	PSLLQ $50, X8
	PSLLQ $52, X10
	POR X2, X6
	POR X5, X13
	POR X12, X11
	POR X7, X15
	POR X14, X1
	POR X4, X8
	POR X10, X6
	POR X13, X11
	POR X15, X1
	POR X8, X6
	POR X11, X1
	POR X6, X1
	MOVO 944(AX), X9
	MOVO 960(AX), X0
	MOVO 976(AX), X3
	MOVO 992(AX), X2
	PSLLQ $54, X9
	PSLLQ $56, X0
	PSLLQ $58, X3
	PSLLQ $60, X2
	MOVO 1008(AX), X5
	PSLLQ $62, X5
	POR X1, X9
	POR X0, X3
	POR X2, X5
	POR X9, X3
	POR X5, X3
	MOVO X3, 16(BX)
	RET

// func pack64_3(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_3(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $3, X2
	PSLLQ $6, X3
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	PSLLQ $9, X4
	PSLLQ $12, X5
	PSLLQ $15, X6
	PSLLQ $18, X7
	MOVO 112(AX), X8
	MOVO 128(AX), X9
	MOVO 144(AX), X10
	MOVO 160(AX), X11
	PSLLQ $21, X8
	PSLLQ $24, X9
	PSLLQ $27, X10
	PSLLQ $30, X11
	MOVO 176(AX), X12
	MOVO 192(AX), X13
	MOVO 208(AX), X14
	MOVO 224(AX), X15
	PSLLQ $33, X12
	PSLLQ $36, X13
	PSLLQ $39, X14
	PSLLQ $42, X15
	POR X1, X2
	POR X3, X4
	POR X5, X6
	POR X7, X8
	POR X9, X10
	POR X11, X12
	POR X13, X14
	POR X15, X2
	POR X4, X6
	POR X8, X10
	POR X12, X14
	POR X2, X6
	POR X10, X14
	POR X6, X14
	MOVO 240(AX), X0
	MOVO 256(AX), X1
	MOVO 272(AX), X3
	MOVO 288(AX), X5
	PSLLQ $45, X0
	PSLLQ $48, X1
	PSLLQ $51, X3
	PSLLQ $54, X5
	MOVO 304(AX), X7
	MOVO 320(AX), X9
	MOVO 336(AX), X11
	MOVO 352(AX), X13
	PSLLQ $57, X7
	PSLLQ $60, X9
	MOVO X11, X15
	PSLLQ $63, X11
	POR X14, X0
	POR X1, X3
	POR X5, X7
	POR X9, X11
	POR X0, X3
	POR X7, X11
	POR X3, X11
	MOVO X11, 0(BX)
	PSRLQ $1, X15
	PSLLQ $2, X13
	MOVO 368(AX), X4
	MOVO 384(AX), X8
	MOVO 400(AX), X12
	MOVO 416(AX), X2
	PSLLQ $5, X4
	PSLLQ $8, X8
	PSLLQ $11, X12
	PSLLQ $14, X2
	MOVO 432(AX), X10
	MOVO 448(AX), X6
	MOVO 464(AX), X14
	MOVO 480(AX), X1
	PSLLQ $17, X10
	PSLLQ $20, X6
	PSLLQ $23, X14
	PSLLQ $26, X1
	MOVO 496(AX), X5
	MOVO 512(AX), X9
	MOVO 528(AX), X0
	MOVO 544(AX), X7
	PSLLQ $29, X5
	PSLLQ $32, X9
	PSLLQ $35, X0
	PSLLQ $38, X7
	POR X15, X13
	POR X4, X8
	POR X12, X2
	POR X10, X6
	POR X14, X1
	POR X5, X9
	POR X0, X7
	POR X13, X8
	POR X2, X6
	POR X1, X9
	POR X7, X8
	POR X6, X9
	POR X8, X9
	MOVO 560(AX), X3
	MOVO 576(AX), X11
	MOVO 592(AX), X15
	MOVO 608(AX), X4
	PSLLQ $41, X3
	PSLLQ $44, X11
	PSLLQ $47, X15
	PSLLQ $50, X4
	MOVO 624(AX), X12
	MOVO 640(AX), X10
	MOVO 656(AX), X14
	MOVO 672(AX), X5
	PSLLQ $53, X12
	PSLLQ $56, X10
	PSLLQ $59, X14
	MOVO X5, X0
	PSLLQ $62, X5
	POR X9, X3
	POR X11, X15
	POR X4, X12
	POR X10, X14
	POR X5, X3
	POR X15, X12
	POR X14, X3
	POR X12, X3
	MOVO X3, 16(BX)
	PSRLQ $2, X0
	MOVO 688(AX), X13
	MOVO 704(AX), X2
	MOVO 720(AX), X1
	MOVO 736(AX), X7
	PSLLQ $1, X13
	PSLLQ $4, X2
	PSLLQ $7, X1
	PSLLQ $10, X7
	MOVO 752(AX), X6
	MOVO 768(AX), X8
	MOVO 784(AX), X9
	MOVO 800(AX), X11
	PSLLQ $13, X6
	PSLLQ $16, X8
	PSLLQ $19, X9
	PSLLQ $22, X11
	MOVO 816(AX), X4
	MOVO 832(AX), X10
	MOVO 848(AX), X5
	MOVO 864(AX), X15
	PSLLQ $25, X4
	PSLLQ $28, X10
	PSLLQ $31, X5
	PSLLQ $34, X15
	POR X0, X13
	POR X2, X1
	POR X7, X6
	POR X8, X9
	POR X11, X4
	POR X10, X5
	POR X15, X13
	POR X1, X6
	POR X9, X4
	POR X5, X13
	POR X6, X4
	POR X13, X4
	MOVO 880(AX), X14
	MOVO 896(AX), X12
	MOVO 912(AX), X3
	MOVO 928(AX), X0
	PSLLQ $37, X14
	PSLLQ $40, X12
	PSLLQ $43, X3
	PSLLQ $46, X0
	MOVO 944(AX), X2
	MOVO 960(AX), X7
	MOVO 976(AX), X8
	MOVO 992(AX), X11
	PSLLQ $49, X2
	PSLLQ $52, X7
	PSLLQ $55, X8
	PSLLQ $58, X11
	MOVO 1008(AX), X10
	PSLLQ $61, X10
	POR X4, X14
	POR X12, X3
	POR X0, X2
	POR X7, X8
	POR X11, X10
	POR X14, X3
	POR X2, X8
	POR X10, X3
	POR X8, X3
	MOVO X3, 32(BX)
	RET

// func pack64_4(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_4(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $4, X2
	PSLLQ $8, X3
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	PSLLQ $12, X4
	PSLLQ $16, X5
	PSLLQ $20, X6
	PSLLQ $24, X7
	MOVO 112(AX), X8
	MOVO 128(AX), X9
	MOVO 144(AX), X10
	MOVO 160(AX), X11
	PSLLQ $28, X8
	PSLLQ $32, X9
	PSLLQ $36, X10
	PSLLQ $40, X11
	MOVO 176(AX), X12
	MOVO 192(AX), X13
	MOVO 208(AX), X14
	MOVO 224(AX), X15
	PSLLQ $44, X12
	PSLLQ $48, X13
	PSLLQ $52, X14
	PSLLQ $56, X15
	POR X1, X2
	POR X3, X4
	POR X5, X6
	POR X7, X8
	POR X9, X10
	POR X11, X12
	POR X13, X14
	POR X15, X2
	POR X4, X6
	POR X8, X10
	POR X12, X14
	POR X2, X6
	POR X10, X14
	POR X6, X14
	MOVO 240(AX), X0
	MOVO 256(AX), X1
	MOVO 272(AX), X3
	MOVO 288(AX), X5
	PSLLQ $60, X0
	POR X14, X0
	MOVO X0, 0(BX)
	PSLLQ $4, X3
	PSLLQ $8, X5
	MOVO 304(AX), X7
	MOVO 320(AX), X9
	MOVO 336(AX), X11
	MOVO 352(AX), X13
	PSLLQ $12, X7
	PSLLQ $16, X9
	PSLLQ $20, X11
	PSLLQ $24, X13
	MOVO 368(AX), X15
	MOVO 384(AX), X4
	MOVO 400(AX), X8
	MOVO 416(AX), X12
	PSLLQ $28, X15
	PSLLQ $32, X4
	PSLLQ $36, X8
	PSLLQ $40, X12
	MOVO 432(AX), X2
	MOVO 448(AX), X10
	MOVO 464(AX), X6
	MOVO 480(AX), X14
	PSLLQ $44, X2
	PSLLQ $48, X10
	PSLLQ $52, X6
	PSLLQ $56, X14
	POR X1, X3
	POR X5, X7
	POR X9, X11
	POR X13, X15
	POR X4, X8
	POR X12, X2
	POR X10, X6
	POR X14, X3
	POR X7, X11
	POR X15, X8
	POR X2, X6
	POR X3, X11
	POR X8, X6
	POR X11, X6
	MOVO 496(AX), X0
	MOVO 512(AX), X1
	MOVO 528(AX), X5
	MOVO 544(AX), X9
	PSLLQ $60, X0
	POR X6, X0
	MOVO X0, 16(BX)
	PSLLQ $4, X5
	PSLLQ $8, X9
	MOVO 560(AX), X13
	MOVO 576(AX), X4
	MOVO 592(AX), X12
	MOVO 608(AX), X10
	PSLLQ $12, X13
	PSLLQ $16, X4
	PSLLQ $20, X12
	PSLLQ $24, X10
	MOVO 624(AX), X14
	MOVO 640(AX), X7
	MOVO 656(AX), X15
	MOVO 672(AX), X2
	PSLLQ $28, X14
	PSLLQ $32, X7
	PSLLQ $36, X15
	PSLLQ $40, X2
	MOVO 688(AX), X3
	MOVO 704(AX), X8
	MOVO 720(AX), X11
	MOVO 736(AX), X6
	PSLLQ $44, X3
	PSLLQ $48, X8
	PSLLQ $52, X11
	PSLLQ $56, X6
	POR X1, X5
	POR X9, X13
	POR X4, X12
	POR X10, X14
	POR X7, X15
	POR X2, X3
	POR X8, X11
	POR X6, X5
	POR X13, X12
	POR X14, X15
	POR X3, X11
	POR X5, X12
	POR X15, X11
	POR X12, X11
	MOVO 752(AX), X0
	MOVO 768(AX), X1
	MOVO 784(AX), X9
	MOVO 800(AX), X4
	PSLLQ $60, X0
	POR X11, X0
	MOVO X0, 32(BX)
	PSLLQ $4, X9
	PSLLQ $8, X4
	MOVO 816(AX), X10
	MOVO 832(AX), X7
	MOVO 848(AX), X2
	MOVO 864(AX), X8
	PSLLQ $12, X10
	PSLLQ $16, X7
	PSLLQ $20, X2
	PSLLQ $24, X8
	MOVO 880(AX), X6
	MOVO 896(AX), X13
	MOVO 912(AX), X14
	MOVO 928(AX), X3
	PSLLQ $28, X6
	PSLLQ $32, X13
	PSLLQ $36, X14
	PSLLQ $40, X3
	MOVO 944(AX), X5
	MOVO 960(AX), X15
	MOVO 976(AX), X12
	MOVO 992(AX), X11
	PSLLQ $44, X5
	PSLLQ $48, X15
	PSLLQ $52, X12
	PSLLQ $56, X11
	POR X1, X9
	POR X4, X10
	POR X7, X2
	POR X8, X6
	POR X13, X14
	POR X3, X5
	POR X15, X12
	POR X11, X9
	POR X10, X2
	POR X6, X14
	POR X5, X12
	POR X9, X2
	POR X14, X12
	POR X2, X12
	MOVO 1008(AX), X0
	PSLLQ $60, X0
	POR X12, X0
	MOVO X0, 48(BX)
	RET

// func pack64_5(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_5(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $5, X2
	PSLLQ $10, X3
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	PSLLQ $15, X4
	PSLLQ $20, X5
	PSLLQ $25, X6
	PSLLQ $30, X7
	MOVO 112(AX), X8
	MOVO 128(AX), X9
	MOVO 144(AX), X10
	MOVO 160(AX), X11
	PSLLQ $35, X8
	PSLLQ $40, X9
	PSLLQ $45, X10
	PSLLQ $50, X11
	MOVO 176(AX), X12
	MOVO 192(AX), X13
	MOVO 208(AX), X14
	MOVO 224(AX), X15
	PSLLQ $55, X12
	MOVO X13, X0
	PSLLQ $60, X13
	POR X1, X2
	POR X3, X4
	POR X5, X6
	POR X7, X8
	POR X9, X10
	POR X11, X12
	POR X13, X2
	POR X4, X6
	POR X8, X10
	POR X12, X2
	POR X6, X10
	POR X2, X10
	MOVO X10, 0(BX)
	PSRLQ $4, X0
	PSLLQ $1, X14
	PSLLQ $6, X15
	MOVO 240(AX), X1
	MOVO 256(AX), X3
	MOVO 272(AX), X5
	MOVO 288(AX), X7
	PSLLQ $11, X1
	PSLLQ $16, X3
	PSLLQ $21, X5
	PSLLQ $26, X7
	MOVO 304(AX), X9
	MOVO 320(AX), X11
	MOVO 336(AX), X13
	MOVO 352(AX), X4
	PSLLQ $31, X9
	PSLLQ $36, X11
	PSLLQ $41, X13
	PSLLQ $46, X4
	MOVO 368(AX), X8
	MOVO 384(AX), X12
	MOVO 400(AX), X6
	MOVO 416(AX), X2
	PSLLQ $51, X8
	PSLLQ $56, X12
	MOVO X6, X10
	PSLLQ $61, X6
	POR X0, X14
	POR X15, X1
	POR X3, X5
	POR X7, X9
	POR X11, X13
	POR X4, X8
	POR X12, X6
	POR X14, X1
	POR X5, X9
	POR X13, X8
	POR X6, X1
	POR X9, X8
	POR X1, X8
	MOVO X8, 16(BX)
	PSRLQ $3, X10
	PSLLQ $2, X2
	MOVO 432(AX), X0
	MOVO 448(AX), X15
	MOVO 464(AX), X3
	MOVO 480(AX), X7
	PSLLQ $7, X0
	PSLLQ $12, X15
	PSLLQ $17, X3
	PSLLQ $22, X7
	MOVO 496(AX), X11
	MOVO 512(AX), X4
	MOVO 528(AX), X12
	MOVO 544(AX), X14
	PSLLQ $27, X11
	PSLLQ $32, X4
	PSLLQ $37, X12
	PSLLQ $42, X14
	MOVO 560(AX), X5
	MOVO 576(AX), X13
	MOVO 592(AX), X6
	MOVO 608(AX), X9
	PSLLQ $47, X5
	PSLLQ $52, X13
	PSLLQ $57, X6
	MOVO X9, X1
	PSLLQ $62, X9
	POR X10, X2
	POR X0, X15
	POR X3, X7
	POR X11, X4
	POR X12, X14
	POR X5, X13
	POR X6, X9
	POR X2, X15
	POR X7, X4
	POR X14, X13
	POR X9, X15
	POR X4, X13
	POR X15, X13
	MOVO X13, 32(BX)
	PSRLQ $2, X1
	MOVO 624(AX), X8
	MOVO 640(AX), X10
	MOVO 656(AX), X0
	MOVO 672(AX), X3
	PSLLQ $3, X8
	PSLLQ $8, X10
	PSLLQ $13, X0
	PSLLQ $18, X3
	MOVO 688(AX), X11
	MOVO 704(AX), X12
	MOVO 720(AX), X5
	MOVO 736(AX), X6
	PSLLQ $23, X11
	PSLLQ $28, X12
	PSLLQ $33, X5
	PSLLQ $38, X6
	MOVO 752(AX), X2
	MOVO 768(AX), X7
	MOVO 784(AX), X14
	MOVO 800(AX), X9
	PSLLQ $43, X2
	PSLLQ $48, X7
	PSLLQ $53, X14
	PSLLQ $58, X9
	POR X1, X8
	POR X10, X0
	POR X3, X11
	POR X12, X5
	POR X6, X2
	POR X7, X14
	POR X9, X8
	POR X0, X11
	POR X5, X2
	POR X14, X8
	POR X11, X2
	POR X8, X2
	MOVO 816(AX), X4
	MOVO 832(AX), X15
	MOVO 848(AX), X13
	MOVO 864(AX), X1
	MOVO X4, X10
	PSLLQ $63, X4
	POR X2, X4
	MOVO X4, 48(BX)
	PSRLQ $1, X10
	PSLLQ $4, X15
	PSLLQ $9, X13
	PSLLQ $14, X1
	MOVO 880(AX), X3
	MOVO 896(AX), X12
	MOVO 912(AX), X6
	MOVO 928(AX), X7
	PSLLQ $19, X3
	PSLLQ $24, X12
	PSLLQ $29, X6
	PSLLQ $34, X7
	MOVO 944(AX), X9
	MOVO 960(AX), X0
	MOVO 976(AX), X5
	MOVO 992(AX), X14
	PSLLQ $39, X9
	PSLLQ $44, X0
	PSLLQ $49, X5
	PSLLQ $54, X14
	MOVO 1008(AX), X11
	PSLLQ $59, X11
	POR X10, X15
	POR X13, X1
	POR X3, X12
	POR X6, X7
	POR X9, X0
	POR X5, X14
	POR X11, X15
	POR X1, X12
	POR X7, X0
	POR X14, X15
	POR X12, X0
	POR X15, X0
	MOVO X0, 64(BX)
	RET

// func pack64_6(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_6(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $6, X2
	PSLLQ $12, X3
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	PSLLQ $18, X4
	PSLLQ $24, X5
	PSLLQ $30, X6
	PSLLQ $36, X7
	MOVO 112(AX), X8
	MOVO 128(AX), X9
	MOVO 144(AX), X10
	MOVO 160(AX), X11
	PSLLQ $42, X8
	PSLLQ $48, X9
	PSLLQ $54, X10
	MOVO X11, X12
	PSLLQ $60, X11
	POR X1, X2
	POR X3, X4
	POR X5, X6
	POR X7, X8
	POR X9, X10
	POR X11, X2
	POR X4, X6
	POR X8, X10
	POR X2, X6
	POR X10, X6
	MOVO X6, 0(BX)
	PSRLQ $4, X12
	MOVO 176(AX), X13
	MOVO 192(AX), X14
	MOVO 208(AX), X15
	MOVO 224(AX), X0
	PSLLQ $2, X13
	PSLLQ $8, X14
	PSLLQ $14, X15
	PSLLQ $20, X0
	MOVO 240(AX), X1
	MOVO 256(AX), X3
	MOVO 272(AX), X5
	MOVO 288(AX), X7
	PSLLQ $26, X1
	PSLLQ $32, X3
	PSLLQ $38, X5
	PSLLQ $44, X7
	MOVO 304(AX), X9
	MOVO 320(AX), X11
	MOVO 336(AX), X4
	MOVO 352(AX), X8
	PSLLQ $50, X9
	PSLLQ $56, X11
	MOVO X4, X2
	PSLLQ $62, X4
	POR X12, X13
	POR X14, X15
	POR X0, X1
	POR X3, X5
	POR X7, X9
	POR X11, X4
	POR X13, X15
	POR X1, X5
	POR X9, X4
	POR X15, X5
	POR X4, X5
	MOVO X5, 16(BX)
	PSRLQ $2, X2
	PSLLQ $4, X8
	MOVO 368(AX), X10
	MOVO 384(AX), X6
	MOVO 400(AX), X12
	MOVO 416(AX), X14
	PSLLQ $10, X10
	PSLLQ $16, X6
	PSLLQ $22, X12
	PSLLQ $28, X14
	MOVO 432(AX), X0
	MOVO 448(AX), X3
	MOVO 464(AX), X7
	MOVO 480(AX), X11
	PSLLQ $34, X0
	PSLLQ $40, X3
	PSLLQ $46, X7
	PSLLQ $52, X11
	MOVO 496(AX), X13
	MOVO 512(AX), X1
	MOVO 528(AX), X9
	MOVO 544(AX), X15
	PSLLQ $58, X13
	POR X2, X8
	POR X10, X6
	POR X12, X14
	POR X0, X3
	POR X7, X11
	POR X13, X8
	POR X6, X14
	POR X3, X11
	POR X8, X14
	POR X11, X14
	MOVO X14, 32(BX)
	PSLLQ $6, X9
	PSLLQ $12, X15
	MOVO 560(AX), X4
	MOVO 576(AX), X5
	MOVO 592(AX), X2
	MOVO 608(AX), X10
	PSLLQ $18, X4
	PSLLQ $24, X5
	PSLLQ $30, X2
	PSLLQ $36, X10
	MOVO 624(AX), X12
	MOVO 640(AX), X0
	MOVO 656(AX), X7
	MOVO 672(AX), X13
	PSLLQ $42, X12
	PSLLQ $48, X0
	PSLLQ $54, X7
	MOVO X13, X6
	PSLLQ $60, X13
	POR X1, X9
	POR X15, X4
	POR X5, X2
	POR X10, X12
	POR X0, X7
	POR X13, X9
	POR X4, X2
	POR X12, X7
	POR X9, X2
	POR X7, X2
	MOVO X2, 48(BX)
	PSRLQ $4, X6
	MOVO 688(AX), X3
	MOVO 704(AX), X8
	MOVO 720(AX), X11
	MOVO 736(AX), X14
	PSLLQ $2, X3
	PSLLQ $8, X8
	PSLLQ $14, X11
	PSLLQ $20, X14
	MOVO 752(AX), X1
	MOVO 768(AX), X15
	MOVO 784(AX), X5
	MOVO 800(AX), X10
	PSLLQ $26, X1
	PSLLQ $32, X15
	PSLLQ $38, X5
	PSLLQ $44, X10
	MOVO 816(AX), X0
	MOVO 832(AX), X13
	MOVO 848(AX), X4
	MOVO 864(AX), X12
	PSLLQ $50, X0
	PSLLQ $56, X13
	MOVO X4, X9
	PSLLQ $62, X4
	POR X6, X3
	POR X8, X11
	POR X14, X1
	POR X15, X5
	POR X10, X0
	POR X13, X4
	POR X3, X11
	POR X1, X5
	POR X0, X4
	POR X11, X5
	POR X4, X5
	MOVO X5, 64(BX)
	PSRLQ $2, X9
	PSLLQ $4, X12
	MOVO 880(AX), X7
	MOVO 896(AX), X2
	MOVO 912(AX), X6
	MOVO 928(AX), X8
	PSLLQ $10, X7
	PSLLQ $16, X2
	PSLLQ $22, X6
	PSLLQ $28, X8
	MOVO 944(AX), X14
	MOVO 960(AX), X15
	MOVO 976(AX), X10
	MOVO 992(AX), X13
	PSLLQ $34, X14
	PSLLQ $40, X15
	PSLLQ $46, X10
	PSLLQ $52, X13
	MOVO 1008(AX), X3
	PSLLQ $58, X3
	POR X9, X12
	POR X7, X2
	POR X6, X8
	POR X14, X15
	POR X10, X13
	POR X3, X12
	POR X2, X8
	POR X15, X13
	POR X12, X8
	POR X13, X8
	MOVO X8, 80(BX)
	RET

// func pack64_7(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_7(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $7, X2
	PSLLQ $14, X3
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	PSLLQ $21, X4
	PSLLQ $28, X5
	PSLLQ $35, X6
	PSLLQ $42, X7
	MOVO 112(AX), X8
	MOVO 128(AX), X9
	MOVO 144(AX), X10
	MOVO 160(AX), X11
	PSLLQ $49, X8
	PSLLQ $56, X9
	MOVO X10, X12
	PSLLQ $63, X10
	POR X1, X2
	POR X3, X4
	POR X5, X6
	POR X7, X8
	POR X9, X10
	POR X2, X4
	POR X6, X8
	POR X10, X4
	POR X8, X4
	MOVO X4, 0(BX)
	PSRLQ $1, X12
	PSLLQ $6, X11
	MOVO 176(AX), X13
	MOVO 192(AX), X14
	MOVO 208(AX), X15
	MOVO 224(AX), X0
	PSLLQ $13, X13
	PSLLQ $20, X14
	PSLLQ $27, X15
	PSLLQ $34, X0
	MOVO 240(AX), X1
	MOVO 256(AX), X3
	MOVO 272(AX), X5
	MOVO 288(AX), X7
	PSLLQ $41, X1
	PSLLQ $48, X3
	PSLLQ $55, X5
	MOVO X7, X9
	PSLLQ $62, X7
	POR X12, X11
	POR X13, X14
	POR X15, X0
	POR X1, X3
	POR X5, X7
	POR X11, X14
	POR X0, X3
	POR X7, X14
	POR X3, X14
	MOVO X14, 16(BX)
	PSRLQ $2, X9
	MOVO 304(AX), X2
	MOVO 320(AX), X6
	MOVO 336(AX), X10
	MOVO 352(AX), X8
	PSLLQ $5, X2
	PSLLQ $12, X6
	PSLLQ $19, X10
	PSLLQ $26, X8
	MOVO 368(AX), X4
	MOVO 384(AX), X12
	MOVO 400(AX), X13
	MOVO 416(AX), X15
	PSLLQ $33, X4
	PSLLQ $40, X12
	PSLLQ $47, X13
	PSLLQ $54, X15
	MOVO 432(AX), X1
	MOVO 448(AX), X5
	MOVO 464(AX), X11
	MOVO 480(AX), X0
	MOVO X1, X7
	PSLLQ $61, X1
	POR X9, X2
	POR X6, X10
	POR X8, X4
	POR X12, X13
	POR X15, X1
	POR X2, X10
	POR X4, X13
	POR X1, X10
	POR X13, X10
	MOVO X10, 32(BX)
	PSRLQ $3, X7
	PSLLQ $4, X5
	PSLLQ $11, X11
	PSLLQ $18, X0
	MOVO 496(AX), X3
	MOVO 512(AX), X14
	MOVO 528(AX), X9
	MOVO 544(AX), X6
	PSLLQ $25, X3
	PSLLQ $32, X14
	PSLLQ $39, X9
	PSLLQ $46, X6
	MOVO 560(AX), X8
	MOVO 576(AX), X12
	MOVO 592(AX), X15
	MOVO 608(AX), X2
	PSLLQ $53, X8
	MOVO X12, X4
	PSLLQ $60, X12
	POR X7, X5
	POR X11, X0
	POR X3, X14
	POR X9, X6
	POR X8, X12
	POR X5, X0
	POR X14, X6
	POR X12, X0
	POR X6, X0
	MOVO X0, 48(BX)
	PSRLQ $4, X4
	PSLLQ $3, X15
	PSLLQ $10, X2
	MOVO 624(AX), X1
	MOVO 640(AX), X13
	MOVO 656(AX), X10
	MOVO 672(AX), X7
	PSLLQ $17, X1
	PSLLQ $24, X13
	PSLLQ $31, X10
	PSLLQ $38, X7
	MOVO 688(AX), X11
	MOVO 704(AX), X3
	MOVO 720(AX), X9
	MOVO 736(AX), X8
	PSLLQ $45, X11
	PSLLQ $52, X3
	MOVO X9, X5
	PSLLQ $59, X9
	POR X4, X15
	POR X2, X1
	POR X13, X10
	POR X7, X11
	POR X3, X9
	POR X15, X1
	POR X10, X11
	POR X9, X1
	POR X11, X1
	MOVO X1, 64(BX)
	PSRLQ $5, X5
	PSLLQ $2, X8
	MOVO 752(AX), X14
	MOVO 768(AX), X12
	MOVO 784(AX), X6
	MOVO 800(AX), X0
	PSLLQ $9, X14
	PSLLQ $16, X12
	PSLLQ $23, X6
	PSLLQ $30, X0
	MOVO 816(AX), X4
	MOVO 832(AX), X2
	MOVO 848(AX), X13
	MOVO 864(AX), X7
	PSLLQ $37, X4
	PSLLQ $44, X2
	PSLLQ $51, X13
	MOVO X7, X3
	PSLLQ $58, X7
	POR X5, X8
	POR X14, X12
	POR X6, X0
	POR X4, X2
	POR X13, X7
	POR X8, X12
	POR X0, X2
	POR X7, X12
	POR X2, X12
	MOVO X12, 80(BX)
	PSRLQ $6, X3
	MOVO 880(AX), X15
	MOVO 896(AX), X10
	MOVO 912(AX), X9
	MOVO 928(AX), X11
	PSLLQ $1, X15
	PSLLQ $8, X10
	PSLLQ $15, X9
	PSLLQ $22, X11
	MOVO 944(AX), X1
	MOVO 960(AX), X5
	MOVO 976(AX), X14
	MOVO 992(AX), X6
	PSLLQ $29, X1
	PSLLQ $36, X5
	PSLLQ $43, X14
	PSLLQ $50, X6
	MOVO 1008(AX), X4
	PSLLQ $57, X4
	POR X3, X15
	POR X10, X9
	POR X11, X1
	POR X5, X14
	POR X6, X4
	POR X15, X9
	POR X1, X14
	POR X4, X9
	POR X14, X9
	MOVO X9, 96(BX)
	RET

// func pack64_8(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_8(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $8, X2
	PSLLQ $16, X3
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	PSLLQ $24, X4
	PSLLQ $32, X5
	PSLLQ $40, X6
	PSLLQ $48, X7
	MOVO 112(AX), X8
	MOVO 128(AX), X9
	MOVO 144(AX), X10
	MOVO 160(AX), X11
	PSLLQ $56, X8
	POR X1, X2
	POR X3, X4
	POR X5, X6
	POR X7, X8
	POR X2, X4
	POR X6, X8
	POR X4, X8
	MOVO X8, 0(BX)
	PSLLQ $8, X10
	PSLLQ $16, X11
	MOVO 176(AX), X12
	MOVO 192(AX), X13
	MOVO 208(AX), X14
	MOVO 224(AX), X15
	PSLLQ $24, X12
	PSLLQ $32, X13
	PSLLQ $40, X14
	PSLLQ $48, X15
	MOVO 240(AX), X0
	MOVO 256(AX), X1
	MOVO 272(AX), X3
	MOVO 288(AX), X5
	PSLLQ $56, X0
	POR X9, X10
	POR X11, X12
	POR X13, X14
	POR X15, X0
	POR X10, X12
	POR X14, X0
	POR X12, X0
	MOVO X0, 16(BX)
	PSLLQ $8, X3
	PSLLQ $16, X5
	MOVO 304(AX), X7
	MOVO 320(AX), X2
	MOVO 336(AX), X6
	MOVO 352(AX), X4
	PSLLQ $24, X7
	PSLLQ $32, X2
	PSLLQ $40, X6
	PSLLQ $48, X4
	MOVO 368(AX), X8
	MOVO 384(AX), X9
	MOVO 400(AX), X11
	MOVO 416(AX), X13
	PSLLQ $56, X8
	POR X1, X3
	POR X5, X7
	POR X2, X6
	POR X4, X8
	POR X3, X7
	POR X6, X8
	POR X7, X8
	MOVO X8, 32(BX)
	PSLLQ $8, X11
	PSLLQ $16, X13
	MOVO 432(AX), X15
	MOVO 448(AX), X10
	MOVO 464(AX), X14
	MOVO 480(AX), X12
	PSLLQ $24, X15
	PSLLQ $32, X10
	PSLLQ $40, X14
	PSLLQ $48, X12
	MOVO 496(AX), X0
	MOVO 512(AX), X1
	MOVO 528(AX), X5
	MOVO 544(AX), X2
	PSLLQ $56, X0
	POR X9, X11
	POR X13, X15
	POR X10, X14
	POR X12, X0
	POR X11, X15
	POR X14, X0
	POR X15, X0
	MOVO X0, 48(BX)
	PSLLQ $8, X5
	PSLLQ $16, X2
	MOVO 560(AX), X4
	MOVO 576(AX), X3
	MOVO 592(AX), X6
	MOVO 608(AX), X7
	PSLLQ $24, X4
	PSLLQ $32, X3
	PSLLQ $40, X6
	PSLLQ $48, X7
	MOVO 624(AX), X8
	MOVO 640(AX), X9
	MOVO 656(AX), X13
	MOVO 672(AX), X10
	PSLLQ $56, X8
	POR X1, X5
	POR X2, X4
	POR X3, X6
	POR X7, X8
	POR X5, X4
	POR X6, X8
	POR X4, X8
	MOVO X8, 64(BX)
	PSLLQ $8, X13
	PSLLQ $16, X10
	MOVO 688(AX), X12
	MOVO 704(AX), X11
	MOVO 720(AX), X14
	MOVO 736(AX), X15
	PSLLQ $24, X12
	PSLLQ $32, X11
	PSLLQ $40, X14
	PSLLQ $48, X15
	MOVO 752(AX), X0
	MOVO 768(AX), X1
	MOVO 784(AX), X2
	MOVO 800(AX), X3
	PSLLQ $56, X0
	POR X9, X13
	POR X10, X12
	POR X11, X14
	POR X15, X0
	POR X13, X12
	POR X14, X0
	POR X12, X0
	MOVO X0, 80(BX)
	PSLLQ $8, X2
	PSLLQ $16, X3
	MOVO 816(AX), X7
	MOVO 832(AX), X5
	MOVO 848(AX), X6
	MOVO 864(AX), X4
	PSLLQ $24, X7
	PSLLQ $32, X5
	PSLLQ $40, X6
	PSLLQ $48, X4
	MOVO 880(AX), X8
	MOVO 896(AX), X9
	MOVO 912(AX), X10
	MOVO 928(AX), X11
	PSLLQ $56, X8
	POR X1, X2
	POR X3, X7
	POR X5, X6
	POR X4, X8
	POR X2, X7
	POR X6, X8
	POR X7, X8
	MOVO X8, 96(BX)
	PSLLQ $8, X10
	PSLLQ $16, X11
	MOVO 944(AX), X15
	MOVO 960(AX), X13
	MOVO 976(AX), X14
	MOVO 992(AX), X12
	PSLLQ $24, X15
	PSLLQ $32, X13
	PSLLQ $40, X14
	PSLLQ $48, X12
	MOVO 1008(AX), X0
	PSLLQ $56, X0
	POR X9, X10
	POR X11, X15
	POR X13, X14
	POR X12, X0
	POR X10, X15
	POR X14, X0
	POR X15, X0
	MOVO X0, 112(BX)
	RET

// func pack64_9(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_9(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $9, X2
	PSLLQ $18, X3
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	PSLLQ $27, X4
	PSLLQ $36, X5
	PSLLQ $45, X6
	PSLLQ $54, X7
	MOVO 112(AX), X8
	MOVO 128(AX), X9
	MOVO 144(AX), X10
	MOVO 160(AX), X11
	MOVO X8, X12
	PSLLQ $63, X8
	POR X1, X2
	POR X3, X4
	POR X5, X6
	POR X7, X8
	POR X2, X4
	POR X6, X8
	POR X4, X8
	MOVO X8, 0(BX)
	PSRLQ $1, X12
	PSLLQ $8, X9
	PSLLQ $17, X10
	PSLLQ $26, X11
	MOVO 176(AX), X13
	MOVO 192(AX), X14
	MOVO 208(AX), X15
	MOVO 224(AX), X0
	PSLLQ $35, X13
	PSLLQ $44, X14
	PSLLQ $53, X15
	MOVO X0, X1
	PSLLQ $62, X0
	POR X12, X9
	POR X10, X11
	POR X13, X14
	POR X15, X0
	POR X9, X11
	POR X14, X0
	POR X11, X0
	MOVO X0, 16(BX)
	PSRLQ $2, X1
	MOVO 240(AX), X3
	MOVO 256(AX), X5
	MOVO 272(AX), X7
	MOVO 288(AX), X2
	PSLLQ $7, X3
	PSLLQ $16, X5
	PSLLQ $25, X7
	PSLLQ $34, X2
	MOVO 304(AX), X6
	MOVO 320(AX), X4
	MOVO 336(AX), X8
	MOVO 352(AX), X12
	PSLLQ $43, X6
	PSLLQ $52, X4
	MOVO X8, X10
	PSLLQ $61, X8
	POR X1, X3
	POR X5, X7
	POR X2, X6
	POR X4, X8
	POR X3, X7
	POR X6, X8
	POR X7, X8
	MOVO X8, 32(BX)
	PSRLQ $3, X10
	PSLLQ $6, X12
	MOVO 368(AX), X13
	MOVO 384(AX), X15
	MOVO 400(AX), X9
	MOVO 416(AX), X14
	PSLLQ $15, X13
	PSLLQ $24, X15
	PSLLQ $33, X9
	PSLLQ $42, X14
	MOVO 432(AX), X11
	MOVO 448(AX), X0
	MOVO 464(AX), X1
	MOVO 480(AX), X5
	PSLLQ $51, X11
	MOVO X0, X2
	PSLLQ $60, X0
	POR X10, X12
	POR X13, X15
	POR X9, X14
	POR X11, X0
	POR X12, X15
	POR X14, X0
	POR X15, X0
	MOVO X0, 48(BX)
	PSRLQ $4, X2
	PSLLQ $5, X1
	PSLLQ $14, X5
	MOVO 496(AX), X4
	MOVO 512(AX), X3
	MOVO 528(AX), X6
	MOVO 544(AX), X7
	PSLLQ $23, X4
	PSLLQ $32, X3
	PSLLQ $41, X6
	PSLLQ $50, X7
	MOVO 560(AX), X8
	MOVO 576(AX), X10
	MOVO 592(AX), X13
	MOVO 608(AX), X9
	MOVO X8, X11
	PSLLQ $59, X8
	POR X2, X1
	POR X5, X4
	POR X3, X6
	POR X7, X8
	POR X1, X4
	POR X6, X8
	POR X4, X8
	MOVO X8, 64(BX)
	PSRLQ $5, X11
	PSLLQ $4, X10
	PSLLQ $13, X13
	PSLLQ $22, X9
	MOVO 624(AX), X12
	MOVO 640(AX), X14
	MOVO 656(AX), X15
	MOVO 672(AX), X0
	PSLLQ $31, X12
	PSLLQ $40, X14
	PSLLQ $49, X15
	MOVO X0, X2
	PSLLQ $58, X0
	POR X11, X10
	POR X13, X9
	POR X12, X14
	POR X15, X0
	POR X10, X9
	POR X14, X0
	POR X9, X0
	MOVO X0, 80(BX)
	PSRLQ $6, X2
	MOVO 688(AX), X5
	MOVO 704(AX), X3
	MOVO 720(AX), X7
	MOVO 736(AX), X1
	PSLLQ $3, X5
	PSLLQ $12, X3
	PSLLQ $21, X7
	PSLLQ $30, X1
	MOVO 752(AX), X6
	MOVO 768(AX), X4
	MOVO 784(AX), X8
	MOVO 800(AX), X11
	PSLLQ $39, X6
	PSLLQ $48, X4
	MOVO X8, X13
	PSLLQ $57, X8
	POR X2, X5
	POR X3, X7
	POR X1, X6
	POR X4, X8
	POR X5, X7
	POR X6, X8
	POR X7, X8
	MOVO X8, 96(BX)
	PSRLQ $7, X13
	PSLLQ $2, X11
	MOVO 816(AX), X12
	MOVO 832(AX), X15
	MOVO 848(AX), X10
	MOVO 864(AX), X14
	PSLLQ $11, X12
	PSLLQ $20, X15
	PSLLQ $29, X10
	PSLLQ $38, X14
	MOVO 880(AX), X9
	MOVO 896(AX), X0
	MOVO 912(AX), X2
	MOVO 928(AX), X3
	PSLLQ $47, X9
	MOVO X0, X1
	PSLLQ $56, X0
	POR X13, X11
	POR X12, X15
	POR X10, X14
	POR X9, X0
	POR X11, X15
	POR X14, X0
	POR X15, X0
	MOVO X0, 112(BX)
	PSRLQ $8, X1
	PSLLQ $1, X2
	PSLLQ $10, X3
	MOVO 944(AX), X4
	MOVO 960(AX), X5
	MOVO 976(AX), X6
	MOVO 992(AX), X7
	PSLLQ $19, X4
	PSLLQ $28, X5
	PSLLQ $37, X6
	PSLLQ $46, X7
	MOVO 1008(AX), X8
	PSLLQ $55, X8
	POR X1, X2
	POR X3, X4
	POR X5, X6
	POR X7, X8
	POR X2, X4
	POR X6, X8
	POR X4, X8
	MOVO X8, 128(BX)
	RET

// func pack64_10(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_10(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $10, X2
	PSLLQ $20, X3
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	PSLLQ $30, X4
	PSLLQ $40, X5
	PSLLQ $50, X6
	MOVO X7, X8
	PSLLQ $60, X7
	POR X1, X2
	POR X3, X4
	POR X5, X6
	POR X7, X2
	POR X4, X6
	POR X2, X6
	MOVO X6, 0(BX)
	PSRLQ $4, X8
	MOVO 112(AX), X9
	MOVO 128(AX), X10
	MOVO 144(AX), X11
	MOVO 160(AX), X12
	PSLLQ $6, X9
	PSLLQ $16, X10
	PSLLQ $26, X11
	PSLLQ $36, X12
	MOVO 176(AX), X13
	MOVO 192(AX), X14
	MOVO 208(AX), X15
	MOVO 224(AX), X0
	PSLLQ $46, X13
	MOVO X14, X1
	PSLLQ $56, X14
	POR X8, X9
	POR X10, X11
	POR X12, X13
	POR X14, X9
	POR X11, X13
	POR X9, X13
	MOVO X13, 16(BX)
	PSRLQ $8, X1
	PSLLQ $2, X15
	PSLLQ $12, X0
	MOVO 240(AX), X3
	MOVO 256(AX), X5
	MOVO 272(AX), X7
	MOVO 288(AX), X4
	PSLLQ $22, X3
	PSLLQ $32, X5
	PSLLQ $42, X7
	PSLLQ $52, X4
	MOVO 304(AX), X2
	MOVO 320(AX), X6
	MOVO 336(AX), X8
	MOVO 352(AX), X10
	MOVO X2, X12
	PSLLQ $62, X2
	POR X1, X15
	POR X0, X3
	POR X5, X7
	POR X4, X2
	POR X15, X3
	POR X7, X2
	POR X3, X2
	MOVO X2, 32(BX)
	PSRLQ $2, X12
	PSLLQ $8, X6
	PSLLQ $18, X8
	PSLLQ $28, X10
	MOVO 368(AX), X14
	MOVO 384(AX), X11
	MOVO 400(AX), X9
	MOVO 416(AX), X13
	PSLLQ $38, X14
	PSLLQ $48, X11
	MOVO X9, X1
	PSLLQ $58, X9
	POR X12, X6
	POR X8, X10
	POR X14, X11
	POR X9, X6
	POR X10, X11
	POR X6, X11
	MOVO X11, 48(BX)
	PSRLQ $6, X1
	PSLLQ $4, X13
	MOVO 432(AX), X0
	MOVO 448(AX), X5
	MOVO 464(AX), X4
	MOVO 480(AX), X15
	PSLLQ $14, X0
	PSLLQ $24, X5
	PSLLQ $34, X4
	PSLLQ $44, X15
	MOVO 496(AX), X7
	MOVO 512(AX), X3
	MOVO 528(AX), X2
	MOVO 544(AX), X12
	PSLLQ $54, X7
	POR X1, X13
	POR X0, X5
	POR X4, X15
	POR X7, X13
	POR X5, X15
	POR X13, X15
	MOVO X15, 64(BX)
	PSLLQ $10, X2
	PSLLQ $20, X12
	MOVO 560(AX), X8
	MOVO 576(AX), X14
	MOVO 592(AX), X9
	MOVO 608(AX), X10
	PSLLQ $30, X8
	PSLLQ $40, X14
	PSLLQ $50, X9
	MOVO X10, X6
	PSLLQ $60, X10
	POR X3, X2
	POR X12, X8
	POR X14, X9
	POR X10, X2
	POR X8, X9
	POR X2, X9
	MOVO X9, 80(BX)
	PSRLQ $4, X6
	MOVO 624(AX), X11
	MOVO 640(AX), X1
	MOVO 656(AX), X0
	MOVO 672(AX), X4
	PSLLQ $6, X11
	PSLLQ $16, X1
	PSLLQ $26, X0
	PSLLQ $36, X4
	MOVO 688(AX), X7
	MOVO 704(AX), X5
	MOVO 720(AX), X13
	MOVO 736(AX), X15
	PSLLQ $46, X7
	MOVO X5, X3
	PSLLQ $56, X5
	POR X6, X11
	POR X1, X0
	POR X4, X7
	POR X5, X11
	POR X0, X7
	POR X11, X7
	MOVO X7, 96(BX)
	PSRLQ $8, X3
	PSLLQ $2, X13
	PSLLQ $12, X15
	MOVO 752(AX), X12
	MOVO 768(AX), X14
	MOVO 784(AX), X10
	MOVO 800(AX), X8
	PSLLQ $22, X12
	PSLLQ $32, X14
	PSLLQ $42, X10
	PSLLQ $52, X8
	MOVO 816(AX), X2
	MOVO 832(AX), X9
	MOVO 848(AX), X6
	MOVO 864(AX), X1
	MOVO X2, X4
	PSLLQ $62, X2
	POR X3, X13
	POR X15, X12
	POR X14, X10
	POR X8, X2
	POR X13, X12
	POR X10, X2
	POR X12, X2
	MOVO X2, 112(BX)
	PSRLQ $2, X4
	PSLLQ $8, X9
	PSLLQ $18, X6
	PSLLQ $28, X1
	MOVO 880(AX), X5
	MOVO 896(AX), X0
	MOVO 912(AX), X11
	MOVO 928(AX), X7
	PSLLQ $38, X5
	PSLLQ $48, X0
	MOVO X11, X3
	PSLLQ $58, X11
	POR X4, X9
	POR X6, X1
	POR X5, X0
	POR X11, X9
	POR X1, X0
	POR X9, X0
	MOVO X0, 128(BX)
	PSRLQ $6, X3
	PSLLQ $4, X7
	MOVO 944(AX), X15
	MOVO 960(AX), X14
	MOVO 976(AX), X8
	MOVO 992(AX), X13
	PSLLQ $14, X15
	PSLLQ $24, X14
	PSLLQ $34, X8
	PSLLQ $44, X13
	MOVO 1008(AX), X10
	PSLLQ $54, X10
	POR X3, X7
	POR X15, X14
	POR X8, X13
	POR X10, X7
	POR X14, X13
	POR X7, X13
	MOVO X13, 144(BX)
	RET

// func pack64_11(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_11(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $11, X2
	PSLLQ $22, X3
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	PSLLQ $33, X4
	PSLLQ $44, X5
	MOVO X6, X8
	PSLLQ $55, X6
	POR X1, X2
	POR X3, X4
	POR X5, X6
	POR X2, X4
	POR X6, X4
	MOVO X4, 0(BX)
	PSRLQ $9, X8
	PSLLQ $2, X7
	MOVO 112(AX), X9
	MOVO 128(AX), X10
	MOVO 144(AX), X11
	MOVO 160(AX), X12
	PSLLQ $13, X9
	PSLLQ $24, X10
	PSLLQ $35, X11
	PSLLQ $46, X12
	MOVO 176(AX), X13
	MOVO 192(AX), X14
	MOVO 208(AX), X15
	MOVO 224(AX), X0
	MOVO X13, X1
	PSLLQ $57, X13
	POR X8, X7
	POR X9, X10
	POR X11, X12
	POR X13, X7
	POR X10, X12
	POR X7, X12
	MOVO X12, 16(BX)
	PSRLQ $7, X1
	PSLLQ $4, X14
	PSLLQ $15, X15
	PSLLQ $26, X0
	MOVO 240(AX), X3
	MOVO 256(AX), X5
	MOVO 272(AX), X2
	MOVO 288(AX), X6
	PSLLQ $37, X3
	PSLLQ $48, X5
	MOVO X2, X4
	PSLLQ $59, X2
	POR X1, X14
	POR X15, X0
	POR X3, X5
	POR X2, X14
	POR X0, X5
	POR X14, X5
	MOVO X5, 32(BX)
	PSRLQ $5, X4
	PSLLQ $6, X6
	MOVO 304(AX), X8
	MOVO 320(AX), X9
	MOVO 336(AX), X11
	MOVO 352(AX), X13
	PSLLQ $17, X8
	PSLLQ $28, X9
	PSLLQ $39, X11
	PSLLQ $50, X13
	MOVO 368(AX), X10
	MOVO 384(AX), X7
	MOVO 400(AX), X12
	MOVO 416(AX), X1
	MOVO X10, X15
	PSLLQ $61, X10
	POR X4, X6
	POR X8, X9
	POR X11, X13
	POR X10, X6
	POR X9, X13
	POR X6, X13
	MOVO X13, 48(BX)
	PSRLQ $3, X15
	PSLLQ $8, X7
	PSLLQ $19, X12
	PSLLQ $30, X1
	MOVO 432(AX), X3
	MOVO 448(AX), X2
	MOVO 464(AX), X0
	MOVO 480(AX), X14
	PSLLQ $41, X3
	PSLLQ $52, X2
	MOVO X0, X5
	PSLLQ $63, X0
	POR X15, X7
	POR X12, X1
	POR X3, X2
	POR X0, X7
	POR X1, X2
	POR X7, X2
	MOVO X2, 64(BX)
	PSRLQ $1, X5
	PSLLQ $10, X14
	MOVO 496(AX), X4
	MOVO 512(AX), X8
	MOVO 528(AX), X11
	MOVO 544(AX), X10
	PSLLQ $21, X4
	PSLLQ $32, X8
	PSLLQ $43, X11
	MOVO X10, X9
	PSLLQ $54, X10
	POR X5, X14
	POR X4, X8
	POR X11, X10
	POR X14, X8
	POR X10, X8
	MOVO X8, 80(BX)
	PSRLQ $10, X9
	MOVO 560(AX), X6
	MOVO 576(AX), X13
	MOVO 592(AX), X15
	MOVO 608(AX), X12
	PSLLQ $1, X6
	PSLLQ $12, X13
	PSLLQ $23, X15
	PSLLQ $34, X12
	MOVO 624(AX), X3
	MOVO 640(AX), X0
	MOVO 656(AX), X1
	MOVO 672(AX), X7
	PSLLQ $45, X3
	MOVO X0, X2
	PSLLQ $56, X0
	POR X9, X6
	POR X13, X15
	POR X12, X3
	POR X0, X6
	POR X15, X3
	POR X6, X3
	MOVO X3, 96(BX)
	PSRLQ $8, X2
	PSLLQ $3, X1
	PSLLQ $14, X7
	MOVO 688(AX), X5
	MOVO 704(AX), X4
	MOVO 720(AX), X11
	MOVO 736(AX), X14
	PSLLQ $25, X5
	PSLLQ $36, X4
	PSLLQ $47, X11
	MOVO X14, X10
	PSLLQ $58, X14
	POR X2, X1
	POR X7, X5
	POR X4, X11
	POR X14, X1
	POR X5, X11
	POR X1, X11
	MOVO X11, 112(BX)
	PSRLQ $6, X10
	MOVO 752(AX), X8
	MOVO 768(AX), X9
	MOVO 784(AX), X13
	MOVO 800(AX), X12
	PSLLQ $5, X8
	PSLLQ $16, X9
	PSLLQ $27, X13
	PSLLQ $38, X12
	MOVO 816(AX), X0
	MOVO 832(AX), X15
	MOVO 848(AX), X6
	MOVO 864(AX), X3
	PSLLQ $49, X0
	MOVO X15, X2
	PSLLQ $60, X15
	POR X10, X8
	POR X9, X13
	POR X12, X0
	POR X15, X8
	POR X13, X0
	POR X8, X0
	MOVO X0, 128(BX)
	PSRLQ $4, X2
	PSLLQ $7, X6
	PSLLQ $18, X3
	MOVO 880(AX), X7
	MOVO 896(AX), X4
	MOVO 912(AX), X14
	MOVO 928(AX), X5
	PSLLQ $29, X7
	PSLLQ $40, X4
	PSLLQ $51, X14
	MOVO X5, X1
	PSLLQ $62, X5
	POR X2, X6
	POR X3, X7
	POR X4, X14
	POR X5, X6
	POR X7, X14
	POR X6, X14
	MOVO X14, 144(BX)
	PSRLQ $2, X1
	MOVO 944(AX), X11
	MOVO 960(AX), X10
	MOVO 976(AX), X9
	MOVO 992(AX), X12
	PSLLQ $9, X11
	PSLLQ $20, X10
	PSLLQ $31, X9
	PSLLQ $42, X12
	MOVO 1008(AX), X15
	PSLLQ $53, X15
	POR X1, X11
	POR X10, X9
	POR X12, X15
	POR X11, X9
	POR X15, X9
	MOVO X9, 160(BX)
	RET

// func pack64_12(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_12(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $12, X2
	PSLLQ $24, X3
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	PSLLQ $36, X4
	PSLLQ $48, X5
	MOVO X6, X8
	PSLLQ $60, X6
	POR X1, X2
	POR X3, X4
	POR X5, X6
	POR X2, X4
	POR X6, X4
	MOVO X4, 0(BX)
	PSRLQ $4, X8
	PSLLQ $8, X7
	MOVO 112(AX), X9
	MOVO 128(AX), X10
	MOVO 144(AX), X11
	MOVO 160(AX), X12
	PSLLQ $20, X9
	PSLLQ $32, X10
	PSLLQ $44, X11
	MOVO X12, X13
	PSLLQ $56, X12
	POR X8, X7
	POR X9, X10
	POR X11, X12
	POR X7, X10
	POR X12, X10
	MOVO X10, 16(BX)
	PSRLQ $8, X13
	MOVO 176(AX), X14
	MOVO 192(AX), X15
	MOVO 208(AX), X0
	MOVO 224(AX), X1
	PSLLQ $4, X14
	PSLLQ $16, X15
	PSLLQ $28, X0
	PSLLQ $40, X1
	MOVO 240(AX), X3
	MOVO 256(AX), X5
	MOVO 272(AX), X2
	MOVO 288(AX), X6
	PSLLQ $52, X3
	POR X13, X14
	POR X15, X0
	POR X1, X3
	POR X14, X0
	POR X3, X0
	MOVO X0, 32(BX)
	PSLLQ $12, X2
	PSLLQ $24, X6
	MOVO 304(AX), X4
	MOVO 320(AX), X8
	MOVO 336(AX), X9
	MOVO 352(AX), X11
	PSLLQ $36, X4
	PSLLQ $48, X8
	MOVO X9, X7
	PSLLQ $60, X9
	POR X5, X2
	POR X6, X4
	POR X8, X9
	POR X2, X4
	POR X9, X4
	MOVO X4, 48(BX)
	PSRLQ $4, X7
	PSLLQ $8, X11
	MOVO 368(AX), X12
	MOVO 384(AX), X10
	MOVO 400(AX), X13
	MOVO 416(AX), X15
	PSLLQ $20, X12
	PSLLQ $32, X10
	PSLLQ $44, X13
	MOVO X15, X1
	PSLLQ $56, X15
	POR X7, X11
	POR X12, X10
	POR X13, X15
	POR X11, X10
	POR X15, X10
	MOVO X10, 64(BX)
	PSRLQ $8, X1
	MOVO 432(AX), X14
	MOVO 448(AX), X3
	MOVO 464(AX), X0
	MOVO 480(AX), X5
	PSLLQ $4, X14
	PSLLQ $16, X3
	PSLLQ $28, X0
	PSLLQ $40, X5
	MOVO 496(AX), X6
	MOVO 512(AX), X8
	MOVO 528(AX), X2
	MOVO 544(AX), X9
	PSLLQ $52, X6
	POR X1, X14
	POR X3, X0
	POR X5, X6
	POR X14, X0
	POR X6, X0
	MOVO X0, 80(BX)
	PSLLQ $12, X2
	PSLLQ $24, X9
	MOVO 560(AX), X4
	MOVO 576(AX), X7
	MOVO 592(AX), X12
	MOVO 608(AX), X13
	PSLLQ $36, X4
	PSLLQ $48, X7
	MOVO X12, X11
	PSLLQ $60, X12
	POR X8, X2
	POR X9, X4
	POR X7, X12
	POR X2, X4
	POR X12, X4
	MOVO X4, 96(BX)
	PSRLQ $4, X11
	PSLLQ $8, X13
	MOVO 624(AX), X15
	MOVO 640(AX), X10
	MOVO 656(AX), X1
	MOVO 672(AX), X3
	PSLLQ $20, X15
	PSLLQ $32, X10
	PSLLQ $44, X1
	MOVO X3, X5
	PSLLQ $56, X3
	POR X11, X13
	POR X15, X10
	POR X1, X3
	POR X13, X10
	POR X3, X10
	MOVO X10, 112(BX)
	PSRLQ $8, X5
	MOVO 688(AX), X14
	MOVO 704(AX), X6
	MOVO 720(AX), X0
	MOVO 736(AX), X8
	PSLLQ $4, X14
	PSLLQ $16, X6
	PSLLQ $28, X0
	PSLLQ $40, X8
	MOVO 752(AX), X9
	MOVO 768(AX), X7
	MOVO 784(AX), X2
	MOVO 800(AX), X12
	PSLLQ $52, X9
	POR X5, X14
	POR X6, X0
	POR X8, X9
	POR X14, X0
	POR X9, X0
	MOVO X0, 128(BX)
	PSLLQ $12, X2
	PSLLQ $24, X12
	MOVO 816(AX), X4
	MOVO 832(AX), X11
	MOVO 848(AX), X15
	MOVO 864(AX), X1
	PSLLQ $36, X4
	PSLLQ $48, X11
	MOVO X15, X13
	PSLLQ $60, X15
	POR X7, X2
	POR X12, X4
	POR X11, X15
	POR X2, X4
	POR X15, X4
	MOVO X4, 144(BX)
	PSRLQ $4, X13
	PSLLQ $8, X1
	MOVO 880(AX), X3
	MOVO 896(AX), X10
	MOVO 912(AX), X5
	MOVO 928(AX), X6
	PSLLQ $20, X3
	PSLLQ $32, X10
	PSLLQ $44, X5
	MOVO X6, X8
	PSLLQ $56, X6
	POR X13, X1
	POR X3, X10
	POR X5, X6
	POR X1, X10
	POR X6, X10
	MOVO X10, 160(BX)
	PSRLQ $8, X8
	MOVO 944(AX), X14
	MOVO 960(AX), X9
	MOVO 976(AX), X0
	MOVO 992(AX), X7
	PSLLQ $4, X14
	PSLLQ $16, X9
	PSLLQ $28, X0
	PSLLQ $40, X7
	MOVO 1008(AX), X12
	PSLLQ $52, X12
	POR X8, X14
	POR X9, X0
	POR X7, X12
	POR X14, X0
	POR X12, X0
	MOVO X0, 176(BX)
	RET

// func pack64_13(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_13(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $13, X2
	PSLLQ $26, X3
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	PSLLQ $39, X4
	MOVO X5, X8
	PSLLQ $52, X5
	POR X1, X2
	POR X3, X4
	POR X5, X2
	POR X4, X2
	MOVO X2, 0(BX)
	PSRLQ $12, X8
	PSLLQ $1, X6
	PSLLQ $14, X7
	MOVO 112(AX), X9
	MOVO 128(AX), X10
	MOVO 144(AX), X11
	MOVO 160(AX), X12
	PSLLQ $27, X9
	PSLLQ $40, X10
	MOVO X11, X13
	PSLLQ $53, X11
	POR X8, X6
	POR X7, X9
	POR X10, X11
	POR X6, X9
	POR X11, X9
	MOVO X9, 16(BX)
	PSRLQ $11, X13
	PSLLQ $2, X12
	MOVO 176(AX), X14
	MOVO 192(AX), X15
	MOVO 208(AX), X0
	MOVO 224(AX), X1
	PSLLQ $15, X14
	PSLLQ $28, X15
	PSLLQ $41, X0
	MOVO X1, X3
	PSLLQ $54, X1
	POR X13, X12
	POR X14, X15
	POR X0, X1
	POR X12, X15
	POR X1, X15
	MOVO X15, 32(BX)
	PSRLQ $10, X3
	MOVO 240(AX), X5
	MOVO 256(AX), X4
	MOVO 272(AX), X2
	MOVO 288(AX), X8
	PSLLQ $3, X5
	PSLLQ $16, X4
	PSLLQ $29, X2
	PSLLQ $42, X8
	MOVO 304(AX), X7
	MOVO 320(AX), X10
	MOVO 336(AX), X6
	MOVO 352(AX), X11
	MOVO X7, X9
	PSLLQ $55, X7
	POR X3, X5
	POR X4, X2
	POR X8, X7
	POR X5, X2
	POR X7, X2
	MOVO X2, 48(BX)
	PSRLQ $9, X9
	PSLLQ $4, X10
	PSLLQ $17, X6
	PSLLQ $30, X11
	MOVO 368(AX), X13
	MOVO 384(AX), X14
	MOVO 400(AX), X0
	MOVO 416(AX), X12
	PSLLQ $43, X13
	MOVO X14, X1
	PSLLQ $56, X14
	POR X9, X10
	POR X6, X11
	POR X13, X14
	POR X10, X11
	POR X14, X11
	MOVO X11, 64(BX)
	PSRLQ $8, X1
	PSLLQ $5, X0
	PSLLQ $18, X12
	MOVO 432(AX), X15
	MOVO 448(AX), X3
	MOVO 464(AX), X4
	MOVO 480(AX), X8
	PSLLQ $31, X15
	PSLLQ $44, X3
	MOVO X4, X5
	PSLLQ $57, X4
	POR X1, X0
	POR X12, X15
	POR X3, X4
	POR X0, X15
	POR X4, X15
	MOVO X15, 80(BX)
	PSRLQ $7, X5
	PSLLQ $6, X8
	MOVO 496(AX), X7
	MOVO 512(AX), X2
	MOVO 528(AX), X9
	MOVO 544(AX), X6
	PSLLQ $19, X7
	PSLLQ $32, X2
	PSLLQ $45, X9
	MOVO X6, X13
	PSLLQ $58, X6
	POR X5, X8
	POR X7, X2
	POR X9, X6
	POR X8, X2
	POR X6, X2
	MOVO X2, 96(BX)
	PSRLQ $6, X13
	MOVO 560(AX), X10
	MOVO 576(AX), X14
	MOVO 592(AX), X11
	MOVO 608(AX), X1
	PSLLQ $7, X10
	PSLLQ $20, X14
	PSLLQ $33, X11
	PSLLQ $46, X1
	MOVO 624(AX), X12
	MOVO 640(AX), X3
	MOVO 656(AX), X0
	MOVO 672(AX), X4
	MOVO X12, X15
	PSLLQ $59, X12
	POR X13, X10
	POR X14, X11
	POR X1, X12
	POR X10, X11
	POR X12, X11
	MOVO X11, 112(BX)
	PSRLQ $5, X15
	PSLLQ $8, X3
	PSLLQ $21, X0
	PSLLQ $34, X4
	MOVO 688(AX), X5
	MOVO 704(AX), X7
	MOVO 720(AX), X9
	MOVO 736(AX), X8
	PSLLQ $47, X5
	MOVO X7, X6
	PSLLQ $60, X7
	POR X15, X3
	POR X0, X4
	POR X5, X7
	POR X3, X4
	POR X7, X4
	MOVO X4, 128(BX)
	PSRLQ $4, X6
	PSLLQ $9, X9
	PSLLQ $22, X8
	MOVO 752(AX), X2
	MOVO 768(AX), X13
	MOVO 784(AX), X14
	MOVO 800(AX), X1
	PSLLQ $35, X2
	PSLLQ $48, X13
	MOVO X14, X10
	PSLLQ $61, X14
	POR X6, X9
	POR X8, X2
	POR X13, X14
	POR X9, X2
	POR X14, X2
	MOVO X2, 144(BX)
	PSRLQ $3, X10
	PSLLQ $10, X1
	MOVO 816(AX), X12
	MOVO 832(AX), X11
	MOVO 848(AX), X15
	MOVO 864(AX), X0
	PSLLQ $23, X12
	PSLLQ $36, X11
	PSLLQ $49, X15
	MOVO X0, X5
	PSLLQ $62, X0
	POR X10, X1
	POR X12, X11
	POR X15, X0
	POR X1, X11
	POR X0, X11
	MOVO X11, 160(BX)
	PSRLQ $2, X5
	MOVO 880(AX), X3
	MOVO 896(AX), X7
	MOVO 912(AX), X4
	MOVO 928(AX), X6
	PSLLQ $11, X3
	PSLLQ $24, X7
	PSLLQ $37, X4
	PSLLQ $50, X6
	MOVO 944(AX), X8
	MOVO 960(AX), X13
	MOVO 976(AX), X9
	MOVO 992(AX), X14
	MOVO X8, X2
	PSLLQ $63, X8
	POR X5, X3
	POR X7, X4
	POR X6, X8
	POR X3, X4
	POR X8, X4
	MOVO X4, 176(BX)
	PSRLQ $1, X2
	PSLLQ $12, X13
	PSLLQ $25, X9
	PSLLQ $38, X14
	MOVO 1008(AX), X10
	PSLLQ $51, X10
	POR X2, X13
	POR X9, X14
	POR X10, X13
	POR X14, X13
	MOVO X13, 192(BX)
	RET

// func pack64_14(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_14(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $14, X2
	PSLLQ $28, X3
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	PSLLQ $42, X4
	MOVO X5, X8
	PSLLQ $56, X5
	POR X1, X2
	POR X3, X4
	POR X5, X2
	POR X4, X2
	MOVO X2, 0(BX)
	PSRLQ $8, X8
	PSLLQ $6, X6
	PSLLQ $20, X7
	MOVO 112(AX), X9
	MOVO 128(AX), X10
	MOVO 144(AX), X11
	MOVO 160(AX), X12
	PSLLQ $34, X9
	PSLLQ $48, X10
	MOVO X11, X13
	PSLLQ $62, X11
	POR X8, X6
	POR X7, X9
	POR X10, X11
	POR X6, X9
	POR X11, X9
	MOVO X9, 16(BX)
	PSRLQ $2, X13
	PSLLQ $12, X12
	MOVO 176(AX), X14
	MOVO 192(AX), X15
	MOVO 208(AX), X0
	MOVO 224(AX), X1
	PSLLQ $26, X14
	PSLLQ $40, X15
	MOVO X0, X3
	PSLLQ $54, X0
	POR X13, X12
	POR X14, X15
	POR X0, X12
	POR X15, X12
	MOVO X12, 32(BX)
	PSRLQ $10, X3
	PSLLQ $4, X1
	MOVO 240(AX), X5
	MOVO 256(AX), X4
	MOVO 272(AX), X2
	MOVO 288(AX), X8
	PSLLQ $18, X5
	PSLLQ $32, X4
	PSLLQ $46, X2
	MOVO X8, X7
	PSLLQ $60, X8
	POR X3, X1
	POR X5, X4
	POR X2, X8
	POR X1, X4
	POR X8, X4
	MOVO X4, 48(BX)
	PSRLQ $4, X7
	MOVO 304(AX), X10
	MOVO 320(AX), X6
	MOVO 336(AX), X11
	MOVO 352(AX), X9
	PSLLQ $10, X10
	PSLLQ $24, X6
	PSLLQ $38, X11
	MOVO X9, X13
	PSLLQ $52, X9
	POR X7, X10
	POR X6, X11
	POR X9, X10
	POR X11, X10
	MOVO X10, 64(BX)
	PSRLQ $12, X13
	MOVO 368(AX), X14
	MOVO 384(AX), X0
	MOVO 400(AX), X15
	MOVO 416(AX), X12
	PSLLQ $2, X14
	PSLLQ $16, X0
	PSLLQ $30, X15
	PSLLQ $44, X12
	MOVO 432(AX), X3
	MOVO 448(AX), X5
	MOVO 464(AX), X2
	MOVO 480(AX), X1
	MOVO X3, X8
	PSLLQ $58, X3
	POR X13, X14
	POR X0, X15
	POR X12, X3
	POR X14, X15
	POR X3, X15
	MOVO X15, 80(BX)
	PSRLQ $6, X8
	PSLLQ $8, X5
	PSLLQ $22, X2
	PSLLQ $36, X1
	MOVO 496(AX), X4
	MOVO 512(AX), X7
	MOVO 528(AX), X6
	MOVO 544(AX), X9
	PSLLQ $50, X4
	POR X8, X5
	POR X2, X1
	POR X4, X5
	POR X1, X5
	MOVO X5, 96(BX)
	PSLLQ $14, X6
	PSLLQ $28, X9
	MOVO 560(AX), X11
	MOVO 576(AX), X10
	MOVO 592(AX), X13
	MOVO 608(AX), X0
	PSLLQ $42, X11
	MOVO X10, X12
	PSLLQ $56, X10
	POR X7, X6
	POR X9, X11
	POR X10, X6
	POR X11, X6
	MOVO X6, 112(BX)
	PSRLQ $8, X12
	PSLLQ $6, X13
	PSLLQ $20, X0
	MOVO 624(AX), X14
	MOVO 640(AX), X3
	MOVO 656(AX), X15
	MOVO 672(AX), X8
	PSLLQ $34, X14
	PSLLQ $48, X3
	MOVO X15, X2
	PSLLQ $62, X15
	POR X12, X13
	POR X0, X14
	POR X3, X15
	POR X13, X14
	POR X15, X14
	MOVO X14, 128(BX)
	PSRLQ $2, X2
	PSLLQ $12, X8
	MOVO 688(AX), X4
	MOVO 704(AX), X1
	MOVO 720(AX), X5
	MOVO 736(AX), X7
	PSLLQ $26, X4
	PSLLQ $40, X1
	MOVO X5, X9
	PSLLQ $54, X5
	POR X2, X8
	POR X4, X1
	POR X5, X8
	POR X1, X8
	MOVO X8, 144(BX)
	PSRLQ $10, X9
	PSLLQ $4, X7
	MOVO 752(AX), X10
	MOVO 768(AX), X11
	MOVO 784(AX), X6
	MOVO 800(AX), X12
	PSLLQ $18, X10
	PSLLQ $32, X11
	PSLLQ $46, X6
	MOVO X12, X0
	PSLLQ $60, X12
	POR X9, X7
	POR X10, X11
	POR X6, X12
	POR X7, X11
	POR X12, X11
	MOVO X11, 160(BX)
	PSRLQ $4, X0
	MOVO 816(AX), X3
	MOVO 832(AX), X13
	MOVO 848(AX), X15
	MOVO 864(AX), X14
	PSLLQ $10, X3
	PSLLQ $24, X13
	PSLLQ $38, X15
	MOVO X14, X2
	PSLLQ $52, X14
	POR X0, X3
	POR X13, X15
	POR X14, X3
	POR X15, X3
	MOVO X3, 176(BX)
	PSRLQ $12, X2
	MOVO 880(AX), X4
	MOVO 896(AX), X5
	MOVO 912(AX), X1
	MOVO 928(AX), X8
	PSLLQ $2, X4
	PSLLQ $16, X5
	PSLLQ $30, X1
	PSLLQ $44, X8
	MOVO 944(AX), X9
	MOVO 960(AX), X10
	MOVO 976(AX), X6
	MOVO 992(AX), X7
	MOVO X9, X12
	PSLLQ $58, X9
	POR X2, X4
	POR X5, X1
	POR X8, X9
	POR X4, X1
	POR X9, X1
	MOVO X1, 192(BX)
	PSRLQ $6, X12
	PSLLQ $8, X10
	PSLLQ $22, X6
	PSLLQ $36, X7
	MOVO 1008(AX), X11
	PSLLQ $50, X11
	POR X12, X10
	POR X6, X7
	POR X11, X10
	POR X7, X10
	MOVO X10, 208(BX)
	RET

// func pack64_15(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_15(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $15, X2
	PSLLQ $30, X3
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	PSLLQ $45, X4
	MOVO X5, X8
	PSLLQ $60, X5
	POR X1, X2
	POR X3, X4
	POR X5, X2
	POR X4, X2
	MOVO X2, 0(BX)
	PSRLQ $4, X8
	PSLLQ $11, X6
	PSLLQ $26, X7
	MOVO 112(AX), X9
	MOVO 128(AX), X10
	MOVO 144(AX), X11
	MOVO 160(AX), X12
	PSLLQ $41, X9
	MOVO X10, X13
	PSLLQ $56, X10
	POR X8, X6
	POR X7, X9
	POR X10, X6
	POR X9, X6
	MOVO X6, 16(BX)
	PSRLQ $8, X13
	PSLLQ $7, X11
	PSLLQ $22, X12
	MOVO 176(AX), X14
	MOVO 192(AX), X15
	MOVO 208(AX), X0
	MOVO 224(AX), X1
	PSLLQ $37, X14
	MOVO X15, X3
	PSLLQ $52, X15
	POR X13, X11
	POR X12, X14
	POR X15, X11
	POR X14, X11
	MOVO X11, 32(BX)
	PSRLQ $12, X3
	PSLLQ $3, X0
	PSLLQ $18, X1
	MOVO 240(AX), X5
	MOVO 256(AX), X4
	MOVO 272(AX), X2
	MOVO 288(AX), X8
	PSLLQ $33, X5
	PSLLQ $48, X4
	MOVO X2, X7
	PSLLQ $63, X2
	POR X3, X0
	POR X1, X5
	POR X4, X2
	POR X0, X5
	POR X2, X5
	MOVO X5, 48(BX)
	PSRLQ $1, X7
	PSLLQ $14, X8
	MOVO 304(AX), X10
	MOVO 320(AX), X9
	MOVO 336(AX), X6
	MOVO 352(AX), X13
	PSLLQ $29, X10
	PSLLQ $44, X9
	MOVO X6, X12
	PSLLQ $59, X6
	POR X7, X8
	POR X10, X9
	POR X6, X8
	POR X9, X8
	MOVO X8, 64(BX)
	PSRLQ $5, X12
	PSLLQ $10, X13
	MOVO 368(AX), X15
	MOVO 384(AX), X14
	MOVO 400(AX), X11
	MOVO 416(AX), X3
	PSLLQ $25, X15
	PSLLQ $40, X14
	MOVO X11, X1
	PSLLQ $55, X11
	POR X12, X13
	POR X15, X14
	POR X11, X13
	POR X14, X13
	MOVO X13, 80(BX)
	PSRLQ $9, X1
	PSLLQ $6, X3
	MOVO 432(AX), X4
	MOVO 448(AX), X0
	MOVO 464(AX), X2
	MOVO 480(AX), X5
	PSLLQ $21, X4
	PSLLQ $36, X0
	MOVO X2, X7
	PSLLQ $51, X2
	POR X1, X3
	POR X4, X0
	POR X2, X3
	POR X0, X3
	MOVO X3, 96(BX)
	PSRLQ $13, X7
	PSLLQ $2, X5
	MOVO 496(AX), X10
	MOVO 512(AX), X6
	MOVO 528(AX), X9
	MOVO 544(AX), X8
	PSLLQ $17, X10
	PSLLQ $32, X6
	PSLLQ $47, X9
	MOVO X8, X12
	PSLLQ $62, X8
	POR X7, X5
	POR X10, X6
	POR X9, X8
	POR X5, X6
	POR X8, X6
	MOVO X6, 112(BX)
	PSRLQ $2, X12
	MOVO 560(AX), X15
	MOVO 576(AX), X11
	MOVO 592(AX), X14
	MOVO 608(AX), X13
	PSLLQ $13, X15
	PSLLQ $28, X11
	PSLLQ $43, X14
	MOVO X13, X1
	PSLLQ $58, X13
	POR X12, X15
	POR X11, X14
	POR X13, X15
	POR X14, X15
	MOVO X15, 128(BX)
	PSRLQ $6, X1
	MOVO 624(AX), X4
	MOVO 640(AX), X2
	MOVO 656(AX), X0
	MOVO 672(AX), X3
	PSLLQ $9, X4
	PSLLQ $24, X2
	PSLLQ $39, X0
	MOVO X3, X7
	PSLLQ $54, X3
	POR X1, X4
	POR X2, X0
	POR X3, X4
	POR X0, X4
	MOVO X4, 144(BX)
	PSRLQ $10, X7
	MOVO 688(AX), X10
	MOVO 704(AX), X9
	MOVO 720(AX), X5
	MOVO 736(AX), X8
	PSLLQ $5, X10
	PSLLQ $20, X9
	PSLLQ $35, X5
	MOVO X8, X6
	PSLLQ $50, X8
	POR X7, X10
	POR X9, X5
	POR X8, X10
	POR X5, X10
	MOVO X10, 160(BX)
	PSRLQ $14, X6
	MOVO 752(AX), X12
	MOVO 768(AX), X11
	MOVO 784(AX), X13
	MOVO 800(AX), X14
	PSLLQ $1, X12
	PSLLQ $16, X11
	PSLLQ $31, X13
	PSLLQ $46, X14
	MOVO 816(AX), X15
	MOVO 832(AX), X1
	MOVO 848(AX), X2
	MOVO 864(AX), X3
	MOVO X15, X0
	PSLLQ $61, X15
	POR X6, X12
	POR X11, X13
	POR X14, X15
	POR X12, X13
	POR X15, X13
	MOVO X13, 176(BX)
	PSRLQ $3, X0
	PSLLQ $12, X1
	PSLLQ $27, X2
	PSLLQ $42, X3
	MOVO 880(AX), X4
	MOVO 896(AX), X7
	MOVO 912(AX), X9
	MOVO 928(AX), X8
	MOVO X4, X5
	PSLLQ $57, X4
	POR X0, X1
	POR X2, X3
	POR X4, X1
	POR X3, X1
	MOVO X1, 192(BX)
	PSRLQ $7, X5
	PSLLQ $8, X7
	PSLLQ $23, X9
	PSLLQ $38, X8
	MOVO 944(AX), X10
	MOVO 960(AX), X6
	MOVO 976(AX), X11
	MOVO 992(AX), X14
	MOVO X10, X12
	PSLLQ $53, X10
	POR X5, X7
	POR X9, X8
	POR X10, X7
	POR X8, X7
	MOVO X7, 208(BX)
	PSRLQ $11, X12
	PSLLQ $4, X6
	PSLLQ $19, X11
	PSLLQ $34, X14
	MOVO 1008(AX), X15
	PSLLQ $49, X15
	POR X12, X6
	POR X11, X14
	POR X15, X6
	POR X14, X6
	MOVO X6, 224(BX)
	RET

// func pack64_16(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_16(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $16, X2
	PSLLQ $32, X3
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	PSLLQ $48, X4
	POR X1, X2
	POR X3, X4
	POR X2, X4
	MOVO X4, 0(BX)
	PSLLQ $16, X6
	PSLLQ $32, X7
	MOVO 112(AX), X8
	MOVO 128(AX), X9
	MOVO 144(AX), X10
	MOVO 160(AX), X11
	PSLLQ $48, X8
	POR X5, X6
	POR X7, X8
	POR X6, X8
	MOVO X8, 16(BX)
	PSLLQ $16, X10
	PSLLQ $32, X11
	MOVO 176(AX), X12
	MOVO 192(AX), X13
	MOVO 208(AX), X14
	MOVO 224(AX), X15
	PSLLQ $48, X12
	POR X9, X10
	POR X11, X12
	POR X10, X12
	MOVO X12, 32(BX)
	PSLLQ $16, X14
	PSLLQ $32, X15
	MOVO 240(AX), X0
	MOVO 256(AX), X1
	MOVO 272(AX), X3
	MOVO 288(AX), X2
	PSLLQ $48, X0
	POR X13, X14
	POR X15, X0
	POR X14, X0
	MOVO X0, 48(BX)
	PSLLQ $16, X3
	PSLLQ $32, X2
	MOVO 304(AX), X4
	MOVO 320(AX), X5
	MOVO 336(AX), X7
	MOVO 352(AX), X6
	PSLLQ $48, X4
	POR X1, X3
	POR X2, X4
	POR X3, X4
	MOVO X4, 64(BX)
	PSLLQ $16, X7
	PSLLQ $32, X6
	MOVO 368(AX), X8
	MOVO 384(AX), X9
	MOVO 400(AX), X11
	MOVO 416(AX), X10
	PSLLQ $48, X8
	POR X5, X7
	POR X6, X8
	POR X7, X8
	MOVO X8, 80(BX)
	PSLLQ $16, X11
	PSLLQ $32, X10
	MOVO 432(AX), X12
	MOVO 448(AX), X13
	MOVO 464(AX), X15
	MOVO 480(AX), X14
	PSLLQ $48, X12
	POR X9, X11
	POR X10, X12
	POR X11, X12
	MOVO X12, 96(BX)
	PSLLQ $16, X15
	PSLLQ $32, X14
	MOVO 496(AX), X0
	MOVO 512(AX), X1
	MOVO 528(AX), X2
	MOVO 544(AX), X3
	PSLLQ $48, X0
	POR X13, X15
	POR X14, X0
	POR X15, X0
	MOVO X0, 112(BX)
	PSLLQ $16, X2
	PSLLQ $32, X3
	MOVO 560(AX), X4
	MOVO 576(AX), X5
	MOVO 592(AX), X6
	MOVO 608(AX), X7
	PSLLQ $48, X4
	POR X1, X2
	POR X3, X4
	POR X2, X4
	MOVO X4, 128(BX)
	PSLLQ $16, X6
	PSLLQ $32, X7
	MOVO 624(AX), X8
	MOVO 640(AX), X9
	MOVO 656(AX), X10
	MOVO 672(AX), X11
	PSLLQ $48, X8
	POR X5, X6
	POR X7, X8
	POR X6, X8
	MOVO X8, 144(BX)
	PSLLQ $16, X10
	PSLLQ $32, X11
	MOVO 688(AX), X12
	MOVO 704(AX), X13
	MOVO 720(AX), X14
	MOVO 736(AX), X15
	PSLLQ $48, X12
	POR X9, X10
	POR X11, X12
	POR X10, X12
	MOVO X12, 160(BX)
	PSLLQ $16, X14
	PSLLQ $32, X15
	MOVO 752(AX), X0
	MOVO 768(AX), X1
	MOVO 784(AX), X3
	MOVO 800(AX), X2
	PSLLQ $48, X0
	POR X13, X14
	POR X15, X0
	POR X14, X0
	MOVO X0, 176(BX)
	PSLLQ $16, X3
	PSLLQ $32, X2
	MOVO 816(AX), X4
	MOVO 832(AX), X5
	MOVO 848(AX), X7
	MOVO 864(AX), X6
	PSLLQ $48, X4
	POR X1, X3
	POR X2, X4
	POR X3, X4
	MOVO X4, 192(BX)
	PSLLQ $16, X7
	PSLLQ $32, X6
	MOVO 880(AX), X8
	MOVO 896(AX), X9
	MOVO 912(AX), X11
	MOVO 928(AX), X10
	PSLLQ $48, X8
	POR X5, X7
	POR X6, X8
	POR X7, X8
	MOVO X8, 208(BX)
	PSLLQ $16, X11
	PSLLQ $32, X10
	MOVO 944(AX), X12
	MOVO 960(AX), X13
	MOVO 976(AX), X15
	MOVO 992(AX), X14
	PSLLQ $48, X12
	POR X9, X11
	POR X10, X12
	POR X11, X12
	MOVO X12, 224(BX)
	PSLLQ $16, X15
	PSLLQ $32, X14
	MOVO 1008(AX), X0
	PSLLQ $48, X0
	POR X13, X15
	POR X14, X0
	POR X15, X0
	MOVO X0, 240(BX)
	RET

// func pack64_17(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_17(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $17, X2
	PSLLQ $34, X3
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	MOVO X4, X8
	PSLLQ $51, X4
	POR X1, X2
	POR X3, X4
	POR X2, X4
	MOVO X4, 0(BX)
	PSRLQ $13, X8
	PSLLQ $4, X5
	PSLLQ $21, X6
	PSLLQ $38, X7
	MOVO 112(AX), X9
	MOVO 128(AX), X10
	MOVO 144(AX), X11
	MOVO 160(AX), X12
	MOVO X9, X13
	PSLLQ $55, X9
	POR X8, X5
	POR X6, X7
	POR X9, X5
	POR X7, X5
	MOVO X5, 16(BX)
	PSRLQ $9, X13
	PSLLQ $8, X10
	PSLLQ $25, X11
	PSLLQ $42, X12
	MOVO 176(AX), X14
	MOVO 192(AX), X15
	MOVO 208(AX), X0
	MOVO 224(AX), X1
	MOVO X14, X3
	PSLLQ $59, X14
	POR X13, X10
	POR X11, X12
	POR X14, X10
	POR X12, X10
	MOVO X10, 32(BX)
	PSRLQ $5, X3
	PSLLQ $12, X15
	PSLLQ $29, X0
	PSLLQ $46, X1
	MOVO 240(AX), X2
	MOVO 256(AX), X4
	MOVO 272(AX), X8
	MOVO 288(AX), X6
	MOVO X2, X9
	PSLLQ $63, X2
	POR X3, X15
	POR X0, X1
	POR X2, X15
	POR X1, X15
	MOVO X15, 48(BX)
	PSRLQ $1, X9
	PSLLQ $16, X4
	PSLLQ $33, X8
	MOVO X6, X7
	PSLLQ $50, X6
	POR X9, X4
	POR X8, X6
	POR X4, X6
	MOVO X6, 64(BX)
	PSRLQ $14, X7
	MOVO 304(AX), X5
	MOVO 320(AX), X13
	MOVO 336(AX), X11
	MOVO 352(AX), X14
	PSLLQ $3, X5
	PSLLQ $20, X13
	PSLLQ $37, X11
	MOVO X14, X12
	PSLLQ $54, X14
	POR X7, X5
	POR X13, X11
	POR X14, X5
	POR X11, X5
	MOVO X5, 80(BX)
	PSRLQ $10, X12
	MOVO 368(AX), X10
	MOVO 384(AX), X3
	MOVO 400(AX), X0
	MOVO 416(AX), X2
	PSLLQ $7, X10
	PSLLQ $24, X3
	PSLLQ $41, X0
	MOVO X2, X1
	PSLLQ $58, X2
	POR X12, X10
	POR X3, X0
	POR X2, X10
	POR X0, X10
	MOVO X10, 96(BX)
	PSRLQ $6, X1
	MOVO 432(AX), X15
	MOVO 448(AX), X9
	MOVO 464(AX), X8
	MOVO 480(AX), X4
	PSLLQ $11, X15
	PSLLQ $28, X9
	PSLLQ $45, X8
	MOVO X4, X6
	PSLLQ $62, X4
	POR X1, X15
	POR X9, X8
	POR X4, X15
	POR X8, X15
	MOVO X15, 112(BX)
	PSRLQ $2, X6
	MOVO 496(AX), X7
	MOVO 512(AX), X13
	MOVO 528(AX), X14
	MOVO 544(AX), X11
	PSLLQ $15, X7
	PSLLQ $32, X13
	MOVO X14, X5
	PSLLQ $49, X14
	POR X6, X7
	POR X13, X14
	POR X7, X14
	MOVO X14, 128(BX)
	PSRLQ $15, X5
	PSLLQ $2, X11
	MOVO 560(AX), X12
	MOVO 576(AX), X3
	MOVO 592(AX), X2
	MOVO 608(AX), X0
	PSLLQ $19, X12
	PSLLQ $36, X3
	MOVO X2, X10
	PSLLQ $53, X2
	POR X5, X11
	POR X12, X3
	POR X2, X11
	POR X3, X11
	MOVO X11, 144(BX)
	PSRLQ $11, X10
	PSLLQ $6, X0
	MOVO 624(AX), X1
	MOVO 640(AX), X9
	MOVO 656(AX), X4
	MOVO 672(AX), X8
	PSLLQ $23, X1
	PSLLQ $40, X9
	MOVO X4, X15
	PSLLQ $57, X4
	POR X10, X0
	POR X1, X9
	POR X4, X0
	POR X9, X0
	MOVO X0, 160(BX)
	PSRLQ $7, X15
	PSLLQ $10, X8
	MOVO 688(AX), X6
	MOVO 704(AX), X13
	MOVO 720(AX), X7
	MOVO 736(AX), X14
	PSLLQ $27, X6
	PSLLQ $44, X13
	MOVO X7, X5
	PSLLQ $61, X7
	POR X15, X8
	POR X6, X13
	POR X7, X8
	POR X13, X8
	MOVO X8, 176(BX)
	PSRLQ $3, X5
	PSLLQ $14, X14
	MOVO 752(AX), X12
	MOVO 768(AX), X2
	MOVO 784(AX), X3
	MOVO 800(AX), X11
	PSLLQ $31, X12
	MOVO X2, X10
	PSLLQ $48, X2
	POR X5, X14
	POR X12, X2
	POR X14, X2
	MOVO X2, 192(BX)
	PSRLQ $16, X10
	PSLLQ $1, X3
	PSLLQ $18, X11
	MOVO 816(AX), X1
	MOVO 832(AX), X4
	MOVO 848(AX), X9
	MOVO 864(AX), X0
	PSLLQ $35, X1
	MOVO X4, X15
	PSLLQ $52, X4
	POR X10, X3
	POR X11, X1
	POR X4, X3
	POR X1, X3
	MOVO X3, 208(BX)
	PSRLQ $12, X15
	PSLLQ $5, X9
	PSLLQ $22, X0
	MOVO 880(AX), X6
	MOVO 896(AX), X7
	MOVO 912(AX), X13
	MOVO 928(AX), X8
	PSLLQ $39, X6
	MOVO X7, X5
	PSLLQ $56, X7
	POR X15, X9
	POR X0, X6
	POR X7, X9
	POR X6, X9
	MOVO X9, 224(BX)
	PSRLQ $8, X5
	PSLLQ $9, X13
	PSLLQ $26, X8
	MOVO 944(AX), X12
	MOVO 960(AX), X14
	MOVO 976(AX), X2
	MOVO 992(AX), X10
	PSLLQ $43, X12
	MOVO X14, X11
	PSLLQ $60, X14
	POR X5, X13
	POR X8, X12
	POR X14, X13
	POR X12, X13
	MOVO X13, 240(BX)
	PSRLQ $4, X11
	PSLLQ $13, X2
	PSLLQ $30, X10
	MOVO 1008(AX), X4
	PSLLQ $47, X4
	POR X11, X2
	POR X10, X4
	POR X2, X4
	MOVO X4, 256(BX)
	RET

// func pack64_18(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_18(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $18, X2
	PSLLQ $36, X3
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	MOVO X4, X8
	PSLLQ $54, X4
	POR X1, X2
	POR X3, X4
	POR X2, X4
	MOVO X4, 0(BX)
	PSRLQ $10, X8
	PSLLQ $8, X5
	PSLLQ $26, X6
	PSLLQ $44, X7
	MOVO 112(AX), X9
	MOVO 128(AX), X10
	MOVO 144(AX), X11
	MOVO 160(AX), X12
	MOVO X9, X13
	PSLLQ $62, X9
	POR X8, X5
	POR X6, X7
	POR X9, X5
	POR X7, X5
	MOVO X5, 16(BX)
	PSRLQ $2, X13
	PSLLQ $16, X10
	PSLLQ $34, X11
	MOVO X12, X14
	PSLLQ $52, X12
	POR X13, X10
	POR X11, X12
	POR X10, X12
	MOVO X12, 32(BX)
	PSRLQ $12, X14
	MOVO 176(AX), X15
	MOVO 192(AX), X0
	MOVO 208(AX), X1
	MOVO 224(AX), X3
	PSLLQ $6, X15
	PSLLQ $24, X0
	PSLLQ $42, X1
	MOVO X3, X2
	PSLLQ $60, X3
	POR X14, X15
	POR X0, X1
	POR X3, X15
	POR X1, X15
	MOVO X15, 48(BX)
	PSRLQ $4, X2
	MOVO 240(AX), X4
	MOVO 256(AX), X8
	MOVO 272(AX), X6
	MOVO 288(AX), X9
	PSLLQ $14, X4
	PSLLQ $32, X8
	MOVO X6, X7
	PSLLQ $50, X6
	POR X2, X4
	POR X8, X6
	POR X4, X6
	MOVO X6, 64(BX)
	PSRLQ $14, X7
	PSLLQ $4, X9
	MOVO 304(AX), X5
	MOVO 320(AX), X13
	MOVO 336(AX), X11
	MOVO 352(AX), X10
	PSLLQ $22, X5
	PSLLQ $40, X13
	MOVO X11, X12
	PSLLQ $58, X11
	POR X7, X9
	POR X5, X13
	POR X11, X9
	POR X13, X9
	MOVO X9, 80(BX)
	PSRLQ $6, X12
	PSLLQ $12, X10
	MOVO 368(AX), X14
	MOVO 384(AX), X0
	MOVO 400(AX), X3
	MOVO 416(AX), X1
	PSLLQ $30, X14
	MOVO X0, X15
	PSLLQ $48, X0
	POR X12, X10
	POR X14, X0
	POR X10, X0
	MOVO X0, 96(BX)
	PSRLQ $16, X15
	PSLLQ $2, X3
	PSLLQ $20, X1
	MOVO 432(AX), X2
	MOVO 448(AX), X8
	MOVO 464(AX), X4
	MOVO 480(AX), X6
	PSLLQ $38, X2
	MOVO X8, X7
	PSLLQ $56, X8
	POR X15, X3
	POR X1, X2
	POR X8, X3
	POR X2, X3
	MOVO X3, 112(BX)
	PSRLQ $8, X7
	PSLLQ $10, X4
	PSLLQ $28, X6
	MOVO 496(AX), X5
	MOVO 512(AX), X11
	MOVO 528(AX), X13
	MOVO 544(AX), X9
	PSLLQ $46, X5
	POR X7, X4
	POR X6, X5
	POR X4, X5
	MOVO X5, 128(BX)
	PSLLQ $18, X13
	PSLLQ $36, X9
	MOVO 560(AX), X12
	MOVO 576(AX), X14
	MOVO 592(AX), X10
	MOVO 608(AX), X0
	MOVO X12, X15
	PSLLQ $54, X12
	POR X11, X13
	POR X9, X12
	POR X13, X12
	MOVO X12, 144(BX)
	PSRLQ $10, X15
	PSLLQ $8, X14
	PSLLQ $26, X10
	PSLLQ $44, X0
	MOVO 624(AX), X1
	MOVO 640(AX), X8
	MOVO 656(AX), X2
	MOVO 672(AX), X3
	MOVO X1, X7
	PSLLQ $62, X1
	POR X15, X14
	POR X10, X0
	POR X1, X14
	POR X0, X14
	MOVO X14, 160(BX)
	PSRLQ $2, X7
	PSLLQ $16, X8
	PSLLQ $34, X2
	MOVO X3, X6
	PSLLQ $52, X3
	POR X7, X8
	POR X2, X3
	POR X8, X3
	MOVO X3, 176(BX)
	PSRLQ $12, X6
	MOVO 688(AX), X4
	MOVO 704(AX), X5
	MOVO 720(AX), X11
	MOVO 736(AX), X9
	PSLLQ $6, X4
	PSLLQ $24, X5
	PSLLQ $42, X11
	MOVO X9, X13
	PSLLQ $60, X9
	POR X6, X4
	POR X5, X11
	POR X9, X4
	POR X11, X4
	MOVO X4, 192(BX)
	PSRLQ $4, X13
	MOVO 752(AX), X12
	MOVO 768(AX), X15
	MOVO 784(AX), X10
	MOVO 800(AX), X1
	PSLLQ $14, X12
	PSLLQ $32, X15
	MOVO X10, X0
	PSLLQ $50, X10
	POR X13, X12
	POR X15, X10
	POR X12, X10
	MOVO X10, 208(BX)
	PSRLQ $14, X0
	PSLLQ $4, X1
	MOVO 816(AX), X14
	MOVO 832(AX), X7
	MOVO 848(AX), X2
	MOVO 864(AX), X8
	PSLLQ $22, X14
	PSLLQ $40, X7
	MOVO X2, X3
	PSLLQ $58, X2
	POR X0, X1
	POR X14, X7
	POR X2, X1
	POR X7, X1
	MOVO X1, 224(BX)
	PSRLQ $6, X3
	PSLLQ $12, X8
	MOVO 880(AX), X6
	MOVO 896(AX), X5
	MOVO 912(AX), X9
	MOVO 928(AX), X11
	PSLLQ $30, X6
	MOVO X5, X4
	PSLLQ $48, X5
	POR X3, X8
	POR X6, X5
	POR X8, X5
	MOVO X5, 240(BX)
	PSRLQ $16, X4
	PSLLQ $2, X9
	PSLLQ $20, X11
	MOVO 944(AX), X13
	MOVO 960(AX), X15
	MOVO 976(AX), X12
	MOVO 992(AX), X10
	PSLLQ $38, X13
	MOVO X15, X0
	PSLLQ $56, X15
	POR X4, X9
	POR X11, X13
	POR X15, X9
	POR X13, X9
	MOVO X9, 256(BX)
	PSRLQ $8, X0
	PSLLQ $10, X12
	PSLLQ $28, X10
	MOVO 1008(AX), X14
	PSLLQ $46, X14
	POR X0, X12
	POR X10, X14
	POR X12, X14
	MOVO X14, 272(BX)
	RET

// func pack64_19(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_19(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $19, X2
	PSLLQ $38, X3
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	MOVO X4, X8
	PSLLQ $57, X4
	POR X1, X2
	POR X3, X4
	POR X2, X4
	MOVO X4, 0(BX)
	PSRLQ $7, X8
	PSLLQ $12, X5
	PSLLQ $31, X6
	MOVO X7, X9
	PSLLQ $50, X7
	POR X8, X5
	POR X6, X7
	POR X5, X7
	MOVO X7, 16(BX)
	PSRLQ $14, X9
	MOVO 112(AX), X10
	MOVO 128(AX), X11
	MOVO 144(AX), X12
	MOVO 160(AX), X13
	PSLLQ $5, X10
	PSLLQ $24, X11
	PSLLQ $43, X12
	MOVO X13, X14
	PSLLQ $62, X13
	POR X9, X10
	POR X11, X12
	POR X13, X10
	POR X12, X10
	MOVO X10, 32(BX)
	PSRLQ $2, X14
	MOVO 176(AX), X15
	MOVO 192(AX), X0
	MOVO 208(AX), X1
	MOVO 224(AX), X3
	PSLLQ $17, X15
	PSLLQ $36, X0
	MOVO X1, X2
	PSLLQ $55, X1
	POR X14, X15
	POR X0, X1
	POR X15, X1
	MOVO X1, 48(BX)
	PSRLQ $9, X2
	PSLLQ $10, X3
	MOVO 240(AX), X4
	MOVO 256(AX), X8
	MOVO 272(AX), X6
	MOVO 288(AX), X5
	PSLLQ $29, X4
	MOVO X8, X7
	PSLLQ $48, X8
	POR X2, X3
	POR X4, X8
	POR X3, X8
	MOVO X8, 64(BX)
	PSRLQ $16, X7
	PSLLQ $3, X6
	PSLLQ $22, X5
	MOVO 304(AX), X9
	MOVO 320(AX), X11
	MOVO 336(AX), X13
	MOVO 352(AX), X12
	PSLLQ $41, X9
	MOVO X11, X10
	PSLLQ $60, X11
	POR X7, X6
	POR X5, X9
	POR X11, X6
	POR X9, X6
	MOVO X6, 80(BX)
	PSRLQ $4, X10
	PSLLQ $15, X13
	PSLLQ $34, X12
	MOVO 368(AX), X14
	MOVO 384(AX), X0
	MOVO 400(AX), X15
	MOVO 416(AX), X1
	MOVO X14, X2
	PSLLQ $53, X14
	POR X10, X13
	POR X12, X14
	POR X13, X14
	MOVO X14, 96(BX)
	PSRLQ $11, X2
	PSLLQ $8, X0
	PSLLQ $27, X15
	MOVO X1, X4
	PSLLQ $46, X1
	POR X2, X0
	POR X15, X1
	POR X0, X1
	MOVO X1, 112(BX)
	PSRLQ $18, X4
	MOVO 432(AX), X3
	MOVO 448(AX), X8
	MOVO 464(AX), X7
	MOVO 480(AX), X5
	PSLLQ $1, X3
	PSLLQ $20, X8
	PSLLQ $39, X7
	MOVO X5, X11
	PSLLQ $58, X5
	POR X4, X3
	POR X8, X7
	POR X5, X3
	POR X7, X3
	MOVO X3, 128(BX)
	PSRLQ $6, X11
	MOVO 496(AX), X9
	MOVO 512(AX), X6
	MOVO 528(AX), X10
	MOVO 544(AX), X12
	PSLLQ $13, X9
	PSLLQ $32, X6
	MOVO X10, X13
	PSLLQ $51, X10
	POR X11, X9
	POR X6, X10
	POR X9, X10
	MOVO X10, 144(BX)
	PSRLQ $13, X13
	PSLLQ $6, X12
	MOVO 560(AX), X14
	MOVO 576(AX), X2
	MOVO 592(AX), X15
	MOVO 608(AX), X0
	PSLLQ $25, X14
	PSLLQ $44, X2
	MOVO X15, X1
	PSLLQ $63, X15
	POR X13, X12
	POR X14, X2
	POR X15, X12
	POR X2, X12
	MOVO X12, 160(BX)
	PSRLQ $1, X1
	PSLLQ $18, X0
	MOVO 624(AX), X4
	MOVO 640(AX), X8
	MOVO 656(AX), X5
	MOVO 672(AX), X7
	PSLLQ $37, X4
	MOVO X8, X3
	PSLLQ $56, X8
	POR X1, X0
	POR X4, X8
	POR X0, X8
	MOVO X8, 176(BX)
	PSRLQ $8, X3
	PSLLQ $11, X5
	PSLLQ $30, X7
	MOVO 688(AX), X11
	MOVO 704(AX), X6
	MOVO 720(AX), X9
	MOVO 736(AX), X10
	MOVO X11, X13
	PSLLQ $49, X11
	POR X3, X5
	POR X7, X11
	POR X5, X11
	MOVO X11, 192(BX)
	PSRLQ $15, X13
	PSLLQ $4, X6
	PSLLQ $23, X9
	PSLLQ $42, X10
	MOVO 752(AX), X14
	MOVO 768(AX), X15
	MOVO 784(AX), X2
	MOVO 800(AX), X12
	MOVO X14, X1
	PSLLQ $61, X14
	POR X13, X6
	POR X9, X10
	POR X14, X6
	POR X10, X6
	MOVO X6, 208(BX)
	PSRLQ $3, X1
	PSLLQ $16, X15
	PSLLQ $35, X2
	MOVO X12, X4
	PSLLQ $54, X12
	POR X1, X15
	POR X2, X12
	POR X15, X12
	MOVO X12, 224(BX)
	PSRLQ $10, X4
	MOVO 816(AX), X0
	MOVO 832(AX), X8
	MOVO 848(AX), X3
	MOVO 864(AX), X7
	PSLLQ $9, X0
	PSLLQ $28, X8
	MOVO X3, X5
	PSLLQ $47, X3
	POR X4, X0
	POR X8, X3
	POR X0, X3
	MOVO X3, 240(BX)
	PSRLQ $17, X5
	PSLLQ $2, X7
	MOVO 880(AX), X11
	MOVO 896(AX), X13
	MOVO 912(AX), X9
	MOVO 928(AX), X14
	PSLLQ $21, X11
	PSLLQ $40, X13
	MOVO X9, X10
	PSLLQ $59, X9
	POR X5, X7
	POR X11, X13
	POR X9, X7
	POR X13, X7
	MOVO X7, 256(BX)
	PSRLQ $5, X10
	PSLLQ $14, X14
	MOVO 944(AX), X6
	MOVO 960(AX), X1
	MOVO 976(AX), X2
	MOVO 992(AX), X15
	PSLLQ $33, X6
	MOVO X1, X12
	PSLLQ $52, X1
	POR X10, X14
	POR X6, X1
	POR X14, X1
	MOVO X1, 272(BX)
	PSRLQ $12, X12
	PSLLQ $7, X2
	PSLLQ $26, X15
	MOVO 1008(AX), X4
	PSLLQ $45, X4
	POR X12, X2
	POR X15, X4
	POR X2, X4
	MOVO X4, 288(BX)
	RET

// func pack64_20(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_20(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $20, X2
	PSLLQ $40, X3
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	MOVO X4, X8
	PSLLQ $60, X4
	POR X1, X2
	POR X3, X4
	POR X2, X4
	MOVO X4, 0(BX)
	PSRLQ $4, X8
	PSLLQ $16, X5
	PSLLQ $36, X6
	MOVO X7, X9
	PSLLQ $56, X7
	POR X8, X5
	POR X6, X7
	POR X5, X7
	MOVO X7, 16(BX)
	PSRLQ $8, X9
	MOVO 112(AX), X10
	MOVO 128(AX), X11
	MOVO 144(AX), X12
	MOVO 160(AX), X13
	PSLLQ $12, X10
	PSLLQ $32, X11
	MOVO X12, X14
	PSLLQ $52, X12
	POR X9, X10
	POR X11, X12
	POR X10, X12
	MOVO X12, 32(BX)
	PSRLQ $12, X14
	PSLLQ $8, X13
	MOVO 176(AX), X15
	MOVO 192(AX), X0
	MOVO 208(AX), X1
	MOVO 224(AX), X3
	PSLLQ $28, X15
	MOVO X0, X2
	PSLLQ $48, X0
	POR X14, X13
	POR X15, X0
	POR X13, X0
	MOVO X0, 48(BX)
	PSRLQ $16, X2
	PSLLQ $4, X1
	PSLLQ $24, X3
	MOVO 240(AX), X4
	MOVO 256(AX), X8
	MOVO 272(AX), X6
	MOVO 288(AX), X5
	PSLLQ $44, X4
	POR X2, X1
	POR X3, X4
	POR X1, X4
	MOVO X4, 64(BX)
	PSLLQ $20, X6
	PSLLQ $40, X5
	MOVO 304(AX), X7
	MOVO 320(AX), X9
	MOVO 336(AX), X11
	MOVO 352(AX), X10
	MOVO X7, X12
	PSLLQ $60, X7
	POR X8, X6
	POR X5, X7
	POR X6, X7
	MOVO X7, 80(BX)
	PSRLQ $4, X12
	PSLLQ $16, X9
	PSLLQ $36, X11
	MOVO X10, X14
	PSLLQ $56, X10
	POR X12, X9
	POR X11, X10
	POR X9, X10
	MOVO X10, 96(BX)
	PSRLQ $8, X14
	MOVO 368(AX), X15
	MOVO 384(AX), X13
	MOVO 400(AX), X0
	MOVO 416(AX), X2
	PSLLQ $12, X15
	PSLLQ $32, X13
	MOVO X0, X3
	PSLLQ $52, X0
	POR X14, X15
	POR X13, X0
	POR X15, X0
	MOVO X0, 112(BX)
	PSRLQ $12, X3
	PSLLQ $8, X2
	MOVO 432(AX), X1
	MOVO 448(AX), X4
	MOVO 464(AX), X8
	MOVO 480(AX), X5
	PSLLQ $28, X1
	MOVO X4, X6
	PSLLQ $48, X4
	POR X3, X2
	POR X1, X4
	POR X2, X4
	MOVO X4, 128(BX)
	PSRLQ $16, X6
	PSLLQ $4, X8
	PSLLQ $24, X5
	MOVO 496(AX), X7
	MOVO 512(AX), X12
	MOVO 528(AX), X11
	MOVO 544(AX), X9
	PSLLQ $44, X7
	POR X6, X8
	POR X5, X7
	POR X8, X7
	MOVO X7, 144(BX)
	PSLLQ $20, X11
	PSLLQ $40, X9
	MOVO 560(AX), X10
	MOVO 576(AX), X14
	MOVO 592(AX), X13
	MOVO 608(AX), X15
	MOVO X10, X0
	PSLLQ $60, X10
	POR X12, X11
	POR X9, X10
	POR X11, X10
	MOVO X10, 160(BX)
	PSRLQ $4, X0
	PSLLQ $16, X14
	PSLLQ $36, X13
	MOVO X15, X3
	PSLLQ $56, X15
	POR X0, X14
	POR X13, X15
	POR X14, X15
	MOVO X15, 176(BX)
	PSRLQ $8, X3
	MOVO 624(AX), X1
	MOVO 640(AX), X2
	MOVO 656(AX), X4
	MOVO 672(AX), X6
	PSLLQ $12, X1
	PSLLQ $32, X2
	MOVO X4, X5
	PSLLQ $52, X4
	POR X3, X1
	POR X2, X4
	POR X1, X4
	MOVO X4, 192(BX)
	PSRLQ $12, X5
	PSLLQ $8, X6
	MOVO 688(AX), X8
	MOVO 704(AX), X7
	MOVO 720(AX), X12
	MOVO 736(AX), X9
	PSLLQ $28, X8
	MOVO X7, X11
	PSLLQ $48, X7
	POR X5, X6
	POR X8, X7
	POR X6, X7
	MOVO X7, 208(BX)
	PSRLQ $16, X11
	PSLLQ $4, X12
	PSLLQ $24, X9
	MOVO 752(AX), X10
	MOVO 768(AX), X0
	MOVO 784(AX), X13
	MOVO 800(AX), X14
	PSLLQ $44, X10
	POR X11, X12
	POR X9, X10
	POR X12, X10
	MOVO X10, 224(BX)
	PSLLQ $20, X13
	PSLLQ $40, X14
	MOVO 816(AX), X15
	MOVO 832(AX), X3
	MOVO 848(AX), X2
	MOVO 864(AX), X1
	MOVO X15, X4
	PSLLQ $60, X15
	POR X0, X13
	POR X14, X15
	POR X13, X15
	MOVO X15, 240(BX)
	PSRLQ $4, X4
	PSLLQ $16, X3
	PSLLQ $36, X2
	MOVO X1, X5
	PSLLQ $56, X1
	POR X4, X3
	POR X2, X1
	POR X3, X1
	MOVO X1, 256(BX)
	PSRLQ $8, X5
	MOVO 880(AX), X8
	MOVO 896(AX), X6
	MOVO 912(AX), X7
	MOVO 928(AX), X11
	PSLLQ $12, X8
	PSLLQ $32, X6
	MOVO X7, X9
	PSLLQ $52, X7
	POR X5, X8
	POR X6, X7
	POR X8, X7
	MOVO X7, 272(BX)
	PSRLQ $12, X9
	PSLLQ $8, X11
	MOVO 944(AX), X12
	MOVO 960(AX), X10
	MOVO 976(AX), X0
	MOVO 992(AX), X14
	PSLLQ $28, X12
	MOVO X10, X13
	PSLLQ $48, X10
	POR X9, X11
	POR X12, X10
	POR X11, X10
	MOVO X10, 288(BX)
	PSRLQ $16, X13
	PSLLQ $4, X0
	PSLLQ $24, X14
	MOVO 1008(AX), X15
	PSLLQ $44, X15
	POR X13, X0
	POR X14, X15
	POR X0, X15
	MOVO X15, 304(BX)
	RET

// func pack64_21(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_21(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $21, X2
	PSLLQ $42, X3
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	MOVO X4, X8
	PSLLQ $63, X4
	POR X1, X2
	POR X3, X4
	POR X2, X4
	MOVO X4, 0(BX)
	PSRLQ $1, X8
	PSLLQ $20, X5
	PSLLQ $41, X6
	MOVO X7, X9
	PSLLQ $62, X7
	POR X8, X5
	POR X6, X7
	POR X5, X7
	MOVO X7, 16(BX)
	PSRLQ $2, X9
	MOVO 112(AX), X10
	MOVO 128(AX), X11
	MOVO 144(AX), X12
	MOVO 160(AX), X13
	PSLLQ $19, X10
	PSLLQ $40, X11
	MOVO X12, X14
	PSLLQ $61, X12
	POR X9, X10
	POR X11, X12
	POR X10, X12
	MOVO X12, 32(BX)
	PSRLQ $3, X14
	PSLLQ $18, X13
	MOVO 176(AX), X15
	MOVO 192(AX), X0
	MOVO 208(AX), X1
	MOVO 224(AX), X3
	PSLLQ $39, X15
	MOVO X0, X2
	PSLLQ $60, X0
	POR X14, X13
	POR X15, X0
	POR X13, X0
	MOVO X0, 48(BX)
	PSRLQ $4, X2
	PSLLQ $17, X1
	PSLLQ $38, X3
	MOVO 240(AX), X4
	MOVO 256(AX), X8
	MOVO 272(AX), X6
	MOVO 288(AX), X5
	MOVO X4, X7
	PSLLQ $59, X4
	POR X2, X1
	POR X3, X4
	POR X1, X4
	MOVO X4, 64(BX)
	PSRLQ $5, X7
	PSLLQ $16, X8
	PSLLQ $37, X6
	MOVO X5, X9
	PSLLQ $58, X5
	POR X7, X8
	POR X6, X5
	POR X8, X5
	MOVO X5, 80(BX)
	PSRLQ $6, X9
	MOVO 304(AX), X11
	MOVO 320(AX), X10
	MOVO 336(AX), X12
	MOVO 352(AX), X14
	PSLLQ $15, X11
	PSLLQ $36, X10
	MOVO X12, X15
	PSLLQ $57, X12
	POR X9, X11
	POR X10, X12
	POR X11, X12
	MOVO X12, 96(BX)
	PSRLQ $7, X15
	PSLLQ $14, X14
	MOVO 368(AX), X13
	MOVO 384(AX), X0
	MOVO 400(AX), X2
	MOVO 416(AX), X3
	PSLLQ $35, X13
	MOVO X0, X1
	PSLLQ $56, X0
	POR X15, X14
	POR X13, X0
	POR X14, X0
	MOVO X0, 112(BX)
	PSRLQ $8, X1
	PSLLQ $13, X2
	PSLLQ $34, X3
	MOVO 432(AX), X4
	MOVO 448(AX), X7
	MOVO 464(AX), X6
	MOVO 480(AX), X8
	MOVO X4, X5
	PSLLQ $55, X4
	POR X1, X2
	POR X3, X4
	POR X2, X4
	MOVO X4, 128(BX)
	PSRLQ $9, X5
	PSLLQ $12, X7
	PSLLQ $33, X6
	MOVO X8, X9
	PSLLQ $54, X8
	POR X5, X7
	POR X6, X8
	POR X7, X8
	MOVO X8, 144(BX)
	PSRLQ $10, X9
	MOVO 496(AX), X10
	MOVO 512(AX), X11
	MOVO 528(AX), X12
	MOVO 544(AX), X15
	PSLLQ $11, X10
	PSLLQ $32, X11
	MOVO X12, X13
	PSLLQ $53, X12
	POR X9, X10
	POR X11, X12
	POR X10, X12
	MOVO X12, 160(BX)
	PSRLQ $11, X13
	PSLLQ $10, X15
	MOVO 560(AX), X14
	MOVO 576(AX), X0
	MOVO 592(AX), X1
	MOVO 608(AX), X3
	PSLLQ $31, X14
	MOVO X0, X2
	PSLLQ $52, X0
	POR X13, X15
	POR X14, X0
	POR X15, X0
	MOVO X0, 176(BX)
	PSRLQ $12, X2
	PSLLQ $9, X1
	PSLLQ $30, X3
	MOVO 624(AX), X4
	MOVO 640(AX), X5
	MOVO 656(AX), X6
	MOVO 672(AX), X7
	MOVO X4, X8
	PSLLQ $51, X4
	POR X2, X1
	POR X3, X4
	POR X1, X4
	MOVO X4, 192(BX)
	PSRLQ $13, X8
	PSLLQ $8, X5
	PSLLQ $29, X6
	MOVO X7, X9
	PSLLQ $50, X7
	POR X8, X5
	POR X6, X7
	POR X5, X7
	MOVO X7, 208(BX)
	PSRLQ $14, X9
	MOVO 688(AX), X11
	MOVO 704(AX), X10
	MOVO 720(AX), X12
	MOVO 736(AX), X13
	PSLLQ $7, X11
	PSLLQ $28, X10
	MOVO X12, X14
	PSLLQ $49, X12
	POR X9, X11
	POR X10, X12
	POR X11, X12
	MOVO X12, 224(BX)
	PSRLQ $15, X14
	PSLLQ $6, X13
	MOVO 752(AX), X15
	MOVO 768(AX), X0
	MOVO 784(AX), X2
	MOVO 800(AX), X3
	PSLLQ $27, X15
	MOVO X0, X1
	PSLLQ $48, X0
	POR X14, X13
	POR X15, X0
	POR X13, X0
	MOVO X0, 240(BX)
	PSRLQ $16, X1
	PSLLQ $5, X2
	PSLLQ $26, X3
	MOVO 816(AX), X4
	MOVO 832(AX), X8
	MOVO 848(AX), X6
	MOVO 864(AX), X5
	MOVO X4, X7
	PSLLQ $47, X4
	POR X1, X2
	POR X3, X4
	POR X2, X4
	MOVO X4, 256(BX)
	PSRLQ $17, X7
	PSLLQ $4, X8
	PSLLQ $25, X6
	MOVO X5, X9
	PSLLQ $46, X5
	POR X7, X8
	POR X6, X5
	POR X8, X5
	MOVO X5, 272(BX)
	PSRLQ $18, X9
	MOVO 880(AX), X10
	MOVO 896(AX), X11
	MOVO 912(AX), X12
	MOVO 928(AX), X14
	PSLLQ $3, X10
	PSLLQ $24, X11
	MOVO X12, X15
	PSLLQ $45, X12
	POR X9, X10
	POR X11, X12
	POR X10, X12
	MOVO X12, 288(BX)
	PSRLQ $19, X15
	PSLLQ $2, X14
	MOVO 944(AX), X13
	MOVO 960(AX), X0
	MOVO 976(AX), X1
	MOVO 992(AX), X3
	PSLLQ $23, X13
	MOVO X0, X2
	PSLLQ $44, X0
	POR X15, X14
	POR X13, X0
	POR X14, X0
	MOVO X0, 304(BX)
	PSRLQ $20, X2
	PSLLQ $1, X1
	PSLLQ $22, X3
	MOVO 1008(AX), X4
	PSLLQ $43, X4
	POR X2, X1
	POR X3, X4
	POR X1, X4
	MOVO X4, 320(BX)
	RET

// func pack64_22(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_22(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $22, X2
	MOVO X3, X4
	PSLLQ $44, X3
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	PSRLQ $20, X4
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	PSLLQ $2, X5
	PSLLQ $24, X6
	MOVO X7, X9
	PSLLQ $46, X7
	POR X4, X5
	POR X6, X7
	POR X5, X7
	MOVO X7, 16(BX)
	PSRLQ $18, X9
	PSLLQ $4, X8
	MOVO 112(AX), X10
	MOVO 128(AX), X11
	MOVO 144(AX), X12
	MOVO 160(AX), X13
	PSLLQ $26, X10
	MOVO X11, X14
	PSLLQ $48, X11
	POR X9, X8
	POR X10, X11
	POR X8, X11
	MOVO X11, 32(BX)
	PSRLQ $16, X14
	PSLLQ $6, X12
	PSLLQ $28, X13
	MOVO 176(AX), X15
	MOVO 192(AX), X0
	MOVO 208(AX), X1
	MOVO 224(AX), X3
	MOVO X15, X2
	PSLLQ $50, X15
	POR X14, X12
	POR X13, X15
	POR X12, X15
	MOVO X15, 48(BX)
	PSRLQ $14, X2
	PSLLQ $8, X0
	PSLLQ $30, X1
	MOVO X3, X4
	PSLLQ $52, X3
	POR X2, X0
	POR X1, X3
	POR X0, X3
	MOVO X3, 64(BX)
	PSRLQ $12, X4
	MOVO 240(AX), X6
	MOVO 256(AX), X5
	MOVO 272(AX), X7
	MOVO 288(AX), X9
	PSLLQ $10, X6
	PSLLQ $32, X5
	MOVO X7, X10
	PSLLQ $54, X7
	POR X4, X6
	POR X5, X7
	POR X6, X7
	MOVO X7, 80(BX)
	PSRLQ $10, X10
	PSLLQ $12, X9
	MOVO 304(AX), X8
	MOVO 320(AX), X11
	MOVO 336(AX), X14
	MOVO 352(AX), X13
	PSLLQ $34, X8
	MOVO X11, X12
	PSLLQ $56, X11
	POR X10, X9
	POR X8, X11
	POR X9, X11
	MOVO X11, 96(BX)
	PSRLQ $8, X12
	PSLLQ $14, X14
	PSLLQ $36, X13
	MOVO 368(AX), X15
	MOVO 384(AX), X2
	MOVO 400(AX), X1
	MOVO 416(AX), X0
	MOVO X15, X3
	PSLLQ $58, X15
	POR X12, X14
	POR X13, X15
	POR X14, X15
	MOVO X15, 112(BX)
	PSRLQ $6, X3
	PSLLQ $16, X2
	PSLLQ $38, X1
	MOVO X0, X4
	PSLLQ $60, X0
	POR X3, X2
	POR X1, X0
	POR X2, X0
	MOVO X0, 128(BX)
	PSRLQ $4, X4
	MOVO 432(AX), X5
	MOVO 448(AX), X6
	MOVO 464(AX), X7
	MOVO 480(AX), X10
	PSLLQ $18, X5
	PSLLQ $40, X6
	MOVO X7, X8
	PSLLQ $62, X7
	POR X4, X5
	POR X6, X7
	POR X5, X7
	MOVO X7, 144(BX)
	PSRLQ $2, X8
	PSLLQ $20, X10
	MOVO 496(AX), X9
	MOVO 512(AX), X11
	MOVO 528(AX), X12
	MOVO 544(AX), X13
	PSLLQ $42, X9
	POR X8, X10
	POR X9, X10
	MOVO X10, 160(BX)
	PSLLQ $22, X12
	MOVO X13, X14
	PSLLQ $44, X13
	POR X11, X12
	POR X13, X12
	MOVO X12, 176(BX)
	PSRLQ $20, X14
	MOVO 560(AX), X15
	MOVO 576(AX), X3
	MOVO 592(AX), X1
	MOVO 608(AX), X2
	PSLLQ $2, X15
	PSLLQ $24, X3
	MOVO X1, X0
	PSLLQ $46, X1
	POR X14, X15
	POR X3, X1
	POR X15, X1
	MOVO X1, 192(BX)
	PSRLQ $18, X0
	PSLLQ $4, X2
	MOVO 624(AX), X4
	MOVO 640(AX), X6
	MOVO 656(AX), X5
	MOVO 672(AX), X7
	PSLLQ $26, X4
	MOVO X6, X8
	PSLLQ $48, X6
	POR X0, X2
	POR X4, X6
	POR X2, X6
	MOVO X6, 208(BX)
	PSRLQ $16, X8
	PSLLQ $6, X5
	PSLLQ $28, X7
	MOVO 688(AX), X9
	MOVO 704(AX), X10
	MOVO 720(AX), X11
	MOVO 736(AX), X13
	MOVO X9, X12
	PSLLQ $50, X9
	POR X8, X5
	POR X7, X9
	POR X5, X9
	MOVO X9, 224(BX)
	PSRLQ $14, X12
	PSLLQ $8, X10
	PSLLQ $30, X11
	MOVO X13, X14
	PSLLQ $52, X13
	POR X12, X10
	POR X11, X13
	POR X10, X13
	MOVO X13, 240(BX)
	PSRLQ $12, X14
	MOVO 752(AX), X3
	MOVO 768(AX), X15
	MOVO 784(AX), X1
	MOVO 800(AX), X0
	PSLLQ $10, X3
	PSLLQ $32, X15
	MOVO X1, X4
	PSLLQ $54, X1
	POR X14, X3
	POR X15, X1
	POR X3, X1
	MOVO X1, 256(BX)
	PSRLQ $10, X4
	PSLLQ $12, X0
	MOVO 816(AX), X2
	MOVO 832(AX), X6
	MOVO 848(AX), X8
	MOVO 864(AX), X7
	PSLLQ $34, X2
	MOVO X6, X5
	PSLLQ $56, X6
	POR X4, X0
	POR X2, X6
	POR X0, X6
	MOVO X6, 272(BX)
	PSRLQ $8, X5
	PSLLQ $14, X8
	PSLLQ $36, X7
	MOVO 880(AX), X9
	MOVO 896(AX), X12
	MOVO 912(AX), X11
	MOVO 928(AX), X10
	MOVO X9, X13
	PSLLQ $58, X9
	POR X5, X8
	POR X7, X9
	POR X8, X9
	MOVO X9, 288(BX)
	PSRLQ $6, X13
	PSLLQ $16, X12
	PSLLQ $38, X11
	MOVO X10, X14
	PSLLQ $60, X10
	POR X13, X12
	POR X11, X10
	POR X12, X10
	MOVO X10, 304(BX)
	PSRLQ $4, X14
	MOVO 944(AX), X15
	MOVO 960(AX), X3
	MOVO 976(AX), X1
	MOVO 992(AX), X4
	PSLLQ $18, X15
	PSLLQ $40, X3
	MOVO X1, X2
	PSLLQ $62, X1
	POR X14, X15
	POR X3, X1
	POR X15, X1
	MOVO X1, 320(BX)
	PSRLQ $2, X2
	PSLLQ $20, X4
	MOVO 1008(AX), X0
	PSLLQ $42, X0
	POR X2, X4
	POR X0, X4
	MOVO X4, 336(BX)
	RET

// func pack64_23(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_23(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $23, X2
	MOVO X3, X4
	PSLLQ $46, X3
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	PSRLQ $18, X4
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	PSLLQ $5, X5
	PSLLQ $28, X6
	MOVO X7, X9
	PSLLQ $51, X7
	POR X4, X5
	POR X6, X7
	POR X5, X7
	MOVO X7, 16(BX)
	PSRLQ $13, X9
	PSLLQ $10, X8
	MOVO 112(AX), X10
	MOVO 128(AX), X11
	MOVO 144(AX), X12
	MOVO 160(AX), X13
	PSLLQ $33, X10
	MOVO X11, X14
	PSLLQ $56, X11
	POR X9, X8
	POR X10, X11
	POR X8, X11
	MOVO X11, 32(BX)
	PSRLQ $8, X14
	PSLLQ $15, X12
	PSLLQ $38, X13
	MOVO 176(AX), X15
	MOVO 192(AX), X0
	MOVO 208(AX), X1
	MOVO 224(AX), X3
	MOVO X15, X2
	PSLLQ $61, X15
	POR X14, X12
	POR X13, X15
	POR X12, X15
	MOVO X15, 48(BX)
	PSRLQ $3, X2
	PSLLQ $20, X0
	MOVO X1, X4
	PSLLQ $43, X1
	POR X2, X0
	POR X1, X0
	MOVO X0, 64(BX)
	PSRLQ $21, X4
	PSLLQ $2, X3
	MOVO 240(AX), X6
	MOVO 256(AX), X5
	MOVO 272(AX), X7
	MOVO 288(AX), X9
	PSLLQ $25, X6
	MOVO X5, X10
	PSLLQ $48, X5
	POR X4, X3
	POR X6, X5
	POR X3, X5
	MOVO X5, 80(BX)
	PSRLQ $16, X10
	PSLLQ $7, X7
	PSLLQ $30, X9
	MOVO 304(AX), X8
	MOVO 320(AX), X11
	MOVO 336(AX), X14
	MOVO 352(AX), X13
	MOVO X8, X12
	PSLLQ $53, X8
	POR X10, X7
	POR X9, X8
	POR X7, X8
	MOVO X8, 96(BX)
	PSRLQ $11, X12
	PSLLQ $12, X11
	PSLLQ $35, X14
	MOVO X13, X15
	PSLLQ $58, X13
	POR X12, X11
	POR X14, X13
	POR X11, X13
	MOVO X13, 112(BX)
	PSRLQ $6, X15
	MOVO 368(AX), X2
	MOVO 384(AX), X1
	MOVO 400(AX), X0
	MOVO 416(AX), X4
	PSLLQ $17, X2
	PSLLQ $40, X1
	MOVO X0, X6
	PSLLQ $63, X0
	POR X15, X2
	POR X1, X0
	POR X2, X0
	MOVO X0, 128(BX)
	PSRLQ $1, X6
	PSLLQ $22, X4
	MOVO 432(AX), X3
	MOVO 448(AX), X5
	MOVO 464(AX), X10
	MOVO 480(AX), X9
	MOVO X3, X7
	PSLLQ $45, X3
	POR X6, X4
	POR X3, X4
	MOVO X4, 144(BX)
	PSRLQ $19, X7
	PSLLQ $4, X5
	PSLLQ $27, X10
	MOVO X9, X8
	PSLLQ $50, X9
	POR X7, X5
	POR X10, X9
	POR X5, X9
	MOVO X9, 160(BX)
	PSRLQ $14, X8
	MOVO 496(AX), X12
	MOVO 512(AX), X14
	MOVO 528(AX), X11
	MOVO 544(AX), X13
	PSLLQ $9, X12
	PSLLQ $32, X14
	MOVO X11, X15
	PSLLQ $55, X11
	POR X8, X12
	POR X14, X11
	POR X12, X11
	MOVO X11, 176(BX)
	PSRLQ $9, X15
	PSLLQ $14, X13
	MOVO 560(AX), X1
	MOVO 576(AX), X2
	MOVO 592(AX), X0
	MOVO 608(AX), X6
	PSLLQ $37, X1
	MOVO X2, X3
	PSLLQ $60, X2
	POR X15, X13
	POR X1, X2
	POR X13, X2
	MOVO X2, 192(BX)
	PSRLQ $4, X3
	PSLLQ $19, X0
	MOVO X6, X4
	PSLLQ $42, X6
	POR X3, X0
	POR X6, X0
	MOVO X0, 208(BX)
	PSRLQ $22, X4
	MOVO 624(AX), X7
	MOVO 640(AX), X10
	MOVO 656(AX), X5
	MOVO 672(AX), X9
	PSLLQ $1, X7
	PSLLQ $24, X10
	MOVO X5, X8
	PSLLQ $47, X5
	POR X4, X7
	POR X10, X5
	POR X7, X5
	MOVO X5, 224(BX)
	PSRLQ $17, X8
	PSLLQ $6, X9
	MOVO 688(AX), X14
	MOVO 704(AX), X12
	MOVO 720(AX), X11
	MOVO 736(AX), X15
	PSLLQ $29, X14
	MOVO X12, X1
	PSLLQ $52, X12
	POR X8, X9
	POR X14, X12
	POR X9, X12
	MOVO X12, 240(BX)
	PSRLQ $12, X1
	PSLLQ $11, X11
	PSLLQ $34, X15
	MOVO 752(AX), X13
	MOVO 768(AX), X2
	MOVO 784(AX), X3
	MOVO 800(AX), X6
	MOVO X13, X0
	PSLLQ $57, X13
	POR X1, X11
	POR X15, X13
	POR X11, X13
	MOVO X13, 256(BX)
	PSRLQ $7, X0
	PSLLQ $16, X2
	PSLLQ $39, X3
	MOVO X6, X4
	PSLLQ $62, X6
	POR X0, X2
	POR X3, X6
	POR X2, X6
	MOVO X6, 272(BX)
	PSRLQ $2, X4
	MOVO 816(AX), X10
	MOVO 832(AX), X7
	MOVO 848(AX), X5
	MOVO 864(AX), X8
	PSLLQ $21, X10
	MOVO X7, X14
	PSLLQ $44, X7
	POR X4, X10
	POR X7, X10
	MOVO X10, 288(BX)
	PSRLQ $20, X14
	PSLLQ $3, X5
	PSLLQ $26, X8
	MOVO 880(AX), X9
	MOVO 896(AX), X12
	MOVO 912(AX), X1
	MOVO 928(AX), X15
	MOVO X9, X11
	PSLLQ $49, X9
	POR X14, X5
	POR X8, X9
	POR X5, X9
	MOVO X9, 304(BX)
	PSRLQ $15, X11
	PSLLQ $8, X12
	PSLLQ $31, X1
	MOVO X15, X13
	PSLLQ $54, X15
	POR X11, X12
	POR X1, X15
	POR X12, X15
	MOVO X15, 320(BX)
	PSRLQ $10, X13
	MOVO 944(AX), X0
	MOVO 960(AX), X3
	MOVO 976(AX), X2
	MOVO 992(AX), X6
	PSLLQ $13, X0
	PSLLQ $36, X3
	MOVO X2, X4
	PSLLQ $59, X2
	POR X13, X0
	POR X3, X2
	POR X0, X2
	MOVO X2, 336(BX)
	PSRLQ $5, X4
	PSLLQ $18, X6
	MOVO 1008(AX), X7
	PSLLQ $41, X7
	POR X4, X6
	POR X7, X6
	MOVO X6, 352(BX)
	RET

// func pack64_24(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_24(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $24, X2
	MOVO X3, X4
	PSLLQ $48, X3
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	PSRLQ $16, X4
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	PSLLQ $8, X5
	PSLLQ $32, X6
	MOVO X7, X9
	PSLLQ $56, X7
	POR X4, X5
	POR X6, X7
	POR X5, X7
	MOVO X7, 16(BX)
	PSRLQ $8, X9
	PSLLQ $16, X8
	MOVO 112(AX), X10
	MOVO 128(AX), X11
	MOVO 144(AX), X12
	MOVO 160(AX), X13
	PSLLQ $40, X10
	POR X9, X8
	POR X10, X8
	MOVO X8, 32(BX)
	PSLLQ $24, X12
	MOVO X13, X14
	PSLLQ $48, X13
	POR X11, X12
	POR X13, X12
	MOVO X12, 48(BX)
	PSRLQ $16, X14
	MOVO 176(AX), X15
	MOVO 192(AX), X0
	MOVO 208(AX), X1
	MOVO 224(AX), X3
	PSLLQ $8, X15
	PSLLQ $32, X0
	MOVO X1, X2
	PSLLQ $56, X1
	POR X14, X15
	POR X0, X1
	POR X15, X1
	MOVO X1, 64(BX)
	PSRLQ $8, X2
	PSLLQ $16, X3
	MOVO 240(AX), X4
	MOVO 256(AX), X6
	MOVO 272(AX), X5
	MOVO 288(AX), X7
	PSLLQ $40, X4
	POR X2, X3
	POR X4, X3
	MOVO X3, 80(BX)
	PSLLQ $24, X5
	MOVO X7, X9
	PSLLQ $48, X7
	POR X6, X5
	POR X7, X5
	MOVO X5, 96(BX)
	PSRLQ $16, X9
	MOVO 304(AX), X10
	MOVO 320(AX), X8
	MOVO 336(AX), X11
	MOVO 352(AX), X13
	PSLLQ $8, X10
	PSLLQ $32, X8
	MOVO X11, X12
	PSLLQ $56, X11
	POR X9, X10
	POR X8, X11
	POR X10, X11
	MOVO X11, 112(BX)
	PSRLQ $8, X12
	PSLLQ $16, X13
	MOVO 368(AX), X14
	MOVO 384(AX), X0
	MOVO 400(AX), X15
	MOVO 416(AX), X1
	PSLLQ $40, X14
	POR X12, X13
	POR X14, X13
	MOVO X13, 128(BX)
	PSLLQ $24, X15
	MOVO X1, X2
	PSLLQ $48, X1
	POR X0, X15
	POR X1, X15
	MOVO X15, 144(BX)
	PSRLQ $16, X2
	MOVO 432(AX), X4
	MOVO 448(AX), X3
	MOVO 464(AX), X6
	MOVO 480(AX), X7
	PSLLQ $8, X4
	PSLLQ $32, X3
	MOVO X6, X5
	PSLLQ $56, X6
	POR X2, X4
	POR X3, X6
	POR X4, X6
	MOVO X6, 160(BX)
	PSRLQ $8, X5
	PSLLQ $16, X7
	MOVO 496(AX), X9
	MOVO 512(AX), X8
	MOVO 528(AX), X10
	MOVO 544(AX), X11
	PSLLQ $40, X9
	POR X5, X7
	POR X9, X7
	MOVO X7, 176(BX)
	PSLLQ $24, X10
	MOVO X11, X12
	PSLLQ $48, X11
	POR X8, X10
	POR X11, X10
	MOVO X10, 192(BX)
	PSRLQ $16, X12
	MOVO 560(AX), X14
	MOVO 576(AX), X13
	MOVO 592(AX), X0
	MOVO 608(AX), X1
	PSLLQ $8, X14
	PSLLQ $32, X13
	MOVO X0, X15
	PSLLQ $56, X0
	POR X12, X14
	POR X13, X0
	POR X14, X0
	MOVO X0, 208(BX)
	PSRLQ $8, X15
	PSLLQ $16, X1
	MOVO 624(AX), X2
	MOVO 640(AX), X3
	MOVO 656(AX), X4
	MOVO 672(AX), X6
	PSLLQ $40, X2
	POR X15, X1
	POR X2, X1
	MOVO X1, 224(BX)
	PSLLQ $24, X4
	MOVO X6, X5
	PSLLQ $48, X6
	POR X3, X4
	POR X6, X4
	MOVO X4, 240(BX)
	PSRLQ $16, X5
	MOVO 688(AX), X9
	MOVO 704(AX), X7
	MOVO 720(AX), X8
	MOVO 736(AX), X11
	PSLLQ $8, X9
	PSLLQ $32, X7
	MOVO X8, X10
	PSLLQ $56, X8
	POR X5, X9
	POR X7, X8
	POR X9, X8
	MOVO X8, 256(BX)
	PSRLQ $8, X10
	PSLLQ $16, X11
	MOVO 752(AX), X12
	MOVO 768(AX), X13
	MOVO 784(AX), X14
	MOVO 800(AX), X0
	PSLLQ $40, X12
	POR X10, X11
	POR X12, X11
	MOVO X11, 272(BX)
	PSLLQ $24, X14
	MOVO X0, X15
	PSLLQ $48, X0
	POR X13, X14
	POR X0, X14
	MOVO X14, 288(BX)
	PSRLQ $16, X15
	MOVO 816(AX), X2
	MOVO 832(AX), X1
	MOVO 848(AX), X3
	MOVO 864(AX), X6
	PSLLQ $8, X2
	PSLLQ $32, X1
	MOVO X3, X4
	PSLLQ $56, X3
	POR X15, X2
	POR X1, X3
	POR X2, X3
	MOVO X3, 304(BX)
	PSRLQ $8, X4
	PSLLQ $16, X6
	MOVO 880(AX), X5
	MOVO 896(AX), X7
	MOVO 912(AX), X9
	MOVO 928(AX), X8
	PSLLQ $40, X5
	POR X4, X6
	POR X5, X6
	MOVO X6, 320(BX)
	PSLLQ $24, X9
	MOVO X8, X10
	PSLLQ $48, X8
	POR X7, X9
	POR X8, X9
	MOVO X9, 336(BX)
	PSRLQ $16, X10
	MOVO 944(AX), X12
	MOVO 960(AX), X11
	MOVO 976(AX), X13
	MOVO 992(AX), X0
	PSLLQ $8, X12
	PSLLQ $32, X11
	MOVO X13, X14
	PSLLQ $56, X13
	POR X10, X12
	POR X11, X13
	POR X12, X13
	MOVO X13, 352(BX)
	PSRLQ $8, X14
	PSLLQ $16, X0
	MOVO 1008(AX), X15
	PSLLQ $40, X15
	POR X14, X0
	POR X15, X0
	MOVO X0, 368(BX)
	RET

// func pack64_25(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_25(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $25, X2
	MOVO X3, X4
	PSLLQ $50, X3
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	PSRLQ $14, X4
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	PSLLQ $11, X5
	PSLLQ $36, X6
	MOVO X7, X9
	PSLLQ $61, X7
	POR X4, X5
	POR X6, X7
	POR X5, X7
	MOVO X7, 16(BX)
	PSRLQ $3, X9
	PSLLQ $22, X8
	MOVO 112(AX), X10
	MOVO 128(AX), X11
	MOVO 144(AX), X12
	MOVO 160(AX), X13
	MOVO X10, X14
	PSLLQ $47, X10
	POR X9, X8
	POR X10, X8
	MOVO X8, 32(BX)
	PSRLQ $17, X14
	PSLLQ $8, X11
	PSLLQ $33, X12
	MOVO X13, X15
	PSLLQ $58, X13
	POR X14, X11
	POR X12, X13
	POR X11, X13
	MOVO X13, 48(BX)
	PSRLQ $6, X15
	MOVO 176(AX), X0
	MOVO 192(AX), X1
	MOVO 208(AX), X3
	MOVO 224(AX), X2
	PSLLQ $19, X0
	MOVO X1, X4
	PSLLQ $44, X1
	POR X15, X0
	POR X1, X0
	MOVO X0, 64(BX)
	PSRLQ $20, X4
	PSLLQ $5, X3
	PSLLQ $30, X2
	MOVO 240(AX), X6
	MOVO 256(AX), X5
	MOVO 272(AX), X7
	MOVO 288(AX), X9
	MOVO X6, X10
	PSLLQ $55, X6
	POR X4, X3
	POR X2, X6
	POR X3, X6
	MOVO X6, 80(BX)
	PSRLQ $9, X10
	PSLLQ $16, X5
	MOVO X7, X8
	PSLLQ $41, X7
	POR X10, X5
	POR X7, X5
	MOVO X5, 96(BX)
	PSRLQ $23, X8
	PSLLQ $2, X9
	MOVO 304(AX), X14
	MOVO 320(AX), X12
	MOVO 336(AX), X11
	MOVO 352(AX), X13
	PSLLQ $27, X14
	MOVO X12, X15
	PSLLQ $52, X12
	POR X8, X9
	POR X14, X12
	POR X9, X12
	MOVO X12, 112(BX)
	PSRLQ $12, X15
	PSLLQ $13, X11
	PSLLQ $38, X13
	MOVO 368(AX), X1
	MOVO 384(AX), X0
	MOVO 400(AX), X4
	MOVO 416(AX), X2
	MOVO X1, X3
	PSLLQ $63, X1
	POR X15, X11
	POR X13, X1
	POR X11, X1
	MOVO X1, 128(BX)
	PSRLQ $1, X3
	PSLLQ $24, X0
	MOVO X4, X6
	PSLLQ $49, X4
	POR X3, X0
	POR X4, X0
	MOVO X0, 144(BX)
	PSRLQ $15, X6
	PSLLQ $10, X2
	MOVO 432(AX), X10
	MOVO 448(AX), X7
	MOVO 464(AX), X5
	MOVO 480(AX), X8
	PSLLQ $35, X10
	MOVO X7, X14
	PSLLQ $60, X7
	POR X6, X2
	POR X10, X7
	POR X2, X7
	MOVO X7, 160(BX)
	PSRLQ $4, X14
	PSLLQ $21, X5
	MOVO X8, X9
	PSLLQ $46, X8
	POR X14, X5
	POR X8, X5
	MOVO X5, 176(BX)
	PSRLQ $18, X9
	MOVO 496(AX), X12
	MOVO 512(AX), X15
	MOVO 528(AX), X13
	MOVO 544(AX), X11
	PSLLQ $7, X12
	PSLLQ $32, X15
	MOVO X13, X1
	PSLLQ $57, X13
	POR X9, X12
	POR X15, X13
	POR X12, X13
	MOVO X13, 192(BX)
	PSRLQ $7, X1
	PSLLQ $18, X11
	MOVO 560(AX), X3
	MOVO 576(AX), X4
	MOVO 592(AX), X0
	MOVO 608(AX), X6
	MOVO X3, X10
	PSLLQ $43, X3
	POR X1, X11
	POR X3, X11
	MOVO X11, 208(BX)
	PSRLQ $21, X10
	PSLLQ $4, X4
	PSLLQ $29, X0
	MOVO X6, X2
	PSLLQ $54, X6
	POR X10, X4
	POR X0, X6
	POR X4, X6
	MOVO X6, 224(BX)
	PSRLQ $10, X2
	MOVO 624(AX), X7
	MOVO 640(AX), X14
	MOVO 656(AX), X8
	MOVO 672(AX), X5
	PSLLQ $15, X7
	MOVO X14, X9
	PSLLQ $40, X14
	POR X2, X7
	POR X14, X7
	MOVO X7, 240(BX)
	PSRLQ $24, X9
	PSLLQ $1, X8
	PSLLQ $26, X5
	MOVO 688(AX), X15
	MOVO 704(AX), X12
	MOVO 720(AX), X13
	MOVO 736(AX), X1
	MOVO X15, X3
	PSLLQ $51, X15
	POR X9, X8
	POR X5, X15
	POR X8, X15
	MOVO X15, 256(BX)
	PSRLQ $13, X3
	PSLLQ $12, X12
	PSLLQ $37, X13
	MOVO X1, X11
	PSLLQ $62, X1
	POR X3, X12
	POR X13, X1
	POR X12, X1
	MOVO X1, 272(BX)
	PSRLQ $2, X11
	MOVO 752(AX), X10
	MOVO 768(AX), X0
	MOVO 784(AX), X4
	MOVO 800(AX), X6
	PSLLQ $23, X10
	MOVO X0, X2
	PSLLQ $48, X0
	POR X11, X10
	POR X0, X10
	MOVO X10, 288(BX)
	PSRLQ $16, X2
	PSLLQ $9, X4
	PSLLQ $34, X6
	MOVO 816(AX), X14
	MOVO 832(AX), X7
	MOVO 848(AX), X9
	MOVO 864(AX), X5
	MOVO X14, X8
	PSLLQ $59, X14
	POR X2, X4
	POR X6, X14
	POR X4, X14
	MOVO X14, 304(BX)
	PSRLQ $5, X8
	PSLLQ $20, X7
	MOVO X9, X15
	PSLLQ $45, X9
	POR X8, X7
	POR X9, X7
	MOVO X7, 320(BX)
	PSRLQ $19, X15
	PSLLQ $6, X5
	MOVO 880(AX), X3
	MOVO 896(AX), X13
	MOVO 912(AX), X12
	MOVO 928(AX), X1
	PSLLQ $31, X3
	MOVO X13, X11
	PSLLQ $56, X13
	POR X15, X5
	POR X3, X13
	POR X5, X13
	MOVO X13, 336(BX)
	PSRLQ $8, X11
	PSLLQ $17, X12
	MOVO X1, X0
	PSLLQ $42, X1
	POR X11, X12
	POR X1, X12
	MOVO X12, 352(BX)
	PSRLQ $22, X0
	MOVO 944(AX), X10
	MOVO 960(AX), X2
	MOVO 976(AX), X6
	MOVO 992(AX), X4
	PSLLQ $3, X10
	PSLLQ $28, X2
	MOVO X6, X14
	PSLLQ $53, X6
	POR X0, X10
	POR X2, X6
	POR X10, X6
	MOVO X6, 368(BX)
	PSRLQ $11, X14
	PSLLQ $14, X4
	MOVO 1008(AX), X8
	PSLLQ $39, X8
	POR X14, X4
	POR X8, X4
	MOVO X4, 384(BX)
	RET

// func pack64_26(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_26(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $26, X2
	MOVO X3, X4
	PSLLQ $52, X3
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	PSRLQ $12, X4
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	PSLLQ $14, X5
	MOVO X6, X9
	PSLLQ $40, X6
	POR X4, X5
	POR X6, X5
	MOVO X5, 16(BX)
	PSRLQ $24, X9
	PSLLQ $2, X7
	PSLLQ $28, X8
	MOVO 112(AX), X10
	MOVO 128(AX), X11
	MOVO 144(AX), X12
	MOVO 160(AX), X13
	MOVO X10, X14
	PSLLQ $54, X10
	POR X9, X7
	POR X8, X10
	POR X7, X10
	MOVO X10, 32(BX)
	PSRLQ $10, X14
	PSLLQ $16, X11
	MOVO X12, X15
	PSLLQ $42, X12
	POR X14, X11
	POR X12, X11
	MOVO X11, 48(BX)
	PSRLQ $22, X15
	PSLLQ $4, X13
	MOVO 176(AX), X0
	MOVO 192(AX), X1
	MOVO 208(AX), X3
	MOVO 224(AX), X2
	PSLLQ $30, X0
	MOVO X1, X4
	PSLLQ $56, X1
	POR X15, X13
	POR X0, X1
	POR X13, X1
	MOVO X1, 64(BX)
	PSRLQ $8, X4
	PSLLQ $18, X3
	MOVO X2, X6
	PSLLQ $44, X2
	POR X4, X3
	POR X2, X3
	MOVO X3, 80(BX)
	PSRLQ $20, X6
	MOVO 240(AX), X5
	MOVO 256(AX), X9
	MOVO 272(AX), X8
	MOVO 288(AX), X7
	PSLLQ $6, X5
	PSLLQ $32, X9
	MOVO X8, X10
	PSLLQ $58, X8
	POR X6, X5
	POR X9, X8
	POR X5, X8
	MOVO X8, 96(BX)
	PSRLQ $6, X10
	PSLLQ $20, X7
	MOVO 304(AX), X14
	MOVO 320(AX), X12
	MOVO 336(AX), X11
	MOVO 352(AX), X15
	MOVO X14, X0
	PSLLQ $46, X14
	POR X10, X7
	POR X14, X7
	MOVO X7, 112(BX)
	PSRLQ $18, X0
	PSLLQ $8, X12
	PSLLQ $34, X11
	MOVO X15, X13
	PSLLQ $60, X15
	POR X0, X12
	POR X11, X15
	POR X12, X15
	MOVO X15, 128(BX)
	PSRLQ $4, X13
	MOVO 368(AX), X1
	MOVO 384(AX), X4
	MOVO 400(AX), X2
	MOVO 416(AX), X3
	PSLLQ $22, X1
	MOVO X4, X6
	PSLLQ $48, X4
	POR X13, X1
	POR X4, X1
	MOVO X1, 144(BX)
	PSRLQ $16, X6
	PSLLQ $10, X2
	PSLLQ $36, X3
	MOVO 432(AX), X9
	MOVO 448(AX), X5
	MOVO 464(AX), X8
	MOVO 480(AX), X10
	MOVO X9, X14
	PSLLQ $62, X9
	POR X6, X2
	POR X3, X9
	POR X2, X9
	MOVO X9, 160(BX)
	PSRLQ $2, X14
	PSLLQ $24, X5
	MOVO X8, X7
	PSLLQ $50, X8
	POR X14, X5
	POR X8, X5
	MOVO X5, 176(BX)
	PSRLQ $14, X7
	PSLLQ $12, X10
	MOVO 496(AX), X0
	MOVO 512(AX), X11
	MOVO 528(AX), X12
	MOVO 544(AX), X15
	PSLLQ $38, X0
	POR X7, X10
	POR X0, X10
	MOVO X10, 192(BX)
	PSLLQ $26, X12
	MOVO X15, X13
	PSLLQ $52, X15
	POR X11, X12
	POR X15, X12
	MOVO X12, 208(BX)
	PSRLQ $12, X13
	MOVO 560(AX), X4
	MOVO 576(AX), X1
	MOVO 592(AX), X6
	MOVO 608(AX), X3
	PSLLQ $14, X4
	MOVO X1, X2
	PSLLQ $40, X1
	POR X13, X4
	POR X1, X4
	MOVO X4, 224(BX)
	PSRLQ $24, X2
	PSLLQ $2, X6
	PSLLQ $28, X3
	MOVO 624(AX), X9
	MOVO 640(AX), X14
	MOVO 656(AX), X8
	MOVO 672(AX), X5
	MOVO X9, X7
	PSLLQ $54, X9
	POR X2, X6
	POR X3, X9
	POR X6, X9
	MOVO X9, 240(BX)
	PSRLQ $10, X7
	PSLLQ $16, X14
	MOVO X8, X0
	PSLLQ $42, X8
	POR X7, X14
	POR X8, X14
	MOVO X14, 256(BX)
	PSRLQ $22, X0
	PSLLQ $4, X5
	MOVO 688(AX), X10
	MOVO 704(AX), X11
	MOVO 720(AX), X15
	MOVO 736(AX), X12
	PSLLQ $30, X10
	MOVO X11, X13
	PSLLQ $56, X11
	POR X0, X5
	POR X10, X11
	POR X5, X11
	MOVO X11, 272(BX)
	PSRLQ $8, X13
	PSLLQ $18, X15
	MOVO X12, X1
	PSLLQ $44, X12
	POR X13, X15
	POR X12, X15
	MOVO X15, 288(BX)
	PSRLQ $20, X1
	MOVO 752(AX), X4
	MOVO 768(AX), X2
	MOVO 784(AX), X3
	MOVO 800(AX), X6
	PSLLQ $6, X4
	PSLLQ $32, X2
	MOVO X3, X9
	PSLLQ $58, X3
	POR X1, X4
	POR X2, X3
	POR X4, X3
	MOVO X3, 304(BX)
	PSRLQ $6, X9
	PSLLQ $20, X6
	MOVO 816(AX), X7
	MOVO 832(AX), X8
	MOVO 848(AX), X14
	MOVO 864(AX), X0
	MOVO X7, X10
	PSLLQ $46, X7
	POR X9, X6
	POR X7, X6
	MOVO X6, 320(BX)
	PSRLQ $18, X10
	PSLLQ $8, X8
	PSLLQ $34, X14
	MOVO X0, X5
	PSLLQ $60, X0
	POR X10, X8
	POR X14, X0
	POR X8, X0
	MOVO X0, 336(BX)
	PSRLQ $4, X5
	MOVO 880(AX), X11
	MOVO 896(AX), X13
	MOVO 912(AX), X12
	MOVO 928(AX), X15
	PSLLQ $22, X11
	MOVO X13, X1
	PSLLQ $48, X13
	POR X5, X11
	POR X13, X11
	MOVO X11, 352(BX)
	PSRLQ $16, X1
	PSLLQ $10, X12
	PSLLQ $36, X15
	MOVO 944(AX), X2
	MOVO 960(AX), X4
	MOVO 976(AX), X3
	MOVO 992(AX), X9
	MOVO X2, X7
	PSLLQ $62, X2
	POR X1, X12
	POR X15, X2
	POR X12, X2
	MOVO X2, 368(BX)
	PSRLQ $2, X7
	PSLLQ $24, X4
	MOVO X3, X6
	PSLLQ $50, X3
	POR X7, X4
	POR X3, X4
	MOVO X4, 384(BX)
	PSRLQ $14, X6
	PSLLQ $12, X9
	MOVO 1008(AX), X10
	PSLLQ $38, X10
	POR X6, X9
	POR X10, X9
	MOVO X9, 400(BX)
	RET

// func pack64_27(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_27(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $27, X2
	MOVO X3, X4
	PSLLQ $54, X3
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	PSRLQ $10, X4
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	PSLLQ $17, X5
	MOVO X6, X9
	PSLLQ $44, X6
	POR X4, X5
	POR X6, X5
	MOVO X5, 16(BX)
	PSRLQ $20, X9
	PSLLQ $7, X7
	PSLLQ $34, X8
	MOVO 112(AX), X10
	MOVO 128(AX), X11
	MOVO 144(AX), X12
	MOVO 160(AX), X13
	MOVO X10, X14
	PSLLQ $61, X10
	POR X9, X7
	POR X8, X10
	POR X7, X10
	MOVO X10, 32(BX)
	PSRLQ $3, X14
	PSLLQ $24, X11
	MOVO X12, X15
	PSLLQ $51, X12
	POR X14, X11
	POR X12, X11
	MOVO X11, 48(BX)
	PSRLQ $13, X15
	PSLLQ $14, X13
	MOVO 176(AX), X0
	MOVO 192(AX), X1
	MOVO 208(AX), X3
	MOVO 224(AX), X2
	MOVO X0, X4
	PSLLQ $41, X0
	POR X15, X13
	POR X0, X13
	MOVO X13, 64(BX)
	PSRLQ $23, X4
	PSLLQ $4, X1
	PSLLQ $31, X3
	MOVO X2, X6
	PSLLQ $58, X2
	POR X4, X1
	POR X3, X2
	POR X1, X2
	MOVO X2, 80(BX)
	PSRLQ $6, X6
	MOVO 240(AX), X5
	MOVO 256(AX), X9
	MOVO 272(AX), X8
	MOVO 288(AX), X7
	PSLLQ $21, X5
	MOVO X9, X10
	PSLLQ $48, X9
	POR X6, X5
	POR X9, X5
	MOVO X5, 96(BX)
	PSRLQ $16, X10
	PSLLQ $11, X8
	MOVO X7, X14
	PSLLQ $38, X7
	POR X10, X8
	POR X7, X8
	MOVO X8, 112(BX)
	PSRLQ $26, X14
	MOVO 304(AX), X12
	MOVO 320(AX), X11
	MOVO 336(AX), X15
	MOVO 352(AX), X0
	PSLLQ $1, X12
	PSLLQ $28, X11
	MOVO X15, X13
	PSLLQ $55, X15
	POR X14, X12
	POR X11, X15
	POR X12, X15
	MOVO X15, 128(BX)
	PSRLQ $9, X13
	PSLLQ $18, X0
	MOVO 368(AX), X4
	MOVO 384(AX), X3
	MOVO 400(AX), X1
	MOVO 416(AX), X2
	MOVO X4, X6
	PSLLQ $45, X4
	POR X13, X0
	POR X4, X0
	MOVO X0, 144(BX)
	PSRLQ $19, X6
	PSLLQ $8, X3
	PSLLQ $35, X1
	MOVO X2, X9
	PSLLQ $62, X2
	POR X6, X3
	POR X1, X2
	POR X3, X2
	MOVO X2, 160(BX)
	PSRLQ $2, X9
	MOVO 432(AX), X5
	MOVO 448(AX), X10
	MOVO 464(AX), X7
	MOVO 480(AX), X8
	PSLLQ $25, X5
	MOVO X10, X14
	PSLLQ $52, X10
	POR X9, X5
	POR X10, X5
	MOVO X5, 176(BX)
	PSRLQ $12, X14
	PSLLQ $15, X7
	MOVO X8, X11
	PSLLQ $42, X8
	POR X14, X7
	POR X8, X7
	MOVO X7, 192(BX)
	PSRLQ $22, X11
	MOVO 496(AX), X12
	MOVO 512(AX), X15
	MOVO 528(AX), X13
	MOVO 544(AX), X4
	PSLLQ $5, X12
	PSLLQ $32, X15
	MOVO X13, X0
	PSLLQ $59, X13
	POR X11, X12
	POR X15, X13
	POR X12, X13
	MOVO X13, 208(BX)
	PSRLQ $5, X0
	PSLLQ $22, X4
	MOVO 560(AX), X6
	MOVO 576(AX), X1
	MOVO 592(AX), X3
	MOVO 608(AX), X2
	MOVO X6, X9
	PSLLQ $49, X6
	POR X0, X4
	POR X6, X4
	MOVO X4, 224(BX)
	PSRLQ $15, X9
	PSLLQ $12, X1
	MOVO X3, X10
	PSLLQ $39, X3
	POR X9, X1
	POR X3, X1
	MOVO X1, 240(BX)
	PSRLQ $25, X10
	PSLLQ $2, X2
	MOVO 624(AX), X5
	MOVO 640(AX), X14
	MOVO 656(AX), X8
	MOVO 672(AX), X7
	PSLLQ $29, X5
	MOVO X14, X11
	PSLLQ $56, X14
	POR X10, X2
	POR X5, X14
	POR X2, X14
	MOVO X14, 256(BX)
	PSRLQ $8, X11
	PSLLQ $19, X8
	MOVO X7, X15
	PSLLQ $46, X7
	POR X11, X8
	POR X7, X8
	MOVO X8, 272(BX)
	PSRLQ $18, X15
	MOVO 688(AX), X12
	MOVO 704(AX), X13
	MOVO 720(AX), X0
	MOVO 736(AX), X6
	PSLLQ $9, X12
	PSLLQ $36, X13
	MOVO X0, X4
	PSLLQ $63, X0
	POR X15, X12
	POR X13, X0
	POR X12, X0
	MOVO X0, 288(BX)
	PSRLQ $1, X4
	PSLLQ $26, X6
	MOVO 752(AX), X9
	MOVO 768(AX), X3
	MOVO 784(AX), X1
	MOVO 800(AX), X10
	MOVO X9, X5
	PSLLQ $53, X9
	POR X4, X6
	POR X9, X6
	MOVO X6, 304(BX)
	PSRLQ $11, X5
	PSLLQ $16, X3
	MOVO X1, X2
	PSLLQ $43, X1
	POR X5, X3
	POR X1, X3
	MOVO X3, 320(BX)
	PSRLQ $21, X2
	PSLLQ $6, X10
	MOVO 816(AX), X14
	MOVO 832(AX), X11
	MOVO 848(AX), X7
	MOVO 864(AX), X8
	PSLLQ $33, X14
	MOVO X11, X15
	PSLLQ $60, X11
	POR X2, X10
	POR X14, X11
	POR X10, X11
	MOVO X11, 336(BX)
	PSRLQ $4, X15
	PSLLQ $23, X7
	MOVO X8, X13
	PSLLQ $50, X8
	POR X15, X7
	POR X8, X7
	MOVO X7, 352(BX)
	PSRLQ $14, X13
	MOVO 880(AX), X12
	MOVO 896(AX), X0
	MOVO 912(AX), X4
	MOVO 928(AX), X9
	PSLLQ $13, X12
	MOVO X0, X6
	PSLLQ $40, X0
	POR X13, X12
	POR X0, X12
	MOVO X12, 368(BX)
	PSRLQ $24, X6
	PSLLQ $3, X4
	PSLLQ $30, X9
	MOVO 944(AX), X5
	MOVO 960(AX), X1
	MOVO 976(AX), X3
	MOVO 992(AX), X2
	MOVO X5, X14
	PSLLQ $57, X5
	POR X6, X4
	POR X9, X5
	POR X4, X5
	MOVO X5, 384(BX)
	PSRLQ $7, X14
	PSLLQ $20, X1
	MOVO X3, X10
	PSLLQ $47, X3
	POR X14, X1
	POR X3, X1
	MOVO X1, 400(BX)
	PSRLQ $17, X10
	PSLLQ $10, X2
	MOVO 1008(AX), X11
	PSLLQ $37, X11
	POR X10, X2
	POR X11, X2
	MOVO X2, 416(BX)
	RET

// func pack64_28(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_28(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $28, X2
	MOVO X3, X4
	PSLLQ $56, X3
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	PSRLQ $8, X4
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	PSLLQ $20, X5
	MOVO X6, X9
	PSLLQ $48, X6
	POR X4, X5
	POR X6, X5
	MOVO X5, 16(BX)
	PSRLQ $16, X9
	PSLLQ $12, X7
	MOVO X8, X10
	PSLLQ $40, X8
	POR X9, X7
	POR X8, X7
	MOVO X7, 32(BX)
	PSRLQ $24, X10
	MOVO 112(AX), X11
	MOVO 128(AX), X12
	MOVO 144(AX), X13
	MOVO 160(AX), X14
	PSLLQ $4, X11
	PSLLQ $32, X12
	MOVO X13, X15
	PSLLQ $60, X13
	POR X10, X11
	POR X12, X13
	POR X11, X13
	MOVO X13, 48(BX)
	PSRLQ $4, X15
	PSLLQ $24, X14
	MOVO 176(AX), X0
	MOVO 192(AX), X1
	MOVO 208(AX), X3
	MOVO 224(AX), X2
	MOVO X0, X4
	PSLLQ $52, X0
	POR X15, X14
	POR X0, X14
	MOVO X14, 64(BX)
	PSRLQ $12, X4
	PSLLQ $16, X1
	MOVO X3, X6
	PSLLQ $44, X3
	POR X4, X1
	POR X3, X1
	MOVO X1, 80(BX)
	PSRLQ $20, X6
	PSLLQ $8, X2
	MOVO 240(AX), X5
	MOVO 256(AX), X9
	MOVO 272(AX), X8
	MOVO 288(AX), X7
	PSLLQ $36, X5
	POR X6, X2
	POR X5, X2
	MOVO X2, 96(BX)
	PSLLQ $28, X8
	MOVO X7, X10
	PSLLQ $56, X7
	POR X9, X8
	POR X7, X8
	MOVO X8, 112(BX)
	PSRLQ $8, X10
	MOVO 304(AX), X12
	MOVO 320(AX), X11
	MOVO 336(AX), X13
	MOVO 352(AX), X15
	PSLLQ $20, X12
	MOVO X11, X0
	PSLLQ $48, X11
	POR X10, X12
	POR X11, X12
	MOVO X12, 128(BX)
	PSRLQ $16, X0
	PSLLQ $12, X13
	MOVO X15, X14
	PSLLQ $40, X15
	POR X0, X13
	POR X15, X13
	MOVO X13, 144(BX)
	PSRLQ $24, X14
	MOVO 368(AX), X4
	MOVO 384(AX), X3
	MOVO 400(AX), X1
	MOVO 416(AX), X6
	PSLLQ $4, X4
	PSLLQ $32, X3
	MOVO X1, X5
	PSLLQ $60, X1
	POR X14, X4
	POR X3, X1
	POR X4, X1
	MOVO X1, 160(BX)
	PSRLQ $4, X5
	PSLLQ $24, X6
	MOVO 432(AX), X2
	MOVO 448(AX), X9
	MOVO 464(AX), X7
	MOVO 480(AX), X8
	MOVO X2, X10
	PSLLQ $52, X2
	POR X5, X6
	POR X2, X6
	MOVO X6, 176(BX)
	PSRLQ $12, X10
	PSLLQ $16, X9
	MOVO X7, X11
	PSLLQ $44, X7
	POR X10, X9
	POR X7, X9
	MOVO X9, 192(BX)
	PSRLQ $20, X11
	PSLLQ $8, X8
	MOVO 496(AX), X12
	MOVO 512(AX), X0
	MOVO 528(AX), X15
	MOVO 544(AX), X13
	PSLLQ $36, X12
	POR X11, X8
	POR X12, X8
	MOVO X8, 208(BX)
	PSLLQ $28, X15
	MOVO X13, X14
	PSLLQ $56, X13
	POR X0, X15
	POR X13, X15
	MOVO X15, 224(BX)
	PSRLQ $8, X14
	MOVO 560(AX), X3
	MOVO 576(AX), X4
	MOVO 592(AX), X1
	MOVO 608(AX), X5
	PSLLQ $20, X3
	MOVO X4, X2
	PSLLQ $48, X4
	POR X14, X3
	POR X4, X3
	MOVO X3, 240(BX)
	PSRLQ $16, X2
	PSLLQ $12, X1
	MOVO X5, X6
	PSLLQ $40, X5
	POR X2, X1
	POR X5, X1
	MOVO X1, 256(BX)
	PSRLQ $24, X6
	MOVO 624(AX), X10
	MOVO 640(AX), X7
	MOVO 656(AX), X9
	MOVO 672(AX), X11
	PSLLQ $4, X10
	PSLLQ $32, X7
	MOVO X9, X12
	PSLLQ $60, X9
	POR X6, X10
	POR X7, X9
	POR X10, X9
	MOVO X9, 272(BX)
	PSRLQ $4, X12
	PSLLQ $24, X11
	MOVO 688(AX), X8
	MOVO 704(AX), X0
	MOVO 720(AX), X13
	MOVO 736(AX), X15
	MOVO X8, X14
	PSLLQ $52, X8
	POR X12, X11
	POR X8, X11
	MOVO X11, 288(BX)
	PSRLQ $12, X14
	PSLLQ $16, X0
	MOVO X13, X4
	PSLLQ $44, X13
	POR X14, X0
	POR X13, X0
	MOVO X0, 304(BX)
	PSRLQ $20, X4
	PSLLQ $8, X15
	MOVO 752(AX), X3
	MOVO 768(AX), X2
	MOVO 784(AX), X5
	MOVO 800(AX), X1
	PSLLQ $36, X3
	POR X4, X15
	POR X3, X15
	MOVO X15, 320(BX)
	PSLLQ $28, X5
	MOVO X1, X6
	PSLLQ $56, X1
	POR X2, X5
	POR X1, X5
	MOVO X5, 336(BX)
	PSRLQ $8, X6
	MOVO 816(AX), X7
	MOVO 832(AX), X10
	MOVO 848(AX), X9
	MOVO 864(AX), X12
	PSLLQ $20, X7
	MOVO X10, X8
	PSLLQ $48, X10
	POR X6, X7
	POR X10, X7
	MOVO X7, 352(BX)
	PSRLQ $16, X8
	PSLLQ $12, X9
	MOVO X12, X11
	PSLLQ $40, X12
	POR X8, X9
	POR X12, X9
	MOVO X9, 368(BX)
	PSRLQ $24, X11
	MOVO 880(AX), X14
	MOVO 896(AX), X13
	MOVO 912(AX), X0
	MOVO 928(AX), X4
	PSLLQ $4, X14
	PSLLQ $32, X13
	MOVO X0, X3
	PSLLQ $60, X0
	POR X11, X14
	POR X13, X0
	POR X14, X0
	MOVO X0, 384(BX)
	PSRLQ $4, X3
	PSLLQ $24, X4
	MOVO 944(AX), X15
	MOVO 960(AX), X2
	MOVO 976(AX), X1
	MOVO 992(AX), X5
	MOVO X15, X6
	PSLLQ $52, X15
	POR X3, X4
	POR X15, X4
	MOVO X4, 400(BX)
	PSRLQ $12, X6
	PSLLQ $16, X2
	MOVO X1, X10
	PSLLQ $44, X1
	POR X6, X2
	POR X1, X2
	MOVO X2, 416(BX)
	PSRLQ $20, X10
	PSLLQ $8, X5
	MOVO 1008(AX), X7
	PSLLQ $36, X7
	POR X10, X5
	POR X7, X5
	MOVO X5, 432(BX)
	RET

// func pack64_29(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_29(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $29, X2
	MOVO X3, X4
	PSLLQ $58, X3
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	PSRLQ $6, X4
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	PSLLQ $23, X5
	MOVO X6, X9
	PSLLQ $52, X6
	POR X4, X5
	POR X6, X5
	MOVO X5, 16(BX)
	PSRLQ $12, X9
	PSLLQ $17, X7
	MOVO X8, X10
	PSLLQ $46, X8
	POR X9, X7
	POR X8, X7
	MOVO X7, 32(BX)
	PSRLQ $18, X10
	MOVO 112(AX), X11
	MOVO 128(AX), X12
	MOVO 144(AX), X13
	MOVO 160(AX), X14
	PSLLQ $11, X11
	MOVO X12, X15
	PSLLQ $40, X12
	POR X10, X11
	POR X12, X11
	MOVO X11, 48(BX)
	PSRLQ $24, X15
	PSLLQ $5, X13
	PSLLQ $34, X14
	MOVO 176(AX), X0
	MOVO 192(AX), X1
	MOVO 208(AX), X3
	MOVO 224(AX), X2
	MOVO X0, X4
	PSLLQ $63, X0
	POR X15, X13
	POR X14, X0
	POR X13, X0
	MOVO X0, 64(BX)
	PSRLQ $1, X4
	PSLLQ $28, X1
	MOVO X3, X6
	PSLLQ $57, X3
	POR X4, X1
	POR X3, X1
	MOVO X1, 80(BX)
	PSRLQ $7, X6
	PSLLQ $22, X2
	MOVO 240(AX), X5
	MOVO 256(AX), X9
	MOVO 272(AX), X8
	MOVO 288(AX), X7
	MOVO X5, X10
	PSLLQ $51, X5
	POR X6, X2
	POR X5, X2
	MOVO X2, 96(BX)
	PSRLQ $13, X10
	PSLLQ $16, X9
	MOVO X8, X12
	PSLLQ $45, X8
	POR X10, X9
	POR X8, X9
	MOVO X9, 112(BX)
	PSRLQ $19, X12
	PSLLQ $10, X7
	MOVO 304(AX), X11
	MOVO 320(AX), X15
	MOVO 336(AX), X14
	MOVO 352(AX), X13
	MOVO X11, X0
	PSLLQ $39, X11
	POR X12, X7
	POR X11, X7
	MOVO X7, 128(BX)
	PSRLQ $25, X0
	PSLLQ $4, X15
	PSLLQ $33, X14
	MOVO X13, X4
	PSLLQ $62, X13
	POR X0, X15
	POR X14, X13
	POR X15, X13
	MOVO X13, 144(BX)
	PSRLQ $2, X4
	MOVO 368(AX), X3
	MOVO 384(AX), X1
	MOVO 400(AX), X6
	MOVO 416(AX), X5
	PSLLQ $27, X3
	MOVO X1, X2
	PSLLQ $56, X1
	POR X4, X3
	POR X1, X3
	MOVO X3, 160(BX)
	PSRLQ $8, X2
	PSLLQ $21, X6
	MOVO X5, X10
	PSLLQ $50, X5
	POR X2, X6
	POR X5, X6
	MOVO X6, 176(BX)
	PSRLQ $14, X10
	MOVO 432(AX), X8
	MOVO 448(AX), X9
	MOVO 464(AX), X12
	MOVO 480(AX), X11
	PSLLQ $15, X8
	MOVO X9, X7
	PSLLQ $44, X9
	POR X10, X8
	POR X9, X8
	MOVO X8, 192(BX)
	PSRLQ $20, X7
	PSLLQ $9, X12
	MOVO X11, X0
	PSLLQ $38, X11
	POR X7, X12
	POR X11, X12
	MOVO X12, 208(BX)
	PSRLQ $26, X0
	MOVO 496(AX), X14
	MOVO 512(AX), X15
	MOVO 528(AX), X13
	MOVO 544(AX), X4
	PSLLQ $3, X14
	PSLLQ $32, X15
	MOVO X13, X1
	PSLLQ $61, X13
	POR X0, X14
	POR X15, X13
	POR X14, X13
	MOVO X13, 224(BX)
	PSRLQ $3, X1
	PSLLQ $26, X4
	MOVO 560(AX), X3
	MOVO 576(AX), X2
	MOVO 592(AX), X5
	MOVO 608(AX), X6
	MOVO X3, X10
	PSLLQ $55, X3
	POR X1, X4
	POR X3, X4
	MOVO X4, 240(BX)
	PSRLQ $9, X10
	PSLLQ $20, X2
	MOVO X5, X9
	PSLLQ $49, X5
	POR X10, X2
	POR X5, X2
	MOVO X2, 256(BX)
	PSRLQ $15, X9
	PSLLQ $14, X6
	MOVO 624(AX), X8
	MOVO 640(AX), X7
	MOVO 656(AX), X11
	MOVO 672(AX), X12
	MOVO X8, X0
	PSLLQ $43, X8
	POR X9, X6
	POR X8, X6
	MOVO X6, 272(BX)
	PSRLQ $21, X0
	PSLLQ $8, X7
	MOVO X11, X15
	PSLLQ $37, X11
	POR X0, X7
	POR X11, X7
	MOVO X7, 288(BX)
	PSRLQ $27, X15
	PSLLQ $2, X12
	MOVO 688(AX), X14
	MOVO 704(AX), X13
	MOVO 720(AX), X1
	MOVO 736(AX), X3
	PSLLQ $31, X14
	MOVO X13, X4
	PSLLQ $60, X13
	POR X15, X12
	POR X14, X13
	POR X12, X13
	MOVO X13, 304(BX)
	PSRLQ $4, X4
	PSLLQ $25, X1
	MOVO X3, X10
	PSLLQ $54, X3
	POR X4, X1
	POR X3, X1
	MOVO X1, 320(BX)
	PSRLQ $10, X10
	MOVO 752(AX), X5
	MOVO 768(AX), X2
	MOVO 784(AX), X9
	MOVO 800(AX), X8
	PSLLQ $19, X5
	MOVO X2, X6
	PSLLQ $48, X2
	POR X10, X5
	POR X2, X5
	MOVO X5, 336(BX)
	PSRLQ $16, X6
	PSLLQ $13, X9
	MOVO X8, X0
	PSLLQ $42, X8
	POR X6, X9
	POR X8, X9
	MOVO X9, 352(BX)
	PSRLQ $22, X0
	MOVO 816(AX), X11
	MOVO 832(AX), X7
	MOVO 848(AX), X15
	MOVO 864(AX), X14
	PSLLQ $7, X11
	MOVO X7, X12
	PSLLQ $36, X7
	POR X0, X11
	POR X7, X11
	MOVO X11, 368(BX)
	PSRLQ $28, X12
	PSLLQ $1, X15
	PSLLQ $30, X14
	MOVO 880(AX), X13
	MOVO 896(AX), X4
	MOVO 912(AX), X3
	MOVO 928(AX), X1
	MOVO X13, X10
	PSLLQ $59, X13
	POR X12, X15
	POR X14, X13
	POR X15, X13
	MOVO X13, 384(BX)
	PSRLQ $5, X10
	PSLLQ $24, X4
	MOVO X3, X2
	PSLLQ $53, X3
	POR X10, X4
	POR X3, X4
	MOVO X4, 400(BX)
	PSRLQ $11, X2
	PSLLQ $18, X1
	MOVO 944(AX), X5
	MOVO 960(AX), X6
	MOVO 976(AX), X8
	MOVO 992(AX), X9
	MOVO X5, X0
	PSLLQ $47, X5
	POR X2, X1
	POR X5, X1
	MOVO X1, 416(BX)
	PSRLQ $17, X0
	PSLLQ $12, X6
	MOVO X8, X7
	PSLLQ $41, X8
	POR X0, X6
	POR X8, X6
	MOVO X6, 432(BX)
	PSRLQ $23, X7
	PSLLQ $6, X9
	MOVO 1008(AX), X11
	PSLLQ $35, X11
	POR X7, X9
	POR X11, X9
	MOVO X9, 448(BX)
	RET

// func pack64_30(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_30(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $30, X2
	MOVO X3, X4
	PSLLQ $60, X3
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	PSRLQ $4, X4
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	PSLLQ $26, X5
	MOVO X6, X9
	PSLLQ $56, X6
	POR X4, X5
	POR X6, X5
	MOVO X5, 16(BX)
	PSRLQ $8, X9
	PSLLQ $22, X7
	MOVO X8, X10
	PSLLQ $52, X8
	POR X9, X7
	POR X8, X7
	MOVO X7, 32(BX)
	PSRLQ $12, X10
	MOVO 112(AX), X11
	MOVO 128(AX), X12
	MOVO 144(AX), X13
	MOVO 160(AX), X14
	PSLLQ $18, X11
	MOVO X12, X15
	PSLLQ $48, X12
	POR X10, X11
	POR X12, X11
	MOVO X11, 48(BX)
	PSRLQ $16, X15
	PSLLQ $14, X13
	MOVO X14, X0
	PSLLQ $44, X14
	POR X15, X13
	POR X14, X13
	MOVO X13, 64(BX)
	PSRLQ $20, X0
	MOVO 176(AX), X1
	MOVO 192(AX), X3
	MOVO 208(AX), X2
	MOVO 224(AX), X4
	PSLLQ $10, X1
	MOVO X3, X6
	PSLLQ $40, X3
	POR X0, X1
	POR X3, X1
	MOVO X1, 80(BX)
	PSRLQ $24, X6
	PSLLQ $6, X2
	MOVO X4, X5
	PSLLQ $36, X4
	POR X6, X2
	POR X4, X2
	MOVO X2, 96(BX)
	PSRLQ $28, X5
	MOVO 240(AX), X9
	MOVO 256(AX), X8
	MOVO 272(AX), X7
	MOVO 288(AX), X10
	PSLLQ $2, X9
	PSLLQ $32, X8
	MOVO X7, X12
	PSLLQ $62, X7
	POR X5, X9
	POR X8, X7
	POR X9, X7
	MOVO X7, 112(BX)
	PSRLQ $2, X12
	PSLLQ $28, X10
	MOVO 304(AX), X11
	MOVO 320(AX), X15
	MOVO 336(AX), X14
	MOVO 352(AX), X13
	MOVO X11, X0
	PSLLQ $58, X11
	POR X12, X10
	POR X11, X10
	MOVO X10, 128(BX)
	PSRLQ $6, X0
	PSLLQ $24, X15
	MOVO X14, X3
	PSLLQ $54, X14
	POR X0, X15
	POR X14, X15
	MOVO X15, 144(BX)
	PSRLQ $10, X3
	PSLLQ $20, X13
	MOVO 368(AX), X1
	MOVO 384(AX), X6
	MOVO 400(AX), X4
	MOVO 416(AX), X2
	MOVO X1, X5
	PSLLQ $50, X1
	POR X3, X13
	POR X1, X13
	MOVO X13, 160(BX)
	PSRLQ $14, X5
	PSLLQ $16, X6
	MOVO X4, X8
	PSLLQ $46, X4
	POR X5, X6
	POR X4, X6
	MOVO X6, 176(BX)
	PSRLQ $18, X8
	PSLLQ $12, X2
	MOVO 432(AX), X9
	MOVO 448(AX), X7
	MOVO 464(AX), X12
	MOVO 480(AX), X11
	MOVO X9, X10
	PSLLQ $42, X9
	POR X8, X2
	POR X9, X2
	MOVO X2, 192(BX)
	PSRLQ $22, X10
	PSLLQ $8, X7
	MOVO X12, X0
	PSLLQ $38, X12
	POR X10, X7
	POR X12, X7
	MOVO X7, 208(BX)
	PSRLQ $26, X0
	PSLLQ $4, X11
	MOVO 496(AX), X14
	MOVO 512(AX), X15
	MOVO 528(AX), X3
	MOVO 544(AX), X1
	PSLLQ $34, X14
	POR X0, X11
	POR X14, X11
	MOVO X11, 224(BX)
	PSLLQ $30, X3
	MOVO X1, X13
	PSLLQ $60, X1
	POR X15, X3
	POR X1, X3
	MOVO X3, 240(BX)
	PSRLQ $4, X13
	MOVO 560(AX), X5
	MOVO 576(AX), X4
	MOVO 592(AX), X6
	MOVO 608(AX), X8
	PSLLQ $26, X5
	MOVO X4, X9
	PSLLQ $56, X4
	POR X13, X5
	POR X4, X5
	MOVO X5, 256(BX)
	PSRLQ $8, X9
	PSLLQ $22, X6
	MOVO X8, X2
	PSLLQ $52, X8
	POR X9, X6
	POR X8, X6
	MOVO X6, 272(BX)
	PSRLQ $12, X2
	MOVO 624(AX), X10
	MOVO 640(AX), X12
	MOVO 656(AX), X7
	MOVO 672(AX), X0
	PSLLQ $18, X10
	MOVO X12, X14
	PSLLQ $48, X12
	POR X2, X10
	POR X12, X10
	MOVO X10, 288(BX)
	PSRLQ $16, X14
	PSLLQ $14, X7
	MOVO X0, X11
	PSLLQ $44, X0
	POR X14, X7
	POR X0, X7
	MOVO X7, 304(BX)
	PSRLQ $20, X11
	MOVO 688(AX), X15
	MOVO 704(AX), X1
	MOVO 720(AX), X3
	MOVO 736(AX), X13
	PSLLQ $10, X15
	MOVO X1, X4
	PSLLQ $40, X1
	POR X11, X15
	POR X1, X15
	MOVO X15, 320(BX)
	PSRLQ $24, X4
	PSLLQ $6, X3
	MOVO X13, X5
	PSLLQ $36, X13
	POR X4, X3
	POR X13, X3
	MOVO X3, 336(BX)
	PSRLQ $28, X5
	MOVO 752(AX), X9
	MOVO 768(AX), X8
	MOVO 784(AX), X6
	MOVO 800(AX), X2
	PSLLQ $2, X9
	PSLLQ $32, X8
	MOVO X6, X12
	PSLLQ $62, X6
	POR X5, X9
	POR X8, X6
	POR X9, X6
	MOVO X6, 352(BX)
	PSRLQ $2, X12
	PSLLQ $28, X2
	MOVO 816(AX), X10
	MOVO 832(AX), X14
	MOVO 848(AX), X0
	MOVO 864(AX), X7
	MOVO X10, X11
	PSLLQ $58, X10
	POR X12, X2
	POR X10, X2
	MOVO X2, 368(BX)
	PSRLQ $6, X11
	PSLLQ $24, X14
	MOVO X0, X1
	PSLLQ $54, X0
	POR X11, X14
	POR X0, X14
	MOVO X14, 384(BX)
	PSRLQ $10, X1
	PSLLQ $20, X7
	MOVO 880(AX), X15
	MOVO 896(AX), X4
	MOVO 912(AX), X13
	MOVO 928(AX), X3
	MOVO X15, X5
	PSLLQ $50, X15
	POR X1, X7
	POR X15, X7
	MOVO X7, 400(BX)
	PSRLQ $14, X5
	PSLLQ $16, X4
	MOVO X13, X8
	PSLLQ $46, X13
	POR X5, X4
	POR X13, X4
	MOVO X4, 416(BX)
	PSRLQ $18, X8
	PSLLQ $12, X3
	MOVO 944(AX), X9
	MOVO 960(AX), X6
	MOVO 976(AX), X12
	MOVO 992(AX), X10
	MOVO X9, X2
	PSLLQ $42, X9
	POR X8, X3
	POR X9, X3
	MOVO X3, 432(BX)
	PSRLQ $22, X2
	PSLLQ $8, X6
	MOVO X12, X11
	PSLLQ $38, X12
	POR X2, X6
	POR X12, X6
	MOVO X6, 448(BX)
	PSRLQ $26, X11
	PSLLQ $4, X10
	MOVO 1008(AX), X0
	PSLLQ $34, X0
	POR X11, X10
	POR X0, X10
	MOVO X10, 464(BX)
	RET

// func pack64_31(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_31(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $31, X2
	MOVO X3, X4
	PSLLQ $62, X3
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	PSRLQ $2, X4
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	PSLLQ $29, X5
	MOVO X6, X9
	PSLLQ $60, X6
	POR X4, X5
	POR X6, X5
	MOVO X5, 16(BX)
	PSRLQ $4, X9
	PSLLQ $27, X7
	MOVO X8, X10
	PSLLQ $58, X8
	POR X9, X7
	POR X8, X7
	MOVO X7, 32(BX)
	PSRLQ $6, X10
	MOVO 112(AX), X11
	MOVO 128(AX), X12
	MOVO 144(AX), X13
	MOVO 160(AX), X14
	PSLLQ $25, X11
	MOVO X12, X15
	PSLLQ $56, X12
	POR X10, X11
	POR X12, X11
	MOVO X11, 48(BX)
	PSRLQ $8, X15
	PSLLQ $23, X13
	MOVO X14, X0
	PSLLQ $54, X14
	POR X15, X13
	POR X14, X13
	MOVO X13, 64(BX)
	PSRLQ $10, X0
	MOVO 176(AX), X1
	MOVO 192(AX), X3
	MOVO 208(AX), X2
	MOVO 224(AX), X4
	PSLLQ $21, X1
	MOVO X3, X6
	PSLLQ $52, X3
	POR X0, X1
	POR X3, X1
	MOVO X1, 80(BX)
	PSRLQ $12, X6
	PSLLQ $19, X2
	MOVO X4, X5
	PSLLQ $50, X4
	POR X6, X2
	POR X4, X2
	MOVO X2, 96(BX)
	PSRLQ $14, X5
	MOVO 240(AX), X9
	MOVO 256(AX), X8
	MOVO 272(AX), X7
	MOVO 288(AX), X10
	PSLLQ $17, X9
	MOVO X8, X12
	PSLLQ $48, X8
	POR X5, X9
	POR X8, X9
	MOVO X9, 112(BX)
	PSRLQ $16, X12
	PSLLQ $15, X7
	MOVO X10, X11
	PSLLQ $46, X10
	POR X12, X7
	POR X10, X7
	MOVO X7, 128(BX)
	PSRLQ $18, X11
	MOVO 304(AX), X15
	MOVO 320(AX), X14
	MOVO 336(AX), X13
	MOVO 352(AX), X0
	PSLLQ $13, X15
	MOVO X14, X3
	PSLLQ $44, X14
	POR X11, X15
	POR X14, X15
	MOVO X15, 144(BX)
	PSRLQ $20, X3
	PSLLQ $11, X13
	MOVO X0, X1
	PSLLQ $42, X0
	POR X3, X13
	POR X0, X13
	MOVO X13, 160(BX)
	PSRLQ $22, X1
	MOVO 368(AX), X6
	MOVO 384(AX), X4
	MOVO 400(AX), X2
	MOVO 416(AX), X5
	PSLLQ $9, X6
	MOVO X4, X8
	PSLLQ $40, X4
	POR X1, X6
	POR X4, X6
	MOVO X6, 176(BX)
	PSRLQ $24, X8
	PSLLQ $7, X2
	MOVO X5, X9
	PSLLQ $38, X5
	POR X8, X2
	POR X5, X2
	MOVO X2, 192(BX)
	PSRLQ $26, X9
	MOVO 432(AX), X12
	MOVO 448(AX), X10
	MOVO 464(AX), X7
	MOVO 480(AX), X11
	PSLLQ $5, X12
	MOVO X10, X14
	PSLLQ $36, X10
	POR X9, X12
	POR X10, X12
	MOVO X12, 208(BX)
	PSRLQ $28, X14
	PSLLQ $3, X7
	MOVO X11, X15
	PSLLQ $34, X11
	POR X14, X7
	POR X11, X7
	MOVO X7, 224(BX)
	PSRLQ $30, X15
	MOVO 496(AX), X3
	MOVO 512(AX), X0
	MOVO 528(AX), X13
	MOVO 544(AX), X1
	PSLLQ $1, X3
	PSLLQ $32, X0
	MOVO X13, X4
	PSLLQ $63, X13
	POR X15, X3
	POR X0, X13
	POR X3, X13
	MOVO X13, 240(BX)
	PSRLQ $1, X4
	PSLLQ $30, X1
	MOVO 560(AX), X6
	MOVO 576(AX), X8
	MOVO 592(AX), X5
	MOVO 608(AX), X2
	MOVO X6, X9
	PSLLQ $61, X6
	POR X4, X1
	POR X6, X1
	MOVO X1, 256(BX)
	PSRLQ $3, X9
	PSLLQ $28, X8
	MOVO X5, X10
	PSLLQ $59, X5
	POR X9, X8
	POR X5, X8
	MOVO X8, 272(BX)
	PSRLQ $5, X10
	PSLLQ $26, X2
	MOVO 624(AX), X12
	MOVO 640(AX), X14
	MOVO 656(AX), X11
	MOVO 672(AX), X7
	MOVO X12, X15
	PSLLQ $57, X12
	POR X10, X2
	POR X12, X2
	MOVO X2, 288(BX)
	PSRLQ $7, X15
	PSLLQ $24, X14
	MOVO X11, X0
	PSLLQ $55, X11
	POR X15, X14
	POR X11, X14
	MOVO X14, 304(BX)
	PSRLQ $9, X0
	PSLLQ $22, X7
	MOVO 688(AX), X3
	MOVO 704(AX), X13
	MOVO 720(AX), X4
	MOVO 736(AX), X6
	MOVO X3, X1
	PSLLQ $53, X3
	POR X0, X7
	POR X3, X7
	MOVO X7, 320(BX)
	PSRLQ $11, X1
	PSLLQ $20, X13
	MOVO X4, X9
	PSLLQ $51, X4
	POR X1, X13
	POR X4, X13
	MOVO X13, 336(BX)
	PSRLQ $13, X9
	PSLLQ $18, X6
	MOVO 752(AX), X5
	MOVO 768(AX), X8
	MOVO 784(AX), X10
	MOVO 800(AX), X12
	MOVO X5, X2
	PSLLQ $49, X5
	POR X9, X6
	POR X5, X6
	MOVO X6, 352(BX)
	PSRLQ $15, X2
	PSLLQ $16, X8
	MOVO X10, X15
	PSLLQ $47, X10
	POR X2, X8
	POR X10, X8
	MOVO X8, 368(BX)
	PSRLQ $17, X15
	PSLLQ $14, X12
	MOVO 816(AX), X11
	MOVO 832(AX), X14
	MOVO 848(AX), X0
	MOVO 864(AX), X3
	MOVO X11, X7
	PSLLQ $45, X11
	POR X15, X12
	POR X11, X12
	MOVO X12, 384(BX)
	PSRLQ $19, X7
	PSLLQ $12, X14
	MOVO X0, X1
	PSLLQ $43, X0
	POR X7, X14
	POR X0, X14
	MOVO X14, 400(BX)
	PSRLQ $21, X1
	PSLLQ $10, X3
	MOVO 880(AX), X4
	MOVO 896(AX), X13
	MOVO 912(AX), X9
	MOVO 928(AX), X5
	MOVO X4, X6
	PSLLQ $41, X4
	POR X1, X3
	POR X4, X3
	MOVO X3, 416(BX)
	PSRLQ $23, X6
	PSLLQ $8, X13
	MOVO X9, X2
	PSLLQ $39, X9
	POR X6, X13
	POR X9, X13
	MOVO X13, 432(BX)
	PSRLQ $25, X2
	PSLLQ $6, X5
	MOVO 944(AX), X10
	MOVO 960(AX), X8
	MOVO 976(AX), X15
	MOVO 992(AX), X11
	MOVO X10, X12
	PSLLQ $37, X10
	POR X2, X5
	POR X10, X5
	MOVO X5, 448(BX)
	PSRLQ $27, X12
	PSLLQ $4, X8
	MOVO X15, X7
	PSLLQ $35, X15
	POR X12, X8
	POR X15, X8
	MOVO X8, 464(BX)
	PSRLQ $29, X7
	PSLLQ $2, X11
	MOVO 1008(AX), X0
	PSLLQ $33, X0
	POR X7, X11
	POR X0, X11
	MOVO X11, 480(BX)
	RET

// func pack64_32(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_32(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	PSLLQ $32, X2
	POR X1, X2
	MOVO X2, 0(BX)
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	PSLLQ $32, X4
	POR X3, X4
	MOVO X4, 16(BX)
	PSLLQ $32, X6
	POR X5, X6
	MOVO X6, 32(BX)
	MOVO 112(AX), X8
	MOVO 128(AX), X9
	MOVO 144(AX), X10
	MOVO 160(AX), X11
	PSLLQ $32, X8
	POR X7, X8
	MOVO X8, 48(BX)
	PSLLQ $32, X10
	POR X9, X10
	MOVO X10, 64(BX)
	MOVO 176(AX), X12
	MOVO 192(AX), X13
	MOVO 208(AX), X14
	MOVO 224(AX), X15
	PSLLQ $32, X12
	POR X11, X12
	MOVO X12, 80(BX)
	PSLLQ $32, X14
	POR X13, X14
	MOVO X14, 96(BX)
	MOVO 240(AX), X0
	MOVO 256(AX), X1
	MOVO 272(AX), X2
	MOVO 288(AX), X3
	PSLLQ $32, X0
	POR X15, X0
	MOVO X0, 112(BX)
	PSLLQ $32, X2
	POR X1, X2
	MOVO X2, 128(BX)
	MOVO 304(AX), X4
	MOVO 320(AX), X5
	MOVO 336(AX), X6
	MOVO 352(AX), X7
	PSLLQ $32, X4
	POR X3, X4
	MOVO X4, 144(BX)
	PSLLQ $32, X6
	POR X5, X6
	MOVO X6, 160(BX)
	MOVO 368(AX), X8
	MOVO 384(AX), X9
	MOVO 400(AX), X10
	MOVO 416(AX), X11
	PSLLQ $32, X8
	POR X7, X8
	MOVO X8, 176(BX)
	PSLLQ $32, X10
	POR X9, X10
	MOVO X10, 192(BX)
	MOVO 432(AX), X12
	MOVO 448(AX), X13
	MOVO 464(AX), X14
	MOVO 480(AX), X15
	PSLLQ $32, X12
	POR X11, X12
	MOVO X12, 208(BX)
	PSLLQ $32, X14
	POR X13, X14
	MOVO X14, 224(BX)
	MOVO 496(AX), X0
	MOVO 512(AX), X1
	MOVO 528(AX), X2
	MOVO 544(AX), X3
	PSLLQ $32, X0
	POR X15, X0
	MOVO X0, 240(BX)
	PSLLQ $32, X2
	POR X1, X2
	MOVO X2, 256(BX)
	MOVO 560(AX), X4
	MOVO 576(AX), X5
	MOVO 592(AX), X6
	MOVO 608(AX), X7
	PSLLQ $32, X4
	POR X3, X4
	MOVO X4, 272(BX)
	PSLLQ $32, X6
	POR X5, X6
	MOVO X6, 288(BX)
	MOVO 624(AX), X8
	MOVO 640(AX), X9
	MOVO 656(AX), X10
	MOVO 672(AX), X11
	PSLLQ $32, X8
	POR X7, X8
	MOVO X8, 304(BX)
	PSLLQ $32, X10
	POR X9, X10
	MOVO X10, 320(BX)
	MOVO 688(AX), X12
	MOVO 704(AX), X13
	MOVO 720(AX), X14
	MOVO 736(AX), X15
	PSLLQ $32, X12
	POR X11, X12
	MOVO X12, 336(BX)
	PSLLQ $32, X14
	POR X13, X14
	MOVO X14, 352(BX)
	MOVO 752(AX), X0
	MOVO 768(AX), X1
	MOVO 784(AX), X2
	MOVO 800(AX), X3
	PSLLQ $32, X0
	POR X15, X0
	MOVO X0, 368(BX)
	PSLLQ $32, X2
	POR X1, X2
	MOVO X2, 384(BX)
	MOVO 816(AX), X4
	MOVO 832(AX), X5
	MOVO 848(AX), X6
	MOVO 864(AX), X7
	PSLLQ $32, X4
	POR X3, X4
	MOVO X4, 400(BX)
	PSLLQ $32, X6
	POR X5, X6
	MOVO X6, 416(BX)
	MOVO 880(AX), X8
	MOVO 896(AX), X9
	MOVO 912(AX), X10
	MOVO 928(AX), X11
	PSLLQ $32, X8
	POR X7, X8
	MOVO X8, 432(BX)
	PSLLQ $32, X10
	POR X9, X10
	MOVO X10, 448(BX)
	MOVO 944(AX), X12
	MOVO 960(AX), X13
	MOVO 976(AX), X14
	MOVO 992(AX), X15
	PSLLQ $32, X12
	POR X11, X12
	MOVO X12, 464(BX)
	PSLLQ $32, X14
	POR X13, X14
	MOVO X14, 480(BX)
	MOVO 1008(AX), X0
	PSLLQ $32, X0
	POR X15, X0
	MOVO X0, 496(BX)
	RET

// func pack64_33(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_33(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $33, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $31, X4
	PSLLQ $2, X3
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	MOVO X5, X9
	PSLLQ $35, X5
	POR X4, X3
	POR X5, X3
	MOVO X3, 16(BX)
	PSRLQ $29, X9
	PSLLQ $4, X6
	MOVO X7, X10
	PSLLQ $37, X7
	POR X9, X6
	POR X7, X6
	MOVO X6, 32(BX)
	PSRLQ $27, X10
	PSLLQ $6, X8
	MOVO 112(AX), X11
	MOVO 128(AX), X12
	MOVO 144(AX), X13
	MOVO 160(AX), X14
	MOVO X11, X15
	PSLLQ $39, X11
	POR X10, X8
	POR X11, X8
	MOVO X8, 48(BX)
	PSRLQ $25, X15
	PSLLQ $8, X12
	MOVO X13, X0
	PSLLQ $41, X13
	POR X15, X12
	POR X13, X12
	MOVO X12, 64(BX)
	PSRLQ $23, X0
	PSLLQ $10, X14
	MOVO 176(AX), X1
	MOVO 192(AX), X2
	MOVO 208(AX), X4
	MOVO 224(AX), X5
	MOVO X1, X3
	PSLLQ $43, X1
	POR X0, X14
	POR X1, X14
	MOVO X14, 80(BX)
	PSRLQ $21, X3
	PSLLQ $12, X2
	MOVO X4, X9
	PSLLQ $45, X4
	POR X3, X2
	POR X4, X2
	MOVO X2, 96(BX)
	PSRLQ $19, X9
	PSLLQ $14, X5
	MOVO 240(AX), X7
	MOVO 256(AX), X6
	MOVO 272(AX), X10
	MOVO 288(AX), X11
	MOVO X7, X8
	PSLLQ $47, X7
	POR X9, X5
	POR X7, X5
	MOVO X5, 112(BX)
	PSRLQ $17, X8
	PSLLQ $16, X6
	MOVO X10, X15
	PSLLQ $49, X10
	POR X8, X6
	POR X10, X6
	MOVO X6, 128(BX)
	PSRLQ $15, X15
	PSLLQ $18, X11
	MOVO 304(AX), X13
	MOVO 320(AX), X12
	MOVO 336(AX), X0
	MOVO 352(AX), X1
	MOVO X13, X14
	PSLLQ $51, X13
	POR X15, X11
	POR X13, X11
	MOVO X11, 144(BX)
	PSRLQ $13, X14
	PSLLQ $20, X12
	MOVO X0, X3
	PSLLQ $53, X0
	POR X14, X12
	POR X0, X12
	MOVO X12, 160(BX)
	PSRLQ $11, X3
	PSLLQ $22, X1
	MOVO 368(AX), X4
	MOVO 384(AX), X2
	MOVO 400(AX), X9
	MOVO 416(AX), X7
	MOVO X4, X5
	PSLLQ $55, X4
	POR X3, X1
	POR X4, X1
	MOVO X1, 176(BX)
	PSRLQ $9, X5
	PSLLQ $24, X2
	MOVO X9, X8
	PSLLQ $57, X9
	POR X5, X2
	POR X9, X2
	MOVO X2, 192(BX)
	PSRLQ $7, X8
	PSLLQ $26, X7
	MOVO 432(AX), X10
	MOVO 448(AX), X6
	MOVO 464(AX), X15
	MOVO 480(AX), X13
	MOVO X10, X11
	PSLLQ $59, X10
	POR X8, X7
	POR X10, X7
	MOVO X7, 208(BX)
	PSRLQ $5, X11
	PSLLQ $28, X6
	MOVO X15, X14
	PSLLQ $61, X15
	POR X11, X6
	POR X15, X6
	MOVO X6, 224(BX)
	PSRLQ $3, X14
	PSLLQ $30, X13
	MOVO 496(AX), X0
	MOVO 512(AX), X12
	MOVO 528(AX), X3
	MOVO 544(AX), X4
	MOVO X0, X1
	PSLLQ $63, X0
	POR X14, X13
	POR X0, X13
	MOVO X13, 240(BX)
	PSRLQ $1, X1
	MOVO X12, X5
	PSLLQ $32, X12
	POR X1, X12
	MOVO X12, 256(BX)
	PSRLQ $32, X5
	PSLLQ $1, X3
	MOVO X4, X9
	PSLLQ $34, X4
	POR X5, X3
	POR X4, X3
	MOVO X3, 272(BX)
	PSRLQ $30, X9
	MOVO 560(AX), X2
	MOVO 576(AX), X8
	MOVO 592(AX), X10
	MOVO 608(AX), X7
	PSLLQ $3, X2
	MOVO X8, X11
	PSLLQ $36, X8
	POR X9, X2
	POR X8, X2
	MOVO X2, 288(BX)
	PSRLQ $28, X11
	PSLLQ $5, X10
	MOVO X7, X15
	PSLLQ $38, X7
	POR X11, X10
	POR X7, X10
	MOVO X10, 304(BX)
	PSRLQ $26, X15
	MOVO 624(AX), X6
	MOVO 640(AX), X14
	MOVO 656(AX), X0
	MOVO 672(AX), X13
	PSLLQ $7, X6
	MOVO X14, X1
	PSLLQ $40, X14
	POR X15, X6
	POR X14, X6
	MOVO X6, 320(BX)
	PSRLQ $24, X1
	PSLLQ $9, X0
	MOVO X13, X12
	PSLLQ $42, X13
	POR X1, X0
	POR X13, X0
	MOVO X0, 336(BX)
	PSRLQ $22, X12
	MOVO 688(AX), X5
	MOVO 704(AX), X4
	MOVO 720(AX), X3
	MOVO 736(AX), X9
	PSLLQ $11, X5
	MOVO X4, X8
	PSLLQ $44, X4
	POR X12, X5
	POR X4, X5
	MOVO X5, 352(BX)
	PSRLQ $20, X8
	PSLLQ $13, X3
	MOVO X9, X2
	PSLLQ $46, X9
	POR X8, X3
	POR X9, X3
	MOVO X3, 368(BX)
	PSRLQ $18, X2
	MOVO 752(AX), X11
	MOVO 768(AX), X7
	MOVO 784(AX), X10
	MOVO 800(AX), X15
	PSLLQ $15, X11
	MOVO X7, X14
	PSLLQ $48, X7
	POR X2, X11
	POR X7, X11
	MOVO X11, 384(BX)
	PSRLQ $16, X14
	PSLLQ $17, X10
	MOVO X15, X6
	PSLLQ $50, X15
	POR X14, X10
	POR X15, X10
	MOVO X10, 400(BX)
	PSRLQ $14, X6
	MOVO 816(AX), X1
	MOVO 832(AX), X13
	MOVO 848(AX), X0
	MOVO 864(AX), X12
	PSLLQ $19, X1
	MOVO X13, X4
	PSLLQ $52, X13
	POR X6, X1
	POR X13, X1
	MOVO X1, 416(BX)
	PSRLQ $12, X4
	PSLLQ $21, X0
	MOVO X12, X5
	PSLLQ $54, X12
	POR X4, X0
	POR X12, X0
	MOVO X0, 432(BX)
	PSRLQ $10, X5
	MOVO 880(AX), X8
	MOVO 896(AX), X9
	MOVO 912(AX), X3
	MOVO 928(AX), X2
	PSLLQ $23, X8
	MOVO X9, X7
	PSLLQ $56, X9
	POR X5, X8
	POR X9, X8
	MOVO X8, 448(BX)
	PSRLQ $8, X7
	PSLLQ $25, X3
	MOVO X2, X11
	PSLLQ $58, X2
	POR X7, X3
	POR X2, X3
	MOVO X3, 464(BX)
	PSRLQ $6, X11
	MOVO 944(AX), X14
	MOVO 960(AX), X15
	MOVO 976(AX), X10
	MOVO 992(AX), X6
	PSLLQ $27, X14
	MOVO X15, X13
	PSLLQ $60, X15
	POR X11, X14
	POR X15, X14
	MOVO X14, 480(BX)
	PSRLQ $4, X13
	PSLLQ $29, X10
	MOVO X6, X1
	PSLLQ $62, X6
	POR X13, X10
	POR X6, X10
	MOVO X10, 496(BX)
	PSRLQ $2, X1
	MOVO 1008(AX), X4
	PSLLQ $31, X4
	POR X1, X4
	MOVO X4, 512(BX)
	RET

// func pack64_34(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_34(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $34, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $30, X4
	PSLLQ $4, X3
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	MOVO X5, X9
	PSLLQ $38, X5
	POR X4, X3
	POR X5, X3
	MOVO X3, 16(BX)
	PSRLQ $26, X9
	PSLLQ $8, X6
	MOVO X7, X10
	PSLLQ $42, X7
	POR X9, X6
	POR X7, X6
	MOVO X6, 32(BX)
	PSRLQ $22, X10
	PSLLQ $12, X8
	MOVO 112(AX), X11
	MOVO 128(AX), X12
	MOVO 144(AX), X13
	MOVO 160(AX), X14
	MOVO X11, X15
	PSLLQ $46, X11
	POR X10, X8
	POR X11, X8
	MOVO X8, 48(BX)
	PSRLQ $18, X15
	PSLLQ $16, X12
	MOVO X13, X0
	PSLLQ $50, X13
	POR X15, X12
	POR X13, X12
	MOVO X12, 64(BX)
	PSRLQ $14, X0
	PSLLQ $20, X14
	MOVO 176(AX), X1
	MOVO 192(AX), X2
	MOVO 208(AX), X4
	MOVO 224(AX), X5
	MOVO X1, X3
	PSLLQ $54, X1
	POR X0, X14
	POR X1, X14
	MOVO X14, 80(BX)
	PSRLQ $10, X3
	PSLLQ $24, X2
	MOVO X4, X9
	PSLLQ $58, X4
	POR X3, X2
	POR X4, X2
	MOVO X2, 96(BX)
	PSRLQ $6, X9
	PSLLQ $28, X5
	MOVO 240(AX), X7
	MOVO 256(AX), X6
	MOVO 272(AX), X10
	MOVO 288(AX), X11
	MOVO X7, X8
	PSLLQ $62, X7
	POR X9, X5
	POR X7, X5
	MOVO X5, 112(BX)
	PSRLQ $2, X8
	MOVO X6, X15
	PSLLQ $32, X6
	POR X8, X6
	MOVO X6, 128(BX)
	PSRLQ $32, X15
	PSLLQ $2, X10
	MOVO X11, X13
	PSLLQ $36, X11
	POR X15, X10
	POR X11, X10
	MOVO X10, 144(BX)
	PSRLQ $28, X13
	MOVO 304(AX), X12
	MOVO 320(AX), X0
	MOVO 336(AX), X1
	MOVO 352(AX), X14
	PSLLQ $6, X12
	MOVO X0, X3
	PSLLQ $40, X0
	POR X13, X12
	POR X0, X12
	MOVO X12, 160(BX)
	PSRLQ $24, X3
	PSLLQ $10, X1
	MOVO X14, X4
	PSLLQ $44, X14
	POR X3, X1
	POR X14, X1
	MOVO X1, 176(BX)
	PSRLQ $20, X4
	MOVO 368(AX), X2
	MOVO 384(AX), X9
	MOVO 400(AX), X7
	MOVO 416(AX), X5
	PSLLQ $14, X2
	MOVO X9, X8
	PSLLQ $48, X9
	POR X4, X2
	POR X9, X2
	MOVO X2, 192(BX)
	PSRLQ $16, X8
	PSLLQ $18, X7
	MOVO X5, X6
	PSLLQ $52, X5
	POR X8, X7
	POR X5, X7
	MOVO X7, 208(BX)
	PSRLQ $12, X6
	MOVO 432(AX), X15
	MOVO 448(AX), X11
	MOVO 464(AX), X10
	MOVO 480(AX), X13
	PSLLQ $22, X15
	MOVO X11, X0
	PSLLQ $56, X11
	POR X6, X15
	POR X11, X15
	MOVO X15, 224(BX)
	PSRLQ $8, X0
	PSLLQ $26, X10
	MOVO X13, X12
	PSLLQ $60, X13
	POR X0, X10
	POR X13, X10
	MOVO X10, 240(BX)
	PSRLQ $4, X12
	MOVO 496(AX), X3
	MOVO 512(AX), X14
	MOVO 528(AX), X1
	MOVO 544(AX), X4
	PSLLQ $30, X3
	POR X12, X3
	MOVO X3, 256(BX)
	MOVO X1, X9
	PSLLQ $34, X1
	POR X14, X1
	MOVO X1, 272(BX)
	PSRLQ $30, X9
	PSLLQ $4, X4
	MOVO 560(AX), X2
	MOVO 576(AX), X8
	MOVO 592(AX), X5
	MOVO 608(AX), X7
	MOVO X2, X6
	PSLLQ $38, X2
	POR X9, X4
	POR X2, X4
	MOVO X4, 288(BX)
	PSRLQ $26, X6
	PSLLQ $8, X8
	MOVO X5, X11
	PSLLQ $42, X5
	POR X6, X8
	POR X5, X8
	MOVO X8, 304(BX)
	PSRLQ $22, X11
	PSLLQ $12, X7
	MOVO 624(AX), X15
	MOVO 640(AX), X0
	MOVO 656(AX), X13
	MOVO 672(AX), X10
	MOVO X15, X12
	PSLLQ $46, X15
	POR X11, X7
	POR X15, X7
	MOVO X7, 320(BX)
	PSRLQ $18, X12
	PSLLQ $16, X0
	MOVO X13, X3
	PSLLQ $50, X13
	POR X12, X0
	POR X13, X0
	MOVO X0, 336(BX)
	PSRLQ $14, X3
	PSLLQ $20, X10
	MOVO 688(AX), X14
	MOVO 704(AX), X1
	MOVO 720(AX), X9
	MOVO 736(AX), X2
	MOVO X14, X4
	PSLLQ $54, X14
	POR X3, X10
	POR X14, X10
	MOVO X10, 352(BX)
	PSRLQ $10, X4
	PSLLQ $24, X1
	MOVO X9, X6
	PSLLQ $58, X9
	POR X4, X1
	POR X9, X1
	MOVO X1, 368(BX)
	PSRLQ $6, X6
	PSLLQ $28, X2
	MOVO 752(AX), X5
	MOVO 768(AX), X8
	MOVO 784(AX), X11
	MOVO 800(AX), X15
	MOVO X5, X7
	PSLLQ $62, X5
	POR X6, X2
	POR X5, X2
	MOVO X2, 384(BX)
	PSRLQ $2, X7
	MOVO X8, X12
	PSLLQ $32, X8
	POR X7, X8
	MOVO X8, 400(BX)
	PSRLQ $32, X12
	PSLLQ $2, X11
	MOVO X15, X13
	PSLLQ $36, X15
	POR X12, X11
	POR X15, X11
	MOVO X11, 416(BX)
	PSRLQ $28, X13
	MOVO 816(AX), X0
	MOVO 832(AX), X3
	MOVO 848(AX), X14
	MOVO 864(AX), X10
	PSLLQ $6, X0
	MOVO X3, X4
	PSLLQ $40, X3
	POR X13, X0
	POR X3, X0
	MOVO X0, 432(BX)
	PSRLQ $24, X4
	PSLLQ $10, X14
	MOVO X10, X9
	PSLLQ $44, X10
	POR X4, X14
	POR X10, X14
	MOVO X14, 448(BX)
	PSRLQ $20, X9
	MOVO 880(AX), X1
	MOVO 896(AX), X6
	MOVO 912(AX), X5
	MOVO 928(AX), X2
	PSLLQ $14, X1
	MOVO X6, X7
	PSLLQ $48, X6
	POR X9, X1
	POR X6, X1
	MOVO X1, 464(BX)
	PSRLQ $16, X7
	PSLLQ $18, X5
	MOVO X2, X8
	PSLLQ $52, X2
	POR X7, X5
	POR X2, X5
	MOVO X5, 480(BX)
	PSRLQ $12, X8
	MOVO 944(AX), X12
	MOVO 960(AX), X15
	MOVO 976(AX), X11
	MOVO 992(AX), X13
	PSLLQ $22, X12
	MOVO X15, X3
	PSLLQ $56, X15
	POR X8, X12
	POR X15, X12
	MOVO X12, 496(BX)
	PSRLQ $8, X3
	PSLLQ $26, X11
	MOVO X13, X0
	PSLLQ $60, X13
	POR X3, X11
	POR X13, X11
	MOVO X11, 512(BX)
	PSRLQ $4, X0
	MOVO 1008(AX), X4
	PSLLQ $30, X4
	POR X0, X4
	MOVO X4, 528(BX)
	RET

// func pack64_35(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_35(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $35, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $29, X4
	PSLLQ $6, X3
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	MOVO X5, X9
	PSLLQ $41, X5
	POR X4, X3
	POR X5, X3
	MOVO X3, 16(BX)
	PSRLQ $23, X9
	PSLLQ $12, X6
	MOVO X7, X10
	PSLLQ $47, X7
	POR X9, X6
	POR X7, X6
	MOVO X6, 32(BX)
	PSRLQ $17, X10
	PSLLQ $18, X8
	MOVO 112(AX), X11
	MOVO 128(AX), X12
	MOVO 144(AX), X13
	MOVO 160(AX), X14
	MOVO X11, X15
	PSLLQ $53, X11
	POR X10, X8
	POR X11, X8
	MOVO X8, 48(BX)
	PSRLQ $11, X15
	PSLLQ $24, X12
	MOVO X13, X0
	PSLLQ $59, X13
	POR X15, X12
	POR X13, X12
	MOVO X12, 64(BX)
	PSRLQ $5, X0
	MOVO X14, X1
	PSLLQ $30, X14
	POR X0, X14
	MOVO X14, 80(BX)
	PSRLQ $34, X1
	MOVO 176(AX), X2
	MOVO 192(AX), X4
	MOVO 208(AX), X5
	MOVO 224(AX), X3
	PSLLQ $1, X2
	MOVO X4, X9
	PSLLQ $36, X4
	POR X1, X2
	POR X4, X2
	MOVO X2, 96(BX)
	PSRLQ $28, X9
	PSLLQ $7, X5
	MOVO X3, X7
	PSLLQ $42, X3
	POR X9, X5
	POR X3, X5
	MOVO X5, 112(BX)
	PSRLQ $22, X7
	MOVO 240(AX), X6
	MOVO 256(AX), X10
	MOVO 272(AX), X11
	MOVO 288(AX), X8
	PSLLQ $13, X6
	MOVO X10, X15
	PSLLQ $48, X10
	POR X7, X6
	POR X10, X6
	MOVO X6, 128(BX)
	PSRLQ $16, X15
	PSLLQ $19, X11
	MOVO X8, X13
	PSLLQ $54, X8
	POR X15, X11
	POR X8, X11
	MOVO X11, 144(BX)
	PSRLQ $10, X13
	MOVO 304(AX), X12
	MOVO 320(AX), X0
	MOVO 336(AX), X14
	MOVO 352(AX), X1
	PSLLQ $25, X12
	MOVO X0, X4
	PSLLQ $60, X0
	POR X13, X12
	POR X0, X12
	MOVO X12, 160(BX)
	PSRLQ $4, X4
	MOVO X14, X2
	PSLLQ $31, X14
	POR X4, X14
	MOVO X14, 176(BX)
	PSRLQ $33, X2
	PSLLQ $2, X1
	MOVO 368(AX), X9
	MOVO 384(AX), X3
	MOVO 400(AX), X5
	MOVO 416(AX), X7
	MOVO X9, X10
	PSLLQ $37, X9
	POR X2, X1
	POR X9, X1
	MOVO X1, 192(BX)
	PSRLQ $27, X10
	PSLLQ $8, X3
	MOVO X5, X6
	PSLLQ $43, X5
	POR X10, X3
	POR X5, X3
	MOVO X3, 208(BX)
	PSRLQ $21, X6
	PSLLQ $14, X7
	MOVO 432(AX), X15
	MOVO 448(AX), X8
	MOVO 464(AX), X11
	MOVO 480(AX), X13
	MOVO X15, X0
	PSLLQ $49, X15
	POR X6, X7
	POR X15, X7
	MOVO X7, 224(BX)
	PSRLQ $15, X0
	PSLLQ $20, X8
	MOVO X11, X12
	PSLLQ $55, X11
	POR X0, X8
	POR X11, X8
	MOVO X8, 240(BX)
	PSRLQ $9, X12
	PSLLQ $26, X13
	MOVO 496(AX), X4
	MOVO 512(AX), X14
	MOVO 528(AX), X2
	MOVO 544(AX), X9
	MOVO X4, X1
	PSLLQ $61, X4
	POR X12, X13
	POR X4, X13
	MOVO X13, 256(BX)
	PSRLQ $3, X1
	MOVO X14, X10
	PSLLQ $32, X14
	POR X1, X14
	MOVO X14, 272(BX)
	PSRLQ $32, X10
	PSLLQ $3, X2
	MOVO X9, X5
	PSLLQ $38, X9
	POR X10, X2
	POR X9, X2
	MOVO X2, 288(BX)
	PSRLQ $26, X5
	MOVO 560(AX), X3
	MOVO 576(AX), X6
	MOVO 592(AX), X15
	MOVO 608(AX), X7
	PSLLQ $9, X3
	MOVO X6, X0
	PSLLQ $44, X6
	POR X5, X3
	POR X6, X3
	MOVO X3, 304(BX)
	PSRLQ $20, X0
	PSLLQ $15, X15
	MOVO X7, X11
	PSLLQ $50, X7
	POR X0, X15
	POR X7, X15
	MOVO X15, 320(BX)
	PSRLQ $14, X11
	MOVO 624(AX), X8
	MOVO 640(AX), X12
	MOVO 656(AX), X4
	MOVO 672(AX), X13
	PSLLQ $21, X8
	MOVO X12, X1
	PSLLQ $56, X12
	POR X11, X8
	POR X12, X8
	MOVO X8, 336(BX)
	PSRLQ $8, X1
	PSLLQ $27, X4
	MOVO X13, X14
	PSLLQ $62, X13
	POR X1, X4
	POR X13, X4
	MOVO X4, 352(BX)
	PSRLQ $2, X14
	MOVO 688(AX), X10
	MOVO 704(AX), X9
	MOVO 720(AX), X2
	MOVO 736(AX), X5
	MOVO X10, X6
	PSLLQ $33, X10
	POR X14, X10
	MOVO X10, 368(BX)
	PSRLQ $31, X6
	PSLLQ $4, X9
	MOVO X2, X3
	PSLLQ $39, X2
	POR X6, X9
	POR X2, X9
	MOVO X9, 384(BX)
	PSRLQ $25, X3
	PSLLQ $10, X5
	MOVO 752(AX), X0
	MOVO 768(AX), X7
	MOVO 784(AX), X15
	MOVO 800(AX), X11
	MOVO X0, X12
	PSLLQ $45, X0
	POR X3, X5
	POR X0, X5
	MOVO X5, 400(BX)
	PSRLQ $19, X12
	PSLLQ $16, X7
	MOVO X15, X8
	PSLLQ $51, X15
	POR X12, X7
	POR X15, X7
	MOVO X7, 416(BX)
	PSRLQ $13, X8
	PSLLQ $22, X11
	MOVO 816(AX), X1
	MOVO 832(AX), X13
	MOVO 848(AX), X4
	MOVO 864(AX), X14
	MOVO X1, X10
	PSLLQ $57, X1
	POR X8, X11
	POR X1, X11
	MOVO X11, 432(BX)
	PSRLQ $7, X10
	PSLLQ $28, X13
	MOVO X4, X6
	PSLLQ $63, X4
	POR X10, X13
	POR X4, X13
	MOVO X13, 448(BX)
	PSRLQ $1, X6
	MOVO X14, X2
	PSLLQ $34, X14
	POR X6, X14
	MOVO X14, 464(BX)
	PSRLQ $30, X2
	MOVO 880(AX), X9
	MOVO 896(AX), X3
	MOVO 912(AX), X0
	MOVO 928(AX), X5
	PSLLQ $5, X9
	MOVO X3, X12
	PSLLQ $40, X3
	POR X2, X9
	POR X3, X9
	MOVO X9, 480(BX)
	PSRLQ $24, X12
	PSLLQ $11, X0
	MOVO X5, X15
	PSLLQ $46, X5
	POR X12, X0
	POR X5, X0
	MOVO X0, 496(BX)
	PSRLQ $18, X15
	MOVO 944(AX), X7
	MOVO 960(AX), X8
	MOVO 976(AX), X1
	MOVO 992(AX), X11
	PSLLQ $17, X7
	MOVO X8, X10
	PSLLQ $52, X8
	POR X15, X7
	POR X8, X7
	MOVO X7, 512(BX)
	PSRLQ $12, X10
	PSLLQ $23, X1
	MOVO X11, X4
	PSLLQ $58, X11
	POR X10, X1
	POR X11, X1
	MOVO X1, 528(BX)
	PSRLQ $6, X4
	MOVO 1008(AX), X13
	PSLLQ $29, X13
	POR X4, X13
	MOVO X13, 544(BX)
	RET

// func pack64_36(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_36(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $36, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $28, X4
	PSLLQ $8, X3
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	MOVO X5, X9
	PSLLQ $44, X5
	POR X4, X3
	POR X5, X3
	MOVO X3, 16(BX)
	PSRLQ $20, X9
	PSLLQ $16, X6
	MOVO X7, X10
	PSLLQ $52, X7
	POR X9, X6
	POR X7, X6
	MOVO X6, 32(BX)
	PSRLQ $12, X10
	PSLLQ $24, X8
	MOVO 112(AX), X11
	MOVO 128(AX), X12
	MOVO 144(AX), X13
	MOVO 160(AX), X14
	MOVO X11, X15
	PSLLQ $60, X11
	POR X10, X8
	POR X11, X8
	MOVO X8, 48(BX)
	PSRLQ $4, X15
	MOVO X12, X0
	PSLLQ $32, X12
	POR X15, X12
	MOVO X12, 64(BX)
	PSRLQ $32, X0
	PSLLQ $4, X13
	MOVO X14, X1
	PSLLQ $40, X14
	POR X0, X13
	POR X14, X13
	MOVO X13, 80(BX)
	PSRLQ $24, X1
	MOVO 176(AX), X2
	MOVO 192(AX), X4
	MOVO 208(AX), X5
	MOVO 224(AX), X3
	PSLLQ $12, X2
	MOVO X4, X9
	PSLLQ $48, X4
	POR X1, X2
	POR X4, X2
	MOVO X2, 96(BX)
	PSRLQ $16, X9
	PSLLQ $20, X5
	MOVO X3, X7
	PSLLQ $56, X3
	POR X9, X5
	POR X3, X5
	MOVO X5, 112(BX)
	PSRLQ $8, X7
	MOVO 240(AX), X6
	MOVO 256(AX), X10
	MOVO 272(AX), X11
	MOVO 288(AX), X8
	PSLLQ $28, X6
	POR X7, X6
	MOVO X6, 128(BX)
	MOVO X11, X15
	PSLLQ $36, X11
	POR X10, X11
	MOVO X11, 144(BX)
	PSRLQ $28, X15
	PSLLQ $8, X8
	MOVO 304(AX), X12
	MOVO 320(AX), X0
	MOVO 336(AX), X14
	MOVO 352(AX), X13
	MOVO X12, X1
	PSLLQ $44, X12
	POR X15, X8
	POR X12, X8
	MOVO X8, 160(BX)
	PSRLQ $20, X1
	PSLLQ $16, X0
	MOVO X14, X4
	PSLLQ $52, X14
	POR X1, X0
	POR X14, X0
	MOVO X0, 176(BX)
	PSRLQ $12, X4
	PSLLQ $24, X13
	MOVO 368(AX), X2
	MOVO 384(AX), X9
	MOVO 400(AX), X3
	MOVO 416(AX), X5
	MOVO X2, X7
	PSLLQ $60, X2
	POR X4, X13
	POR X2, X13
	MOVO X13, 192(BX)
	PSRLQ $4, X7
	MOVO X9, X6
	PSLLQ $32, X9
	POR X7, X9
	MOVO X9, 208(BX)
	PSRLQ $32, X6
	PSLLQ $4, X3
	MOVO X5, X10
	PSLLQ $40, X5
	POR X6, X3
	POR X5, X3
	MOVO X3, 224(BX)
	PSRLQ $24, X10
	MOVO 432(AX), X11
	MOVO 448(AX), X15
	MOVO 464(AX), X12
	MOVO 480(AX), X8
	PSLLQ $12, X11
	MOVO X15, X1
	PSLLQ $48, X15
	POR X10, X11
	POR X15, X11
	MOVO X11, 240(BX)
	PSRLQ $16, X1
	PSLLQ $20, X12
	MOVO X8, X14
	PSLLQ $56, X8
	POR X1, X12
	POR X8, X12
	MOVO X12, 256(BX)
	PSRLQ $8, X14
	MOVO 496(AX), X0
	MOVO 512(AX), X4
	MOVO 528(AX), X2
	MOVO 544(AX), X13
	PSLLQ $28, X0
	POR X14, X0
	MOVO X0, 272(BX)
	MOVO X2, X7
	PSLLQ $36, X2
	POR X4, X2
	MOVO X2, 288(BX)
	PSRLQ $28, X7
	PSLLQ $8, X13
	MOVO 560(AX), X9
	MOVO 576(AX), X6
	MOVO 592(AX), X5
	MOVO 608(AX), X3
	MOVO X9, X10
	PSLLQ $44, X9
	POR X7, X13
	POR X9, X13
	MOVO X13, 304(BX)
	PSRLQ $20, X10
	PSLLQ $16, X6
	MOVO X5, X15
	PSLLQ $52, X5
	POR X10, X6
	POR X5, X6
	MOVO X6, 320(BX)
	PSRLQ $12, X15
	PSLLQ $24, X3
	MOVO 624(AX), X11
	MOVO 640(AX), X1
	MOVO 656(AX), X8
	MOVO 672(AX), X12
	MOVO X11, X14
	PSLLQ $60, X11
	POR X15, X3
	POR X11, X3
	MOVO X3, 336(BX)
	PSRLQ $4, X14
	MOVO X1, X0
	PSLLQ $32, X1
	POR X14, X1
	MOVO X1, 352(BX)
	PSRLQ $32, X0
	PSLLQ $4, X8
	MOVO X12, X4
	PSLLQ $40, X12
	POR X0, X8
	POR X12, X8
	MOVO X8, 368(BX)
	PSRLQ $24, X4
	MOVO 688(AX), X2
	MOVO 704(AX), X7
	MOVO 720(AX), X9
	MOVO 736(AX), X13
	PSLLQ $12, X2
	MOVO X7, X10
	PSLLQ $48, X7
	POR X4, X2
	POR X7, X2
	MOVO X2, 384(BX)
	PSRLQ $16, X10
	PSLLQ $20, X9
	MOVO X13, X5
	PSLLQ $56, X13
	POR X10, X9
	POR X13, X9
	MOVO X9, 400(BX)
	PSRLQ $8, X5
	MOVO 752(AX), X6
	MOVO 768(AX), X15
	MOVO 784(AX), X11
	MOVO 800(AX), X3
	PSLLQ $28, X6
	POR X5, X6
	MOVO X6, 416(BX)
	MOVO X11, X14
	PSLLQ $36, X11
	POR X15, X11
	MOVO X11, 432(BX)
	PSRLQ $28, X14
	PSLLQ $8, X3
	MOVO 816(AX), X1
	MOVO 832(AX), X0
	MOVO 848(AX), X12
	MOVO 864(AX), X8
	MOVO X1, X4
	PSLLQ $44, X1
	POR X14, X3
	POR X1, X3
	MOVO X3, 448(BX)
	PSRLQ $20, X4
	PSLLQ $16, X0
	MOVO X12, X7
	PSLLQ $52, X12
	POR X4, X0
	POR X12, X0
	MOVO X0, 464(BX)
	PSRLQ $12, X7
	PSLLQ $24, X8
	MOVO 880(AX), X2
	MOVO 896(AX), X10
	MOVO 912(AX), X13
	MOVO 928(AX), X9
	MOVO X2, X5
	PSLLQ $60, X2
	POR X7, X8
	POR X2, X8
	MOVO X8, 480(BX)
	PSRLQ $4, X5
	MOVO X10, X6
	PSLLQ $32, X10
	POR X5, X10
	MOVO X10, 496(BX)
	PSRLQ $32, X6
	PSLLQ $4, X13
	MOVO X9, X15
	PSLLQ $40, X9
	POR X6, X13
	POR X9, X13
	MOVO X13, 512(BX)
	PSRLQ $24, X15
	MOVO 944(AX), X11
	MOVO 960(AX), X14
	MOVO 976(AX), X1
	MOVO 992(AX), X3
	PSLLQ $12, X11
	MOVO X14, X4
	PSLLQ $48, X14
	POR X15, X11
	POR X14, X11
	MOVO X11, 528(BX)
	PSRLQ $16, X4
	PSLLQ $20, X1
	MOVO X3, X12
	PSLLQ $56, X3
	POR X4, X1
	POR X3, X1
	MOVO X1, 544(BX)
	PSRLQ $8, X12
	MOVO 1008(AX), X0
	PSLLQ $28, X0
	POR X12, X0
	MOVO X0, 560(BX)
	RET

// func pack64_37(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_37(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $37, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $27, X4
	PSLLQ $10, X3
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	MOVO X5, X9
	PSLLQ $47, X5
	POR X4, X3
	POR X5, X3
	MOVO X3, 16(BX)
	PSRLQ $17, X9
	PSLLQ $20, X6
	MOVO X7, X10
	PSLLQ $57, X7
	POR X9, X6
	POR X7, X6
	MOVO X6, 32(BX)
	PSRLQ $7, X10
	MOVO X8, X11
	PSLLQ $30, X8
	POR X10, X8
	MOVO X8, 48(BX)
	PSRLQ $34, X11
	MOVO 112(AX), X12
	MOVO 128(AX), X13
	MOVO 144(AX), X14
	MOVO 160(AX), X15
	PSLLQ $3, X12
	MOVO X13, X0
	PSLLQ $40, X13
	POR X11, X12
	POR X13, X12
	MOVO X12, 64(BX)
	PSRLQ $24, X0
	PSLLQ $13, X14
	MOVO X15, X1
	PSLLQ $50, X15
	POR X0, X14
	POR X15, X14
	MOVO X14, 80(BX)
	PSRLQ $14, X1
	MOVO 176(AX), X2
	MOVO 192(AX), X4
	MOVO 208(AX), X5
	MOVO 224(AX), X3
	PSLLQ $23, X2
	MOVO X4, X9
	PSLLQ $60, X4
	POR X1, X2
	POR X4, X2
	MOVO X2, 96(BX)
	PSRLQ $4, X9
	MOVO X5, X7
	PSLLQ $33, X5
	POR X9, X5
	MOVO X5, 112(BX)
	PSRLQ $31, X7
	PSLLQ $6, X3
	MOVO 240(AX), X6
	MOVO 256(AX), X10
	MOVO 272(AX), X8
	MOVO 288(AX), X11
	MOVO X6, X13
	PSLLQ $43, X6
	POR X7, X3
	POR X6, X3
	MOVO X3, 128(BX)
	PSRLQ $21, X13
	PSLLQ $16, X10
	MOVO X8, X12
	PSLLQ $53, X8
	POR X13, X10
	POR X8, X10
	MOVO X10, 144(BX)
	PSRLQ $11, X12
	PSLLQ $26, X11
	MOVO 304(AX), X0
	MOVO 320(AX), X15
	MOVO 336(AX), X14
	MOVO 352(AX), X1
	MOVO X0, X4
	PSLLQ $63, X0
	POR X12, X11
	POR X0, X11
	MOVO X11, 160(BX)
	PSRLQ $1, X4
	MOVO X15, X2
	PSLLQ $36, X15
	POR X4, X15
	MOVO X15, 176(BX)
	PSRLQ $28, X2
	PSLLQ $9, X14
	MOVO X1, X9
	PSLLQ $46, X1
	POR X2, X14
	POR X1, X14
	MOVO X14, 192(BX)
	PSRLQ $18, X9
	MOVO 368(AX), X5
	MOVO 384(AX), X7
	MOVO 400(AX), X6
	MOVO 416(AX), X3
	PSLLQ $19, X5
	MOVO X7, X13
	PSLLQ $56, X7
	POR X9, X5
	POR X7, X5
	MOVO X5, 208(BX)
	PSRLQ $8, X13
	MOVO X6, X8
	PSLLQ $29, X6
	POR X13, X6
	MOVO X6, 224(BX)
	PSRLQ $35, X8
	PSLLQ $2, X3
	MOVO 432(AX), X10
	MOVO 448(AX), X12
	MOVO 464(AX), X0
	MOVO 480(AX), X11
	MOVO X10, X4
	PSLLQ $39, X10
	POR X8, X3
	POR X10, X3
	MOVO X3, 240(BX)
	PSRLQ $25, X4
	PSLLQ $12, X12
	MOVO X0, X15
	PSLLQ $49, X0
	POR X4, X12
	POR X0, X12
	MOVO X12, 256(BX)
	PSRLQ $15, X15
	PSLLQ $22, X11
	MOVO 496(AX), X2
	MOVO 512(AX), X1
	MOVO 528(AX), X14
	MOVO 544(AX), X9
	MOVO X2, X7
	PSLLQ $59, X2
	POR X15, X11
	POR X2, X11
	MOVO X11, 272(BX)
	PSRLQ $5, X7
	MOVO X1, X5
	PSLLQ $32, X1
	POR X7, X1
	MOVO X1, 288(BX)
	PSRLQ $32, X5
	PSLLQ $5, X14
	MOVO X9, X13
	PSLLQ $42, X9
	POR X5, X14
	POR X9, X14
	MOVO X14, 304(BX)
	PSRLQ $22, X13
	MOVO 560(AX), X6
	MOVO 576(AX), X8
	MOVO 592(AX), X10
	MOVO 608(AX), X3
	PSLLQ $15, X6
	MOVO X8, X4
	PSLLQ $52, X8
	POR X13, X6
	POR X8, X6
	MOVO X6, 320(BX)
	PSRLQ $12, X4
	PSLLQ $25, X10
	MOVO X3, X0
	PSLLQ $62, X3
	POR X4, X10
	POR X3, X10
	MOVO X10, 336(BX)
	PSRLQ $2, X0
	MOVO 624(AX), X12
	MOVO 640(AX), X15
	MOVO 656(AX), X2
	MOVO 672(AX), X11
	MOVO X12, X7
	PSLLQ $35, X12
	POR X0, X12
	MOVO X12, 352(BX)
	PSRLQ $29, X7
	PSLLQ $8, X15
	MOVO X2, X1
	PSLLQ $45, X2
	POR X7, X15
	POR X2, X15
	MOVO X15, 368(BX)
	PSRLQ $19, X1
	PSLLQ $18, X11
	MOVO 688(AX), X5
	MOVO 704(AX), X9
	MOVO 720(AX), X14
	MOVO 736(AX), X13
	MOVO X5, X8
	PSLLQ $55, X5
	POR X1, X11
	POR X5, X11
	MOVO X11, 384(BX)
	PSRLQ $9, X8
	MOVO X9, X6
	PSLLQ $28, X9
	POR X8, X9
	MOVO X9, 400(BX)
	PSRLQ $36, X6
	PSLLQ $1, X14
	MOVO X13, X4
	PSLLQ $38, X13
	POR X6, X14
	POR X13, X14
	MOVO X14, 416(BX)
	PSRLQ $26, X4
	MOVO 752(AX), X3
	MOVO 768(AX), X10
	MOVO 784(AX), X0
	MOVO 800(AX), X12
	PSLLQ $11, X3
	MOVO X10, X7
	PSLLQ $48, X10
	POR X4, X3
	POR X10, X3
	MOVO X3, 432(BX)
	PSRLQ $16, X7
	PSLLQ $21, X0
	MOVO X12, X2
	PSLLQ $58, X12
	POR X7, X0
	POR X12, X0
	MOVO X0, 448(BX)
	PSRLQ $6, X2
	MOVO 816(AX), X15
	MOVO 832(AX), X1
	MOVO 848(AX), X5
	MOVO 864(AX), X11
	MOVO X15, X8
	PSLLQ $31, X15
	POR X2, X15
	MOVO X15, 464(BX)
	PSRLQ $33, X8
	PSLLQ $4, X1
	MOVO X5, X9
	PSLLQ $41, X5
	POR X8, X1
	POR X5, X1
	MOVO X1, 480(BX)
	PSRLQ $23, X9
	PSLLQ $14, X11
	MOVO 880(AX), X6
	MOVO 896(AX), X13
	MOVO 912(AX), X14
	MOVO 928(AX), X4
	MOVO X6, X10
	PSLLQ $51, X6
	POR X9, X11
	POR X6, X11
	MOVO X11, 496(BX)
	PSRLQ $13, X10
	PSLLQ $24, X13
	MOVO X14, X3
	PSLLQ $61, X14
	POR X10, X13
	POR X14, X13
	MOVO X13, 512(BX)
	PSRLQ $3, X3
	MOVO X4, X7
	PSLLQ $34, X4
	POR X3, X4
	MOVO X4, 528(BX)
	PSRLQ $30, X7
	MOVO 944(AX), X12
	MOVO 960(AX), X0
	MOVO 976(AX), X2
	MOVO 992(AX), X15
	PSLLQ $7, X12
	MOVO X0, X8
	PSLLQ $44, X0
	POR X7, X12
	POR X0, X12
	MOVO X12, 544(BX)
	PSRLQ $20, X8
	PSLLQ $17, X2
	MOVO X15, X5
	PSLLQ $54, X15
	POR X8, X2
	POR X15, X2
	MOVO X2, 560(BX)
	PSRLQ $10, X5
	MOVO 1008(AX), X1
	PSLLQ $27, X1
	POR X5, X1
	MOVO X1, 576(BX)
	RET

// func pack64_38(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_38(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $38, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $26, X4
	PSLLQ $12, X3
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	MOVO X5, X9
	PSLLQ $50, X5
	POR X4, X3
	POR X5, X3
	MOVO X3, 16(BX)
	PSRLQ $14, X9
	PSLLQ $24, X6
	MOVO X7, X10
	PSLLQ $62, X7
	POR X9, X6
	POR X7, X6
	MOVO X6, 32(BX)
	PSRLQ $2, X10
	MOVO X8, X11
	PSLLQ $36, X8
	POR X10, X8
	MOVO X8, 48(BX)
	PSRLQ $28, X11
	MOVO 112(AX), X12
	MOVO 128(AX), X13
	MOVO 144(AX), X14
	MOVO 160(AX), X15
	PSLLQ $10, X12
	MOVO X13, X0
	PSLLQ $48, X13
	POR X11, X12
	POR X13, X12
	MOVO X12, 64(BX)
	PSRLQ $16, X0
	PSLLQ $22, X14
	MOVO X15, X1
	PSLLQ $60, X15
	POR X0, X14
	POR X15, X14
	MOVO X14, 80(BX)
	PSRLQ $4, X1
	MOVO 176(AX), X2
	MOVO 192(AX), X4
	MOVO 208(AX), X5
	MOVO 224(AX), X3
	MOVO X2, X9
	PSLLQ $34, X2
	POR X1, X2
	MOVO X2, 96(BX)
	PSRLQ $30, X9
	PSLLQ $8, X4
	MOVO X5, X7
	PSLLQ $46, X5
	POR X9, X4
	POR X5, X4
	MOVO X4, 112(BX)
	PSRLQ $18, X7
	PSLLQ $20, X3
	MOVO 240(AX), X6
	MOVO 256(AX), X10
	MOVO 272(AX), X8
	MOVO 288(AX), X11
	MOVO X6, X13
	PSLLQ $58, X6
	POR X7, X3
	POR X6, X3
	MOVO X3, 128(BX)
	PSRLQ $6, X13
	MOVO X10, X12
	PSLLQ $32, X10
	POR X13, X10
	MOVO X10, 144(BX)
	PSRLQ $32, X12
	PSLLQ $6, X8
	MOVO X11, X0
	PSLLQ $44, X11
	POR X12, X8
	POR X11, X8
	MOVO X8, 160(BX)
	PSRLQ $20, X0
	MOVO 304(AX), X15
	MOVO 320(AX), X14
	MOVO 336(AX), X1
	MOVO 352(AX), X2
	PSLLQ $18, X15
	MOVO X14, X9
	PSLLQ $56, X14
	POR X0, X15
	POR X14, X15
	MOVO X15, 176(BX)
	PSRLQ $8, X9
	MOVO X1, X5
	PSLLQ $30, X1
	POR X9, X1
	MOVO X1, 192(BX)
	PSRLQ $34, X5
	PSLLQ $4, X2
	MOVO 368(AX), X4
	MOVO 384(AX), X7
	MOVO 400(AX), X6
	MOVO 416(AX), X3
	MOVO X4, X13
	PSLLQ $42, X4
	POR X5, X2
	POR X4, X2
	MOVO X2, 208(BX)
	PSRLQ $22, X13
	PSLLQ $16, X7
	MOVO X6, X10
	PSLLQ $54, X6
	POR X13, X7
	POR X6, X7
	MOVO X7, 224(BX)
	PSRLQ $10, X10
	MOVO X3, X12
	PSLLQ $28, X3
	POR X10, X3
	MOVO X3, 240(BX)
	PSRLQ $36, X12
	MOVO 432(AX), X11
	MOVO 448(AX), X8
	MOVO 464(AX), X0
	MOVO 480(AX), X14
	PSLLQ $2, X11
	MOVO X8, X15
	PSLLQ $40, X8
	POR X12, X11
	POR X8, X11
	MOVO X11, 256(BX)
	PSRLQ $24, X15
	PSLLQ $14, X0
	MOVO X14, X9
	PSLLQ $52, X14
	POR X15, X0
	POR X14, X0
	MOVO X0, 272(BX)
	PSRLQ $12, X9
	MOVO 496(AX), X1
	MOVO 512(AX), X5
	MOVO 528(AX), X4
	MOVO 544(AX), X2
	PSLLQ $26, X1
	POR X9, X1
	MOVO X1, 288(BX)
	MOVO X4, X13
	PSLLQ $38, X4
	POR X5, X4
	MOVO X4, 304(BX)
	PSRLQ $26, X13
	PSLLQ $12, X2
	MOVO 560(AX), X6
	MOVO 576(AX), X7
	MOVO 592(AX), X10
	MOVO 608(AX), X3
	MOVO X6, X12
	PSLLQ $50, X6
	POR X13, X2
	POR X6, X2
	MOVO X2, 320(BX)
	PSRLQ $14, X12
	PSLLQ $24, X7
	MOVO X10, X8
	PSLLQ $62, X10
	POR X12, X7
	POR X10, X7
	MOVO X7, 336(BX)
	PSRLQ $2, X8
	MOVO X3, X11
	PSLLQ $36, X3
	POR X8, X3
	MOVO X3, 352(BX)
	PSRLQ $28, X11
	MOVO 624(AX), X15
	MOVO 640(AX), X14
	MOVO 656(AX), X0
	MOVO 672(AX), X9
	PSLLQ $10, X15
	MOVO X14, X1
	PSLLQ $48, X14
	POR X11, X15
	POR X14, X15
	MOVO X15, 368(BX)
	PSRLQ $16, X1
	PSLLQ $22, X0
	MOVO X9, X5
	PSLLQ $60, X9
	POR X1, X0
	POR X9, X0
	MOVO X0, 384(BX)
	PSRLQ $4, X5
	MOVO 688(AX), X4
	MOVO 704(AX), X13
	MOVO 720(AX), X6
	MOVO 736(AX), X2
	MOVO X4, X12
	PSLLQ $34, X4
	POR X5, X4
	MOVO X4, 400(BX)
	PSRLQ $30, X12
	PSLLQ $8, X13
	MOVO X6, X10
	PSLLQ $46, X6
	POR X12, X13
	POR X6, X13
	MOVO X13, 416(BX)
	PSRLQ $18, X10
	PSLLQ $20, X2
	MOVO 752(AX), X7
	MOVO 768(AX), X8
	MOVO 784(AX), X3
	MOVO 800(AX), X11
	MOVO X7, X14
	PSLLQ $58, X7
	POR X10, X2
	POR X7, X2
	MOVO X2, 432(BX)
	PSRLQ $6, X14
	MOVO X8, X15
	PSLLQ $32, X8
	POR X14, X8
	MOVO X8, 448(BX)
	PSRLQ $32, X15
	PSLLQ $6, X3
	MOVO X11, X1
	PSLLQ $44, X11
	POR X15, X3
	POR X11, X3
	MOVO X3, 464(BX)
	PSRLQ $20, X1
	MOVO 816(AX), X9
	MOVO 832(AX), X0
	MOVO 848(AX), X5
	MOVO 864(AX), X4
	PSLLQ $18, X9
	MOVO X0, X12
	PSLLQ $56, X0
	POR X1, X9
	POR X0, X9
	MOVO X9, 480(BX)
	PSRLQ $8, X12
	MOVO X5, X6
	PSLLQ $30, X5
	POR X12, X5
	MOVO X5, 496(BX)
	PSRLQ $34, X6
	PSLLQ $4, X4
	MOVO 880(AX), X13
	MOVO 896(AX), X10
	MOVO 912(AX), X7
	MOVO 928(AX), X2
	MOVO X13, X14
	PSLLQ $42, X13
	POR X6, X4
	POR X13, X4
	MOVO X4, 512(BX)
	PSRLQ $22, X14
	PSLLQ $16, X10
	MOVO X7, X8
	PSLLQ $54, X7
	POR X14, X10
	POR X7, X10
	MOVO X10, 528(BX)
	PSRLQ $10, X8
	MOVO X2, X15
	PSLLQ $28, X2
	POR X8, X2
	MOVO X2, 544(BX)
	PSRLQ $36, X15
	MOVO 944(AX), X11
	MOVO 960(AX), X3
	MOVO 976(AX), X1
	MOVO 992(AX), X0
	PSLLQ $2, X11
	MOVO X3, X9
	PSLLQ $40, X3
	POR X15, X11
	POR X3, X11
	MOVO X11, 560(BX)
	PSRLQ $24, X9
	PSLLQ $14, X1
	MOVO X0, X12
	PSLLQ $52, X0
	POR X9, X1
	POR X0, X1
	MOVO X1, 576(BX)
	PSRLQ $12, X12
	MOVO 1008(AX), X5
	PSLLQ $26, X5
	POR X12, X5
	MOVO X5, 592(BX)
	RET

// func pack64_39(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_39(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $39, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $25, X4
	PSLLQ $14, X3
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	MOVO X5, X9
	PSLLQ $53, X5
	POR X4, X3
	POR X5, X3
	MOVO X3, 16(BX)
	PSRLQ $11, X9
	MOVO X6, X10
	PSLLQ $28, X6
	POR X9, X6
	MOVO X6, 32(BX)
	PSRLQ $36, X10
	PSLLQ $3, X7
	MOVO X8, X11
	PSLLQ $42, X8
	POR X10, X7
	POR X8, X7
	MOVO X7, 48(BX)
	PSRLQ $22, X11
	MOVO 112(AX), X12
	MOVO 128(AX), X13
	MOVO 144(AX), X14
	MOVO 160(AX), X15
	PSLLQ $17, X12
	MOVO X13, X0
	PSLLQ $56, X13
	POR X11, X12
	POR X13, X12
	MOVO X12, 64(BX)
	PSRLQ $8, X0
	MOVO X14, X1
	PSLLQ $31, X14
	POR X0, X14
	MOVO X14, 80(BX)
	PSRLQ $33, X1
	PSLLQ $6, X15
	MOVO 176(AX), X2
	MOVO 192(AX), X4
	MOVO 208(AX), X5
	MOVO 224(AX), X3
	MOVO X2, X9
	PSLLQ $45, X2
	POR X1, X15
	POR X2, X15
	MOVO X15, 96(BX)
	PSRLQ $19, X9
	PSLLQ $20, X4
	MOVO X5, X6
	PSLLQ $59, X5
	POR X9, X4
	POR X5, X4
	MOVO X4, 112(BX)
	PSRLQ $5, X6
	MOVO X3, X10
	PSLLQ $34, X3
	POR X6, X3
	MOVO X3, 128(BX)
	PSRLQ $30, X10
	MOVO 240(AX), X8
	MOVO 256(AX), X7
	MOVO 272(AX), X11
	MOVO 288(AX), X13
	PSLLQ $9, X8
	MOVO X7, X12
	PSLLQ $48, X7
	POR X10, X8
	POR X7, X8
	MOVO X8, 144(BX)
	PSRLQ $16, X12
	PSLLQ $23, X11
	MOVO X13, X0
	PSLLQ $62, X13
	POR X12, X11
	POR X13, X11
	MOVO X11, 160(BX)
	PSRLQ $2, X0
	MOVO 304(AX), X14
	MOVO 320(AX), X1
	MOVO 336(AX), X2
	MOVO 352(AX), X15
	MOVO X14, X9
	PSLLQ $37, X14
	POR X0, X14
	MOVO X14, 176(BX)
	PSRLQ $27, X9
	PSLLQ $12, X1
	MOVO X2, X5
	PSLLQ $51, X2
	POR X9, X1
	POR X2, X1
	MOVO X1, 192(BX)
	PSRLQ $13, X5
	MOVO X15, X4
	PSLLQ $26, X15
	POR X5, X15
	MOVO X15, 208(BX)
	PSRLQ $38, X4
	MOVO 368(AX), X6
	MOVO 384(AX), X3
	MOVO 400(AX), X10
	MOVO 416(AX), X7
	PSLLQ $1, X6
	MOVO X3, X8
	PSLLQ $40, X3
	POR X4, X6
	POR X3, X6
	MOVO X6, 224(BX)
	PSRLQ $24, X8
	PSLLQ $15, X10
	MOVO X7, X12
	PSLLQ $54, X7
	POR X8, X10
	POR X7, X10
	MOVO X10, 240(BX)
	PSRLQ $10, X12
	MOVO 432(AX), X13
	MOVO 448(AX), X11
	MOVO 464(AX), X0
	MOVO 480(AX), X14
	MOVO X13, X9
	PSLLQ $29, X13
	POR X12, X13
	MOVO X13, 256(BX)
	PSRLQ $35, X9
	PSLLQ $4, X11
	MOVO X0, X2
	PSLLQ $43, X0
	POR X9, X11
	POR X0, X11
	MOVO X11, 272(BX)
	PSRLQ $21, X2
	PSLLQ $18, X14
	MOVO 496(AX), X1
	MOVO 512(AX), X5
	MOVO 528(AX), X15
	MOVO 544(AX), X4
	MOVO X1, X3
	PSLLQ $57, X1
	POR X2, X14
	POR X1, X14
	MOVO X14, 288(BX)
	PSRLQ $7, X3
	MOVO X5, X6
	PSLLQ $32, X5
	POR X3, X5
	MOVO X5, 304(BX)
	PSRLQ $32, X6
	PSLLQ $7, X15
	MOVO X4, X8
	PSLLQ $46, X4
	POR X6, X15
	POR X4, X15
	MOVO X15, 320(BX)
	PSRLQ $18, X8
	MOVO 560(AX), X7
	MOVO 576(AX), X10
	MOVO 592(AX), X12
	MOVO 608(AX), X13
	PSLLQ $21, X7
	MOVO X10, X9
	PSLLQ $60, X10
	POR X8, X7
	POR X10, X7
	MOVO X7, 336(BX)
	PSRLQ $4, X9
	MOVO X12, X0
	PSLLQ $35, X12
	POR X9, X12
	MOVO X12, 352(BX)
	PSRLQ $29, X0
	PSLLQ $10, X13
	MOVO 624(AX), X11
	MOVO 640(AX), X2
	MOVO 656(AX), X1
	MOVO 672(AX), X14
	MOVO X11, X3
	PSLLQ $49, X11
	POR X0, X13
	POR X11, X13
	MOVO X13, 368(BX)
	PSRLQ $15, X3
	PSLLQ $24, X2
	MOVO X1, X5
	PSLLQ $63, X1
	POR X3, X2
	POR X1, X2
	MOVO X2, 384(BX)
	PSRLQ $1, X5
	MOVO X14, X6
	PSLLQ $38, X14
	POR X5, X14
	MOVO X14, 400(BX)
	PSRLQ $26, X6
	MOVO 688(AX), X4
	MOVO 704(AX), X15
	MOVO 720(AX), X8
	MOVO 736(AX), X10
	PSLLQ $13, X4
	MOVO X15, X7
	PSLLQ $52, X15
	POR X6, X4
	POR X15, X4
	MOVO X4, 416(BX)
	PSRLQ $12, X7
	MOVO X8, X9
	PSLLQ $27, X8
	POR X7, X8
	MOVO X8, 432(BX)
	PSRLQ $37, X9
	PSLLQ $2, X10
	MOVO 752(AX), X12
	MOVO 768(AX), X0
	MOVO 784(AX), X11
	MOVO 800(AX), X13
	MOVO X12, X3
	PSLLQ $41, X12
	POR X9, X10
	POR X12, X10
	MOVO X10, 448(BX)
	PSRLQ $23, X3
	PSLLQ $16, X0
	MOVO X11, X1
	PSLLQ $55, X11
	POR X3, X0
	POR X11, X0
	MOVO X0, 464(BX)
	PSRLQ $9, X1
	MOVO X13, X2
	PSLLQ $30, X13
	POR X1, X13
	MOVO X13, 480(BX)
	PSRLQ $34, X2
	MOVO 816(AX), X5
	MOVO 832(AX), X14
	MOVO 848(AX), X6
	MOVO 864(AX), X15
	PSLLQ $5, X5
	MOVO X14, X4
	PSLLQ $44, X14
	POR X2, X5
	POR X14, X5
	MOVO X5, 496(BX)
	PSRLQ $20, X4
	PSLLQ $19, X6
	MOVO X15, X7
	PSLLQ $58, X15
	POR X4, X6
	POR X15, X6
	MOVO X6, 512(BX)
	PSRLQ $6, X7
	MOVO 880(AX), X8
	MOVO 896(AX), X9
	MOVO 912(AX), X12
	MOVO 928(AX), X10
	MOVO X8, X3
	PSLLQ $33, X8
	POR X7, X8
	MOVO X8, 528(BX)
	PSRLQ $31, X3
	PSLLQ $8, X9
	MOVO X12, X11
	PSLLQ $47, X12
	POR X3, X9
	POR X12, X9
	MOVO X9, 544(BX)
	PSRLQ $17, X11
	PSLLQ $22, X10
	MOVO 944(AX), X0
	MOVO 960(AX), X1
	MOVO 976(AX), X13
	MOVO 992(AX), X2
	MOVO X0, X14
	PSLLQ $61, X0
	POR X11, X10
	POR X0, X10
	MOVO X10, 560(BX)
	PSRLQ $3, X14
	MOVO X1, X5
	PSLLQ $36, X1
	POR X14, X1
	MOVO X1, 576(BX)
	PSRLQ $28, X5
	PSLLQ $11, X13
	MOVO X2, X4
	PSLLQ $50, X2
	POR X5, X13
	POR X2, X13
	MOVO X13, 592(BX)
	PSRLQ $14, X4
	MOVO 1008(AX), X15
	PSLLQ $25, X15
	POR X4, X15
	MOVO X15, 608(BX)
	RET

// func pack64_40(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_40(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $40, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $24, X4
	PSLLQ $16, X3
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	MOVO X5, X9
	PSLLQ $56, X5
	POR X4, X3
	POR X5, X3
	MOVO X3, 16(BX)
	PSRLQ $8, X9
	MOVO X6, X10
	PSLLQ $32, X6
	POR X9, X6
	MOVO X6, 32(BX)
	PSRLQ $32, X10
	PSLLQ $8, X7
	MOVO X8, X11
	PSLLQ $48, X8
	POR X10, X7
	POR X8, X7
	MOVO X7, 48(BX)
	PSRLQ $16, X11
	MOVO 112(AX), X12
	MOVO 128(AX), X13
	MOVO 144(AX), X14
	MOVO 160(AX), X15
	PSLLQ $24, X12
	POR X11, X12
	MOVO X12, 64(BX)
	MOVO X14, X0
	PSLLQ $40, X14
	POR X13, X14
	MOVO X14, 80(BX)
	PSRLQ $24, X0
	PSLLQ $16, X15
	MOVO 176(AX), X1
	MOVO 192(AX), X2
	MOVO 208(AX), X4
	MOVO 224(AX), X5
	MOVO X1, X3
	PSLLQ $56, X1
	POR X0, X15
	POR X1, X15
	MOVO X15, 96(BX)
	PSRLQ $8, X3
	MOVO X2, X9
	PSLLQ $32, X2
	POR X3, X2
	MOVO X2, 112(BX)
	PSRLQ $32, X9
	PSLLQ $8, X4
	MOVO X5, X6
	PSLLQ $48, X5
	POR X9, X4
	POR X5, X4
	MOVO X4, 128(BX)
	PSRLQ $16, X6
	MOVO 240(AX), X10
	MOVO 256(AX), X8
	MOVO 272(AX), X7
	MOVO 288(AX), X11
	PSLLQ $24, X10
	POR X6, X10
	MOVO X10, 144(BX)
	MOVO X7, X12
	PSLLQ $40, X7
	POR X8, X7
	MOVO X7, 160(BX)
	PSRLQ $24, X12
	PSLLQ $16, X11
	MOVO 304(AX), X13
	MOVO 320(AX), X14
	MOVO 336(AX), X0
	MOVO 352(AX), X1
	MOVO X13, X15
	PSLLQ $56, X13
	POR X12, X11
	POR X13, X11
	MOVO X11, 176(BX)
	PSRLQ $8, X15
	MOVO X14, X3
	PSLLQ $32, X14
	POR X15, X14
	MOVO X14, 192(BX)
	PSRLQ $32, X3
	PSLLQ $8, X0
	MOVO X1, X2
	PSLLQ $48, X1
	POR X3, X0
	POR X1, X0
	MOVO X0, 208(BX)
	PSRLQ $16, X2
	MOVO 368(AX), X9
	MOVO 384(AX), X5
	MOVO 400(AX), X4
	MOVO 416(AX), X6
	PSLLQ $24, X9
	POR X2, X9
	MOVO X9, 224(BX)
	MOVO X4, X10
	PSLLQ $40, X4
	POR X5, X4
	MOVO X4, 240(BX)
	PSRLQ $24, X10
	PSLLQ $16, X6
	MOVO 432(AX), X8
	MOVO 448(AX), X7
	MOVO 464(AX), X12
	MOVO 480(AX), X13
	MOVO X8, X11
	PSLLQ $56, X8
	POR X10, X6
	POR X8, X6
	MOVO X6, 256(BX)
	PSRLQ $8, X11
	MOVO X7, X15
	PSLLQ $32, X7
	POR X11, X7
	MOVO X7, 272(BX)
	PSRLQ $32, X15
	PSLLQ $8, X12
	MOVO X13, X14
	PSLLQ $48, X13
	POR X15, X12
	POR X13, X12
	MOVO X12, 288(BX)
	PSRLQ $16, X14
	MOVO 496(AX), X3
	MOVO 512(AX), X1
	MOVO 528(AX), X0
	MOVO 544(AX), X2
	PSLLQ $24, X3
	POR X14, X3
	MOVO X3, 304(BX)
	MOVO X0, X9
	PSLLQ $40, X0
	POR X1, X0
	MOVO X0, 320(BX)
	PSRLQ $24, X9
	PSLLQ $16, X2
	MOVO 560(AX), X5
	MOVO 576(AX), X4
	MOVO 592(AX), X10
	MOVO 608(AX), X8
	MOVO X5, X6
	PSLLQ $56, X5
	POR X9, X2
	POR X5, X2
	MOVO X2, 336(BX)
	PSRLQ $8, X6
	MOVO X4, X11
	PSLLQ $32, X4
	POR X6, X4
	MOVO X4, 352(BX)
	PSRLQ $32, X11
	PSLLQ $8, X10
	MOVO X8, X7
	PSLLQ $48, X8
	POR X11, X10
	POR X8, X10
	MOVO X10, 368(BX)
	PSRLQ $16, X7
	MOVO 624(AX), X15
	MOVO 640(AX), X13
	MOVO 656(AX), X12
	MOVO 672(AX), X14
	PSLLQ $24, X15
	POR X7, X15
	MOVO X15, 384(BX)
	MOVO X12, X3
	PSLLQ $40, X12
	POR X13, X12
	MOVO X12, 400(BX)
	PSRLQ $24, X3
	PSLLQ $16, X14
	MOVO 688(AX), X1
	MOVO 704(AX), X0
	MOVO 720(AX), X9
	MOVO 736(AX), X5
	MOVO X1, X2
	PSLLQ $56, X1
	POR X3, X14
	POR X1, X14
	MOVO X14, 416(BX)
	PSRLQ $8, X2
	MOVO X0, X6
	PSLLQ $32, X0
	POR X2, X0
	MOVO X0, 432(BX)
	PSRLQ $32, X6
	PSLLQ $8, X9
	MOVO X5, X4
	PSLLQ $48, X5
	POR X6, X9
	POR X5, X9
	MOVO X9, 448(BX)
	PSRLQ $16, X4
	MOVO 752(AX), X11
	MOVO 768(AX), X8
	MOVO 784(AX), X10
	MOVO 800(AX), X7
	PSLLQ $24, X11
	POR X4, X11
	MOVO X11, 464(BX)
	MOVO X10, X15
	PSLLQ $40, X10
	POR X8, X10
	MOVO X10, 480(BX)
	PSRLQ $24, X15
	PSLLQ $16, X7
	MOVO 816(AX), X13
	MOVO 832(AX), X12
	MOVO 848(AX), X3
	MOVO 864(AX), X1
	MOVO X13, X14
	PSLLQ $56, X13
	POR X15, X7
	POR X13, X7
	MOVO X7, 496(BX)
	PSRLQ $8, X14
	MOVO X12, X2
	PSLLQ $32, X12
	POR X14, X12
	MOVO X12, 512(BX)
	PSRLQ $32, X2
	PSLLQ $8, X3
	MOVO X1, X0
	PSLLQ $48, X1
	POR X2, X3
	POR X1, X3
	MOVO X3, 528(BX)
	PSRLQ $16, X0
	MOVO 880(AX), X6
	MOVO 896(AX), X5
	MOVO 912(AX), X9
	MOVO 928(AX), X4
	PSLLQ $24, X6
	POR X0, X6
	MOVO X6, 544(BX)
	MOVO X9, X11
	PSLLQ $40, X9
	POR X5, X9
	MOVO X9, 560(BX)
	PSRLQ $24, X11
	PSLLQ $16, X4
	MOVO 944(AX), X8
	MOVO 960(AX), X10
	MOVO 976(AX), X15
	MOVO 992(AX), X13
	MOVO X8, X7
	PSLLQ $56, X8
	POR X11, X4
	POR X8, X4
	MOVO X4, 576(BX)
	PSRLQ $8, X7
	MOVO X10, X14
	PSLLQ $32, X10
	POR X7, X10
	MOVO X10, 592(BX)
	PSRLQ $32, X14
	PSLLQ $8, X15
	MOVO X13, X12
	PSLLQ $48, X13
	POR X14, X15
	POR X13, X15
	MOVO X15, 608(BX)
	PSRLQ $16, X12
	MOVO 1008(AX), X2
	PSLLQ $24, X2
	POR X12, X2
	MOVO X2, 624(BX)
	RET

// func pack64_41(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_41(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $41, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $23, X4
	PSLLQ $18, X3
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	MOVO X5, X9
	PSLLQ $59, X5
	POR X4, X3
	POR X5, X3
	MOVO X3, 16(BX)
	PSRLQ $5, X9
	MOVO X6, X10
	PSLLQ $36, X6
	POR X9, X6
	MOVO X6, 32(BX)
	PSRLQ $28, X10
	PSLLQ $13, X7
	MOVO X8, X11
	PSLLQ $54, X8
	POR X10, X7
	POR X8, X7
	MOVO X7, 48(BX)
	PSRLQ $10, X11
	MOVO 112(AX), X12
	MOVO 128(AX), X13
	MOVO 144(AX), X14
	MOVO 160(AX), X15
	MOVO X12, X0
	PSLLQ $31, X12
	POR X11, X12
	MOVO X12, 64(BX)
	PSRLQ $33, X0
	PSLLQ $8, X13
	MOVO X14, X1
	PSLLQ $49, X14
	POR X0, X13
	POR X14, X13
	MOVO X13, 80(BX)
	PSRLQ $15, X1
	MOVO X15, X2
	PSLLQ $26, X15
	POR X1, X15
	MOVO X15, 96(BX)
	PSRLQ $38, X2
	MOVO 176(AX), X4
	MOVO 192(AX), X5
	MOVO 208(AX), X3
	MOVO 224(AX), X9
	PSLLQ $3, X4
	MOVO X5, X6
	PSLLQ $44, X5
	POR X2, X4
	POR X5, X4
	MOVO X4, 112(BX)
	PSRLQ $20, X6
	PSLLQ $21, X3
	MOVO X9, X10
	PSLLQ $62, X9
	POR X6, X3
	POR X9, X3
	MOVO X3, 128(BX)
	PSRLQ $2, X10
	MOVO 240(AX), X8
	MOVO 256(AX), X7
	MOVO 272(AX), X11
	MOVO 288(AX), X12
	MOVO X8, X0
	PSLLQ $39, X8
	POR X10, X8
	MOVO X8, 144(BX)
	PSRLQ $25, X0
	PSLLQ $16, X7
	MOVO X11, X14
	PSLLQ $57, X11
	POR X0, X7
	POR X11, X7
	MOVO X7, 160(BX)
	PSRLQ $7, X14
	MOVO X12, X13
	PSLLQ $34, X12
	POR X14, X12
	MOVO X12, 176(BX)
	PSRLQ $30, X13
	MOVO 304(AX), X1
	MOVO 320(AX), X15
	MOVO 336(AX), X2
	MOVO 352(AX), X5
	PSLLQ $11, X1
	MOVO X15, X4
	PSLLQ $52, X15
	POR X13, X1
	POR X15, X1
	MOVO X1, 192(BX)
	PSRLQ $12, X4
	MOVO X2, X6
	PSLLQ $29, X2
	POR X4, X2
	MOVO X2, 208(BX)
	PSRLQ $35, X6
	PSLLQ $6, X5
	MOVO 368(AX), X9
	MOVO 384(AX), X3
	MOVO 400(AX), X10
	MOVO 416(AX), X8
	MOVO X9, X0
	PSLLQ $47, X9
	POR X6, X5
	POR X9, X5
	MOVO X5, 224(BX)
	PSRLQ $17, X0
	MOVO X3, X11
	PSLLQ $24, X3
	POR X0, X3
	MOVO X3, 240(BX)
	PSRLQ $40, X11
	PSLLQ $1, X10
	MOVO X8, X7
	PSLLQ $42, X8
	POR X11, X10
	POR X8, X10
	MOVO X10, 256(BX)
	PSRLQ $22, X7
	MOVO 432(AX), X14
	MOVO 448(AX), X12
	MOVO 464(AX), X13
	MOVO 480(AX), X15
	PSLLQ $19, X14
	MOVO X12, X1
	PSLLQ $60, X12
	POR X7, X14
	POR X12, X14
	MOVO X14, 272(BX)
	PSRLQ $4, X1
	MOVO X13, X4
	PSLLQ $37, X13
	POR X1, X13
	MOVO X13, 288(BX)
	PSRLQ $27, X4
	PSLLQ $14, X15
	MOVO 496(AX), X2
	MOVO 512(AX), X6
	MOVO 528(AX), X9
	MOVO 544(AX), X5
	MOVO X2, X0
	PSLLQ $55, X2
	POR X4, X15
	POR X2, X15
	MOVO X15, 304(BX)
	PSRLQ $9, X0
	MOVO X6, X3
	PSLLQ $32, X6
	POR X0, X6
	MOVO X6, 320(BX)
	PSRLQ $32, X3
	PSLLQ $9, X9
	MOVO X5, X11
	PSLLQ $50, X5
	POR X3, X9
	POR X5, X9
	MOVO X9, 336(BX)
	PSRLQ $14, X11
	MOVO 560(AX), X8
	MOVO 576(AX), X10
	MOVO 592(AX), X7
	MOVO 608(AX), X12
	MOVO X8, X14
	PSLLQ $27, X8
	POR X11, X8
	MOVO X8, 352(BX)
	PSRLQ $37, X14
	PSLLQ $4, X10
	MOVO X7, X1
	PSLLQ $45, X7
	POR X14, X10
	POR X7, X10
	MOVO X10, 368(BX)
	PSRLQ $19, X1
	PSLLQ $22, X12
	MOVO 624(AX), X13
	MOVO 640(AX), X4
	MOVO 656(AX), X2
	MOVO 672(AX), X15
	MOVO X13, X0
	PSLLQ $63, X13
	POR X1, X12
	POR X13, X12
	MOVO X12, 384(BX)
	PSRLQ $1, X0
	MOVO X4, X6
	PSLLQ $40, X4
	POR X0, X4
	MOVO X4, 400(BX)
	PSRLQ $24, X6
	PSLLQ $17, X2
	MOVO X15, X3
	PSLLQ $58, X15
	POR X6, X2
	POR X15, X2
	MOVO X2, 416(BX)
	PSRLQ $6, X3
	MOVO 688(AX), X5
	MOVO 704(AX), X9
	MOVO 720(AX), X11
	MOVO 736(AX), X8
	MOVO X5, X14
	PSLLQ $35, X5
	POR X3, X5
	MOVO X5, 432(BX)
	PSRLQ $29, X14
	PSLLQ $12, X9
	MOVO X11, X7
	PSLLQ $53, X11
	POR X14, X9
	POR X11, X9
	MOVO X9, 448(BX)
	PSRLQ $11, X7
	MOVO X8, X10
	PSLLQ $30, X8
	POR X7, X8
	MOVO X8, 464(BX)
	PSRLQ $34, X10
	MOVO 752(AX), X1
	MOVO 768(AX), X13
	MOVO 784(AX), X12
	MOVO 800(AX), X0
	PSLLQ $7, X1
	MOVO X13, X4
	PSLLQ $48, X13
	POR X10, X1
	POR X13, X1
	MOVO X1, 480(BX)
	PSRLQ $16, X4
	MOVO X12, X6
	PSLLQ $25, X12
	POR X4, X12
	MOVO X12, 496(BX)
	PSRLQ $39, X6
	PSLLQ $2, X0
	MOVO 816(AX), X15
	MOVO 832(AX), X2
	MOVO 848(AX), X3
	MOVO 864(AX), X5
	MOVO X15, X14
	PSLLQ $43, X15
	POR X6, X0
	POR X15, X0
	MOVO X0, 512(BX)
	PSRLQ $21, X14
	PSLLQ $20, X2
	MOVO X3, X11
	PSLLQ $61, X3
	POR X14, X2
	POR X3, X2
	MOVO X2, 528(BX)
	PSRLQ $3, X11
	MOVO X5, X9
	PSLLQ $38, X5
	POR X11, X5
	MOVO X5, 544(BX)
	PSRLQ $26, X9
	MOVO 880(AX), X7
	MOVO 896(AX), X8
	MOVO 912(AX), X10
	MOVO 928(AX), X13
	PSLLQ $15, X7
	MOVO X8, X1
	PSLLQ $56, X8
	POR X9, X7
	POR X8, X7
	MOVO X7, 560(BX)
	PSRLQ $8, X1
	MOVO X10, X4
	PSLLQ $33, X10
	POR X1, X10
	MOVO X10, 576(BX)
	PSRLQ $31, X4
	PSLLQ $10, X13
	MOVO 944(AX), X12
	MOVO 960(AX), X6
	MOVO 976(AX), X15
	MOVO 992(AX), X0
	MOVO X12, X14
	PSLLQ $51, X12
	POR X4, X13
	POR X12, X13
	MOVO X13, 592(BX)
	PSRLQ $13, X14
	MOVO X6, X3
	PSLLQ $28, X6
	POR X14, X6
	MOVO X6, 608(BX)
	PSRLQ $36, X3
	PSLLQ $5, X15
	MOVO X0, X2
	PSLLQ $46, X0
	POR X3, X15
	POR X0, X15
	MOVO X15, 624(BX)
	PSRLQ $18, X2
	MOVO 1008(AX), X11
	PSLLQ $23, X11
	POR X2, X11
	MOVO X11, 640(BX)
	RET

// func pack64_42(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_42(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $42, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $22, X4
	PSLLQ $20, X3
	MOVO 48(AX), X5
	MOVO 64(AX), X6
	MOVO 80(AX), X7
	MOVO 96(AX), X8
	MOVO X5, X9
	PSLLQ $62, X5
	POR X4, X3
	POR X5, X3
	MOVO X3, 16(BX)
	PSRLQ $2, X9
	MOVO X6, X10
	PSLLQ $40, X6
	POR X9, X6
	MOVO X6, 32(BX)
	PSRLQ $24, X10
	PSLLQ $18, X7
	MOVO X8, X11
	PSLLQ $60, X8
	POR X10, X7
	POR X8, X7
	MOVO X7, 48(BX)
	PSRLQ $4, X11
	MOVO 112(AX), X12
	MOVO 128(AX), X13
	MOVO 144(AX), X14
	MOVO 160(AX), X15
	MOVO X12, X0
	PSLLQ $38, X12
	POR X11, X12
	MOVO X12, 64(BX)
	PSRLQ $26, X0
	PSLLQ $16, X13
	MOVO X14, X1
	PSLLQ $58, X14
	POR X0, X13
	POR X14, X13
	MOVO X13, 80(BX)
	PSRLQ $6, X1
	MOVO X15, X2
	PSLLQ $36, X15
	POR X1, X15
	MOVO X15, 96(BX)
	PSRLQ $28, X2
	MOVO 176(AX), X4
	MOVO 192(AX), X5
	MOVO 208(AX), X3
	MOVO 224(AX), X9
	PSLLQ $14, X4
	MOVO X5, X6
	PSLLQ $56, X5
	POR X2, X4
	POR X5, X4
	MOVO X4, 112(BX)
	PSRLQ $8, X6
	MOVO X3, X10
	PSLLQ $34, X3
	POR X6, X3
	MOVO X3, 128(BX)
	PSRLQ $30, X10
	PSLLQ $12, X9
	MOVO 240(AX), X8
	MOVO 256(AX), X7
	MOVO 272(AX), X11
	MOVO 288(AX), X12
	MOVO X8, X0
	PSLLQ $54, X8
	POR X10, X9
	POR X8, X9
	MOVO X9, 144(BX)
	PSRLQ $10, X0
	MOVO X7, X14
	PSLLQ $32, X7
	POR X0, X7
	MOVO X7, 160(BX)
	PSRLQ $32, X14
	PSLLQ $10, X11
	MOVO X12, X13
	PSLLQ $52, X12
	POR X14, X11
	POR X12, X11
	MOVO X11, 176(BX)
	PSRLQ $12, X13
	MOVO 304(AX), X1
	MOVO 320(AX), X15
	MOVO 336(AX), X2
	MOVO 352(AX), X5
	MOVO X1, X4
	PSLLQ $30, X1
	POR X13, X1
	MOVO X1, 192(BX)
	PSRLQ $34, X4
	PSLLQ $8, X15
	MOVO X2, X6
	PSLLQ $50, X2
	POR X4, X15
	POR X2, X15
	MOVO X15, 208(BX)
	PSRLQ $14, X6
	MOVO X5, X3
	PSLLQ $28, X5
	POR X6, X5
	MOVO X5, 224(BX)
	PSRLQ $36, X3
	MOVO 368(AX), X10
	MOVO 384(AX), X8
	MOVO 400(AX), X9
	MOVO 416(AX), X0
	PSLLQ $6, X10
	MOVO X8, X7
	PSLLQ $48, X8
	POR X3, X10
	POR X8, X10
	MOVO X10, 240(BX)
	PSRLQ $16, X7
	MOVO X9, X14
	PSLLQ $26, X9
	POR X7, X9
	MOVO X9, 256(BX)
	PSRLQ $38, X14
	PSLLQ $4, X0
	MOVO 432(AX), X12
	MOVO 448(AX), X11
	MOVO 464(AX), X13
	MOVO 480(AX), X1
	MOVO X12, X4
	PSLLQ $46, X12
	POR X14, X0
	POR X12, X0
	MOVO X0, 272(BX)
	PSRLQ $18, X4
	MOVO X11, X2
	PSLLQ $24, X11
	POR X4, X11
	MOVO X11, 288(BX)
	PSRLQ $40, X2
	PSLLQ $2, X13
	MOVO X1, X15
	PSLLQ $44, X1
	POR X2, X13
	POR X1, X13
	MOVO X13, 304(BX)
	PSRLQ $20, X15
	MOVO 496(AX), X6
	MOVO 512(AX), X5
	MOVO 528(AX), X3
	MOVO 544(AX), X8
	PSLLQ $22, X6
	POR X15, X6
	MOVO X6, 320(BX)
	MOVO X3, X10
	PSLLQ $42, X3
	POR X5, X3
	MOVO X3, 336(BX)
	PSRLQ $22, X10
	PSLLQ $20, X8
	MOVO 560(AX), X7
	MOVO 576(AX), X9
	MOVO 592(AX), X14
	MOVO 608(AX), X12
	MOVO X7, X0
	PSLLQ $62, X7
	POR X10, X8
	POR X7, X8
	MOVO X8, 352(BX)
	PSRLQ $2, X0
	MOVO X9, X4
	PSLLQ $40, X9
	POR X0, X9
	MOVO X9, 368(BX)
	PSRLQ $24, X4
	PSLLQ $18, X14
	MOVO X12, X11
	PSLLQ $60, X12
	POR X4, X14
	POR X12, X14
	MOVO X14, 384(BX)
	PSRLQ $4, X11
	MOVO 624(AX), X2
	MOVO 640(AX), X1
	MOVO 656(AX), X13
	MOVO 672(AX), X15
	MOVO X2, X6
	PSLLQ $38, X2
	POR X11, X2
	MOVO X2, 400(BX)
	PSRLQ $26, X6
	PSLLQ $16, X1
	MOVO X13, X5
	PSLLQ $58, X13
	POR X6, X1
	POR X13, X1
	MOVO X1, 416(BX)
	PSRLQ $6, X5
	MOVO X15, X3
	PSLLQ $36, X15
	POR X5, X15
	MOVO X15, 432(BX)
	PSRLQ $28, X3
	MOVO 688(AX), X10
	MOVO 704(AX), X7
	MOVO 720(AX), X8
	MOVO 736(AX), X0
	PSLLQ $14, X10
	MOVO X7, X9
	PSLLQ $56, X7
	POR X3, X10
	POR X7, X10
	MOVO X10, 448(BX)
	PSRLQ $8, X9
	MOVO X8, X4
	PSLLQ $34, X8
	POR X9, X8
	MOVO X8, 464(BX)
	PSRLQ $30, X4
	PSLLQ $12, X0
	MOVO 752(AX), X12
	MOVO 768(AX), X14
	MOVO 784(AX), X11
	MOVO 800(AX), X2
	MOVO X12, X6
	PSLLQ $54, X12
	POR X4, X0
	POR X12, X0
	MOVO X0, 480(BX)
	PSRLQ $10, X6
	MOVO X14, X13
	PSLLQ $32, X14
	POR X6, X14
	MOVO X14, 496(BX)
	PSRLQ $32, X13
	PSLLQ $10, X11
	MOVO X2, X1
	PSLLQ $52, X2
	POR X13, X11
	POR X2, X11
	MOVO X11, 512(BX)
	PSRLQ $12, X1
	MOVO 816(AX), X5
	MOVO 832(AX), X15
	MOVO 848(AX), X3
	MOVO 864(AX), X7
	MOVO X5, X10
	PSLLQ $30, X5
	POR X1, X5
	MOVO X5, 528(BX)
	PSRLQ $34, X10
	PSLLQ $8, X15
	MOVO X3, X9
	PSLLQ $50, X3
	POR X10, X15
	POR X3, X15
	MOVO X15, 544(BX)
	PSRLQ $14, X9
	MOVO X7, X8
	PSLLQ $28, X7
	POR X9, X7
	MOVO X7, 560(BX)
	PSRLQ $36, X8
	MOVO 880(AX), X4
	MOVO 896(AX), X12
	MOVO 912(AX), X0
	MOVO 928(AX), X6
	PSLLQ $6, X4
	MOVO X12, X14
	PSLLQ $48, X12
	POR X8, X4
	POR X12, X4
	MOVO X4, 576(BX)
	PSRLQ $16, X14
	MOVO X0, X13
	PSLLQ $26, X0
	POR X14, X0
	MOVO X0, 592(BX)
	PSRLQ $38, X13
	PSLLQ $4, X6
	MOVO 944(AX), X2
	MOVO 960(AX), X11
	MOVO 976(AX), X1
	MOVO 992(AX), X5
	MOVO X2, X10
	PSLLQ $46, X2
	POR X13, X6
	POR X2, X6
	MOVO X6, 608(BX)
	PSRLQ $18, X10
	MOVO X11, X3
	PSLLQ $24, X11
	POR X10, X11
	MOVO X11, 624(BX)
	PSRLQ $40, X3
	PSLLQ $2, X1
	MOVO X5, X15
	PSLLQ $44, X5
	POR X3, X1
	POR X5, X1
	MOVO X1, 640(BX)
	PSRLQ $20, X15
	MOVO 1008(AX), X9
	PSLLQ $22, X9
	POR X15, X9
	MOVO X9, 656(BX)
	RET

// func pack64_43(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_43(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $43, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $21, X4
	MOVO X3, X5
	PSLLQ $22, X3
	POR X4, X3
	MOVO X3, 16(BX)
	PSRLQ $42, X5
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	PSLLQ $1, X6
	MOVO X7, X10
	PSLLQ $44, X7
	POR X5, X6
	POR X7, X6
	MOVO X6, 32(BX)
	PSRLQ $20, X10
	MOVO X8, X11
	PSLLQ $23, X8
	POR X10, X8
	MOVO X8, 48(BX)
	PSRLQ $41, X11
	PSLLQ $2, X9
	MOVO 112(AX), X12
	MOVO 128(AX), X13
	MOVO 144(AX), X14
	MOVO 160(AX), X15
	MOVO X12, X0
	PSLLQ $45, X12
	POR X11, X9
	POR X12, X9
	MOVO X9, 64(BX)
	PSRLQ $19, X0
	MOVO X13, X1
	PSLLQ $24, X13
	POR X0, X13
	MOVO X13, 80(BX)
	PSRLQ $40, X1
	PSLLQ $3, X14
	MOVO X15, X2
	PSLLQ $46, X15
	POR X1, X14
	POR X15, X14
	MOVO X14, 96(BX)
	PSRLQ $18, X2
	MOVO 176(AX), X4
	MOVO 192(AX), X3
	MOVO 208(AX), X5
	MOVO 224(AX), X7
	MOVO X4, X6
	PSLLQ $25, X4
	POR X2, X4
	MOVO X4, 112(BX)
	PSRLQ $39, X6
	PSLLQ $4, X3
	MOVO X5, X10
	PSLLQ $47, X5
	POR X6, X3
	POR X5, X3
	MOVO X3, 128(BX)
	PSRLQ $17, X10
	MOVO X7, X8
	PSLLQ $26, X7
	POR X10, X7
	MOVO X7, 144(BX)
	PSRLQ $38, X8
	MOVO 240(AX), X11
	MOVO 256(AX), X12
	MOVO 272(AX), X9
	MOVO 288(AX), X0
	PSLLQ $5, X11
	MOVO X12, X13
	PSLLQ $48, X12
	POR X8, X11
	POR X12, X11
	MOVO X11, 160(BX)
	PSRLQ $16, X13
	MOVO X9, X1
	PSLLQ $27, X9
	POR X13, X9
	MOVO X9, 176(BX)
	PSRLQ $37, X1
	PSLLQ $6, X0
	MOVO 304(AX), X15
	MOVO 320(AX), X14
	MOVO 336(AX), X2
	MOVO 352(AX), X4
	MOVO X15, X6
	PSLLQ $49, X15
	POR X1, X0
	POR X15, X0
	MOVO X0, 192(BX)
	PSRLQ $15, X6
	MOVO X14, X5
	PSLLQ $28, X14
	POR X6, X14
	MOVO X14, 208(BX)
	PSRLQ $36, X5
	PSLLQ $7, X2
	MOVO X4, X3
	PSLLQ $50, X4
	POR X5, X2
	POR X4, X2
	MOVO X2, 224(BX)
	PSRLQ $14, X3
	MOVO 368(AX), X10
	MOVO 384(AX), X7
	MOVO 400(AX), X8
	MOVO 416(AX), X12
	MOVO X10, X11
	PSLLQ $29, X10
	POR X3, X10
	MOVO X10, 240(BX)
	PSRLQ $35, X11
	PSLLQ $8, X7
	MOVO X8, X13
	PSLLQ $51, X8
	POR X11, X7
	POR X8, X7
	MOVO X7, 256(BX)
	PSRLQ $13, X13
	MOVO X12, X9
	PSLLQ $30, X12
	POR X13, X12
	MOVO X12, 272(BX)
	PSRLQ $34, X9
	MOVO 432(AX), X1
	MOVO 448(AX), X15
	MOVO 464(AX), X0
	MOVO 480(AX), X6
	PSLLQ $9, X1
	MOVO X15, X14
	PSLLQ $52, X15
	POR X9, X1
	POR X15, X1
	MOVO X1, 288(BX)
	PSRLQ $12, X14
	MOVO X0, X5
	PSLLQ $31, X0
	POR X14, X0
	MOVO X0, 304(BX)
	PSRLQ $33, X5
	PSLLQ $10, X6
	MOVO 496(AX), X4
	MOVO 512(AX), X2
	MOVO 528(AX), X3
	MOVO 544(AX), X10
	MOVO X4, X11
	PSLLQ $53, X4
	POR X5, X6
	POR X4, X6
	MOVO X6, 320(BX)
	PSRLQ $11, X11
	MOVO X2, X8
	PSLLQ $32, X2
	POR X11, X2
	MOVO X2, 336(BX)
	PSRLQ $32, X8
	PSLLQ $11, X3
	MOVO X10, X7
	PSLLQ $54, X10
	POR X8, X3
	POR X10, X3
	MOVO X3, 352(BX)
	PSRLQ $10, X7
	MOVO 560(AX), X13
	MOVO 576(AX), X12
	MOVO 592(AX), X9
	MOVO 608(AX), X15
	MOVO X13, X1
	PSLLQ $33, X13
	POR X7, X13
	MOVO X13, 368(BX)
	PSRLQ $31, X1
	PSLLQ $12, X12
	MOVO X9, X14
	PSLLQ $55, X9
	POR X1, X12
	POR X9, X12
	MOVO X12, 384(BX)
	PSRLQ $9, X14
	MOVO X15, X0
	PSLLQ $34, X15
	POR X14, X15
	MOVO X15, 400(BX)
	PSRLQ $30, X0
	MOVO 624(AX), X5
	MOVO 640(AX), X4
	MOVO 656(AX), X6
	MOVO 672(AX), X11
	PSLLQ $13, X5
	MOVO X4, X2
	PSLLQ $56, X4
	POR X0, X5
	POR X4, X5
	MOVO X5, 416(BX)
	PSRLQ $8, X2
	MOVO X6, X8
	PSLLQ $35, X6
	POR X2, X6
	MOVO X6, 432(BX)
	PSRLQ $29, X8
	PSLLQ $14, X11
	MOVO 688(AX), X10
	MOVO 704(AX), X3
	MOVO 720(AX), X7
	MOVO 736(AX), X13
	MOVO X10, X1
	PSLLQ $57, X10
	POR X8, X11
	POR X10, X11
	MOVO X11, 448(BX)
	PSRLQ $7, X1
	MOVO X3, X9
	PSLLQ $36, X3
	POR X1, X3
	MOVO X3, 464(BX)
	PSRLQ $28, X9
	PSLLQ $15, X7
	MOVO X13, X12
	PSLLQ $58, X13
	POR X9, X7
	POR X13, X7
	MOVO X7, 480(BX)
	PSRLQ $6, X12
	MOVO 752(AX), X14
	MOVO 768(AX), X15
	MOVO 784(AX), X0
	MOVO 800(AX), X4
	MOVO X14, X5
	PSLLQ $37, X14
	POR X12, X14
	MOVO X14, 496(BX)
	PSRLQ $27, X5
	PSLLQ $16, X15
	MOVO X0, X2
	PSLLQ $59, X0
	POR X5, X15
	POR X0, X15
	MOVO X15, 512(BX)
	PSRLQ $5, X2
	MOVO X4, X6
	PSLLQ $38, X4
	POR X2, X4
	MOVO X4, 528(BX)
	PSRLQ $26, X6
	MOVO 816(AX), X8
	MOVO 832(AX), X10
	MOVO 848(AX), X11
	MOVO 864(AX), X1
	PSLLQ $17, X8
	MOVO X10, X3
	PSLLQ $60, X10
	POR X6, X8
	POR X10, X8
	MOVO X8, 544(BX)
	PSRLQ $4, X3
	MOVO X11, X9
	PSLLQ $39, X11
	POR X3, X11
	MOVO X11, 560(BX)
	PSRLQ $25, X9
	PSLLQ $18, X1
	MOVO 880(AX), X13
	MOVO 896(AX), X7
	MOVO 912(AX), X12
	MOVO 928(AX), X14
	MOVO X13, X5
	PSLLQ $61, X13
	POR X9, X1
	POR X13, X1
	MOVO X1, 576(BX)
	PSRLQ $3, X5
	MOVO X7, X0
	PSLLQ $40, X7
	POR X5, X7
	MOVO X7, 592(BX)
	PSRLQ $24, X0
	PSLLQ $19, X12
	MOVO X14, X15
	PSLLQ $62, X14
	POR X0, X12
	POR X14, X12
	MOVO X12, 608(BX)
	PSRLQ $2, X15
	MOVO 944(AX), X2
	MOVO 960(AX), X4
	MOVO 976(AX), X6
	MOVO 992(AX), X10
	MOVO X2, X8
	PSLLQ $41, X2
	POR X15, X2
	MOVO X2, 624(BX)
	PSRLQ $23, X8
	PSLLQ $20, X4
	MOVO X6, X3
	PSLLQ $63, X6
	POR X8, X4
	POR X6, X4
	MOVO X4, 640(BX)
	PSRLQ $1, X3
	MOVO X10, X11
	PSLLQ $42, X10
	POR X3, X10
	MOVO X10, 656(BX)
	PSRLQ $22, X11
	MOVO 1008(AX), X9
	PSLLQ $21, X9
	POR X11, X9
	MOVO X9, 672(BX)
	RET

// func pack64_44(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_44(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $44, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $20, X4
	MOVO X3, X5
	PSLLQ $24, X3
	POR X4, X3
	MOVO X3, 16(BX)
	PSRLQ $40, X5
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	PSLLQ $4, X6
	MOVO X7, X10
	PSLLQ $48, X7
	POR X5, X6
	POR X7, X6
	MOVO X6, 32(BX)
	PSRLQ $16, X10
	MOVO X8, X11
	PSLLQ $28, X8
	POR X10, X8
	MOVO X8, 48(BX)
	PSRLQ $36, X11
	PSLLQ $8, X9
	MOVO 112(AX), X12
	MOVO 128(AX), X13
	MOVO 144(AX), X14
	MOVO 160(AX), X15
	MOVO X12, X0
	PSLLQ $52, X12
	POR X11, X9
	POR X12, X9
	MOVO X9, 64(BX)
	PSRLQ $12, X0
	MOVO X13, X1
	PSLLQ $32, X13
	POR X0, X13
	MOVO X13, 80(BX)
	PSRLQ $32, X1
	PSLLQ $12, X14
	MOVO X15, X2
	PSLLQ $56, X15
	POR X1, X14
	POR X15, X14
	MOVO X14, 96(BX)
	PSRLQ $8, X2
	MOVO 176(AX), X4
	MOVO 192(AX), X3
	MOVO 208(AX), X5
	MOVO 224(AX), X7
	MOVO X4, X6
	PSLLQ $36, X4
	POR X2, X4
	MOVO X4, 112(BX)
	PSRLQ $28, X6
	PSLLQ $16, X3
	MOVO X5, X10
	PSLLQ $60, X5
	POR X6, X3
	POR X5, X3
	MOVO X3, 128(BX)
	PSRLQ $4, X10
	MOVO X7, X8
	PSLLQ $40, X7
	POR X10, X7
	MOVO X7, 144(BX)
	PSRLQ $24, X8
	MOVO 240(AX), X11
	MOVO 256(AX), X12
	MOVO 272(AX), X9
	MOVO 288(AX), X0
	PSLLQ $20, X11
	POR X8, X11
	MOVO X11, 160(BX)
	MOVO X9, X13
	PSLLQ $44, X9
	POR X12, X9
	MOVO X9, 176(BX)
	PSRLQ $20, X13
	MOVO X0, X1
	PSLLQ $24, X0
	POR X13, X0
	MOVO X0, 192(BX)
	PSRLQ $40, X1
	MOVO 304(AX), X15
	MOVO 320(AX), X14
	MOVO 336(AX), X2
	MOVO 352(AX), X4
	PSLLQ $4, X15
	MOVO X14, X6
	PSLLQ $48, X14
	POR X1, X15
	POR X14, X15
	MOVO X15, 208(BX)
	PSRLQ $16, X6
	MOVO X2, X5
	PSLLQ $28, X2
	POR X6, X2
	MOVO X2, 224(BX)
	PSRLQ $36, X5
	PSLLQ $8, X4
	MOVO 368(AX), X3
	MOVO 384(AX), X10
	MOVO 400(AX), X7
	MOVO 416(AX), X8
	MOVO X3, X11
	PSLLQ $52, X3
	POR X5, X4
	POR X3, X4
	MOVO X4, 240(BX)
	PSRLQ $12, X11
	MOVO X10, X12
	PSLLQ $32, X10
	POR X11, X10
	MOVO X10, 256(BX)
	PSRLQ $32, X12
	PSLLQ $12, X7
	MOVO X8, X9
	PSLLQ $56, X8
	POR X12, X7
	POR X8, X7
	MOVO X7, 272(BX)
	PSRLQ $8, X9
	MOVO 432(AX), X13
	MOVO 448(AX), X0
	MOVO 464(AX), X1
	MOVO 480(AX), X14
	MOVO X13, X15
	PSLLQ $36, X13
	POR X9, X13
	MOVO X13, 288(BX)
	PSRLQ $28, X15
	PSLLQ $16, X0
	MOVO X1, X6
	PSLLQ $60, X1
	POR X15, X0
	POR X1, X0
	MOVO X0, 304(BX)
	PSRLQ $4, X6
	MOVO X14, X2
	PSLLQ $40, X14
	POR X6, X14
	MOVO X14, 320(BX)
	PSRLQ $24, X2
	MOVO 496(AX), X5
	MOVO 512(AX), X3
	MOVO 528(AX), X4
	MOVO 544(AX), X11
	PSLLQ $20, X5
	POR X2, X5
	MOVO X5, 336(BX)
	MOVO X4, X10
	PSLLQ $44, X4
	POR X3, X4
	MOVO X4, 352(BX)
	PSRLQ $20, X10
	MOVO X11, X12
	PSLLQ $24, X11
	POR X10, X11
	MOVO X11, 368(BX)
	PSRLQ $40, X12
	MOVO 560(AX), X8
	MOVO 576(AX), X7
	MOVO 592(AX), X9
	MOVO 608(AX), X13
	PSLLQ $4, X8
	MOVO X7, X15
	PSLLQ $48, X7
	POR X12, X8
	POR X7, X8
	MOVO X8, 384(BX)
	PSRLQ $16, X15
	MOVO X9, X1
	PSLLQ $28, X9
	POR X15, X9
	MOVO X9, 400(BX)
	PSRLQ $36, X1
	PSLLQ $8, X13
	MOVO 624(AX), X0
	MOVO 640(AX), X6
	MOVO 656(AX), X14
	MOVO 672(AX), X2
	MOVO X0, X5
	PSLLQ $52, X0
	POR X1, X13
	POR X0, X13
	MOVO X13, 416(BX)
	PSRLQ $12, X5
	MOVO X6, X3
	PSLLQ $32, X6
	POR X5, X6
	MOVO X6, 432(BX)
	PSRLQ $32, X3
	PSLLQ $12, X14
	MOVO X2, X4
	PSLLQ $56, X2
	POR X3, X14
	POR X2, X14
	MOVO X14, 448(BX)
	PSRLQ $8, X4
	MOVO 688(AX), X10
	MOVO 704(AX), X11
	MOVO 720(AX), X12
	MOVO 736(AX), X7
	MOVO X10, X8
	PSLLQ $36, X10
	POR X4, X10
	MOVO X10, 464(BX)
	PSRLQ $28, X8
	PSLLQ $16, X11
	MOVO X12, X15
	PSLLQ $60, X12
	POR X8, X11
	POR X12, X11
	MOVO X11, 480(BX)
	PSRLQ $4, X15
	MOVO X7, X9
	PSLLQ $40, X7
	POR X15, X7
	MOVO X7, 496(BX)
	PSRLQ $24, X9
	MOVO 752(AX), X1
	MOVO 768(AX), X0
	MOVO 784(AX), X13
	MOVO 800(AX), X5
	PSLLQ $20, X1
	POR X9, X1
	MOVO X1, 512(BX)
	MOVO X13, X6
	PSLLQ $44, X13
	POR X0, X13
	MOVO X13, 528(BX)
	PSRLQ $20, X6
	MOVO X5, X3
	PSLLQ $24, X5
	POR X6, X5
	MOVO X5, 544(BX)
	PSRLQ $40, X3
	MOVO 816(AX), X2
	MOVO 832(AX), X14
	MOVO 848(AX), X4
	MOVO 864(AX), X10
	PSLLQ $4, X2
	MOVO X14, X8
	PSLLQ $48, X14
	POR X3, X2
	POR X14, X2
	MOVO X2, 560(BX)
	PSRLQ $16, X8
	MOVO X4, X12
	PSLLQ $28, X4
	POR X8, X4
	MOVO X4, 576(BX)
	PSRLQ $36, X12
	PSLLQ $8, X10
	MOVO 880(AX), X11
	MOVO 896(AX), X15
	MOVO 912(AX), X7
	MOVO 928(AX), X9
	MOVO X11, X1
	PSLLQ $52, X11
	POR X12, X10
	POR X11, X10
	MOVO X10, 592(BX)
	PSRLQ $12, X1
	MOVO X15, X0
	PSLLQ $32, X15
	POR X1, X15
	MOVO X15, 608(BX)
	PSRLQ $32, X0
	PSLLQ $12, X7
	MOVO X9, X13
	PSLLQ $56, X9
	POR X0, X7
	POR X9, X7
	MOVO X7, 624(BX)
	PSRLQ $8, X13
	MOVO 944(AX), X6
	MOVO 960(AX), X5
	MOVO 976(AX), X3
	MOVO 992(AX), X14
	MOVO X6, X2
	PSLLQ $36, X6
	POR X13, X6
	MOVO X6, 640(BX)
	PSRLQ $28, X2
	PSLLQ $16, X5
	MOVO X3, X8
	PSLLQ $60, X3
	POR X2, X5
	POR X3, X5
	MOVO X5, 656(BX)
	PSRLQ $4, X8
	MOVO X14, X4
	PSLLQ $40, X14
	POR X8, X14
	MOVO X14, 672(BX)
	PSRLQ $24, X4
	MOVO 1008(AX), X12
	PSLLQ $20, X12
	POR X4, X12
	MOVO X12, 688(BX)
	RET

// func pack64_45(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_45(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $45, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $19, X4
	MOVO X3, X5
	PSLLQ $26, X3
	POR X4, X3
	MOVO X3, 16(BX)
	PSRLQ $38, X5
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	PSLLQ $7, X6
	MOVO X7, X10
	PSLLQ $52, X7
	POR X5, X6
	POR X7, X6
	MOVO X6, 32(BX)
	PSRLQ $12, X10
	MOVO X8, X11
	PSLLQ $33, X8
	POR X10, X8
	MOVO X8, 48(BX)
	PSRLQ $31, X11
	PSLLQ $14, X9
	MOVO 112(AX), X12
	MOVO 128(AX), X13
	MOVO 144(AX), X14
	MOVO 160(AX), X15
	MOVO X12, X0
	PSLLQ $59, X12
	POR X11, X9
	POR X12, X9
	MOVO X9, 64(BX)
	PSRLQ $5, X0
	MOVO X13, X1
	PSLLQ $40, X13
	POR X0, X13
	MOVO X13, 80(BX)
	PSRLQ $24, X1
	MOVO X14, X2
	PSLLQ $21, X14
	POR X1, X14
	MOVO X14, 96(BX)
	PSRLQ $43, X2
	PSLLQ $2, X15
	MOVO 176(AX), X4
	MOVO 192(AX), X3
	MOVO 208(AX), X5
	MOVO 224(AX), X7
	MOVO X4, X6
	PSLLQ $47, X4
	POR X2, X15
	POR X4, X15
	MOVO X15, 112(BX)
	PSRLQ $17, X6
	MOVO X3, X10
	PSLLQ $28, X3
	POR X6, X3
	MOVO X3, 128(BX)
	PSRLQ $36, X10
	PSLLQ $9, X5
	MOVO X7, X8
	PSLLQ $54, X7
	POR X10, X5
	POR X7, X5
	MOVO X5, 144(BX)
	PSRLQ $10, X8
	MOVO 240(AX), X11
	MOVO 256(AX), X12
	MOVO 272(AX), X9
	MOVO 288(AX), X0
	MOVO X11, X13
	PSLLQ $35, X11
	POR X8, X11
	MOVO X11, 160(BX)
	PSRLQ $29, X13
	PSLLQ $16, X12
	MOVO X9, X1
	PSLLQ $61, X9
	POR X13, X12
	POR X9, X12
	MOVO X12, 176(BX)
	PSRLQ $3, X1
	MOVO X0, X14
	PSLLQ $42, X0
	POR X1, X0
	MOVO X0, 192(BX)
	PSRLQ $22, X14
	MOVO 304(AX), X2
	MOVO 320(AX), X4
	MOVO 336(AX), X15
	MOVO 352(AX), X6
	MOVO X2, X3
	PSLLQ $23, X2
	POR X14, X2
	MOVO X2, 208(BX)
	PSRLQ $41, X3
	PSLLQ $4, X4
	MOVO X15, X10
	PSLLQ $49, X15
	POR X3, X4
	POR X15, X4
	MOVO X4, 224(BX)
	PSRLQ $15, X10
	MOVO X6, X7
	PSLLQ $30, X6
	POR X10, X6
	MOVO X6, 240(BX)
	PSRLQ $34, X7
	MOVO 368(AX), X5
	MOVO 384(AX), X8
	MOVO 400(AX), X11
	MOVO 416(AX), X13
	PSLLQ $11, X5
	MOVO X8, X9
	PSLLQ $56, X8
	POR X7, X5
	POR X8, X5
	MOVO X5, 256(BX)
	PSRLQ $8, X9
	MOVO X11, X12
	PSLLQ $37, X11
	POR X9, X11
	MOVO X11, 272(BX)
	PSRLQ $27, X12
	PSLLQ $18, X13
	MOVO 432(AX), X1
	MOVO 448(AX), X0
	MOVO 464(AX), X14
	MOVO 480(AX), X2
	MOVO X1, X3
	PSLLQ $63, X1
	POR X12, X13
	POR X1, X13
	MOVO X13, 288(BX)
	PSRLQ $1, X3
	MOVO X0, X15
	PSLLQ $44, X0
	POR X3, X0
	MOVO X0, 304(BX)
	PSRLQ $20, X15
	MOVO X14, X4
	PSLLQ $25, X14
	POR X15, X14
	MOVO X14, 320(BX)
	PSRLQ $39, X4
	PSLLQ $6, X2
	MOVO 496(AX), X10
	MOVO 512(AX), X6
	MOVO 528(AX), X7
	MOVO 544(AX), X8
	MOVO X10, X5
	PSLLQ $51, X10
	POR X4, X2
	POR X10, X2
	MOVO X2, 336(BX)
	PSRLQ $13, X5
	MOVO X6, X9
	PSLLQ $32, X6
	POR X5, X6
	MOVO X6, 352(BX)
	PSRLQ $32, X9
	PSLLQ $13, X7
	MOVO X8, X11
	PSLLQ $58, X8
	POR X9, X7
	POR X8, X7
	MOVO X7, 368(BX)
	PSRLQ $6, X11
	MOVO 560(AX), X12
	MOVO 576(AX), X1
	MOVO 592(AX), X13
	MOVO 608(AX), X3
	MOVO X12, X0
	PSLLQ $39, X12
	POR X11, X12
	MOVO X12, 384(BX)
	PSRLQ $25, X0
	MOVO X1, X15
	PSLLQ $20, X1
	POR X0, X1
	MOVO X1, 400(BX)
	PSRLQ $44, X15
	PSLLQ $1, X13
	MOVO X3, X14
	PSLLQ $46, X3
	POR X15, X13
	POR X3, X13
	MOVO X13, 416(BX)
	PSRLQ $18, X14
	MOVO 624(AX), X4
	MOVO 640(AX), X10
	MOVO 656(AX), X2
	MOVO 672(AX), X5
	MOVO X4, X6
	PSLLQ $27, X4
	POR X14, X4
	MOVO X4, 432(BX)
	PSRLQ $37, X6
	PSLLQ $8, X10
	MOVO X2, X9
	PSLLQ $53, X2
	POR X6, X10
	POR X2, X10
	MOVO X10, 448(BX)
	PSRLQ $11, X9
	MOVO X5, X8
	PSLLQ $34, X5
	POR X9, X5
	MOVO X5, 464(BX)
	PSRLQ $30, X8
	MOVO 688(AX), X7
	MOVO 704(AX), X11
	MOVO 720(AX), X12
	MOVO 736(AX), X0
	PSLLQ $15, X7
	MOVO X11, X1
	PSLLQ $60, X11
	POR X8, X7
	POR X11, X7
	MOVO X7, 480(BX)
	PSRLQ $4, X1
	MOVO X12, X15
	PSLLQ $41, X12
	POR X1, X12
	MOVO X12, 496(BX)
	PSRLQ $23, X15
	MOVO X0, X3
	PSLLQ $22, X0
	POR X15, X0
	MOVO X0, 512(BX)
	PSRLQ $42, X3
	MOVO 752(AX), X13
	MOVO 768(AX), X14
	MOVO 784(AX), X4
	MOVO 800(AX), X6
	PSLLQ $3, X13
	MOVO X14, X2
	PSLLQ $48, X14
	POR X3, X13
	POR X14, X13
	MOVO X13, 528(BX)
	PSRLQ $16, X2
	MOVO X4, X10
	PSLLQ $29, X4
	POR X2, X4
	MOVO X4, 544(BX)
	PSRLQ $35, X10
	PSLLQ $10, X6
	MOVO 816(AX), X9
	MOVO 832(AX), X5
	MOVO 848(AX), X8
	MOVO 864(AX), X11
	MOVO X9, X7
	PSLLQ $55, X9
	POR X10, X6
	POR X9, X6
	MOVO X6, 560(BX)
	PSRLQ $9, X7
	MOVO X5, X1
	PSLLQ $36, X5
	POR X7, X5
	MOVO X5, 576(BX)
	PSRLQ $28, X1
	PSLLQ $17, X8
	MOVO X11, X12
	PSLLQ $62, X11
	POR X1, X8
	POR X11, X8
	MOVO X8, 592(BX)
	PSRLQ $2, X12
	MOVO 880(AX), X15
	MOVO 896(AX), X0
	MOVO 912(AX), X3
	MOVO 928(AX), X14
	MOVO X15, X13
	PSLLQ $43, X15
	POR X12, X15
	MOVO X15, 608(BX)
	PSRLQ $21, X13
	MOVO X0, X2
	PSLLQ $24, X0
	POR X13, X0
	MOVO X0, 624(BX)
	PSRLQ $40, X2
	PSLLQ $5, X3
	MOVO X14, X4
	PSLLQ $50, X14
	POR X2, X3
	POR X14, X3
	MOVO X3, 640(BX)
	PSRLQ $14, X4
	MOVO 944(AX), X10
	MOVO 960(AX), X9
	MOVO 976(AX), X6
	MOVO 992(AX), X7
	MOVO X10, X5
	PSLLQ $31, X10
	POR X4, X10
	MOVO X10, 656(BX)
	PSRLQ $33, X5
	PSLLQ $12, X9
	MOVO X6, X1
	PSLLQ $57, X6
	POR X5, X9
	POR X6, X9
	MOVO X9, 672(BX)
	PSRLQ $7, X1
	MOVO X7, X11
	PSLLQ $38, X7
	POR X1, X7
	MOVO X7, 688(BX)
	PSRLQ $26, X11
	MOVO 1008(AX), X8
	PSLLQ $19, X8
	POR X11, X8
	MOVO X8, 704(BX)
	RET

// func pack64_46(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_46(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $46, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $18, X4
	MOVO X3, X5
	PSLLQ $28, X3
	POR X4, X3
	MOVO X3, 16(BX)
	PSRLQ $36, X5
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	PSLLQ $10, X6
	MOVO X7, X10
	PSLLQ $56, X7
	POR X5, X6
	POR X7, X6
	MOVO X6, 32(BX)
	PSRLQ $8, X10
	MOVO X8, X11
	PSLLQ $38, X8
	POR X10, X8
	MOVO X8, 48(BX)
	PSRLQ $26, X11
	MOVO X9, X12
	PSLLQ $20, X9
	POR X11, X9
	MOVO X9, 64(BX)
	PSRLQ $44, X12
	MOVO 112(AX), X13
	MOVO 128(AX), X14
	MOVO 144(AX), X15
	MOVO 160(AX), X0
	PSLLQ $2, X13
	MOVO X14, X1
	PSLLQ $48, X14
	POR X12, X13
	POR X14, X13
	MOVO X13, 80(BX)
	PSRLQ $16, X1
	MOVO X15, X2
	PSLLQ $30, X15
	POR X1, X15
	MOVO X15, 96(BX)
	PSRLQ $34, X2
	PSLLQ $12, X0
	MOVO 176(AX), X4
	MOVO 192(AX), X3
	MOVO 208(AX), X5
	MOVO 224(AX), X7
	MOVO X4, X6
	PSLLQ $58, X4
	POR X2, X0
	POR X4, X0
	MOVO X0, 112(BX)
	PSRLQ $6, X6
	MOVO X3, X10
	PSLLQ $40, X3
	POR X6, X3
	MOVO X3, 128(BX)
	PSRLQ $24, X10
	MOVO X5, X8
	PSLLQ $22, X5
	POR X10, X5
	MOVO X5, 144(BX)
	PSRLQ $42, X8
	PSLLQ $4, X7
	MOVO 240(AX), X11
	MOVO 256(AX), X9
	MOVO 272(AX), X12
	MOVO 288(AX), X14
	MOVO X11, X13
	PSLLQ $50, X11
	POR X8, X7
	POR X11, X7
	MOVO X7, 160(BX)
	PSRLQ $14, X13
	MOVO X9, X1
	PSLLQ $32, X9
	POR X13, X9
	MOVO X9, 176(BX)
	PSRLQ $32, X1
	PSLLQ $14, X12
	MOVO X14, X15
	PSLLQ $60, X14
	POR X1, X12
	POR X14, X12
	MOVO X12, 192(BX)
	PSRLQ $4, X15
	MOVO 304(AX), X2
	MOVO 320(AX), X4
	MOVO 336(AX), X0
	MOVO 352(AX), X6
	MOVO X2, X3
	PSLLQ $42, X2
	POR X15, X2
	MOVO X2, 208(BX)
	PSRLQ $22, X3
	MOVO X4, X10
	PSLLQ $24, X4
	POR X3, X4
	MOVO X4, 224(BX)
	PSRLQ $40, X10
	PSLLQ $6, X0
	MOVO X6, X5
	PSLLQ $52, X6
	POR X10, X0
	POR X6, X0
	MOVO X0, 240(BX)
	PSRLQ $12, X5
	MOVO 368(AX), X8
	MOVO 384(AX), X11
	MOVO 400(AX), X7
	MOVO 416(AX), X13
	MOVO X8, X9
	PSLLQ $34, X8
	POR X5, X8
	MOVO X8, 256(BX)
	PSRLQ $30, X9
	PSLLQ $16, X11
	MOVO X7, X1
	PSLLQ $62, X7
	POR X9, X11
	POR X7, X11
	MOVO X11, 272(BX)
	PSRLQ $2, X1
	MOVO X13, X14
	PSLLQ $44, X13
	POR X1, X13
	MOVO X13, 288(BX)
	PSRLQ $20, X14
	MOVO 432(AX), X12
	MOVO 448(AX), X15
	MOVO 464(AX), X2
	MOVO 480(AX), X3
	MOVO X12, X4
	PSLLQ $26, X12
	POR X14, X12
	MOVO X12, 304(BX)
	PSRLQ $38, X4
	PSLLQ $8, X15
	MOVO X2, X10
	PSLLQ $54, X2
	POR X4, X15
	POR X2, X15
	MOVO X15, 320(BX)
	PSRLQ $10, X10
	MOVO X3, X6
	PSLLQ $36, X3
	POR X10, X3
	MOVO X3, 336(BX)
	PSRLQ $28, X6
	MOVO 496(AX), X0
	MOVO 512(AX), X5
	MOVO 528(AX), X8
	MOVO 544(AX), X9
	PSLLQ $18, X0
	POR X6, X0
	MOVO X0, 352(BX)
	MOVO X8, X7
	PSLLQ $46, X8
	POR X5, X8
	MOVO X8, 368(BX)
	PSRLQ $18, X7
	MOVO X9, X11
	PSLLQ $28, X9
	POR X7, X9
	MOVO X9, 384(BX)
	PSRLQ $36, X11
	MOVO 560(AX), X1
	MOVO 576(AX), X13
	MOVO 592(AX), X14
	MOVO 608(AX), X12
	PSLLQ $10, X1
	MOVO X13, X4
	PSLLQ $56, X13
	POR X11, X1
	POR X13, X1
	MOVO X1, 400(BX)
	PSRLQ $8, X4
	MOVO X14, X2
	PSLLQ $38, X14
	POR X4, X14
	MOVO X14, 416(BX)
	PSRLQ $26, X2
	MOVO X12, X15
	PSLLQ $20, X12
	POR X2, X12
	MOVO X12, 432(BX)
	PSRLQ $44, X15
	MOVO 624(AX), X10
	MOVO 640(AX), X3
	MOVO 656(AX), X6
	MOVO 672(AX), X0
	PSLLQ $2, X10
	MOVO X3, X5
	PSLLQ $48, X3
	POR X15, X10
	POR X3, X10
	MOVO X10, 448(BX)
	PSRLQ $16, X5
	MOVO X6, X8
	PSLLQ $30, X6
	POR X5, X6
	MOVO X6, 464(BX)
	PSRLQ $34, X8
	PSLLQ $12, X0
	MOVO 688(AX), X7
	MOVO 704(AX), X9
	MOVO 720(AX), X11
	MOVO 736(AX), X13
	MOVO X7, X1
	PSLLQ $58, X7
	POR X8, X0
	POR X7, X0
	MOVO X0, 480(BX)
	PSRLQ $6, X1
	MOVO X9, X4
	PSLLQ $40, X9
	POR X1, X9
	MOVO X9, 496(BX)
	PSRLQ $24, X4
	MOVO X11, X14
	PSLLQ $22, X11
	POR X4, X11
	MOVO X11, 512(BX)
	PSRLQ $42, X14
	PSLLQ $4, X13
	MOVO 752(AX), X2
	MOVO 768(AX), X12
	MOVO 784(AX), X15
	MOVO 800(AX), X3
	MOVO X2, X10
	PSLLQ $50, X2
	POR X14, X13
	POR X2, X13
	MOVO X13, 528(BX)
	PSRLQ $14, X10
	MOVO X12, X5
	PSLLQ $32, X12
	POR X10, X12
	MOVO X12, 544(BX)
	PSRLQ $32, X5
	PSLLQ $14, X15
	MOVO X3, X6
	PSLLQ $60, X3
	POR X5, X15
	POR X3, X15
	MOVO X15, 560(BX)
	PSRLQ $4, X6
	MOVO 816(AX), X8
	MOVO 832(AX), X7
	MOVO 848(AX), X0
	MOVO 864(AX), X1
	MOVO X8, X9
	PSLLQ $42, X8
	POR X6, X8
	MOVO X8, 576(BX)
	PSRLQ $22, X9
	MOVO X7, X4
	PSLLQ $24, X7
	POR X9, X7
	MOVO X7, 592(BX)
	PSRLQ $40, X4
	PSLLQ $6, X0
	MOVO X1, X11
	PSLLQ $52, X1
	POR X4, X0
	POR X1, X0
	MOVO X0, 608(BX)
	PSRLQ $12, X11
	MOVO 880(AX), X14
	MOVO 896(AX), X2
	MOVO 912(AX), X13
	MOVO 928(AX), X10
	MOVO X14, X12
	PSLLQ $34, X14
	POR X11, X14
	MOVO X14, 624(BX)
	PSRLQ $30, X12
	PSLLQ $16, X2
	MOVO X13, X5
	PSLLQ $62, X13
	POR X12, X2
	POR X13, X2
	MOVO X2, 640(BX)
	PSRLQ $2, X5
	MOVO X10, X3
	PSLLQ $44, X10
	POR X5, X10
	MOVO X10, 656(BX)
	PSRLQ $20, X3
	MOVO 944(AX), X15
	MOVO 960(AX), X6
	MOVO 976(AX), X8
	MOVO 992(AX), X9
	MOVO X15, X7
	PSLLQ $26, X15
	POR X3, X15
	MOVO X15, 672(BX)
	PSRLQ $38, X7
	PSLLQ $8, X6
	MOVO X8, X4
	PSLLQ $54, X8
	POR X7, X6
	POR X8, X6
	MOVO X6, 688(BX)
	PSRLQ $10, X4
	MOVO X9, X1
	PSLLQ $36, X9
	POR X4, X9
	MOVO X9, 704(BX)
	PSRLQ $28, X1
	MOVO 1008(AX), X0
	PSLLQ $18, X0
	POR X1, X0
	MOVO X0, 720(BX)
	RET

// func pack64_47(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_47(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $47, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $17, X4
	MOVO X3, X5
	PSLLQ $30, X3
	POR X4, X3
	MOVO X3, 16(BX)
	PSRLQ $34, X5
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	PSLLQ $13, X6
	MOVO X7, X10
	PSLLQ $60, X7
	POR X5, X6
	POR X7, X6
	MOVO X6, 32(BX)
	PSRLQ $4, X10
	MOVO X8, X11
	PSLLQ $43, X8
	POR X10, X8
	MOVO X8, 48(BX)
	PSRLQ $21, X11
	MOVO X9, X12
	PSLLQ $26, X9
	POR X11, X9
	MOVO X9, 64(BX)
	PSRLQ $38, X12
	MOVO 112(AX), X13
	MOVO 128(AX), X14
	MOVO 144(AX), X15
	MOVO 160(AX), X0
	PSLLQ $9, X13
	MOVO X14, X1
	PSLLQ $56, X14
	POR X12, X13
	POR X14, X13
	MOVO X13, 80(BX)
	PSRLQ $8, X1
	MOVO X15, X2
	PSLLQ $39, X15
	POR X1, X15
	MOVO X15, 96(BX)
	PSRLQ $25, X2
	MOVO X0, X4
	PSLLQ $22, X0
	POR X2, X0
	MOVO X0, 112(BX)
	PSRLQ $42, X4
	MOVO 176(AX), X3
	MOVO 192(AX), X5
	MOVO 208(AX), X7
	MOVO 224(AX), X6
	PSLLQ $5, X3
	MOVO X5, X10
	PSLLQ $52, X5
	POR X4, X3
	POR X5, X3
	MOVO X3, 128(BX)
	PSRLQ $12, X10
	MOVO X7, X8
	PSLLQ $35, X7
	POR X10, X7
	MOVO X7, 144(BX)
	PSRLQ $29, X8
	MOVO X6, X11
	PSLLQ $18, X6
	POR X8, X6
	MOVO X6, 160(BX)
	PSRLQ $46, X11
	MOVO 240(AX), X9
	MOVO 256(AX), X12
	MOVO 272(AX), X14
	MOVO 288(AX), X13
	PSLLQ $1, X9
	MOVO X12, X1
	PSLLQ $48, X12
	POR X11, X9
	POR X12, X9
	MOVO X9, 176(BX)
	PSRLQ $16, X1
	MOVO X14, X15
	PSLLQ $31, X14
	POR X1, X14
	MOVO X14, 192(BX)
	PSRLQ $33, X15
	PSLLQ $14, X13
	MOVO 304(AX), X2
	MOVO 320(AX), X0
	MOVO 336(AX), X4
	MOVO 352(AX), X5
	MOVO X2, X3
	PSLLQ $61, X2
	POR X15, X13
	POR X2, X13
	MOVO X13, 208(BX)
	PSRLQ $3, X3
	MOVO X0, X10
	PSLLQ $44, X0
	POR X3, X0
	MOVO X0, 224(BX)
	PSRLQ $20, X10
	MOVO X4, X7
	PSLLQ $27, X4
	POR X10, X4
	MOVO X4, 240(BX)
	PSRLQ $37, X7
	PSLLQ $10, X5
	MOVO 368(AX), X8
	MOVO 384(AX), X6
	MOVO 400(AX), X11
	MOVO 416(AX), X12
	MOVO X8, X9
	PSLLQ $57, X8
	POR X7, X5
	POR X8, X5
	MOVO X5, 256(BX)
	PSRLQ $7, X9
	MOVO X6, X1
	PSLLQ $40, X6
	POR X9, X6
	MOVO X6, 272(BX)
	PSRLQ $24, X1
	MOVO X11, X14
	PSLLQ $23, X11
	POR X1, X11
	MOVO X11, 288(BX)
	PSRLQ $41, X14
	PSLLQ $6, X12
	MOVO 432(AX), X15
	MOVO 448(AX), X2
	MOVO 464(AX), X13
	MOVO 480(AX), X3
	MOVO X15, X0
	PSLLQ $53, X15
	POR X14, X12
	POR X15, X12
	MOVO X12, 304(BX)
	PSRLQ $11, X0
	MOVO X2, X10
	PSLLQ $36, X2
	POR X0, X2
	MOVO X2, 320(BX)
	PSRLQ $28, X10
	MOVO X13, X4
	PSLLQ $19, X13
	POR X10, X13
	MOVO X13, 336(BX)
	PSRLQ $45, X4
	PSLLQ $2, X3
	MOVO 496(AX), X7
	MOVO 512(AX), X8
	MOVO 528(AX), X5
	MOVO 544(AX), X9
	MOVO X7, X6
	PSLLQ $49, X7
	POR X4, X3
	POR X7, X3
	MOVO X3, 352(BX)
	PSRLQ $15, X6
	MOVO X8, X1
	PSLLQ $32, X8
	POR X6, X8
	MOVO X8, 368(BX)
	PSRLQ $32, X1
	PSLLQ $15, X5
	MOVO X9, X11
	PSLLQ $62, X9
	POR X1, X5
	POR X9, X5
	MOVO X5, 384(BX)
	PSRLQ $2, X11
	MOVO 560(AX), X14
	MOVO 576(AX), X15
	MOVO 592(AX), X12
	MOVO 608(AX), X0
	MOVO X14, X2
	PSLLQ $45, X14
	POR X11, X14
	MOVO X14, 400(BX)
	PSRLQ $19, X2
	MOVO X15, X10
	PSLLQ $28, X15
	POR X2, X15
	MOVO X15, 416(BX)
	PSRLQ $36, X10
	PSLLQ $11, X12
	MOVO X0, X13
	PSLLQ $58, X0
	POR X10, X12
	POR X0, X12
	MOVO X12, 432(BX)
	PSRLQ $6, X13
	MOVO 624(AX), X4
	MOVO 640(AX), X7
	MOVO 656(AX), X3
	MOVO 672(AX), X6
	MOVO X4, X8
	PSLLQ $41, X4
	POR X13, X4
	MOVO X4, 448(BX)
	PSRLQ $23, X8
	MOVO X7, X1
	PSLLQ $24, X7
	POR X8, X7
	MOVO X7, 464(BX)
	PSRLQ $40, X1
	PSLLQ $7, X3
	MOVO X6, X9
	PSLLQ $54, X6
	POR X1, X3
	POR X6, X3
	MOVO X3, 480(BX)
	PSRLQ $10, X9
	MOVO 688(AX), X5
	MOVO 704(AX), X11
	MOVO 720(AX), X14
	MOVO 736(AX), X2
	MOVO X5, X15
	PSLLQ $37, X5
	POR X9, X5
	MOVO X5, 496(BX)
	PSRLQ $27, X15
	MOVO X11, X10
	PSLLQ $20, X11
	POR X15, X11
	MOVO X11, 512(BX)
	PSRLQ $44, X10
	PSLLQ $3, X14
	MOVO X2, X0
	PSLLQ $50, X2
	POR X10, X14
	POR X2, X14
	MOVO X14, 528(BX)
	PSRLQ $14, X0
	MOVO 752(AX), X12
	MOVO 768(AX), X13
	MOVO 784(AX), X4
	MOVO 800(AX), X8
	MOVO X12, X7
	PSLLQ $33, X12
	POR X0, X12
	MOVO X12, 544(BX)
	PSRLQ $31, X7
	PSLLQ $16, X13
	MOVO X4, X1
	PSLLQ $63, X4
	POR X7, X13
	POR X4, X13
	MOVO X13, 560(BX)
	PSRLQ $1, X1
	MOVO X8, X6
	PSLLQ $46, X8
	POR X1, X8
	MOVO X8, 576(BX)
	PSRLQ $18, X6
	MOVO 816(AX), X3
	MOVO 832(AX), X9
	MOVO 848(AX), X5
	MOVO 864(AX), X15
	MOVO X3, X11
	PSLLQ $29, X3
	POR X6, X3
	MOVO X3, 592(BX)
	PSRLQ $35, X11
	PSLLQ $12, X9
	MOVO X5, X10
	PSLLQ $59, X5
	POR X11, X9
	POR X5, X9
	MOVO X9, 608(BX)
	PSRLQ $5, X10
	MOVO X15, X2
	PSLLQ $42, X15
	POR X10, X15
	MOVO X15, 624(BX)
	PSRLQ $22, X2
	MOVO 880(AX), X14
	MOVO 896(AX), X0
	MOVO 912(AX), X12
	MOVO 928(AX), X7
	MOVO X14, X4
	PSLLQ $25, X14
	POR X2, X14
	MOVO X14, 640(BX)
	PSRLQ $39, X4
	PSLLQ $8, X0
	MOVO X12, X13
	PSLLQ $55, X12
	POR X4, X0
	POR X12, X0
	MOVO X0, 656(BX)
	PSRLQ $9, X13
	MOVO X7, X1
	PSLLQ $38, X7
	POR X13, X7
	MOVO X7, 672(BX)
	PSRLQ $26, X1
	MOVO 944(AX), X8
	MOVO 960(AX), X6
	MOVO 976(AX), X3
	MOVO 992(AX), X11
	MOVO X8, X5
	PSLLQ $21, X8
	POR X1, X8
	MOVO X8, 688(BX)
	PSRLQ $43, X5
	PSLLQ $4, X6
	MOVO X3, X9
	PSLLQ $51, X3
	POR X5, X6
	POR X3, X6
	MOVO X6, 704(BX)
	PSRLQ $13, X9
	MOVO X11, X10
	PSLLQ $34, X11
	POR X9, X11
	MOVO X11, 720(BX)
	PSRLQ $30, X10
	MOVO 1008(AX), X15
	PSLLQ $17, X15
	POR X10, X15
	MOVO X15, 736(BX)
	RET

// func pack64_48(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_48(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $48, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $16, X4
	MOVO X3, X5
	PSLLQ $32, X3
	POR X4, X3
	MOVO X3, 16(BX)
	PSRLQ $32, X5
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	PSLLQ $16, X6
	POR X5, X6
	MOVO X6, 32(BX)
	MOVO X8, X10
	PSLLQ $48, X8
	POR X7, X8
	MOVO X8, 48(BX)
	PSRLQ $16, X10
	MOVO X9, X11
	PSLLQ $32, X9
	POR X10, X9
	MOVO X9, 64(BX)
	PSRLQ $32, X11
	MOVO 112(AX), X12
	MOVO 128(AX), X13
	MOVO 144(AX), X14
	MOVO 160(AX), X15
	PSLLQ $16, X12
	POR X11, X12
	MOVO X12, 80(BX)
	MOVO X14, X0
	PSLLQ $48, X14
	POR X13, X14
	MOVO X14, 96(BX)
	PSRLQ $16, X0
	MOVO X15, X1
	PSLLQ $32, X15
	POR X0, X15
	MOVO X15, 112(BX)
	PSRLQ $32, X1
	MOVO 176(AX), X2
	MOVO 192(AX), X4
	MOVO 208(AX), X3
	MOVO 224(AX), X5
	PSLLQ $16, X2
	POR X1, X2
	MOVO X2, 128(BX)
	MOVO X3, X6
	PSLLQ $48, X3
	POR X4, X3
	MOVO X3, 144(BX)
	PSRLQ $16, X6
	MOVO X5, X7
	PSLLQ $32, X5
	POR X6, X5
	MOVO X5, 160(BX)
	PSRLQ $32, X7
	MOVO 240(AX), X8
	MOVO 256(AX), X10
	MOVO 272(AX), X9
	MOVO 288(AX), X11
	PSLLQ $16, X8
	POR X7, X8
	MOVO X8, 176(BX)
	MOVO X9, X12
	PSLLQ $48, X9
	POR X10, X9
	MOVO X9, 192(BX)
	PSRLQ $16, X12
	MOVO X11, X13
	PSLLQ $32, X11
	POR X12, X11
	MOVO X11, 208(BX)
	PSRLQ $32, X13
	MOVO 304(AX), X14
	MOVO 320(AX), X0
	MOVO 336(AX), X15
	MOVO 352(AX), X1
	PSLLQ $16, X14
	POR X13, X14
	MOVO X14, 224(BX)
	MOVO X15, X2
	PSLLQ $48, X15
	POR X0, X15
	MOVO X15, 240(BX)
	PSRLQ $16, X2
	MOVO X1, X4
	PSLLQ $32, X1
	POR X2, X1
	MOVO X1, 256(BX)
	PSRLQ $32, X4
	MOVO 368(AX), X3
	MOVO 384(AX), X6
	MOVO 400(AX), X5
	MOVO 416(AX), X7
	PSLLQ $16, X3
	POR X4, X3
	MOVO X3, 272(BX)
	MOVO X5, X8
	PSLLQ $48, X5
	POR X6, X5
	MOVO X5, 288(BX)
	PSRLQ $16, X8
	MOVO X7, X10
	PSLLQ $32, X7
	POR X8, X7
	MOVO X7, 304(BX)
	PSRLQ $32, X10
	MOVO 432(AX), X9
	MOVO 448(AX), X12
	MOVO 464(AX), X11
	MOVO 480(AX), X13
	PSLLQ $16, X9
	POR X10, X9
	MOVO X9, 320(BX)
	MOVO X11, X14
	PSLLQ $48, X11
	POR X12, X11
	MOVO X11, 336(BX)
	PSRLQ $16, X14
	MOVO X13, X0
	PSLLQ $32, X13
	POR X14, X13
	MOVO X13, 352(BX)
	PSRLQ $32, X0
	MOVO 496(AX), X15
	MOVO 512(AX), X2
	MOVO 528(AX), X1
	MOVO 544(AX), X4
	PSLLQ $16, X15
	POR X0, X15
	MOVO X15, 368(BX)
	MOVO X1, X3
	PSLLQ $48, X1
	POR X2, X1
	MOVO X1, 384(BX)
	PSRLQ $16, X3
	MOVO X4, X6
	PSLLQ $32, X4
	POR X3, X4
	MOVO X4, 400(BX)
	PSRLQ $32, X6
	MOVO 560(AX), X5
	MOVO 576(AX), X8
	MOVO 592(AX), X7
	MOVO 608(AX), X10
	PSLLQ $16, X5
	POR X6, X5
	MOVO X5, 416(BX)
	MOVO X7, X9
	PSLLQ $48, X7
	POR X8, X7
	MOVO X7, 432(BX)
	PSRLQ $16, X9
	MOVO X10, X12
	PSLLQ $32, X10
	POR X9, X10
	MOVO X10, 448(BX)
	PSRLQ $32, X12
	MOVO 624(AX), X11
	MOVO 640(AX), X14
	MOVO 656(AX), X13
	MOVO 672(AX), X0
	PSLLQ $16, X11
	POR X12, X11
	MOVO X11, 464(BX)
	MOVO X13, X15
	PSLLQ $48, X13
	POR X14, X13
	MOVO X13, 480(BX)
	PSRLQ $16, X15
	MOVO X0, X2
	PSLLQ $32, X0
	POR X15, X0
	MOVO X0, 496(BX)
	PSRLQ $32, X2
	MOVO 688(AX), X1
	MOVO 704(AX), X3
	MOVO 720(AX), X4
	MOVO 736(AX), X6
	PSLLQ $16, X1
	POR X2, X1
	MOVO X1, 512(BX)
	MOVO X4, X5
	PSLLQ $48, X4
	POR X3, X4
	MOVO X4, 528(BX)
	PSRLQ $16, X5
	MOVO X6, X8
	PSLLQ $32, X6
	POR X5, X6
	MOVO X6, 544(BX)
	PSRLQ $32, X8
	MOVO 752(AX), X7
	MOVO 768(AX), X9
	MOVO 784(AX), X10
	MOVO 800(AX), X12
	PSLLQ $16, X7
	POR X8, X7
	MOVO X7, 560(BX)
	MOVO X10, X11
	PSLLQ $48, X10
	POR X9, X10
	MOVO X10, 576(BX)
	PSRLQ $16, X11
	MOVO X12, X14
	PSLLQ $32, X12
	POR X11, X12
	MOVO X12, 592(BX)
	PSRLQ $32, X14
	MOVO 816(AX), X13
	MOVO 832(AX), X15
	MOVO 848(AX), X0
	MOVO 864(AX), X2
	PSLLQ $16, X13
	POR X14, X13
	MOVO X13, 608(BX)
	MOVO X0, X1
	PSLLQ $48, X0
	POR X15, X0
	MOVO X0, 624(BX)
	PSRLQ $16, X1
	MOVO X2, X3
	PSLLQ $32, X2
	POR X1, X2
	MOVO X2, 640(BX)
	PSRLQ $32, X3
	MOVO 880(AX), X4
	MOVO 896(AX), X5
	MOVO 912(AX), X6
	MOVO 928(AX), X8
	PSLLQ $16, X4
	POR X3, X4
	MOVO X4, 656(BX)
	MOVO X6, X7
	PSLLQ $48, X6
	POR X5, X6
	MOVO X6, 672(BX)
	PSRLQ $16, X7
	MOVO X8, X9
	PSLLQ $32, X8
	POR X7, X8
	MOVO X8, 688(BX)
	PSRLQ $32, X9
	MOVO 944(AX), X10
	MOVO 960(AX), X11
	MOVO 976(AX), X12
	MOVO 992(AX), X14
	PSLLQ $16, X10
	POR X9, X10
	MOVO X10, 704(BX)
	MOVO X12, X13
	PSLLQ $48, X12
	POR X11, X12
	MOVO X12, 720(BX)
	PSRLQ $16, X13
	MOVO X14, X15
	PSLLQ $32, X14
	POR X13, X14
	MOVO X14, 736(BX)
	PSRLQ $32, X15
	MOVO 1008(AX), X0
	PSLLQ $16, X0
	POR X15, X0
	MOVO X0, 752(BX)
	RET

// func pack64_49(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_49(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $49, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $15, X4
	MOVO X3, X5
	PSLLQ $34, X3
	POR X4, X3
	MOVO X3, 16(BX)
	PSRLQ $30, X5
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	MOVO X6, X10
	PSLLQ $19, X6
	POR X5, X6
	MOVO X6, 32(BX)
	PSRLQ $45, X10
	PSLLQ $4, X7
	MOVO X8, X11
	PSLLQ $53, X8
	POR X10, X7
	POR X8, X7
	MOVO X7, 48(BX)
	PSRLQ $11, X11
	MOVO X9, X12
	PSLLQ $38, X9
	POR X11, X9
	MOVO X9, 64(BX)
	PSRLQ $26, X12
	MOVO 112(AX), X13
	MOVO 128(AX), X14
	MOVO 144(AX), X15
	MOVO 160(AX), X0
	MOVO X13, X1
	PSLLQ $23, X13
	POR X12, X13
	MOVO X13, 80(BX)
	PSRLQ $41, X1
	PSLLQ $8, X14
	MOVO X15, X2
	PSLLQ $57, X15
	POR X1, X14
	POR X15, X14
	MOVO X14, 96(BX)
	PSRLQ $7, X2
	MOVO X0, X4
	PSLLQ $42, X0
	POR X2, X0
	MOVO X0, 112(BX)
	PSRLQ $22, X4
	MOVO 176(AX), X3
	MOVO 192(AX), X5
	MOVO 208(AX), X6
	MOVO 224(AX), X10
	MOVO X3, X8
	PSLLQ $27, X3
	POR X4, X3
	MOVO X3, 128(BX)
	PSRLQ $37, X8
	PSLLQ $12, X5
	MOVO X6, X7
	PSLLQ $61, X6
	POR X8, X5
	POR X6, X5
	MOVO X5, 144(BX)
	PSRLQ $3, X7
	MOVO X10, X11
	PSLLQ $46, X10
	POR X7, X10
	MOVO X10, 160(BX)
	PSRLQ $18, X11
	MOVO 240(AX), X9
	MOVO 256(AX), X12
	MOVO 272(AX), X13
	MOVO 288(AX), X1
	MOVO X9, X15
	PSLLQ $31, X9
	POR X11, X9
	MOVO X9, 176(BX)
	PSRLQ $33, X15
	MOVO X12, X14
	PSLLQ $16, X12
	POR X15, X12
	MOVO X12, 192(BX)
	PSRLQ $48, X14
	PSLLQ $1, X13
	MOVO X1, X2
	PSLLQ $50, X1
	POR X14, X13
	POR X1, X13
	MOVO X13, 208(BX)
	PSRLQ $14, X2
	MOVO 304(AX), X0
	MOVO 320(AX), X4
	MOVO 336(AX), X3
	MOVO 352(AX), X8
	MOVO X0, X6
	PSLLQ $35, X0
	POR X2, X0
	MOVO X0, 224(BX)
	PSRLQ $29, X6
	MOVO X4, X5
	PSLLQ $20, X4
	POR X6, X4
	MOVO X4, 240(BX)
	PSRLQ $44, X5
	PSLLQ $5, X3
	MOVO X8, X7
	PSLLQ $54, X8
	POR X5, X3
	POR X8, X3
	MOVO X3, 256(BX)
	PSRLQ $10, X7
	MOVO 368(AX), X10
	MOVO 384(AX), X11
	MOVO 400(AX), X9
	MOVO 416(AX), X15
	MOVO X10, X12
	PSLLQ $39, X10
	POR X7, X10
	MOVO X10, 272(BX)
	PSRLQ $25, X12
	MOVO X11, X14
	PSLLQ $24, X11
	POR X12, X11
	MOVO X11, 288(BX)
	PSRLQ $40, X14
	PSLLQ $9, X9
	MOVO X15, X1
	PSLLQ $58, X15
	POR X14, X9
	POR X15, X9
	MOVO X9, 304(BX)
	PSRLQ $6, X1
	MOVO 432(AX), X13
	MOVO 448(AX), X2
	MOVO 464(AX), X0
	MOVO 480(AX), X6
	MOVO X13, X4
	PSLLQ $43, X13
	POR X1, X13
	MOVO X13, 320(BX)
	PSRLQ $21, X4
	MOVO X2, X5
	PSLLQ $28, X2
	POR X4, X2
	MOVO X2, 336(BX)
	PSRLQ $36, X5
	PSLLQ $13, X0
	MOVO X6, X8
	PSLLQ $62, X6
	POR X5, X0
	POR X6, X0
	MOVO X0, 352(BX)
	PSRLQ $2, X8
	MOVO 496(AX), X3
	MOVO 512(AX), X7
	MOVO 528(AX), X10
	MOVO 544(AX), X12
	MOVO X3, X11
	PSLLQ $47, X3
	POR X8, X3
	MOVO X3, 368(BX)
	PSRLQ $17, X11
	MOVO X7, X14
	PSLLQ $32, X7
	POR X11, X7
	MOVO X7, 384(BX)
	PSRLQ $32, X14
	MOVO X10, X15
	PSLLQ $17, X10
	POR X14, X10
	MOVO X10, 400(BX)
	PSRLQ $47, X15
	PSLLQ $2, X12
	MOVO 560(AX), X9
	MOVO 576(AX), X1
	MOVO 592(AX), X13
	MOVO 608(AX), X4
	MOVO X9, X2
	PSLLQ $51, X9
	POR X15, X12
	POR X9, X12
	MOVO X12, 416(BX)
	PSRLQ $13, X2
	MOVO X1, X5
	PSLLQ $36, X1
	POR X2, X1
	MOVO X1, 432(BX)
	PSRLQ $28, X5
	MOVO X13, X6
	PSLLQ $21, X13
	POR X5, X13
	MOVO X13, 448(BX)
	PSRLQ $43, X6
	PSLLQ $6, X4
	MOVO 624(AX), X0
	MOVO 640(AX), X8
	MOVO 656(AX), X3
	MOVO 672(AX), X11
	MOVO X0, X7
	PSLLQ $55, X0
	POR X6, X4
	POR X0, X4
	MOVO X4, 464(BX)
	PSRLQ $9, X7
	MOVO X8, X14
	PSLLQ $40, X8
	POR X7, X8
	MOVO X8, 480(BX)
	PSRLQ $24, X14
	MOVO X3, X10
	PSLLQ $25, X3
	POR X14, X3
	MOVO X3, 496(BX)
	PSRLQ $39, X10
	PSLLQ $10, X11
	MOVO 688(AX), X15
	MOVO 704(AX), X9
	MOVO 720(AX), X12
	MOVO 736(AX), X2
	MOVO X15, X1
	PSLLQ $59, X15
	POR X10, X11
	POR X15, X11
	MOVO X11, 512(BX)
	PSRLQ $5, X1
	MOVO X9, X5
	PSLLQ $44, X9
	POR X1, X9
	MOVO X9, 528(BX)
	PSRLQ $20, X5
	MOVO X12, X13
	PSLLQ $29, X12
	POR X5, X12
	MOVO X12, 544(BX)
	PSRLQ $35, X13
	PSLLQ $14, X2
	MOVO 752(AX), X6
	MOVO 768(AX), X0
	MOVO 784(AX), X4
	MOVO 800(AX), X7
	MOVO X6, X8
	PSLLQ $63, X6
	POR X13, X2
	POR X6, X2
	MOVO X2, 560(BX)
	PSRLQ $1, X8
	MOVO X0, X14
	PSLLQ $48, X0
	POR X8, X0
	MOVO X0, 576(BX)
	PSRLQ $16, X14
	MOVO X4, X3
	PSLLQ $33, X4
	POR X14, X4
	MOVO X4, 592(BX)
	PSRLQ $31, X3
	MOVO X7, X10
	PSLLQ $18, X7
	POR X3, X7
	MOVO X7, 608(BX)
	PSRLQ $46, X10
	MOVO 816(AX), X15
	MOVO 832(AX), X11
	MOVO 848(AX), X1
	MOVO 864(AX), X9
	PSLLQ $3, X15
	MOVO X11, X5
	PSLLQ $52, X11
	POR X10, X15
	POR X11, X15
	MOVO X15, 624(BX)
	PSRLQ $12, X5
	MOVO X1, X12
	PSLLQ $37, X1
	POR X5, X1
	MOVO X1, 640(BX)
	PSRLQ $27, X12
	MOVO X9, X13
	PSLLQ $22, X9
	POR X12, X9
	MOVO X9, 656(BX)
	PSRLQ $42, X13
	MOVO 880(AX), X6
	MOVO 896(AX), X2
	MOVO 912(AX), X8
	MOVO 928(AX), X0
	PSLLQ $7, X6
	MOVO X2, X14
	PSLLQ $56, X2
	POR X13, X6
	POR X2, X6
	MOVO X6, 672(BX)
	PSRLQ $8, X14
	MOVO X8, X4
	PSLLQ $41, X8
	POR X14, X8
	MOVO X8, 688(BX)
	PSRLQ $23, X4
	MOVO X0, X3
	PSLLQ $26, X0
	POR X4, X0
	MOVO X0, 704(BX)
	PSRLQ $38, X3
	MOVO 944(AX), X7
	MOVO 960(AX), X10
	MOVO 976(AX), X11
	MOVO 992(AX), X15
	PSLLQ $11, X7
	MOVO X10, X5
	PSLLQ $60, X10
	POR X3, X7
	POR X10, X7
	MOVO X7, 720(BX)
	PSRLQ $4, X5
	MOVO X11, X1
	PSLLQ $45, X11
	POR X5, X11
	MOVO X11, 736(BX)
	PSRLQ $19, X1
	MOVO X15, X12
	PSLLQ $30, X15
	POR X1, X15
	MOVO X15, 752(BX)
	PSRLQ $34, X12
	MOVO 1008(AX), X9
	PSLLQ $15, X9
	POR X12, X9
	MOVO X9, 768(BX)
	RET

// func pack64_50(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_50(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $50, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $14, X4
	MOVO X3, X5
	PSLLQ $36, X3
	POR X4, X3
	MOVO X3, 16(BX)
	PSRLQ $28, X5
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	MOVO X6, X10
	PSLLQ $22, X6
	POR X5, X6
	MOVO X6, 32(BX)
	PSRLQ $42, X10
	PSLLQ $8, X7
	MOVO X8, X11
	PSLLQ $58, X8
	POR X10, X7
	POR X8, X7
	MOVO X7, 48(BX)
	PSRLQ $6, X11
	MOVO X9, X12
	PSLLQ $44, X9
	POR X11, X9
	MOVO X9, 64(BX)
	PSRLQ $20, X12
	MOVO 112(AX), X13
	MOVO 128(AX), X14
	MOVO 144(AX), X15
	MOVO 160(AX), X0
	MOVO X13, X1
	PSLLQ $30, X13
	POR X12, X13
	MOVO X13, 80(BX)
	PSRLQ $34, X1
	MOVO X14, X2
	PSLLQ $16, X14
	POR X1, X14
	MOVO X14, 96(BX)
	PSRLQ $48, X2
	PSLLQ $2, X15
	MOVO X0, X4
	PSLLQ $52, X0
	POR X2, X15
	POR X0, X15
	MOVO X15, 112(BX)
	PSRLQ $12, X4
	MOVO 176(AX), X3
	MOVO 192(AX), X5
	MOVO 208(AX), X6
	MOVO 224(AX), X10
	MOVO X3, X8
	PSLLQ $38, X3
	POR X4, X3
	MOVO X3, 128(BX)
	PSRLQ $26, X8
	MOVO X5, X7
	PSLLQ $24, X5
	POR X8, X5
	MOVO X5, 144(BX)
	PSRLQ $40, X7
	PSLLQ $10, X6
	MOVO X10, X11
	PSLLQ $60, X10
	POR X7, X6
	POR X10, X6
	MOVO X6, 160(BX)
	PSRLQ $4, X11
	MOVO 240(AX), X9
	MOVO 256(AX), X12
	MOVO 272(AX), X13
	MOVO 288(AX), X1
	MOVO X9, X14
	PSLLQ $46, X9
	POR X11, X9
	MOVO X9, 176(BX)
	PSRLQ $18, X14
	MOVO X12, X2
	PSLLQ $32, X12
	POR X14, X12
	MOVO X12, 192(BX)
	PSRLQ $32, X2
	MOVO X13, X0
	PSLLQ $18, X13
	POR X2, X13
	MOVO X13, 208(BX)
	PSRLQ $46, X0
	PSLLQ $4, X1
	MOVO 304(AX), X15
	MOVO 320(AX), X4
	MOVO 336(AX), X3
	MOVO 352(AX), X8
	MOVO X15, X5
	PSLLQ $54, X15
	POR X0, X1
	POR X15, X1
	MOVO X1, 224(BX)
	PSRLQ $10, X5
	MOVO X4, X7
	PSLLQ $40, X4
	POR X5, X4
	MOVO X4, 240(BX)
	PSRLQ $24, X7
	MOVO X3, X10
	PSLLQ $26, X3
	POR X7, X3
	MOVO X3, 256(BX)
	PSRLQ $38, X10
	PSLLQ $12, X8
	MOVO 368(AX), X6
	MOVO 384(AX), X11
	MOVO 400(AX), X9
	MOVO 416(AX), X14
	MOVO X6, X12
	PSLLQ $62, X6
	POR X10, X8
	POR X6, X8
	MOVO X8, 272(BX)
	PSRLQ $2, X12
	MOVO X11, X2
	PSLLQ $48, X11
	POR X12, X11
	MOVO X11, 288(BX)
	PSRLQ $16, X2
	MOVO X9, X13
	PSLLQ $34, X9
	POR X2, X9
	MOVO X9, 304(BX)
	PSRLQ $30, X13
	MOVO X14, X0
	PSLLQ $20, X14
	POR X13, X14
	MOVO X14, 320(BX)
	PSRLQ $44, X0
	MOVO 432(AX), X15
	MOVO 448(AX), X1
	MOVO 464(AX), X5
	MOVO 480(AX), X4
	PSLLQ $6, X15
	MOVO X1, X7
	PSLLQ $56, X1
	POR X0, X15
	POR X1, X15
	MOVO X15, 336(BX)
	PSRLQ $8, X7
	MOVO X5, X3
	PSLLQ $42, X5
	POR X7, X5
	MOVO X5, 352(BX)
	PSRLQ $22, X3
	MOVO X4, X10
	PSLLQ $28, X4
	POR X3, X4
	MOVO X4, 368(BX)
	PSRLQ $36, X10
	MOVO 496(AX), X6
	MOVO 512(AX), X8
	MOVO 528(AX), X12
	MOVO 544(AX), X11
	PSLLQ $14, X6
	POR X10, X6
	MOVO X6, 384(BX)
	MOVO X12, X2
	PSLLQ $50, X12
	POR X8, X12
	MOVO X12, 400(BX)
	PSRLQ $14, X2
	MOVO X11, X9
	PSLLQ $36, X11
	POR X2, X11
	MOVO X11, 416(BX)
	PSRLQ $28, X9
	MOVO 560(AX), X13
	MOVO 576(AX), X14
	MOVO 592(AX), X0
	MOVO 608(AX), X1
	MOVO X13, X15
	PSLLQ $22, X13
	POR X9, X13
	MOVO X13, 432(BX)
	PSRLQ $42, X15
	PSLLQ $8, X14
	MOVO X0, X7
	PSLLQ $58, X0
	POR X15, X14
	POR X0, X14
	MOVO X14, 448(BX)
	PSRLQ $6, X7
	MOVO X1, X5
	PSLLQ $44, X1
	POR X7, X1
	MOVO X1, 464(BX)
	PSRLQ $20, X5
	MOVO 624(AX), X3
	MOVO 640(AX), X4
	MOVO 656(AX), X10
	MOVO 672(AX), X6
	MOVO X3, X8
	PSLLQ $30, X3
	POR X5, X3
	MOVO X3, 480(BX)
	PSRLQ $34, X8
	MOVO X4, X12
	PSLLQ $16, X4
	POR X8, X4
	MOVO X4, 496(BX)
	PSRLQ $48, X12
	PSLLQ $2, X10
	MOVO X6, X2
	PSLLQ $52, X6
	POR X12, X10
	POR X6, X10
	MOVO X10, 512(BX)
	PSRLQ $12, X2
	MOVO 688(AX), X11
	MOVO 704(AX), X9
	MOVO 720(AX), X13
	MOVO 736(AX), X15
	MOVO X11, X0
	PSLLQ $38, X11
	POR X2, X11
	MOVO X11, 528(BX)
	PSRLQ $26, X0
	MOVO X9, X14
	PSLLQ $24, X9
	POR X0, X9
	MOVO X9, 544(BX)
	PSRLQ $40, X14
	PSLLQ $10, X13
	MOVO X15, X7
	PSLLQ $60, X15
	POR X14, X13
	POR X15, X13
	MOVO X13, 560(BX)
	PSRLQ $4, X7
	MOVO 752(AX), X1
	MOVO 768(AX), X5
	MOVO 784(AX), X3
	MOVO 800(AX), X8
	MOVO X1, X4
	PSLLQ $46, X1
	POR X7, X1
	MOVO X1, 576(BX)
	PSRLQ $18, X4
	MOVO X5, X12
	PSLLQ $32, X5
	POR X4, X5
	MOVO X5, 592(BX)
	PSRLQ $32, X12
	MOVO X3, X6
	PSLLQ $18, X3
	POR X12, X3
	MOVO X3, 608(BX)
	PSRLQ $46, X6
	PSLLQ $4, X8
	MOVO 816(AX), X10
	MOVO 832(AX), X2
	MOVO 848(AX), X11
	MOVO 864(AX), X0
	MOVO X10, X9
	PSLLQ $54, X10
	POR X6, X8
	POR X10, X8
	MOVO X8, 624(BX)
	PSRLQ $10, X9
	MOVO X2, X14
	PSLLQ $40, X2
	POR X9, X2
	MOVO X2, 640(BX)
	PSRLQ $24, X14
	MOVO X11, X15
	PSLLQ $26, X11
	POR X14, X11
	MOVO X11, 656(BX)
	PSRLQ $38, X15
	PSLLQ $12, X0
	MOVO 880(AX), X13
	MOVO 896(AX), X7
	MOVO 912(AX), X1
	MOVO 928(AX), X4
	MOVO X13, X5
	PSLLQ $62, X13
	POR X15, X0
	POR X13, X0
	MOVO X0, 672(BX)
	PSRLQ $2, X5
	MOVO X7, X12
	PSLLQ $48, X7
	POR X5, X7
	MOVO X7, 688(BX)
	PSRLQ $16, X12
	MOVO X1, X3
	PSLLQ $34, X1
	POR X12, X1
	MOVO X1, 704(BX)
	PSRLQ $30, X3
	MOVO X4, X6
	PSLLQ $20, X4
	POR X3, X4
	MOVO X4, 720(BX)
	PSRLQ $44, X6
	MOVO 944(AX), X10
	MOVO 960(AX), X8
	MOVO 976(AX), X9
	MOVO 992(AX), X2
	PSLLQ $6, X10
	MOVO X8, X14
	PSLLQ $56, X8
	POR X6, X10
	POR X8, X10
	MOVO X10, 736(BX)
	PSRLQ $8, X14
	MOVO X9, X11
	PSLLQ $42, X9
	POR X14, X9
	MOVO X9, 752(BX)
	PSRLQ $22, X11
	MOVO X2, X15
	PSLLQ $28, X2
	POR X11, X2
	MOVO X2, 768(BX)
	PSRLQ $36, X15
	MOVO 1008(AX), X13
	PSLLQ $14, X13
	POR X15, X13
	MOVO X13, 784(BX)
	RET

// func pack64_51(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_51(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $51, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $13, X4
	MOVO X3, X5
	PSLLQ $38, X3
	POR X4, X3
	MOVO X3, 16(BX)
	PSRLQ $26, X5
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	MOVO X6, X10
	PSLLQ $25, X6
	POR X5, X6
	MOVO X6, 32(BX)
	PSRLQ $39, X10
	PSLLQ $12, X7
	MOVO X8, X11
	PSLLQ $63, X8
	POR X10, X7
	POR X8, X7
	MOVO X7, 48(BX)
	PSRLQ $1, X11
	MOVO X9, X12
	PSLLQ $50, X9
	POR X11, X9
	MOVO X9, 64(BX)
	PSRLQ $14, X12
	MOVO 112(AX), X13
	MOVO 128(AX), X14
	MOVO 144(AX), X15
	MOVO 160(AX), X0
	MOVO X13, X1
	PSLLQ $37, X13
	POR X12, X13
	MOVO X13, 80(BX)
	PSRLQ $27, X1
	MOVO X14, X2
	PSLLQ $24, X14
	POR X1, X14
	MOVO X14, 96(BX)
	PSRLQ $40, X2
	PSLLQ $11, X15
	MOVO X0, X4
	PSLLQ $62, X0
	POR X2, X15
	POR X0, X15
	MOVO X15, 112(BX)
	PSRLQ $2, X4
	MOVO 176(AX), X3
	MOVO 192(AX), X5
	MOVO 208(AX), X6
	MOVO 224(AX), X10
	MOVO X3, X8
	PSLLQ $49, X3
	POR X4, X3
	MOVO X3, 128(BX)
	PSRLQ $15, X8
	MOVO X5, X7
	PSLLQ $36, X5
	POR X8, X5
	MOVO X5, 144(BX)
	PSRLQ $28, X7
	MOVO X6, X11
	PSLLQ $23, X6
	POR X7, X6
	MOVO X6, 160(BX)
	PSRLQ $41, X11
	PSLLQ $10, X10
	MOVO 240(AX), X9
	MOVO 256(AX), X12
	MOVO 272(AX), X13
	MOVO 288(AX), X1
	MOVO X9, X14
	PSLLQ $61, X9
	POR X11, X10
	POR X9, X10
	MOVO X10, 176(BX)
	PSRLQ $3, X14
	MOVO X12, X2
	PSLLQ $48, X12
	POR X14, X12
	MOVO X12, 192(BX)
	PSRLQ $16, X2
	MOVO X13, X0
	PSLLQ $35, X13
	POR X2, X13
	MOVO X13, 208(BX)
	PSRLQ $29, X0
	MOVO X1, X15
	PSLLQ $22, X1
	POR X0, X1
	MOVO X1, 224(BX)
	PSRLQ $42, X15
	MOVO 304(AX), X4
	MOVO 320(AX), X3
	MOVO 336(AX), X8
	MOVO 352(AX), X5
	PSLLQ $9, X4
	MOVO X3, X7
	PSLLQ $60, X3
	POR X15, X4
	POR X3, X4
	MOVO X4, 240(BX)
	PSRLQ $4, X7
	MOVO X8, X6
	PSLLQ $47, X8
	POR X7, X8
	MOVO X8, 256(BX)
	PSRLQ $17, X6
	MOVO X5, X11
	PSLLQ $34, X5
	POR X6, X5
	MOVO X5, 272(BX)
	PSRLQ $30, X11
	MOVO 368(AX), X9
	MOVO 384(AX), X10
	MOVO 400(AX), X14
	MOVO 416(AX), X12
	MOVO X9, X2
	PSLLQ $21, X9
	POR X11, X9
	MOVO X9, 288(BX)
	PSRLQ $43, X2
	PSLLQ $8, X10
	MOVO X14, X13
	PSLLQ $59, X14
	POR X2, X10
	POR X14, X10
	MOVO X10, 304(BX)
	PSRLQ $5, X13
	MOVO X12, X0
	PSLLQ $46, X12
	POR X13, X12
	MOVO X12, 320(BX)
	PSRLQ $18, X0
	MOVO 432(AX), X1
	MOVO 448(AX), X15
	MOVO 464(AX), X3
	MOVO 480(AX), X4
	MOVO X1, X7
	PSLLQ $33, X1
	POR X0, X1
	MOVO X1, 336(BX)
	PSRLQ $31, X7
	MOVO X15, X8
	PSLLQ $20, X15
	POR X7, X15
	MOVO X15, 352(BX)
	PSRLQ $44, X8
	PSLLQ $7, X3
	MOVO X4, X6
	PSLLQ $58, X4
	POR X8, X3
	POR X4, X3
	MOVO X3, 368(BX)
	PSRLQ $6, X6
	MOVO 496(AX), X5
	MOVO 512(AX), X11
	MOVO 528(AX), X9
	MOVO 544(AX), X2
	MOVO X5, X14
	PSLLQ $45, X5
	POR X6, X5
	MOVO X5, 384(BX)
	PSRLQ $19, X14
	MOVO X11, X10
	PSLLQ $32, X11
	POR X14, X11
	MOVO X11, 400(BX)
	PSRLQ $32, X10
	MOVO X9, X13
	PSLLQ $19, X9
	POR X10, X9
	MOVO X9, 416(BX)
	PSRLQ $45, X13
	PSLLQ $6, X2
	MOVO 560(AX), X12
	MOVO 576(AX), X0
	MOVO 592(AX), X1
	MOVO 608(AX), X7
	MOVO X12, X15
	PSLLQ $57, X12
	POR X13, X2
	POR X12, X2
	MOVO X2, 432(BX)
	PSRLQ $7, X15
	MOVO X0, X8
	PSLLQ $44, X0
	POR X15, X0
	MOVO X0, 448(BX)
	PSRLQ $20, X8
	MOVO X1, X4
	PSLLQ $31, X1
	POR X8, X1
	MOVO X1, 464(BX)
	PSRLQ $33, X4
	MOVO X7, X3
	PSLLQ $18, X7
	POR X4, X7
	MOVO X7, 480(BX)
	PSRLQ $46, X3
	MOVO 624(AX), X6
	MOVO 640(AX), X5
	MOVO 656(AX), X14
	MOVO 672(AX), X11
	PSLLQ $5, X6
	MOVO X5, X10
	PSLLQ $56, X5
	POR X3, X6
	POR X5, X6
	MOVO X6, 496(BX)
	PSRLQ $8, X10
	MOVO X14, X9
	PSLLQ $43, X14
	POR X10, X14
	MOVO X14, 512(BX)
	PSRLQ $21, X9
	MOVO X11, X13
	PSLLQ $30, X11
	POR X9, X11
	MOVO X11, 528(BX)
	PSRLQ $34, X13
	MOVO 688(AX), X12
	MOVO 704(AX), X2
	MOVO 720(AX), X15
	MOVO 736(AX), X0
	MOVO X12, X8
	PSLLQ $17, X12
	POR X13, X12
	MOVO X12, 544(BX)
	PSRLQ $47, X8
	PSLLQ $4, X2
	MOVO X15, X1
	PSLLQ $55, X15
	POR X8, X2
	POR X15, X2
	MOVO X2, 560(BX)
	PSRLQ $9, X1
	MOVO X0, X4
	PSLLQ $42, X0
	POR X1, X0
	MOVO X0, 576(BX)
	PSRLQ $22, X4
	MOVO 752(AX), X7
	MOVO 768(AX), X3
	MOVO 784(AX), X5
	MOVO 800(AX), X6
	MOVO X7, X10
	PSLLQ $29, X7
	POR X4, X7
	MOVO X7, 592(BX)
	PSRLQ $35, X10
	MOVO X3, X14
	PSLLQ $16, X3
	POR X10, X3
	MOVO X3, 608(BX)
	PSRLQ $48, X14
	PSLLQ $3, X5
	MOVO X6, X9
	PSLLQ $54, X6
	POR X14, X5
	POR X6, X5
	MOVO X5, 624(BX)
	PSRLQ $10, X9
	MOVO 816(AX), X11
	MOVO 832(AX), X13
	MOVO 848(AX), X12
	MOVO 864(AX), X8
	MOVO X11, X15
	PSLLQ $41, X11
	POR X9, X11
	MOVO X11, 640(BX)
	PSRLQ $23, X15
	MOVO X13, X2
	PSLLQ $28, X13
	POR X15, X13
	MOVO X13, 656(BX)
	PSRLQ $36, X2
	MOVO X12, X1
	PSLLQ $15, X12
	POR X2, X12
	MOVO X12, 672(BX)
	PSRLQ $49, X1
	PSLLQ $2, X8
	MOVO 880(AX), X0
	MOVO 896(AX), X4
	MOVO 912(AX), X7
	MOVO 928(AX), X10
	MOVO X0, X3
	PSLLQ $53, X0
	POR X1, X8
	POR X0, X8
	MOVO X8, 688(BX)
	PSRLQ $11, X3
	MOVO X4, X14
	PSLLQ $40, X4
	POR X3, X4
	MOVO X4, 704(BX)
	PSRLQ $24, X14
	MOVO X7, X6
	PSLLQ $27, X7
	POR X14, X7
	MOVO X7, 720(BX)
	PSRLQ $37, X6
	MOVO X10, X5
	PSLLQ $14, X10
	POR X6, X10
	MOVO X10, 736(BX)
	PSRLQ $50, X5
	MOVO 944(AX), X9
	MOVO 960(AX), X11
	MOVO 976(AX), X15
	MOVO 992(AX), X13
	PSLLQ $1, X9
	MOVO X11, X2
	PSLLQ $52, X11
	POR X5, X9
	POR X11, X9
	MOVO X9, 752(BX)
	PSRLQ $12, X2
	MOVO X15, X12
	PSLLQ $39, X15
	POR X2, X15
	MOVO X15, 768(BX)
	PSRLQ $25, X12
	MOVO X13, X1
	PSLLQ $26, X13
	POR X12, X13
	MOVO X13, 784(BX)
	PSRLQ $38, X1
	MOVO 1008(AX), X0
	PSLLQ $13, X0
	POR X1, X0
	MOVO X0, 800(BX)
	RET

// func pack64_52(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_52(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $52, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $12, X4
	MOVO X3, X5
	PSLLQ $40, X3
	POR X4, X3
	MOVO X3, 16(BX)
	PSRLQ $24, X5
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	MOVO X6, X10
	PSLLQ $28, X6
	POR X5, X6
	MOVO X6, 32(BX)
	PSRLQ $36, X10
	MOVO X7, X11
	PSLLQ $16, X7
	POR X10, X7
	MOVO X7, 48(BX)
	PSRLQ $48, X11
	PSLLQ $4, X8
	MOVO X9, X12
	PSLLQ $56, X9
	POR X11, X8
	POR X9, X8
	MOVO X8, 64(BX)
	PSRLQ $8, X12
	MOVO 112(AX), X13
	MOVO 128(AX), X14
	MOVO 144(AX), X15
	MOVO 160(AX), X0
	MOVO X13, X1
	PSLLQ $44, X13
	POR X12, X13
	MOVO X13, 80(BX)
	PSRLQ $20, X1
	MOVO X14, X2
	PSLLQ $32, X14
	POR X1, X14
	MOVO X14, 96(BX)
	PSRLQ $32, X2
	MOVO X15, X4
	PSLLQ $20, X15
	POR X2, X15
	MOVO X15, 112(BX)
	PSRLQ $44, X4
	PSLLQ $8, X0
	MOVO 176(AX), X3
	MOVO 192(AX), X5
	MOVO 208(AX), X6
	MOVO 224(AX), X10
	MOVO X3, X7
	PSLLQ $60, X3
	POR X4, X0
	POR X3, X0
	MOVO X0, 128(BX)
	PSRLQ $4, X7
	MOVO X5, X11
	PSLLQ $48, X5
	POR X7, X5
	MOVO X5, 144(BX)
	PSRLQ $16, X11
	MOVO X6, X9
	PSLLQ $36, X6
	POR X11, X6
	MOVO X6, 160(BX)
	PSRLQ $28, X9
	MOVO X10, X8
	PSLLQ $24, X10
	POR X9, X10
	MOVO X10, 176(BX)
	PSRLQ $40, X8
	MOVO 240(AX), X12
	MOVO 256(AX), X13
	MOVO 272(AX), X1
	MOVO 288(AX), X14
	PSLLQ $12, X12
	POR X8, X12
	MOVO X12, 192(BX)
	MOVO X1, X2
	PSLLQ $52, X1
	POR X13, X1
	MOVO X1, 208(BX)
	PSRLQ $12, X2
	MOVO X14, X15
	PSLLQ $40, X14
	POR X2, X14
	MOVO X14, 224(BX)
	PSRLQ $24, X15
	MOVO 304(AX), X4
	MOVO 320(AX), X3
	MOVO 336(AX), X0
	MOVO 352(AX), X7
	MOVO X4, X5
	PSLLQ $28, X4
	POR X15, X4
	MOVO X4, 240(BX)
	PSRLQ $36, X5
	MOVO X3, X11
	PSLLQ $16, X3
	POR X5, X3
	MOVO X3, 256(BX)
	PSRLQ $48, X11
	PSLLQ $4, X0
	MOVO X7, X6
	PSLLQ $56, X7
	POR X11, X0
	POR X7, X0
	MOVO X0, 272(BX)
	PSRLQ $8, X6
	MOVO 368(AX), X9
	MOVO 384(AX), X10
	MOVO 400(AX), X8
	MOVO 416(AX), X12
	MOVO X9, X13
	PSLLQ $44, X9
	POR X6, X9
	MOVO X9, 288(BX)
	PSRLQ $20, X13
	MOVO X10, X1
	PSLLQ $32, X10
	POR X13, X10
	MOVO X10, 304(BX)
	PSRLQ $32, X1
	MOVO X8, X2
	PSLLQ $20, X8
	POR X1, X8
	MOVO X8, 320(BX)
	PSRLQ $44, X2
	PSLLQ $8, X12
	MOVO 432(AX), X14
	MOVO 448(AX), X15
	MOVO 464(AX), X4
	MOVO 480(AX), X5
	MOVO X14, X3
	PSLLQ $60, X14
	POR X2, X12
	POR X14, X12
	MOVO X12, 336(BX)
	PSRLQ $4, X3
	MOVO X15, X11
	PSLLQ $48, X15
	POR X3, X15
	MOVO X15, 352(BX)
	PSRLQ $16, X11
	MOVO X4, X7
	PSLLQ $36, X4
	POR X11, X4
	MOVO X4, 368(BX)
	PSRLQ $28, X7
	MOVO X5, X0
	PSLLQ $24, X5
	POR X7, X5
	MOVO X5, 384(BX)
	PSRLQ $40, X0
	MOVO 496(AX), X6
	MOVO 512(AX), X9
	MOVO 528(AX), X13
	MOVO 544(AX), X10
	PSLLQ $12, X6
	POR X0, X6
	MOVO X6, 400(BX)
	MOVO X13, X1
	PSLLQ $52, X13
	POR X9, X13
	MOVO X13, 416(BX)
	PSRLQ $12, X1
	MOVO X10, X8
	PSLLQ $40, X10
	POR X1, X10
	MOVO X10, 432(BX)
	PSRLQ $24, X8
	MOVO 560(AX), X2
	MOVO 576(AX), X14
	MOVO 592(AX), X12
	MOVO 608(AX), X3
	MOVO X2, X15
	PSLLQ $28, X2
	POR X8, X2
	MOVO X2, 448(BX)
	PSRLQ $36, X15
	MOVO X14, X11
	PSLLQ $16, X14
	POR X15, X14
	MOVO X14, 464(BX)
	PSRLQ $48, X11
	PSLLQ $4, X12
	MOVO X3, X4
	PSLLQ $56, X3
	POR X11, X12
	POR X3, X12
	MOVO X12, 480(BX)
	PSRLQ $8, X4
	MOVO 624(AX), X7
	MOVO 640(AX), X5
	MOVO 656(AX), X0
	MOVO 672(AX), X6
	MOVO X7, X9
	PSLLQ $44, X7
	POR X4, X7
	MOVO X7, 496(BX)
	PSRLQ $20, X9
	MOVO X5, X13
	PSLLQ $32, X5
	POR X9, X5
	MOVO X5, 512(BX)
	PSRLQ $32, X13
	MOVO X0, X1
	PSLLQ $20, X0
	POR X13, X0
	MOVO X0, 528(BX)
	PSRLQ $44, X1
	PSLLQ $8, X6
	MOVO 688(AX), X10
	MOVO 704(AX), X8
	MOVO 720(AX), X2
	MOVO 736(AX), X15
	MOVO X10, X14
	PSLLQ $60, X10
	POR X1, X6
	POR X10, X6
	MOVO X6, 544(BX)
	PSRLQ $4, X14
	MOVO X8, X11
	PSLLQ $48, X8
	POR X14, X8
	MOVO X8, 560(BX)
	PSRLQ $16, X11
	MOVO X2, X3
	PSLLQ $36, X2
	POR X11, X2
	MOVO X2, 576(BX)
	PSRLQ $28, X3
	MOVO X15, X12
	PSLLQ $24, X15
	POR X3, X15
	MOVO X15, 592(BX)
	PSRLQ $40, X12
	MOVO 752(AX), X4
	MOVO 768(AX), X7
	MOVO 784(AX), X9
	MOVO 800(AX), X5
	PSLLQ $12, X4
	POR X12, X4
	MOVO X4, 608(BX)
	MOVO X9, X13
	PSLLQ $52, X9
	POR X7, X9
	MOVO X9, 624(BX)
	PSRLQ $12, X13
	MOVO X5, X0
	PSLLQ $40, X5
	POR X13, X5
	MOVO X5, 640(BX)
	PSRLQ $24, X0
	MOVO 816(AX), X1
	MOVO 832(AX), X10
	MOVO 848(AX), X6
	MOVO 864(AX), X14
	MOVO X1, X8
	PSLLQ $28, X1
	POR X0, X1
	MOVO X1, 656(BX)
	PSRLQ $36, X8
	MOVO X10, X11
	PSLLQ $16, X10
	POR X8, X10
	MOVO X10, 672(BX)
	PSRLQ $48, X11
	PSLLQ $4, X6
	MOVO X14, X2
	PSLLQ $56, X14
	POR X11, X6
	POR X14, X6
	MOVO X6, 688(BX)
	PSRLQ $8, X2
	MOVO 880(AX), X3
	MOVO 896(AX), X15
	MOVO 912(AX), X12
	MOVO 928(AX), X4
	MOVO X3, X7
	PSLLQ $44, X3
	POR X2, X3
	MOVO X3, 704(BX)
	PSRLQ $20, X7
	MOVO X15, X9
	PSLLQ $32, X15
	POR X7, X15
	MOVO X15, 720(BX)
	PSRLQ $32, X9
	MOVO X12, X13
	PSLLQ $20, X12
	POR X9, X12
	MOVO X12, 736(BX)
	PSRLQ $44, X13
	PSLLQ $8, X4
	MOVO 944(AX), X5
	MOVO 960(AX), X0
	MOVO 976(AX), X1
	MOVO 992(AX), X8
	MOVO X5, X10
	PSLLQ $60, X5
	POR X13, X4
	POR X5, X4
	MOVO X4, 752(BX)
	PSRLQ $4, X10
	MOVO X0, X11
	PSLLQ $48, X0
	POR X10, X0
	MOVO X0, 768(BX)
	PSRLQ $16, X11
	MOVO X1, X14
	PSLLQ $36, X1
	POR X11, X1
	MOVO X1, 784(BX)
	PSRLQ $28, X14
	MOVO X8, X6
	PSLLQ $24, X8
	POR X14, X8
	MOVO X8, 800(BX)
	PSRLQ $40, X6
	MOVO 1008(AX), X2
	PSLLQ $12, X2
	POR X6, X2
	MOVO X2, 816(BX)
	RET

// func pack64_53(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_53(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $53, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $11, X4
	MOVO X3, X5
	PSLLQ $42, X3
	POR X4, X3
	MOVO X3, 16(BX)
	PSRLQ $22, X5
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	MOVO X6, X10
	PSLLQ $31, X6
	POR X5, X6
	MOVO X6, 32(BX)
	PSRLQ $33, X10
	MOVO X7, X11
	PSLLQ $20, X7
	POR X10, X7
	MOVO X7, 48(BX)
	PSRLQ $44, X11
	PSLLQ $9, X8
	MOVO X9, X12
	PSLLQ $62, X9
	POR X11, X8
	POR X9, X8
	MOVO X8, 64(BX)
	PSRLQ $2, X12
	MOVO 112(AX), X13
	MOVO 128(AX), X14
	MOVO 144(AX), X15
	MOVO 160(AX), X0
	MOVO X13, X1
	PSLLQ $51, X13
	POR X12, X13
	MOVO X13, 80(BX)
	PSRLQ $13, X1
	MOVO X14, X2
	PSLLQ $40, X14
	POR X1, X14
	MOVO X14, 96(BX)
	PSRLQ $24, X2
	MOVO X15, X4
	PSLLQ $29, X15
	POR X2, X15
	MOVO X15, 112(BX)
	PSRLQ $35, X4
	MOVO X0, X3
	PSLLQ $18, X0
	POR X4, X0
	MOVO X0, 128(BX)
	PSRLQ $46, X3
	MOVO 176(AX), X5
	MOVO 192(AX), X6
	MOVO 208(AX), X10
	MOVO 224(AX), X7
	PSLLQ $7, X5
	MOVO X6, X11
	PSLLQ $60, X6
	POR X3, X5
	POR X6, X5
	MOVO X5, 144(BX)
	PSRLQ $4, X11
	MOVO X10, X9
	PSLLQ $49, X10
	POR X11, X10
	MOVO X10, 160(BX)
	PSRLQ $15, X9
	MOVO X7, X8
	PSLLQ $38, X7
	POR X9, X7
	MOVO X7, 176(BX)
	PSRLQ $26, X8
	MOVO 240(AX), X12
	MOVO 256(AX), X13
	MOVO 272(AX), X1
	MOVO 288(AX), X14
	MOVO X12, X2
	PSLLQ $27, X12
	POR X8, X12
	MOVO X12, 192(BX)
	PSRLQ $37, X2
	MOVO X13, X15
	PSLLQ $16, X13
	POR X2, X13
	MOVO X13, 208(BX)
	PSRLQ $48, X15
	PSLLQ $5, X1
	MOVO X14, X4
	PSLLQ $58, X14
	POR X15, X1
	POR X14, X1
	MOVO X1, 224(BX)
	PSRLQ $6, X4
	MOVO 304(AX), X0
	MOVO 320(AX), X3
	MOVO 336(AX), X6
	MOVO 352(AX), X5
	MOVO X0, X11
	PSLLQ $47, X0
	POR X4, X0
	MOVO X0, 240(BX)
	PSRLQ $17, X11
	MOVO X3, X10
	PSLLQ $36, X3
	POR X11, X3
	MOVO X3, 256(BX)
	PSRLQ $28, X10
	MOVO X6, X9
	PSLLQ $25, X6
	POR X10, X6
	MOVO X6, 272(BX)
	PSRLQ $39, X9
	MOVO X5, X7
	PSLLQ $14, X5
	POR X9, X5
	MOVO X5, 288(BX)
	PSRLQ $50, X7
	MOVO 368(AX), X8
	MOVO 384(AX), X12
	MOVO 400(AX), X2
	MOVO 416(AX), X13
	PSLLQ $3, X8
	MOVO X12, X15
	PSLLQ $56, X12
	POR X7, X8
	POR X12, X8
	MOVO X8, 304(BX)
	PSRLQ $8, X15
	MOVO X2, X14
	PSLLQ $45, X2
	POR X15, X2
	MOVO X2, 320(BX)
	PSRLQ $19, X14
	MOVO X13, X1
	PSLLQ $34, X13
	POR X14, X13
	MOVO X13, 336(BX)
	PSRLQ $30, X1
	MOVO 432(AX), X4
	MOVO 448(AX), X0
	MOVO 464(AX), X11
	MOVO 480(AX), X3
	MOVO X4, X10
	PSLLQ $23, X4
	POR X1, X4
	MOVO X4, 352(BX)
	PSRLQ $41, X10
	MOVO X0, X6
	PSLLQ $12, X0
	POR X10, X0
	MOVO X0, 368(BX)
	PSRLQ $52, X6
	PSLLQ $1, X11
	MOVO X3, X9
	PSLLQ $54, X3
	POR X6, X11
	POR X3, X11
	MOVO X11, 384(BX)
	PSRLQ $10, X9
	MOVO 496(AX), X5
	MOVO 512(AX), X7
	MOVO 528(AX), X12
	MOVO 544(AX), X8
	MOVO X5, X15
	PSLLQ $43, X5
	POR X9, X5
	MOVO X5, 400(BX)
	PSRLQ $21, X15
	MOVO X7, X2
	PSLLQ $32, X7
	POR X15, X7
	MOVO X7, 416(BX)
	PSRLQ $32, X2
	MOVO X12, X14
	PSLLQ $21, X12
	POR X2, X12
	MOVO X12, 432(BX)
	PSRLQ $43, X14
	PSLLQ $10, X8
	MOVO 560(AX), X13
	MOVO 576(AX), X1
	MOVO 592(AX), X4
	MOVO 608(AX), X10
	MOVO X13, X0
	PSLLQ $63, X13
	POR X14, X8
	POR X13, X8
	MOVO X8, 448(BX)
	PSRLQ $1, X0
	MOVO X1, X6
	PSLLQ $52, X1
	POR X0, X1
	MOVO X1, 464(BX)
	PSRLQ $12, X6
	MOVO X4, X3
	PSLLQ $41, X4
	POR X6, X4
	MOVO X4, 480(BX)
	PSRLQ $23, X3
	MOVO X10, X11
	PSLLQ $30, X10
	POR X3, X10
	MOVO X10, 496(BX)
	PSRLQ $34, X11
	MOVO 624(AX), X9
	MOVO 640(AX), X5
	MOVO 656(AX), X15
	MOVO 672(AX), X7
	MOVO X9, X2
	PSLLQ $19, X9
	POR X11, X9
	MOVO X9, 512(BX)
	PSRLQ $45, X2
	PSLLQ $8, X5
	MOVO X15, X12
	PSLLQ $61, X15
	POR X2, X5
	POR X15, X5
	MOVO X5, 528(BX)
	PSRLQ $3, X12
	MOVO X7, X14
	PSLLQ $50, X7
	POR X12, X7
	MOVO X7, 544(BX)
	PSRLQ $14, X14
	MOVO 688(AX), X13
	MOVO 704(AX), X8
	MOVO 720(AX), X0
	MOVO 736(AX), X1
	MOVO X13, X6
	PSLLQ $39, X13
	POR X14, X13
	MOVO X13, 560(BX)
	PSRLQ $25, X6
	MOVO X8, X4
	PSLLQ $28, X8
	POR X6, X8
	MOVO X8, 576(BX)
	PSRLQ $36, X4
	MOVO X0, X3
	PSLLQ $17, X0
	POR X4, X0
	MOVO X0, 592(BX)
	PSRLQ $47, X3
	PSLLQ $6, X1
	MOVO 752(AX), X10
	MOVO 768(AX), X11
	MOVO 784(AX), X9
	MOVO 800(AX), X2
	MOVO X10, X15
	PSLLQ $59, X10
	POR X3, X1
	POR X10, X1
	MOVO X1, 608(BX)
	PSRLQ $5, X15
	MOVO X11, X5
	PSLLQ $48, X11
	POR X15, X11
	MOVO X11, 624(BX)
	PSRLQ $16, X5
	MOVO X9, X12
	PSLLQ $37, X9
	POR X5, X9
	MOVO X9, 640(BX)
	PSRLQ $27, X12
	MOVO X2, X7
	PSLLQ $26, X2
	POR X12, X2
	MOVO X2, 656(BX)
	PSRLQ $38, X7
	MOVO 816(AX), X14
	MOVO 832(AX), X13
	MOVO 848(AX), X6
	MOVO 864(AX), X8
	MOVO X14, X4
	PSLLQ $15, X14
	POR X7, X14
	MOVO X14, 672(BX)
	PSRLQ $49, X4
	PSLLQ $4, X13
	MOVO X6, X0
	PSLLQ $57, X6
	POR X4, X13
	POR X6, X13
	MOVO X13, 688(BX)
	PSRLQ $7, X0
	MOVO X8, X3
	PSLLQ $46, X8
	POR X0, X8
	MOVO X8, 704(BX)
	PSRLQ $18, X3
	MOVO 880(AX), X10
	MOVO 896(AX), X1
	MOVO 912(AX), X15
	MOVO 928(AX), X11
	MOVO X10, X5
	PSLLQ $35, X10
	POR X3, X10
	MOVO X10, 720(BX)
	PSRLQ $29, X5
	MOVO X1, X9
	PSLLQ $24, X1
	POR X5, X1
	MOVO X1, 736(BX)
	PSRLQ $40, X9
	MOVO X15, X12
	PSLLQ $13, X15
	POR X9, X15
	MOVO X15, 752(BX)
	PSRLQ $51, X12
	PSLLQ $2, X11
	MOVO 944(AX), X2
	MOVO 960(AX), X7
	MOVO 976(AX), X14
	MOVO 992(AX), X4
	MOVO X2, X6
	PSLLQ $55, X2
	POR X12, X11
	POR X2, X11
	MOVO X11, 768(BX)
	PSRLQ $9, X6
	MOVO X7, X13
	PSLLQ $44, X7
	POR X6, X7
	MOVO X7, 784(BX)
	PSRLQ $20, X13
	MOVO X14, X0
	PSLLQ $33, X14
	POR X13, X14
	MOVO X14, 800(BX)
	PSRLQ $31, X0
	MOVO X4, X8
	PSLLQ $22, X4
	POR X0, X4
	MOVO X4, 816(BX)
	PSRLQ $42, X8
	MOVO 1008(AX), X3
	PSLLQ $11, X3
	POR X8, X3
	MOVO X3, 832(BX)
	RET

// func pack64_54(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_54(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $54, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $10, X4
	MOVO X3, X5
	PSLLQ $44, X3
	POR X4, X3
	MOVO X3, 16(BX)
	PSRLQ $20, X5
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	MOVO X6, X10
	PSLLQ $34, X6
	POR X5, X6
	MOVO X6, 32(BX)
	PSRLQ $30, X10
	MOVO X7, X11
	PSLLQ $24, X7
	POR X10, X7
	MOVO X7, 48(BX)
	PSRLQ $40, X11
	MOVO X8, X12
	PSLLQ $14, X8
	POR X11, X8
	MOVO X8, 64(BX)
	PSRLQ $50, X12
	PSLLQ $4, X9
	MOVO 112(AX), X13
	MOVO 128(AX), X14
	MOVO 144(AX), X15
	MOVO 160(AX), X0
	MOVO X13, X1
	PSLLQ $58, X13
	POR X12, X9
	POR X13, X9
	MOVO X9, 80(BX)
	PSRLQ $6, X1
	MOVO X14, X2
	PSLLQ $48, X14
	POR X1, X14
	MOVO X14, 96(BX)
	PSRLQ $16, X2
	MOVO X15, X4
	PSLLQ $38, X15
	POR X2, X15
	MOVO X15, 112(BX)
	PSRLQ $26, X4
	MOVO X0, X3
	PSLLQ $28, X0
	POR X4, X0
	MOVO X0, 128(BX)
	PSRLQ $36, X3
	MOVO 176(AX), X5
	MOVO 192(AX), X6
	MOVO 208(AX), X10
	MOVO 224(AX), X7
	MOVO X5, X11
	PSLLQ $18, X5
	POR X3, X5
	MOVO X5, 144(BX)
	PSRLQ $46, X11
	PSLLQ $8, X6
	MOVO X10, X8
	PSLLQ $62, X10
	POR X11, X6
	POR X10, X6
	MOVO X6, 160(BX)
	PSRLQ $2, X8
	MOVO X7, X12
	PSLLQ $52, X7
	POR X8, X7
	MOVO X7, 176(BX)
	PSRLQ $12, X12
	MOVO 240(AX), X13
	MOVO 256(AX), X9
	MOVO 272(AX), X1
	MOVO 288(AX), X14
	MOVO X13, X2
	PSLLQ $42, X13
	POR X12, X13
	MOVO X13, 192(BX)
	PSRLQ $22, X2
	MOVO X9, X15
	PSLLQ $32, X9
	POR X2, X9
	MOVO X9, 208(BX)
	PSRLQ $32, X15
	MOVO X1, X4
	PSLLQ $22, X1
	POR X15, X1
	MOVO X1, 224(BX)
	PSRLQ $42, X4
	MOVO X14, X0
	PSLLQ $12, X14
	POR X4, X14
	MOVO X14, 240(BX)
	PSRLQ $52, X0
	MOVO 304(AX), X3
	MOVO 320(AX), X5
	MOVO 336(AX), X11
	MOVO 352(AX), X10
	PSLLQ $2, X3
	MOVO X5, X6
	PSLLQ $56, X5
	POR X0, X3
	POR X5, X3
	MOVO X3, 256(BX)
	PSRLQ $8, X6
	MOVO X11, X8
	PSLLQ $46, X11
	POR X6, X11
	MOVO X11, 272(BX)
	PSRLQ $18, X8
	MOVO X10, X7
	PSLLQ $36, X10
	POR X8, X10
	MOVO X10, 288(BX)
	PSRLQ $28, X7
	MOVO 368(AX), X12
	MOVO 384(AX), X13
	MOVO 400(AX), X2
	MOVO 416(AX), X9
	MOVO X12, X15
	PSLLQ $26, X12
	POR X7, X12
	MOVO X12, 304(BX)
	PSRLQ $38, X15
	MOVO X13, X1
	PSLLQ $16, X13
	POR X15, X13
	MOVO X13, 320(BX)
	PSRLQ $48, X1
	PSLLQ $6, X2
	MOVO X9, X4
	PSLLQ $60, X9
	POR X1, X2
	POR X9, X2
	MOVO X2, 336(BX)
	PSRLQ $4, X4
	MOVO 432(AX), X14
	MOVO 448(AX), X0
	MOVO 464(AX), X5
	MOVO 480(AX), X3
	MOVO X14, X6
	PSLLQ $50, X14
	POR X4, X14
	MOVO X14, 352(BX)
	PSRLQ $14, X6
	MOVO X0, X11
	PSLLQ $40, X0
	POR X6, X0
	MOVO X0, 368(BX)
	PSRLQ $24, X11
	MOVO X5, X8
	PSLLQ $30, X5
	POR X11, X5
	MOVO X5, 384(BX)
	PSRLQ $34, X8
	MOVO X3, X10
	PSLLQ $20, X3
	POR X8, X3
	MOVO X3, 400(BX)
	PSRLQ $44, X10
	MOVO 496(AX), X7
	MOVO 512(AX), X12
	MOVO 528(AX), X15
	MOVO 544(AX), X13
	PSLLQ $10, X7
	POR X10, X7
	MOVO X7, 416(BX)
	MOVO X15, X1
	PSLLQ $54, X15
	POR X12, X15
	MOVO X15, 432(BX)
	PSRLQ $10, X1
	MOVO X13, X9
	PSLLQ $44, X13
	POR X1, X13
	MOVO X13, 448(BX)
	PSRLQ $20, X9
	MOVO 560(AX), X2
	MOVO 576(AX), X4
	MOVO 592(AX), X14
	MOVO 608(AX), X6
	MOVO X2, X0
	PSLLQ $34, X2
	POR X9, X2
	MOVO X2, 464(BX)
	PSRLQ $30, X0
	MOVO X4, X11
	PSLLQ $24, X4
	POR X0, X4
	MOVO X4, 480(BX)
	PSRLQ $40, X11
	MOVO X14, X5
	PSLLQ $14, X14
	POR X11, X14
	MOVO X14, 496(BX)
	PSRLQ $50, X5
	PSLLQ $4, X6
	MOVO 624(AX), X8
	MOVO 640(AX), X3
	MOVO 656(AX), X10
	MOVO 672(AX), X7
	MOVO X8, X12
	PSLLQ $58, X8
	POR X5, X6
	POR X8, X6
	MOVO X6, 512(BX)
	PSRLQ $6, X12
	MOVO X3, X15
	PSLLQ $48, X3
	POR X12, X3
	MOVO X3, 528(BX)
	PSRLQ $16, X15
	MOVO X10, X1
	PSLLQ $38, X10
	POR X15, X10
	MOVO X10, 544(BX)
	PSRLQ $26, X1
	MOVO X7, X13
	PSLLQ $28, X7
	POR X1, X7
	MOVO X7, 560(BX)
	PSRLQ $36, X13
	MOVO 688(AX), X9
	MOVO 704(AX), X2
	MOVO 720(AX), X0
	MOVO 736(AX), X4
	MOVO X9, X11
	PSLLQ $18, X9
	POR X13, X9
	MOVO X9, 576(BX)
	PSRLQ $46, X11
	PSLLQ $8, X2
	MOVO X0, X14
	PSLLQ $62, X0
	POR X11, X2
	POR X0, X2
	MOVO X2, 592(BX)
	PSRLQ $2, X14
	MOVO X4, X5
	PSLLQ $52, X4
	POR X14, X4
	MOVO X4, 608(BX)
	PSRLQ $12, X5
	MOVO 752(AX), X8
	MOVO 768(AX), X6
	MOVO 784(AX), X12
	MOVO 800(AX), X3
	MOVO X8, X15
	PSLLQ $42, X8
	POR X5, X8
	MOVO X8, 624(BX)
	PSRLQ $22, X15
	MOVO X6, X10
	PSLLQ $32, X6
	POR X15, X6
	MOVO X6, 640(BX)
	PSRLQ $32, X10
	MOVO X12, X1
	PSLLQ $22, X12
	POR X10, X12
	MOVO X12, 656(BX)
	PSRLQ $42, X1
	MOVO X3, X7
	PSLLQ $12, X3
	POR X1, X3
	MOVO X3, 672(BX)
	PSRLQ $52, X7
	MOVO 816(AX), X13
	MOVO 832(AX), X9
	MOVO 848(AX), X11
	MOVO 864(AX), X0
	PSLLQ $2, X13
	MOVO X9, X2
	PSLLQ $56, X9
	POR X7, X13
	POR X9, X13
	MOVO X13, 688(BX)
	PSRLQ $8, X2
	MOVO X11, X14
	PSLLQ $46, X11
	POR X2, X11
	MOVO X11, 704(BX)
	PSRLQ $18, X14
	MOVO X0, X4
	PSLLQ $36, X0
	POR X14, X0
	MOVO X0, 720(BX)
	PSRLQ $28, X4
	MOVO 880(AX), X5
	MOVO 896(AX), X8
	MOVO 912(AX), X15
	MOVO 928(AX), X6
	MOVO X5, X10
	PSLLQ $26, X5
	POR X4, X5
	MOVO X5, 736(BX)
	PSRLQ $38, X10
	MOVO X8, X12
	PSLLQ $16, X8
	POR X10, X8
	MOVO X8, 752(BX)
	PSRLQ $48, X12
	PSLLQ $6, X15
	MOVO X6, X1
	PSLLQ $60, X6
	POR X12, X15
	POR X6, X15
	MOVO X15, 768(BX)
	PSRLQ $4, X1
	MOVO 944(AX), X3
	MOVO 960(AX), X7
	MOVO 976(AX), X9
	MOVO 992(AX), X13
	MOVO X3, X2
	PSLLQ $50, X3
	POR X1, X3
	MOVO X3, 784(BX)
	PSRLQ $14, X2
	MOVO X7, X11
	PSLLQ $40, X7
	POR X2, X7
	MOVO X7, 800(BX)
	PSRLQ $24, X11
	MOVO X9, X14
	PSLLQ $30, X9
	POR X11, X9
	MOVO X9, 816(BX)
	PSRLQ $34, X14
	MOVO X13, X0
	PSLLQ $20, X13
	POR X14, X13
	MOVO X13, 832(BX)
	PSRLQ $44, X0
	MOVO 1008(AX), X4
	PSLLQ $10, X4
	POR X0, X4
	MOVO X4, 848(BX)
	RET

// func pack64_55(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_55(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $55, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $9, X4
	MOVO X3, X5
	PSLLQ $46, X3
	POR X4, X3
	MOVO X3, 16(BX)
	PSRLQ $18, X5
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	MOVO X6, X10
	PSLLQ $37, X6
	POR X5, X6
	MOVO X6, 32(BX)
	PSRLQ $27, X10
	MOVO X7, X11
	PSLLQ $28, X7
	POR X10, X7
	MOVO X7, 48(BX)
	PSRLQ $36, X11
	MOVO X8, X12
	PSLLQ $19, X8
	POR X11, X8
	MOVO X8, 64(BX)
	PSRLQ $45, X12
	MOVO X9, X13
	PSLLQ $10, X9
	POR X12, X9
	MOVO X9, 80(BX)
	PSRLQ $54, X13
	MOVO 112(AX), X14
	MOVO 128(AX), X15
	MOVO 144(AX), X0
	MOVO 160(AX), X1
	PSLLQ $1, X14
	MOVO X15, X2
	PSLLQ $56, X15
	POR X13, X14
	POR X15, X14
	MOVO X14, 96(BX)
	PSRLQ $8, X2
	MOVO X0, X4
	PSLLQ $47, X0
	POR X2, X0
	MOVO X0, 112(BX)
	PSRLQ $17, X4
	MOVO X1, X3
	PSLLQ $38, X1
	POR X4, X1
	MOVO X1, 128(BX)
	PSRLQ $26, X3
	MOVO 176(AX), X5
	MOVO 192(AX), X6
	MOVO 208(AX), X10
	MOVO 224(AX), X7
	MOVO X5, X11
	PSLLQ $29, X5
	POR X3, X5
	MOVO X5, 144(BX)
	PSRLQ $35, X11
	MOVO X6, X8
	PSLLQ $20, X6
	POR X11, X6
	MOVO X6, 160(BX)
	PSRLQ $44, X8
	MOVO X10, X12
	PSLLQ $11, X10
	POR X8, X10
	MOVO X10, 176(BX)
	PSRLQ $53, X12
	PSLLQ $2, X7
	MOVO 240(AX), X9
	MOVO 256(AX), X13
	MOVO 272(AX), X15
	MOVO 288(AX), X14
	MOVO X9, X2
	PSLLQ $57, X9
	POR X12, X7
	POR X9, X7
	MOVO X7, 192(BX)
	PSRLQ $7, X2
	MOVO X13, X0
	PSLLQ $48, X13
	POR X2, X13
	MOVO X13, 208(BX)
	PSRLQ $16, X0
	MOVO X15, X4
	PSLLQ $39, X15
	POR X0, X15
	MOVO X15, 224(BX)
	PSRLQ $25, X4
	MOVO X14, X1
	PSLLQ $30, X14
	POR X4, X14
	MOVO X14, 240(BX)
	PSRLQ $34, X1
	MOVO 304(AX), X3
	MOVO 320(AX), X5
	MOVO 336(AX), X11
	MOVO 352(AX), X6
	MOVO X3, X8
	PSLLQ $21, X3
	POR X1, X3
	MOVO X3, 256(BX)
	PSRLQ $43, X8
	MOVO X5, X10
	PSLLQ $12, X5
	POR X8, X5
	MOVO X5, 272(BX)
	PSRLQ $52, X10
	PSLLQ $3, X11
	MOVO X6, X12
	PSLLQ $58, X6
	POR X10, X11
	POR X6, X11
	MOVO X11, 288(BX)
	PSRLQ $6, X12
	MOVO 368(AX), X9
	MOVO 384(AX), X7
	MOVO 400(AX), X2
	MOVO 416(AX), X13
	MOVO X9, X0
	PSLLQ $49, X9
	POR X12, X9
	MOVO X9, 304(BX)
	PSRLQ $15, X0
	MOVO X7, X15
	PSLLQ $40, X7
	POR X0, X7
	MOVO X7, 320(BX)
	PSRLQ $24, X15
	MOVO X2, X4
	PSLLQ $31, X2
	POR X15, X2
	MOVO X2, 336(BX)
	PSRLQ $33, X4
	MOVO X13, X14
	PSLLQ $22, X13
	POR X4, X13
	MOVO X13, 352(BX)
	PSRLQ $42, X14
	MOVO 432(AX), X1
	MOVO 448(AX), X3
	MOVO 464(AX), X8
	MOVO 480(AX), X5
	MOVO X1, X10
	PSLLQ $13, X1
	POR X14, X1
	MOVO X1, 368(BX)
	PSRLQ $51, X10
	PSLLQ $4, X3
	MOVO X8, X6
	PSLLQ $59, X8
	POR X10, X3
	POR X8, X3
	MOVO X3, 384(BX)
	PSRLQ $5, X6
	MOVO X5, X11
	PSLLQ $50, X5
	POR X6, X5
	MOVO X5, 400(BX)
	PSRLQ $14, X11
	MOVO 496(AX), X12
	MOVO 512(AX), X9
	MOVO 528(AX), X0
	MOVO 544(AX), X7
	MOVO X12, X15
	PSLLQ $41, X12
	POR X11, X12
	MOVO X12, 416(BX)
	PSRLQ $23, X15
	MOVO X9, X2
	PSLLQ $32, X9
	POR X15, X9
	MOVO X9, 432(BX)
	PSRLQ $32, X2
	MOVO X0, X4
	PSLLQ $23, X0
	POR X2, X0
	MOVO X0, 448(BX)
	PSRLQ $41, X4
	MOVO X7, X13
	PSLLQ $14, X7
	POR X4, X7
	MOVO X7, 464(BX)
	PSRLQ $50, X13
	MOVO 560(AX), X14
	MOVO 576(AX), X1
	MOVO 592(AX), X10
	MOVO 608(AX), X8
	PSLLQ $5, X14
	MOVO X1, X3
	PSLLQ $60, X1
	POR X13, X14
	POR X1, X14
	MOVO X14, 480(BX)
	PSRLQ $4, X3
	MOVO X10, X6
	PSLLQ $51, X10
	POR X3, X10
	MOVO X10, 496(BX)
	PSRLQ $13, X6
	MOVO X8, X5
	PSLLQ $42, X8
	POR X6, X8
	MOVO X8, 512(BX)
	PSRLQ $22, X5
	MOVO 624(AX), X11
	MOVO 640(AX), X12
	MOVO 656(AX), X15
	MOVO 672(AX), X9
	MOVO X11, X2
	PSLLQ $33, X11
	POR X5, X11
	MOVO X11, 528(BX)
	PSRLQ $31, X2
	MOVO X12, X0
	PSLLQ $24, X12
	POR X2, X12
	MOVO X12, 544(BX)
	PSRLQ $40, X0
	MOVO X15, X4
	PSLLQ $15, X15
	POR X0, X15
	MOVO X15, 560(BX)
	PSRLQ $49, X4
	PSLLQ $6, X9
	MOVO 688(AX), X7
	MOVO 704(AX), X13
	MOVO 720(AX), X1
	MOVO 736(AX), X14
	MOVO X7, X3
	PSLLQ $61, X7
	POR X4, X9
	POR X7, X9
	MOVO X9, 576(BX)
	PSRLQ $3, X3
	MOVO X13, X10
	PSLLQ $52, X13
	POR X3, X13
	MOVO X13, 592(BX)
	PSRLQ $12, X10
	MOVO X1, X6
	PSLLQ $43, X1
	POR X10, X1
	MOVO X1, 608(BX)
	PSRLQ $21, X6
	MOVO X14, X8
	PSLLQ $34, X14
	POR X6, X14
	MOVO X14, 624(BX)
	PSRLQ $30, X8
	MOVO 752(AX), X5
	MOVO 768(AX), X11
	MOVO 784(AX), X2
	MOVO 800(AX), X12
	MOVO X5, X0
	PSLLQ $25, X5
	POR X8, X5
	MOVO X5, 640(BX)
	PSRLQ $39, X0
	MOVO X11, X15
	PSLLQ $16, X11
	POR X0, X11
	MOVO X11, 656(BX)
	PSRLQ $48, X15
	PSLLQ $7, X2
	MOVO X12, X4
	PSLLQ $62, X12
	POR X15, X2
	POR X12, X2
	MOVO X2, 672(BX)
	PSRLQ $2, X4
	MOVO 816(AX), X7
	MOVO 832(AX), X9
	MOVO 848(AX), X3
	MOVO 864(AX), X13
	MOVO X7, X10
	PSLLQ $53, X7
	POR X4, X7
	MOVO X7, 688(BX)
	PSRLQ $11, X10
	MOVO X9, X1
	PSLLQ $44, X9
	POR X10, X9
	MOVO X9, 704(BX)
	PSRLQ $20, X1
	MOVO X3, X6
	PSLLQ $35, X3
	POR X1, X3
	MOVO X3, 720(BX)
	PSRLQ $29, X6
	MOVO X13, X14
	PSLLQ $26, X13
	POR X6, X13
	MOVO X13, 736(BX)
	PSRLQ $38, X14
	MOVO 880(AX), X8
	MOVO 896(AX), X5
	MOVO 912(AX), X0
	MOVO 928(AX), X11
	MOVO X8, X15
	PSLLQ $17, X8
	POR X14, X8
	MOVO X8, 752(BX)
	PSRLQ $47, X15
	PSLLQ $8, X5
	MOVO X0, X12
	PSLLQ $63, X0
	POR X15, X5
	POR X0, X5
	MOVO X5, 768(BX)
	PSRLQ $1, X12
	MOVO X11, X2
	PSLLQ $54, X11
	POR X12, X11
	MOVO X11, 784(BX)
	PSRLQ $10, X2
	MOVO 944(AX), X4
	MOVO 960(AX), X7
	MOVO 976(AX), X10
	MOVO 992(AX), X9
	MOVO X4, X1
	PSLLQ $45, X4
	POR X2, X4
	MOVO X4, 800(BX)
	PSRLQ $19, X1
	MOVO X7, X3
	PSLLQ $36, X7
	POR X1, X7
	MOVO X7, 816(BX)
	PSRLQ $28, X3
	MOVO X10, X6
	PSLLQ $27, X10
	POR X3, X10
	MOVO X10, 832(BX)
	PSRLQ $37, X6
	MOVO X9, X13
	PSLLQ $18, X9
	POR X6, X9
	MOVO X9, 848(BX)
	PSRLQ $46, X13
	MOVO 1008(AX), X14
	PSLLQ $9, X14
	POR X13, X14
	MOVO X14, 864(BX)
	RET

// func pack64_56(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_56(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $56, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $8, X4
	MOVO X3, X5
	PSLLQ $48, X3
	POR X4, X3
	MOVO X3, 16(BX)
	PSRLQ $16, X5
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	MOVO X6, X10
	PSLLQ $40, X6
	POR X5, X6
	MOVO X6, 32(BX)
	PSRLQ $24, X10
	MOVO X7, X11
	PSLLQ $32, X7
	POR X10, X7
	MOVO X7, 48(BX)
	PSRLQ $32, X11
	MOVO X8, X12
	PSLLQ $24, X8
	POR X11, X8
	MOVO X8, 64(BX)
	PSRLQ $40, X12
	MOVO X9, X13
	PSLLQ $16, X9
	POR X12, X9
	MOVO X9, 80(BX)
	PSRLQ $48, X13
	MOVO 112(AX), X14
	MOVO 128(AX), X15
	MOVO 144(AX), X0
	MOVO 160(AX), X1
	PSLLQ $8, X14
	POR X13, X14
	MOVO X14, 96(BX)
	MOVO X0, X2
	PSLLQ $56, X0
	POR X15, X0
	MOVO X0, 112(BX)
	PSRLQ $8, X2
	MOVO X1, X4
	PSLLQ $48, X1
	POR X2, X1
	MOVO X1, 128(BX)
	PSRLQ $16, X4
	MOVO 176(AX), X3
	MOVO 192(AX), X5
	MOVO 208(AX), X6
	MOVO 224(AX), X10
	MOVO X3, X7
	PSLLQ $40, X3
	POR X4, X3
	MOVO X3, 144(BX)
	PSRLQ $24, X7
	MOVO X5, X11
	PSLLQ $32, X5
	POR X7, X5
	MOVO X5, 160(BX)
	PSRLQ $32, X11
	MOVO X6, X8
	PSLLQ $24, X6
	POR X11, X6
	MOVO X6, 176(BX)
	PSRLQ $40, X8
	MOVO X10, X12
	PSLLQ $16, X10
	POR X8, X10
	MOVO X10, 192(BX)
	PSRLQ $48, X12
	MOVO 240(AX), X9
	MOVO 256(AX), X13
	MOVO 272(AX), X14
	MOVO 288(AX), X15
	PSLLQ $8, X9
	POR X12, X9
	MOVO X9, 208(BX)
	MOVO X14, X0
	PSLLQ $56, X14
	POR X13, X14
	MOVO X14, 224(BX)
	PSRLQ $8, X0
	MOVO X15, X2
	PSLLQ $48, X15
	POR X0, X15
	MOVO X15, 240(BX)
	PSRLQ $16, X2
	MOVO 304(AX), X1
	MOVO 320(AX), X4
	MOVO 336(AX), X3
	MOVO 352(AX), X7
	MOVO X1, X5
	PSLLQ $40, X1
	POR X2, X1
	MOVO X1, 256(BX)
	PSRLQ $24, X5
	MOVO X4, X11
	PSLLQ $32, X4
	POR X5, X4
	MOVO X4, 272(BX)
	PSRLQ $32, X11
	MOVO X3, X6
	PSLLQ $24, X3
	POR X11, X3
	MOVO X3, 288(BX)
	PSRLQ $40, X6
	MOVO X7, X8
	PSLLQ $16, X7
	POR X6, X7
	MOVO X7, 304(BX)
	PSRLQ $48, X8
	MOVO 368(AX), X10
	MOVO 384(AX), X12
	MOVO 400(AX), X9
	MOVO 416(AX), X13
	PSLLQ $8, X10
	POR X8, X10
	MOVO X10, 320(BX)
	MOVO X9, X14
	PSLLQ $56, X9
	POR X12, X9
	MOVO X9, 336(BX)
	PSRLQ $8, X14
	MOVO X13, X0
	PSLLQ $48, X13
	POR X14, X13
	MOVO X13, 352(BX)
	PSRLQ $16, X0
	MOVO 432(AX), X15
	MOVO 448(AX), X2
	MOVO 464(AX), X1
	MOVO 480(AX), X5
	MOVO X15, X4
	PSLLQ $40, X15
	POR X0, X15
	MOVO X15, 368(BX)
	PSRLQ $24, X4
	MOVO X2, X11
	PSLLQ $32, X2
	POR X4, X2
	MOVO X2, 384(BX)
	PSRLQ $32, X11
	MOVO X1, X3
	PSLLQ $24, X1
	POR X11, X1
	MOVO X1, 400(BX)
	PSRLQ $40, X3
	MOVO X5, X6
	PSLLQ $16, X5
	POR X3, X5
	MOVO X5, 416(BX)
	PSRLQ $48, X6
	MOVO 496(AX), X7
	MOVO 512(AX), X8
	MOVO 528(AX), X10
	MOVO 544(AX), X12
	PSLLQ $8, X7
	POR X6, X7
	MOVO X7, 432(BX)
	MOVO X10, X9
	PSLLQ $56, X10
	POR X8, X10
	MOVO X10, 448(BX)
	PSRLQ $8, X9
	MOVO X12, X14
	PSLLQ $48, X12
	POR X9, X12
	MOVO X12, 464(BX)
	PSRLQ $16, X14
	MOVO 560(AX), X13
	MOVO 576(AX), X0
	MOVO 592(AX), X15
	MOVO 608(AX), X4
	MOVO X13, X2
	PSLLQ $40, X13
	POR X14, X13
	MOVO X13, 480(BX)
	PSRLQ $24, X2
	MOVO X0, X11
	PSLLQ $32, X0
	POR X2, X0
	MOVO X0, 496(BX)
	PSRLQ $32, X11
	MOVO X15, X1
	PSLLQ $24, X15
	POR X11, X15
	MOVO X15, 512(BX)
	PSRLQ $40, X1
	MOVO X4, X3
	PSLLQ $16, X4
	POR X1, X4
	MOVO X4, 528(BX)
	PSRLQ $48, X3
	MOVO 624(AX), X5
	MOVO 640(AX), X6
	MOVO 656(AX), X7
	MOVO 672(AX), X8
	PSLLQ $8, X5
	POR X3, X5
	MOVO X5, 544(BX)
	MOVO X7, X10
	PSLLQ $56, X7
	POR X6, X7
	MOVO X7, 560(BX)
	PSRLQ $8, X10
	MOVO X8, X9
	PSLLQ $48, X8
	POR X10, X8
	MOVO X8, 576(BX)
	PSRLQ $16, X9
	MOVO 688(AX), X12
	MOVO 704(AX), X14
	MOVO 720(AX), X13
	MOVO 736(AX), X2
	MOVO X12, X0
	PSLLQ $40, X12
	POR X9, X12
	MOVO X12, 592(BX)
	PSRLQ $24, X0
	MOVO X14, X11
	PSLLQ $32, X14
	POR X0, X14
	MOVO X14, 608(BX)
	PSRLQ $32, X11
	MOVO X13, X15
	PSLLQ $24, X13
	POR X11, X13
	MOVO X13, 624(BX)
	PSRLQ $40, X15
	MOVO X2, X1
	PSLLQ $16, X2
	POR X15, X2
	MOVO X2, 640(BX)
	PSRLQ $48, X1
	MOVO 752(AX), X4
	MOVO 768(AX), X3
	MOVO 784(AX), X5
	MOVO 800(AX), X6
	PSLLQ $8, X4
	POR X1, X4
	MOVO X4, 656(BX)
	MOVO X5, X7
	PSLLQ $56, X5
	POR X3, X5
	MOVO X5, 672(BX)
	PSRLQ $8, X7
	MOVO X6, X10
	PSLLQ $48, X6
	POR X7, X6
	MOVO X6, 688(BX)
	PSRLQ $16, X10
	MOVO 816(AX), X8
	MOVO 832(AX), X9
	MOVO 848(AX), X12
	MOVO 864(AX), X0
	MOVO X8, X14
	PSLLQ $40, X8
	POR X10, X8
	MOVO X8, 704(BX)
	PSRLQ $24, X14
	MOVO X9, X11
	PSLLQ $32, X9
	POR X14, X9
	MOVO X9, 720(BX)
	PSRLQ $32, X11
	MOVO X12, X13
	PSLLQ $24, X12
	POR X11, X12
	MOVO X12, 736(BX)
	PSRLQ $40, X13
	MOVO X0, X15
	PSLLQ $16, X0
	POR X13, X0
	MOVO X0, 752(BX)
	PSRLQ $48, X15
	MOVO 880(AX), X2
	MOVO 896(AX), X1
	MOVO 912(AX), X4
	MOVO 928(AX), X3
	PSLLQ $8, X2
	POR X15, X2
	MOVO X2, 768(BX)
	MOVO X4, X5
	PSLLQ $56, X4
	POR X1, X4
	MOVO X4, 784(BX)
	PSRLQ $8, X5
	MOVO X3, X7
	PSLLQ $48, X3
	POR X5, X3
	MOVO X3, 800(BX)
	PSRLQ $16, X7
	MOVO 944(AX), X6
	MOVO 960(AX), X10
	MOVO 976(AX), X8
	MOVO 992(AX), X14
	MOVO X6, X9
	PSLLQ $40, X6
	POR X7, X6
	MOVO X6, 816(BX)
	PSRLQ $24, X9
	MOVO X10, X11
	PSLLQ $32, X10
	POR X9, X10
	MOVO X10, 832(BX)
	PSRLQ $32, X11
	MOVO X8, X12
	PSLLQ $24, X8
	POR X11, X8
	MOVO X8, 848(BX)
	PSRLQ $40, X12
	MOVO X14, X13
	PSLLQ $16, X14
	POR X12, X14
	MOVO X14, 864(BX)
	PSRLQ $48, X13
	MOVO 1008(AX), X0
	PSLLQ $8, X0
	POR X13, X0
	MOVO X0, 880(BX)
	RET

// func pack64_57(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_57(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $57, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $7, X4
	MOVO X3, X5
	PSLLQ $50, X3
	POR X4, X3
	MOVO X3, 16(BX)
	PSRLQ $14, X5
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	MOVO X6, X10
	PSLLQ $43, X6
	POR X5, X6
	MOVO X6, 32(BX)
	PSRLQ $21, X10
	MOVO X7, X11
	PSLLQ $36, X7
	POR X10, X7
	MOVO X7, 48(BX)
	PSRLQ $28, X11
	MOVO X8, X12
	PSLLQ $29, X8
	POR X11, X8
	MOVO X8, 64(BX)
	PSRLQ $35, X12
	MOVO X9, X13
	PSLLQ $22, X9
	POR X12, X9
	MOVO X9, 80(BX)
	PSRLQ $42, X13
	MOVO 112(AX), X14
	MOVO 128(AX), X15
	MOVO 144(AX), X0
	MOVO 160(AX), X1
	MOVO X14, X2
	PSLLQ $15, X14
	POR X13, X14
	MOVO X14, 96(BX)
	PSRLQ $49, X2
	MOVO X15, X4
	PSLLQ $8, X15
	POR X2, X15
	MOVO X15, 112(BX)
	PSRLQ $56, X4
	PSLLQ $1, X0
	MOVO X1, X3
	PSLLQ $58, X1
	POR X4, X0
	POR X1, X0
	MOVO X0, 128(BX)
	PSRLQ $6, X3
	MOVO 176(AX), X5
	MOVO 192(AX), X6
	MOVO 208(AX), X10
	MOVO 224(AX), X7
	MOVO X5, X11
	PSLLQ $51, X5
	POR X3, X5
	MOVO X5, 144(BX)
	PSRLQ $13, X11
	MOVO X6, X8
	PSLLQ $44, X6
	POR X11, X6
	MOVO X6, 160(BX)
	PSRLQ $20, X8
	MOVO X10, X12
	PSLLQ $37, X10
	POR X8, X10
	MOVO X10, 176(BX)
	PSRLQ $27, X12
	MOVO X7, X9
	PSLLQ $30, X7
	POR X12, X7
	MOVO X7, 192(BX)
	PSRLQ $34, X9
	MOVO 240(AX), X13
	MOVO 256(AX), X14
	MOVO 272(AX), X2
	MOVO 288(AX), X15
	MOVO X13, X4
	PSLLQ $23, X13
	POR X9, X13
	MOVO X13, 208(BX)
	PSRLQ $41, X4
	MOVO X14, X1
	PSLLQ $16, X14
	POR X4, X14
	MOVO X14, 224(BX)
	PSRLQ $48, X1
	MOVO X2, X0
	PSLLQ $9, X2
	POR X1, X2
	MOVO X2, 240(BX)
	PSRLQ $55, X0
	PSLLQ $2, X15
	MOVO 304(AX), X3
	MOVO 320(AX), X5
	MOVO 336(AX), X11
	MOVO 352(AX), X6
	MOVO X3, X8
	PSLLQ $59, X3
	POR X0, X15
	POR X3, X15
	MOVO X15, 256(BX)
	PSRLQ $5, X8
	MOVO X5, X10
	PSLLQ $52, X5
	POR X8, X5
	MOVO X5, 272(BX)
	PSRLQ $12, X10
	MOVO X11, X12
	PSLLQ $45, X11
	POR X10, X11
	MOVO X11, 288(BX)
	PSRLQ $19, X12
	MOVO X6, X7
	PSLLQ $38, X6
	POR X12, X6
	MOVO X6, 304(BX)
	PSRLQ $26, X7
	MOVO 368(AX), X9
	MOVO 384(AX), X13
	MOVO 400(AX), X4
	MOVO 416(AX), X14
	MOVO X9, X1
	PSLLQ $31, X9
	POR X7, X9
	MOVO X9, 320(BX)
	PSRLQ $33, X1
	MOVO X13, X2
	PSLLQ $24, X13
	POR X1, X13
	MOVO X13, 336(BX)
	PSRLQ $40, X2
	MOVO X4, X0
	PSLLQ $17, X4
	POR X2, X4
	MOVO X4, 352(BX)
	PSRLQ $47, X0
	MOVO X14, X3
	PSLLQ $10, X14
	POR X0, X14
	MOVO X14, 368(BX)
	PSRLQ $54, X3
	MOVO 432(AX), X15
	MOVO 448(AX), X8
	MOVO 464(AX), X5
	MOVO 480(AX), X10
	PSLLQ $3, X15
	MOVO X8, X11
	PSLLQ $60, X8
	POR X3, X15
	POR X8, X15
	MOVO X15, 384(BX)
	PSRLQ $4, X11
	MOVO X5, X12
	PSLLQ $53, X5
	POR X11, X5
	MOVO X5, 400(BX)
	PSRLQ $11, X12
	MOVO X10, X6
	PSLLQ $46, X10
	POR X12, X10
	MOVO X10, 416(BX)
	PSRLQ $18, X6
	MOVO 496(AX), X7
	MOVO 512(AX), X9
	MOVO 528(AX), X1
	MOVO 544(AX), X13
	MOVO X7, X2
	PSLLQ $39, X7
	POR X6, X7
	MOVO X7, 432(BX)
	PSRLQ $25, X2
	MOVO X9, X4
	PSLLQ $32, X9
	POR X2, X9
	MOVO X9, 448(BX)
	PSRLQ $32, X4
	MOVO X1, X0
	PSLLQ $25, X1
	POR X4, X1
	MOVO X1, 464(BX)
	PSRLQ $39, X0
	MOVO X13, X14
	PSLLQ $18, X13
	POR X0, X13
	MOVO X13, 480(BX)
	PSRLQ $46, X14
	MOVO 560(AX), X3
	MOVO 576(AX), X8
	MOVO 592(AX), X15
	MOVO 608(AX), X11
	MOVO X3, X5
	PSLLQ $11, X3
	POR X14, X3
	MOVO X3, 496(BX)
	PSRLQ $53, X5
	PSLLQ $4, X8
	MOVO X15, X12
	PSLLQ $61, X15
	POR X5, X8
	POR X15, X8
	MOVO X8, 512(BX)
	PSRLQ $3, X12
	MOVO X11, X10
	PSLLQ $54, X11
	POR X12, X11
	MOVO X11, 528(BX)
	PSRLQ $10, X10
	MOVO 624(AX), X6
	MOVO 640(AX), X7
	MOVO 656(AX), X2
	MOVO 672(AX), X9
	MOVO X6, X4
	PSLLQ $47, X6
	POR X10, X6
	MOVO X6, 544(BX)
	PSRLQ $17, X4
	MOVO X7, X1
	PSLLQ $40, X7
	POR X4, X7
	MOVO X7, 560(BX)
	PSRLQ $24, X1
	MOVO X2, X0
	PSLLQ $33, X2
	POR X1, X2
	MOVO X2, 576(BX)
	PSRLQ $31, X0
	MOVO X9, X13
	PSLLQ $26, X9
	POR X0, X9
	MOVO X9, 592(BX)
	PSRLQ $38, X13
	MOVO 688(AX), X14
	MOVO 704(AX), X3
	MOVO 720(AX), X5
	MOVO 736(AX), X15
	MOVO X14, X8
	PSLLQ $19, X14
	POR X13, X14
	MOVO X14, 608(BX)
	PSRLQ $45, X8
	MOVO X3, X12
	PSLLQ $12, X3
	POR X8, X3
	MOVO X3, 624(BX)
	PSRLQ $52, X12
	PSLLQ $5, X5
	MOVO X15, X11
	PSLLQ $62, X15
	POR X12, X5
	POR X15, X5
	MOVO X5, 640(BX)
	PSRLQ $2, X11
	MOVO 752(AX), X10
	MOVO 768(AX), X6
	MOVO 784(AX), X4
	MOVO 800(AX), X7
	MOVO X10, X1
	PSLLQ $55, X10
	POR X11, X10
	MOVO X10, 656(BX)
	PSRLQ $9, X1
	MOVO X6, X2
	PSLLQ $48, X6
	POR X1, X6
	MOVO X6, 672(BX)
	PSRLQ $16, X2
	MOVO X4, X0
	PSLLQ $41, X4
	POR X2, X4
	MOVO X4, 688(BX)
	PSRLQ $23, X0
	MOVO X7, X9
	PSLLQ $34, X7
	POR X0, X7
	MOVO X7, 704(BX)
	PSRLQ $30, X9
	MOVO 816(AX), X13
	MOVO 832(AX), X14
	MOVO 848(AX), X8
	MOVO 864(AX), X3
	MOVO X13, X12
	PSLLQ $27, X13
	POR X9, X13
	MOVO X13, 720(BX)
	PSRLQ $37, X12
	MOVO X14, X15
	PSLLQ $20, X14
	POR X12, X14
	MOVO X14, 736(BX)
	PSRLQ $44, X15
	MOVO X8, X5
	PSLLQ $13, X8
	POR X15, X8
	MOVO X8, 752(BX)
	PSRLQ $51, X5
	PSLLQ $6, X3
	MOVO 880(AX), X11
	MOVO 896(AX), X10
	MOVO 912(AX), X1
	MOVO 928(AX), X6
	MOVO X11, X2
	PSLLQ $63, X11
	POR X5, X3
	POR X11, X3
	MOVO X3, 768(BX)
	PSRLQ $1, X2
	MOVO X10, X4
	PSLLQ $56, X10
	POR X2, X10
	MOVO X10, 784(BX)
	PSRLQ $8, X4
	MOVO X1, X0
	PSLLQ $49, X1
	POR X4, X1
	MOVO X1, 800(BX)
	PSRLQ $15, X0
	MOVO X6, X7
	PSLLQ $42, X6
	POR X0, X6
	MOVO X6, 816(BX)
	PSRLQ $22, X7
	MOVO 944(AX), X9
	MOVO 960(AX), X13
	MOVO 976(AX), X12
	MOVO 992(AX), X14
	MOVO X9, X15
	PSLLQ $35, X9
	POR X7, X9
	MOVO X9, 832(BX)
	PSRLQ $29, X15
	MOVO X13, X8
	PSLLQ $28, X13
	POR X15, X13
	MOVO X13, 848(BX)
	PSRLQ $36, X8
	MOVO X12, X5
	PSLLQ $21, X12
	POR X8, X12
	MOVO X12, 864(BX)
	PSRLQ $43, X5
	MOVO X14, X11
	PSLLQ $14, X14
	POR X5, X14
	MOVO X14, 880(BX)
	PSRLQ $50, X11
	MOVO 1008(AX), X3
	PSLLQ $7, X3
	POR X11, X3
	MOVO X3, 896(BX)
	RET

// func pack64_58(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_58(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $58, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $6, X4
	MOVO X3, X5
	PSLLQ $52, X3
	POR X4, X3
	MOVO X3, 16(BX)
	PSRLQ $12, X5
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	MOVO X6, X10
	PSLLQ $46, X6
	POR X5, X6
	MOVO X6, 32(BX)
	PSRLQ $18, X10
	MOVO X7, X11
	PSLLQ $40, X7
	POR X10, X7
	MOVO X7, 48(BX)
	PSRLQ $24, X11
	MOVO X8, X12
	PSLLQ $34, X8
	POR X11, X8
	MOVO X8, 64(BX)
	PSRLQ $30, X12
	MOVO X9, X13
	PSLLQ $28, X9
	POR X12, X9
	MOVO X9, 80(BX)
	PSRLQ $36, X13
	MOVO 112(AX), X14
	MOVO 128(AX), X15
	MOVO 144(AX), X0
	MOVO 160(AX), X1
	MOVO X14, X2
	PSLLQ $22, X14
	POR X13, X14
	MOVO X14, 96(BX)
	PSRLQ $42, X2
	MOVO X15, X4
	PSLLQ $16, X15
	POR X2, X15
	MOVO X15, 112(BX)
	PSRLQ $48, X4
	MOVO X0, X3
	PSLLQ $10, X0
	POR X4, X0
	MOVO X0, 128(BX)
	PSRLQ $54, X3
	PSLLQ $4, X1
	MOVO 176(AX), X5
	MOVO 192(AX), X6
	MOVO 208(AX), X10
	MOVO 224(AX), X7
	MOVO X5, X11
	PSLLQ $62, X5
	POR X3, X1
	POR X5, X1
	MOVO X1, 144(BX)
	PSRLQ $2, X11
	MOVO X6, X8
	PSLLQ $56, X6
	POR X11, X6
	MOVO X6, 160(BX)
	PSRLQ $8, X8
	MOVO X10, X12
	PSLLQ $50, X10
	POR X8, X10
	MOVO X10, 176(BX)
	PSRLQ $14, X12
	MOVO X7, X9
	PSLLQ $44, X7
	POR X12, X7
	MOVO X7, 192(BX)
	PSRLQ $20, X9
	MOVO 240(AX), X13
	MOVO 256(AX), X14
	MOVO 272(AX), X2
	MOVO 288(AX), X15
	MOVO X13, X4
	PSLLQ $38, X13
	POR X9, X13
	MOVO X13, 208(BX)
	PSRLQ $26, X4
	MOVO X14, X0
	PSLLQ $32, X14
	POR X4, X14
	MOVO X14, 224(BX)
	PSRLQ $32, X0
	MOVO X2, X3
	PSLLQ $26, X2
	POR X0, X2
	MOVO X2, 240(BX)
	PSRLQ $38, X3
	MOVO X15, X5
	PSLLQ $20, X15
	POR X3, X15
	MOVO X15, 256(BX)
	PSRLQ $44, X5
	MOVO 304(AX), X1
	MOVO 320(AX), X11
	MOVO 336(AX), X6
	MOVO 352(AX), X8
	MOVO X1, X10
	PSLLQ $14, X1
	POR X5, X1
	MOVO X1, 272(BX)
	PSRLQ $50, X10
	MOVO X11, X12
	PSLLQ $8, X11
	POR X10, X11
	MOVO X11, 288(BX)
	PSRLQ $56, X12
	PSLLQ $2, X6
	MOVO X8, X7
	PSLLQ $60, X8
	POR X12, X6
	POR X8, X6
	MOVO X6, 304(BX)
	PSRLQ $4, X7
	MOVO 368(AX), X9
	MOVO 384(AX), X13
	MOVO 400(AX), X4
	MOVO 416(AX), X14
	MOVO X9, X0
	PSLLQ $54, X9
	POR X7, X9
	MOVO X9, 320(BX)
	PSRLQ $10, X0
	MOVO X13, X2
	PSLLQ $48, X13
	POR X0, X13
	MOVO X13, 336(BX)
	PSRLQ $16, X2
	MOVO X4, X3
	PSLLQ $42, X4
	POR X2, X4
	MOVO X4, 352(BX)
	PSRLQ $22, X3
	MOVO X14, X15
	PSLLQ $36, X14
	POR X3, X14
	MOVO X14, 368(BX)
	PSRLQ $28, X15
	MOVO 432(AX), X5
	MOVO 448(AX), X1
	MOVO 464(AX), X10
	MOVO 480(AX), X11
	MOVO X5, X12
	PSLLQ $30, X5
	POR X15, X5
	MOVO X5, 384(BX)
	PSRLQ $34, X12
	MOVO X1, X8
	PSLLQ $24, X1
	POR X12, X1
	MOVO X1, 400(BX)
	PSRLQ $40, X8
	MOVO X10, X6
	PSLLQ $18, X10
	POR X8, X10
	MOVO X10, 416(BX)
	PSRLQ $46, X6
	MOVO X11, X7
	PSLLQ $12, X11
	POR X6, X11
	MOVO X11, 432(BX)
	PSRLQ $52, X7
	MOVO 496(AX), X9
	MOVO 512(AX), X0
	MOVO 528(AX), X13
	MOVO 544(AX), X2
	PSLLQ $6, X9
	POR X7, X9
	MOVO X9, 448(BX)
	MOVO X13, X4
	PSLLQ $58, X13
	POR X0, X13
	MOVO X13, 464(BX)
	PSRLQ $6, X4
	MOVO X2, X3
	PSLLQ $52, X2
	POR X4, X2
	MOVO X2, 480(BX)
	PSRLQ $12, X3
	MOVO 560(AX), X14
	MOVO 576(AX), X15
	MOVO 592(AX), X5
	MOVO 608(AX), X12
	MOVO X14, X1
	PSLLQ $46, X14
	POR X3, X14
	MOVO X14, 496(BX)
	PSRLQ $18, X1
	MOVO X15, X8
	PSLLQ $40, X15
	POR X1, X15
	MOVO X15, 512(BX)
	PSRLQ $24, X8
	MOVO X5, X10
	PSLLQ $34, X5
	POR X8, X5
	MOVO X5, 528(BX)
	PSRLQ $30, X10
	MOVO X12, X6
	PSLLQ $28, X12
	POR X10, X12
	MOVO X12, 544(BX)
	PSRLQ $36, X6
	MOVO 624(AX), X11
	MOVO 640(AX), X7
	MOVO 656(AX), X9
	MOVO 672(AX), X0
	MOVO X11, X13
	PSLLQ $22, X11
	POR X6, X11
	MOVO X11, 560(BX)
	PSRLQ $42, X13
	MOVO X7, X4
	PSLLQ $16, X7
	POR X13, X7
	MOVO X7, 576(BX)
	PSRLQ $48, X4
	MOVO X9, X2
	PSLLQ $10, X9
	POR X4, X9
	MOVO X9, 592(BX)
	PSRLQ $54, X2
	PSLLQ $4, X0
	MOVO 688(AX), X3
	MOVO 704(AX), X14
	MOVO 720(AX), X1
	MOVO 736(AX), X15
	MOVO X3, X8
	PSLLQ $62, X3
	POR X2, X0
	POR X3, X0
	MOVO X0, 608(BX)
	PSRLQ $2, X8
	MOVO X14, X5
	PSLLQ $56, X14
	POR X8, X14
	MOVO X14, 624(BX)
	PSRLQ $8, X5
	MOVO X1, X10
	PSLLQ $50, X1
	POR X5, X1
	MOVO X1, 640(BX)
	PSRLQ $14, X10
	MOVO X15, X12
	PSLLQ $44, X15
	POR X10, X15
	MOVO X15, 656(BX)
	PSRLQ $20, X12
	MOVO 752(AX), X6
	MOVO 768(AX), X11
	MOVO 784(AX), X13
	MOVO 800(AX), X7
	MOVO X6, X4
	PSLLQ $38, X6
	POR X12, X6
	MOVO X6, 672(BX)
	PSRLQ $26, X4
	MOVO X11, X9
	PSLLQ $32, X11
	POR X4, X11
	MOVO X11, 688(BX)
	PSRLQ $32, X9
	MOVO X13, X2
	PSLLQ $26, X13
	POR X9, X13
	MOVO X13, 704(BX)
	PSRLQ $38, X2
	MOVO X7, X3
	PSLLQ $20, X7
	POR X2, X7
	MOVO X7, 720(BX)
	PSRLQ $44, X3
	MOVO 816(AX), X0
	MOVO 832(AX), X8
	MOVO 848(AX), X14
	MOVO 864(AX), X5
	MOVO X0, X1
	PSLLQ $14, X0
	POR X3, X0
	MOVO X0, 736(BX)
	PSRLQ $50, X1
	MOVO X8, X10
	PSLLQ $8, X8
	POR X1, X8
	MOVO X8, 752(BX)
	PSRLQ $56, X10
	PSLLQ $2, X14
	MOVO X5, X15
	PSLLQ $60, X5
	POR X10, X14
	POR X5, X14
	MOVO X14, 768(BX)
	PSRLQ $4, X15
	MOVO 880(AX), X12
	MOVO 896(AX), X6
	MOVO 912(AX), X4
	MOVO 928(AX), X11
	MOVO X12, X9
	PSLLQ $54, X12
	POR X15, X12
	MOVO X12, 784(BX)
	PSRLQ $10, X9
	MOVO X6, X13
	PSLLQ $48, X6
	POR X9, X6
	MOVO X6, 800(BX)
	PSRLQ $16, X13
	MOVO X4, X2
	PSLLQ $42, X4
	POR X13, X4
	MOVO X4, 816(BX)
	PSRLQ $22, X2
	MOVO X11, X7
	PSLLQ $36, X11
	POR X2, X11
	MOVO X11, 832(BX)
	PSRLQ $28, X7
	MOVO 944(AX), X3
	MOVO 960(AX), X0
	MOVO 976(AX), X1
	MOVO 992(AX), X8
	MOVO X3, X10
	PSLLQ $30, X3
	POR X7, X3
	MOVO X3, 848(BX)
	PSRLQ $34, X10
	MOVO X0, X5
	PSLLQ $24, X0
	POR X10, X0
	MOVO X0, 864(BX)
	PSRLQ $40, X5
	MOVO X1, X14
	PSLLQ $18, X1
	POR X5, X1
	MOVO X1, 880(BX)
	PSRLQ $46, X14
	MOVO X8, X15
	PSLLQ $12, X8
	POR X14, X8
	MOVO X8, 896(BX)
	PSRLQ $52, X15
	MOVO 1008(AX), X12
	PSLLQ $6, X12
	POR X15, X12
	MOVO X12, 912(BX)
	RET

// func pack64_59(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_59(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $59, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $5, X4
	MOVO X3, X5
	PSLLQ $54, X3
	POR X4, X3
	MOVO X3, 16(BX)
	PSRLQ $10, X5
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	MOVO X6, X10
	PSLLQ $49, X6
	POR X5, X6
	MOVO X6, 32(BX)
	PSRLQ $15, X10
	MOVO X7, X11
	PSLLQ $44, X7
	POR X10, X7
	MOVO X7, 48(BX)
	PSRLQ $20, X11
	MOVO X8, X12
	PSLLQ $39, X8
	POR X11, X8
	MOVO X8, 64(BX)
	PSRLQ $25, X12
	MOVO X9, X13
	PSLLQ $34, X9
	POR X12, X9
	MOVO X9, 80(BX)
	PSRLQ $30, X13
	MOVO 112(AX), X14
	MOVO 128(AX), X15
	MOVO 144(AX), X0
	MOVO 160(AX), X1
	MOVO X14, X2
	PSLLQ $29, X14
	POR X13, X14
	MOVO X14, 96(BX)
	PSRLQ $35, X2
	MOVO X15, X4
	PSLLQ $24, X15
	POR X2, X15
	MOVO X15, 112(BX)
	PSRLQ $40, X4
	MOVO X0, X3
	PSLLQ $19, X0
	POR X4, X0
	MOVO X0, 128(BX)
	PSRLQ $45, X3
	MOVO X1, X5
	PSLLQ $14, X1
	POR X3, X1
	MOVO X1, 144(BX)
	PSRLQ $50, X5
	MOVO 176(AX), X6
	MOVO 192(AX), X10
	MOVO 208(AX), X7
	MOVO 224(AX), X11
	MOVO X6, X8
	PSLLQ $9, X6
	POR X5, X6
	MOVO X6, 160(BX)
	PSRLQ $55, X8
	PSLLQ $4, X10
	MOVO X7, X12
	PSLLQ $63, X7
	POR X8, X10
	POR X7, X10
	MOVO X10, 176(BX)
	PSRLQ $1, X12
	MOVO X11, X9
	PSLLQ $58, X11
	POR X12, X11
	MOVO X11, 192(BX)
	PSRLQ $6, X9
	MOVO 240(AX), X13
	MOVO 256(AX), X14
	MOVO 272(AX), X2
	MOVO 288(AX), X15
	MOVO X13, X4
	PSLLQ $53, X13
	POR X9, X13
	MOVO X13, 208(BX)
	PSRLQ $11, X4
	MOVO X14, X0
	PSLLQ $48, X14
	POR X4, X14
	MOVO X14, 224(BX)
	PSRLQ $16, X0
	MOVO X2, X3
	PSLLQ $43, X2
	POR X0, X2
	MOVO X2, 240(BX)
	PSRLQ $21, X3
	MOVO X15, X1
	PSLLQ $38, X15
	POR X3, X15
	MOVO X15, 256(BX)
	PSRLQ $26, X1
	MOVO 304(AX), X5
	MOVO 320(AX), X6
	MOVO 336(AX), X8
	MOVO 352(AX), X7
	MOVO X5, X10
	PSLLQ $33, X5
	POR X1, X5
	MOVO X5, 272(BX)
	PSRLQ $31, X10
	MOVO X6, X12
	PSLLQ $28, X6
	POR X10, X6
	MOVO X6, 288(BX)
	PSRLQ $36, X12
	MOVO X8, X11
	PSLLQ $23, X8
	POR X12, X8
	MOVO X8, 304(BX)
	PSRLQ $41, X11
	MOVO X7, X9
	PSLLQ $18, X7
	POR X11, X7
	MOVO X7, 320(BX)
	PSRLQ $46, X9
	MOVO 368(AX), X13
	MOVO 384(AX), X4
	MOVO 400(AX), X14
	MOVO 416(AX), X0
	MOVO X13, X2
	PSLLQ $13, X13
	POR X9, X13
	MOVO X13, 336(BX)
	PSRLQ $51, X2
	MOVO X4, X3
	PSLLQ $8, X4
	POR X2, X4
	MOVO X4, 352(BX)
	PSRLQ $56, X3
	PSLLQ $3, X14
	MOVO X0, X15
	PSLLQ $62, X0
	POR X3, X14
	POR X0, X14
	MOVO X14, 368(BX)
	PSRLQ $2, X15
	MOVO 432(AX), X1
	MOVO 448(AX), X5
	MOVO 464(AX), X10
	MOVO 480(AX), X6
	MOVO X1, X12
	PSLLQ $57, X1
	POR X15, X1
	MOVO X1, 384(BX)
	PSRLQ $7, X12
	MOVO X5, X8
	PSLLQ $52, X5
	POR X12, X5
	MOVO X5, 400(BX)
	PSRLQ $12, X8
	MOVO X10, X11
	PSLLQ $47, X10
	POR X8, X10
	MOVO X10, 416(BX)
	PSRLQ $17, X11
	MOVO X6, X7
	PSLLQ $42, X6
	POR X11, X6
	MOVO X6, 432(BX)
	PSRLQ $22, X7
	MOVO 496(AX), X9
	MOVO 512(AX), X13
	MOVO 528(AX), X2
	MOVO 544(AX), X4
	MOVO X9, X3
	PSLLQ $37, X9
	POR X7, X9
	MOVO X9, 448(BX)
	PSRLQ $27, X3
	MOVO X13, X0
	PSLLQ $32, X13
	POR X3, X13
	MOVO X13, 464(BX)
	PSRLQ $32, X0
	MOVO X2, X14
	PSLLQ $27, X2
	POR X0, X2
	MOVO X2, 480(BX)
	PSRLQ $37, X14
	MOVO X4, X15
	PSLLQ $22, X4
	POR X14, X4
	MOVO X4, 496(BX)
	PSRLQ $42, X15
	MOVO 560(AX), X1
	MOVO 576(AX), X12
	MOVO 592(AX), X5
	MOVO 608(AX), X8
	MOVO X1, X10
	PSLLQ $17, X1
	POR X15, X1
	MOVO X1, 512(BX)
	PSRLQ $47, X10
	MOVO X12, X11
	PSLLQ $12, X12
	POR X10, X12
	MOVO X12, 528(BX)
	PSRLQ $52, X11
	MOVO X5, X6
	PSLLQ $7, X5
	POR X11, X5
	MOVO X5, 544(BX)
	PSRLQ $57, X6
	PSLLQ $2, X8
	MOVO 624(AX), X7
	MOVO 640(AX), X9
	MOVO 656(AX), X3
	MOVO 672(AX), X13
	MOVO X7, X0
	PSLLQ $61, X7
	POR X6, X8
	POR X7, X8
	MOVO X8, 560(BX)
	PSRLQ $3, X0
	MOVO X9, X2
	PSLLQ $56, X9
	POR X0, X9
	MOVO X9, 576(BX)
	PSRLQ $8, X2
	MOVO X3, X14
	PSLLQ $51, X3
	POR X2, X3
	MOVO X3, 592(BX)
	PSRLQ $13, X14
	MOVO X13, X4
	PSLLQ $46, X13
	POR X14, X13
	MOVO X13, 608(BX)
	PSRLQ $18, X4
	MOVO 688(AX), X15
	MOVO 704(AX), X1
	MOVO 720(AX), X10
	MOVO 736(AX), X12
	MOVO X15, X11
	PSLLQ $41, X15
	POR X4, X15
	MOVO X15, 624(BX)
	PSRLQ $23, X11
	MOVO X1, X5
	PSLLQ $36, X1
	POR X11, X1
	MOVO X1, 640(BX)
	PSRLQ $28, X5
	MOVO X10, X6
	PSLLQ $31, X10
	POR X5, X10
	MOVO X10, 656(BX)
	PSRLQ $33, X6
	MOVO X12, X7
	PSLLQ $26, X12
	POR X6, X12
	MOVO X12, 672(BX)
	PSRLQ $38, X7
	MOVO 752(AX), X8
	MOVO 768(AX), X0
	MOVO 784(AX), X9
	MOVO 800(AX), X2
	MOVO X8, X3
	PSLLQ $21, X8
	POR X7, X8
	MOVO X8, 688(BX)
	PSRLQ $43, X3
	MOVO X0, X14
	PSLLQ $16, X0
	POR X3, X0
	MOVO X0, 704(BX)
	PSRLQ $48, X14
	MOVO X9, X13
	PSLLQ $11, X9
	POR X14, X9
	MOVO X9, 720(BX)
	PSRLQ $53, X13
	MOVO X2, X4
	PSLLQ $6, X2
	POR X13, X2
	MOVO X2, 736(BX)
	PSRLQ $58, X4
	MOVO 816(AX), X15
	MOVO 832(AX), X11
	MOVO 848(AX), X1
	MOVO 864(AX), X5
	PSLLQ $1, X15
	MOVO X11, X10
	PSLLQ $60, X11
	POR X4, X15
	POR X11, X15
	MOVO X15, 752(BX)
	PSRLQ $4, X10
	MOVO X1, X6
	PSLLQ $55, X1
	POR X10, X1
	MOVO X1, 768(BX)
	PSRLQ $9, X6
	MOVO X5, X12
	PSLLQ $50, X5
	POR X6, X5
	MOVO X5, 784(BX)
	PSRLQ $14, X12
	MOVO 880(AX), X7
	MOVO 896(AX), X8
	MOVO 912(AX), X3
	MOVO 928(AX), X0
	MOVO X7, X14
	PSLLQ $45, X7
	POR X12, X7
	MOVO X7, 800(BX)
	PSRLQ $19, X14
	MOVO X8, X9
	PSLLQ $40, X8
	POR X14, X8
	MOVO X8, 816(BX)
	PSRLQ $24, X9
	MOVO X3, X13
	PSLLQ $35, X3
	POR X9, X3
	MOVO X3, 832(BX)
	PSRLQ $29, X13
	MOVO X0, X2
	PSLLQ $30, X0
	POR X13, X0
	MOVO X0, 848(BX)
	PSRLQ $34, X2
	MOVO 944(AX), X4
	MOVO 960(AX), X11
	MOVO 976(AX), X15
	MOVO 992(AX), X10
	MOVO X4, X1
	PSLLQ $25, X4
	POR X2, X4
	MOVO X4, 864(BX)
	PSRLQ $39, X1
	MOVO X11, X6
	PSLLQ $20, X11
	POR X1, X11
	MOVO X11, 880(BX)
	PSRLQ $44, X6
	MOVO X15, X5
	PSLLQ $15, X15
	POR X6, X15
	MOVO X15, 896(BX)
	PSRLQ $49, X5
	MOVO X10, X12
	PSLLQ $10, X10
	POR X5, X10
	MOVO X10, 912(BX)
	PSRLQ $54, X12
	MOVO 1008(AX), X7
	PSLLQ $5, X7
	POR X12, X7
	MOVO X7, 928(BX)
	RET

// func pack64_60(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_60(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $60, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $4, X4
	MOVO X3, X5
	PSLLQ $56, X3
	POR X4, X3
	MOVO X3, 16(BX)
	PSRLQ $8, X5
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	MOVO X6, X10
	PSLLQ $52, X6
	POR X5, X6
	MOVO X6, 32(BX)
	PSRLQ $12, X10
	MOVO X7, X11
	PSLLQ $48, X7
	POR X10, X7
	MOVO X7, 48(BX)
	PSRLQ $16, X11
	MOVO X8, X12
	PSLLQ $44, X8
	POR X11, X8
	MOVO X8, 64(BX)
	PSRLQ $20, X12
	MOVO X9, X13
	PSLLQ $40, X9
	POR X12, X9
	MOVO X9, 80(BX)
	PSRLQ $24, X13
	MOVO 112(AX), X14
	MOVO 128(AX), X15
	MOVO 144(AX), X0
	MOVO 160(AX), X1
	MOVO X14, X2
	PSLLQ $36, X14
	POR X13, X14
	MOVO X14, 96(BX)
	PSRLQ $28, X2
	MOVO X15, X4
	PSLLQ $32, X15
	POR X2, X15
	MOVO X15, 112(BX)
	PSRLQ $32, X4
	MOVO X0, X3
	PSLLQ $28, X0
	POR X4, X0
	MOVO X0, 128(BX)
	PSRLQ $36, X3
	MOVO X1, X5
	PSLLQ $24, X1
	POR X3, X1
	MOVO X1, 144(BX)
	PSRLQ $40, X5
	MOVO 176(AX), X6
	MOVO 192(AX), X10
	MOVO 208(AX), X7
	MOVO 224(AX), X11
	MOVO X6, X8
	PSLLQ $20, X6
	POR X5, X6
	MOVO X6, 160(BX)
	PSRLQ $44, X8
	MOVO X10, X12
	PSLLQ $16, X10
	POR X8, X10
	MOVO X10, 176(BX)
	PSRLQ $48, X12
	MOVO X7, X9
	PSLLQ $12, X7
	POR X12, X7
	MOVO X7, 192(BX)
	PSRLQ $52, X9
	MOVO X11, X13
	PSLLQ $8, X11
	POR X9, X11
	MOVO X11, 208(BX)
	PSRLQ $56, X13
	MOVO 240(AX), X14
	MOVO 256(AX), X2
	MOVO 272(AX), X15
	MOVO 288(AX), X4
	PSLLQ $4, X14
	POR X13, X14
	MOVO X14, 224(BX)
	MOVO X15, X0
	PSLLQ $60, X15
	POR X2, X15
	MOVO X15, 240(BX)
	PSRLQ $4, X0
	MOVO X4, X3
	PSLLQ $56, X4
	POR X0, X4
	MOVO X4, 256(BX)
	PSRLQ $8, X3
	MOVO 304(AX), X1
	MOVO 320(AX), X5
	MOVO 336(AX), X6
	MOVO 352(AX), X8
	MOVO X1, X10
	PSLLQ $52, X1
	POR X3, X1
	MOVO X1, 272(BX)
	PSRLQ $12, X10
	MOVO X5, X12
	PSLLQ $48, X5
	POR X10, X5
	MOVO X5, 288(BX)
	PSRLQ $16, X12
	MOVO X6, X7
	PSLLQ $44, X6
	POR X12, X6
	MOVO X6, 304(BX)
	PSRLQ $20, X7
	MOVO X8, X9
	PSLLQ $40, X8
	POR X7, X8
	MOVO X8, 320(BX)
	PSRLQ $24, X9
	MOVO 368(AX), X11
	MOVO 384(AX), X13
	MOVO 400(AX), X14
	MOVO 416(AX), X2
	MOVO X11, X15
	PSLLQ $36, X11
	POR X9, X11
	MOVO X11, 336(BX)
	PSRLQ $28, X15
	MOVO X13, X0
	PSLLQ $32, X13
	POR X15, X13
	MOVO X13, 352(BX)
	PSRLQ $32, X0
	MOVO X14, X4
	PSLLQ $28, X14
	POR X0, X14
	MOVO X14, 368(BX)
	PSRLQ $36, X4
	MOVO X2, X3
	PSLLQ $24, X2
	POR X4, X2
	MOVO X2, 384(BX)
	PSRLQ $40, X3
	MOVO 432(AX), X1
	MOVO 448(AX), X10
	MOVO 464(AX), X5
	MOVO 480(AX), X12
	MOVO X1, X6
	PSLLQ $20, X1
	POR X3, X1
	MOVO X1, 400(BX)
	PSRLQ $44, X6
	MOVO X10, X7
	PSLLQ $16, X10
	POR X6, X10
	MOVO X10, 416(BX)
	PSRLQ $48, X7
	MOVO X5, X8
	PSLLQ $12, X5
	POR X7, X5
	MOVO X5, 432(BX)
	PSRLQ $52, X8
	MOVO X12, X9
	PSLLQ $8, X12
	POR X8, X12
	MOVO X12, 448(BX)
	PSRLQ $56, X9
	MOVO 496(AX), X11
	MOVO 512(AX), X15
	MOVO 528(AX), X13
	MOVO 544(AX), X0
	PSLLQ $4, X11
	POR X9, X11
	MOVO X11, 464(BX)
	MOVO X13, X14
	PSLLQ $60, X13
	POR X15, X13
	MOVO X13, 480(BX)
	PSRLQ $4, X14
	MOVO X0, X4
	PSLLQ $56, X0
	POR X14, X0
	MOVO X0, 496(BX)
	PSRLQ $8, X4
	MOVO 560(AX), X2
	MOVO 576(AX), X3
	MOVO 592(AX), X1
	MOVO 608(AX), X6
	MOVO X2, X10
	PSLLQ $52, X2
	POR X4, X2
	MOVO X2, 512(BX)
	PSRLQ $12, X10
	MOVO X3, X7
	PSLLQ $48, X3
	POR X10, X3
	MOVO X3, 528(BX)
	PSRLQ $16, X7
	MOVO X1, X5
	PSLLQ $44, X1
	POR X7, X1
	MOVO X1, 544(BX)
	PSRLQ $20, X5
	MOVO X6, X8
	PSLLQ $40, X6
	POR X5, X6
	MOVO X6, 560(BX)
	PSRLQ $24, X8
	MOVO 624(AX), X12
	MOVO 640(AX), X9
	MOVO 656(AX), X11
	MOVO 672(AX), X15
	MOVO X12, X13
	PSLLQ $36, X12
	POR X8, X12
	MOVO X12, 576(BX)
	PSRLQ $28, X13
	MOVO X9, X14
	PSLLQ $32, X9
	POR X13, X9
	MOVO X9, 592(BX)
	PSRLQ $32, X14
	MOVO X11, X0
	PSLLQ $28, X11
	POR X14, X11
	MOVO X11, 608(BX)
	PSRLQ $36, X0
	MOVO X15, X4
	PSLLQ $24, X15
	POR X0, X15
	MOVO X15, 624(BX)
	PSRLQ $40, X4
	MOVO 688(AX), X2
	MOVO 704(AX), X10
	MOVO 720(AX), X3
	MOVO 736(AX), X7
	MOVO X2, X1
	PSLLQ $20, X2
	POR X4, X2
	MOVO X2, 640(BX)
	PSRLQ $44, X1
	MOVO X10, X5
	PSLLQ $16, X10
	POR X1, X10
	MOVO X10, 656(BX)
	PSRLQ $48, X5
	MOVO X3, X6
	PSLLQ $12, X3
	POR X5, X3
	MOVO X3, 672(BX)
	PSRLQ $52, X6
	MOVO X7, X8
	PSLLQ $8, X7
	POR X6, X7
	MOVO X7, 688(BX)
	PSRLQ $56, X8
	MOVO 752(AX), X12
	MOVO 768(AX), X13
	MOVO 784(AX), X9
	MOVO 800(AX), X14
	PSLLQ $4, X12
	POR X8, X12
	MOVO X12, 704(BX)
	MOVO X9, X11
	PSLLQ $60, X9
	POR X13, X9
	MOVO X9, 720(BX)
	PSRLQ $4, X11
	MOVO X14, X0
	PSLLQ $56, X14
	POR X11, X14
	MOVO X14, 736(BX)
	PSRLQ $8, X0
	MOVO 816(AX), X15
	MOVO 832(AX), X4
	MOVO 848(AX), X2
	MOVO 864(AX), X1
	MOVO X15, X10
	PSLLQ $52, X15
	POR X0, X15
	MOVO X15, 752(BX)
	PSRLQ $12, X10
	MOVO X4, X5
	PSLLQ $48, X4
	POR X10, X4
	MOVO X4, 768(BX)
	PSRLQ $16, X5
	MOVO X2, X3
	PSLLQ $44, X2
	POR X5, X2
	MOVO X2, 784(BX)
	PSRLQ $20, X3
	MOVO X1, X6
	PSLLQ $40, X1
	POR X3, X1
	MOVO X1, 800(BX)
	PSRLQ $24, X6
	MOVO 880(AX), X7
	MOVO 896(AX), X8
	MOVO 912(AX), X12
	MOVO 928(AX), X13
	MOVO X7, X9
	PSLLQ $36, X7
	POR X6, X7
	MOVO X7, 816(BX)
	PSRLQ $28, X9
	MOVO X8, X11
	PSLLQ $32, X8
	POR X9, X8
	MOVO X8, 832(BX)
	PSRLQ $32, X11
	MOVO X12, X14
	PSLLQ $28, X12
	POR X11, X12
	MOVO X12, 848(BX)
	PSRLQ $36, X14
	MOVO X13, X0
	PSLLQ $24, X13
	POR X14, X13
	MOVO X13, 864(BX)
	PSRLQ $40, X0
	MOVO 944(AX), X15
	MOVO 960(AX), X10
	MOVO 976(AX), X4
	MOVO 992(AX), X5
	MOVO X15, X2
	PSLLQ $20, X15
	POR X0, X15
	MOVO X15, 880(BX)
	PSRLQ $44, X2
	MOVO X10, X3
	PSLLQ $16, X10
	POR X2, X10
	MOVO X10, 896(BX)
	PSRLQ $48, X3
	MOVO X4, X1
	PSLLQ $12, X4
	POR X3, X4
	MOVO X4, 912(BX)
	PSRLQ $52, X1
	MOVO X5, X6
	PSLLQ $8, X5
	POR X1, X5
	MOVO X5, 928(BX)
	PSRLQ $56, X6
	MOVO 1008(AX), X7
	PSLLQ $4, X7
	POR X6, X7
	MOVO X7, 944(BX)
	RET

// func pack64_61(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_61(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $61, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $3, X4
	MOVO X3, X5
	PSLLQ $58, X3
	POR X4, X3
	MOVO X3, 16(BX)
	PSRLQ $6, X5
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	MOVO X6, X10
	PSLLQ $55, X6
	POR X5, X6
	MOVO X6, 32(BX)
	PSRLQ $9, X10
	MOVO X7, X11
	PSLLQ $52, X7
	POR X10, X7
	MOVO X7, 48(BX)
	PSRLQ $12, X11
	MOVO X8, X12
	PSLLQ $49, X8
	POR X11, X8
	MOVO X8, 64(BX)
	PSRLQ $15, X12
	MOVO X9, X13
	PSLLQ $46, X9
	POR X12, X9
	MOVO X9, 80(BX)
	PSRLQ $18, X13
	MOVO 112(AX), X14
	MOVO 128(AX), X15
	MOVO 144(AX), X0
	MOVO 160(AX), X1
	MOVO X14, X2
	PSLLQ $43, X14
	POR X13, X14
	MOVO X14, 96(BX)
	PSRLQ $21, X2
	MOVO X15, X4
	PSLLQ $40, X15
	POR X2, X15
	MOVO X15, 112(BX)
	PSRLQ $24, X4
	MOVO X0, X3
	PSLLQ $37, X0
	POR X4, X0
	MOVO X0, 128(BX)
	PSRLQ $27, X3
	MOVO X1, X5
	PSLLQ $34, X1
	POR X3, X1
	MOVO X1, 144(BX)
	PSRLQ $30, X5
	MOVO 176(AX), X6
	MOVO 192(AX), X10
	MOVO 208(AX), X7
	MOVO 224(AX), X11
	MOVO X6, X8
	PSLLQ $31, X6
	POR X5, X6
	MOVO X6, 160(BX)
	PSRLQ $33, X8
	MOVO X10, X12
	PSLLQ $28, X10
	POR X8, X10
	MOVO X10, 176(BX)
	PSRLQ $36, X12
	MOVO X7, X9
	PSLLQ $25, X7
	POR X12, X7
	MOVO X7, 192(BX)
	PSRLQ $39, X9
	MOVO X11, X13
	PSLLQ $22, X11
	POR X9, X11
	MOVO X11, 208(BX)
	PSRLQ $42, X13
	MOVO 240(AX), X14
	MOVO 256(AX), X2
	MOVO 272(AX), X15
	MOVO 288(AX), X4
	MOVO X14, X0
	PSLLQ $19, X14
	POR X13, X14
	MOVO X14, 224(BX)
	PSRLQ $45, X0
	MOVO X2, X3
	PSLLQ $16, X2
	POR X0, X2
	MOVO X2, 240(BX)
	PSRLQ $48, X3
	MOVO X15, X1
	PSLLQ $13, X15
	POR X3, X15
	MOVO X15, 256(BX)
	PSRLQ $51, X1
	MOVO X4, X5
	PSLLQ $10, X4
	POR X1, X4
	MOVO X4, 272(BX)
	PSRLQ $54, X5
	MOVO 304(AX), X6
	MOVO 320(AX), X8
	MOVO 336(AX), X10
	MOVO 352(AX), X12
	MOVO X6, X7
	PSLLQ $7, X6
	POR X5, X6
	MOVO X6, 288(BX)
	PSRLQ $57, X7
	MOVO X8, X9
	PSLLQ $4, X8
	POR X7, X8
	MOVO X8, 304(BX)
	PSRLQ $60, X9
	PSLLQ $1, X10
	MOVO X12, X11
	PSLLQ $62, X12
	POR X9, X10
	POR X12, X10
	MOVO X10, 320(BX)
	PSRLQ $2, X11
	MOVO 368(AX), X13
	MOVO 384(AX), X14
	MOVO 400(AX), X0
	MOVO 416(AX), X2
	MOVO X13, X3
	PSLLQ $59, X13
	POR X11, X13
	MOVO X13, 336(BX)
	PSRLQ $5, X3
	MOVO X14, X15
	PSLLQ $56, X14
	POR X3, X14
	MOVO X14, 352(BX)
	PSRLQ $8, X15
	MOVO X0, X1
	PSLLQ $53, X0
	POR X15, X0
	MOVO X0, 368(BX)
	PSRLQ $11, X1
	MOVO X2, X4
	PSLLQ $50, X2
	POR X1, X2
	MOVO X2, 384(BX)
	PSRLQ $14, X4
	MOVO 432(AX), X5
	MOVO 448(AX), X6
	MOVO 464(AX), X7
	MOVO 480(AX), X8
	MOVO X5, X9
	PSLLQ $47, X5
	POR X4, X5
	MOVO X5, 400(BX)
	PSRLQ $17, X9
	MOVO X6, X12
	PSLLQ $44, X6
	POR X9, X6
	MOVO X6, 416(BX)
	PSRLQ $20, X12
	MOVO X7, X10
	PSLLQ $41, X7
	POR X12, X7
	MOVO X7, 432(BX)
	PSRLQ $23, X10
	MOVO X8, X11
	PSLLQ $38, X8
	POR X10, X8
	MOVO X8, 448(BX)
	PSRLQ $26, X11
	MOVO 496(AX), X13
	MOVO 512(AX), X3
	MOVO 528(AX), X14
	MOVO 544(AX), X15
	MOVO X13, X0
	PSLLQ $35, X13
	POR X11, X13
	MOVO X13, 464(BX)
	PSRLQ $29, X0
	MOVO X3, X1
	PSLLQ $32, X3
	POR X0, X3
	MOVO X3, 480(BX)
	PSRLQ $32, X1
	MOVO X14, X2
	PSLLQ $29, X14
	POR X1, X14
	MOVO X14, 496(BX)
	PSRLQ $35, X2
	MOVO X15, X4
	PSLLQ $26, X15
	POR X2, X15
	MOVO X15, 512(BX)
	PSRLQ $38, X4
	MOVO 560(AX), X5
	MOVO 576(AX), X9
	MOVO 592(AX), X6
	MOVO 608(AX), X12
	MOVO X5, X7
	PSLLQ $23, X5
	POR X4, X5
	MOVO X5, 528(BX)
	PSRLQ $41, X7
	MOVO X9, X10
	PSLLQ $20, X9
	POR X7, X9
	MOVO X9, 544(BX)
	PSRLQ $44, X10
	MOVO X6, X8
	PSLLQ $17, X6
	POR X10, X6
	MOVO X6, 560(BX)
	PSRLQ $47, X8
	MOVO X12, X11
	PSLLQ $14, X12
	POR X8, X12
	MOVO X12, 576(BX)
	PSRLQ $50, X11
	MOVO 624(AX), X13
	MOVO 640(AX), X0
	MOVO 656(AX), X3
	MOVO 672(AX), X1
	MOVO X13, X14
	PSLLQ $11, X13
	POR X11, X13
	MOVO X13, 592(BX)
	PSRLQ $53, X14
	MOVO X0, X2
	PSLLQ $8, X0
	POR X14, X0
	MOVO X0, 608(BX)
	PSRLQ $56, X2
	MOVO X3, X15
	PSLLQ $5, X3
	POR X2, X3
	MOVO X3, 624(BX)
	PSRLQ $59, X15
	PSLLQ $2, X1
	MOVO 688(AX), X4
	MOVO 704(AX), X5
	MOVO 720(AX), X7
	MOVO 736(AX), X9
	MOVO X4, X10
	PSLLQ $63, X4
	POR X15, X1
	POR X4, X1
	MOVO X1, 640(BX)
	PSRLQ $1, X10
	MOVO X5, X6
	PSLLQ $60, X5
	POR X10, X5
	MOVO X5, 656(BX)
	PSRLQ $4, X6
	MOVO X7, X8
	PSLLQ $57, X7
	POR X6, X7
	MOVO X7, 672(BX)
	PSRLQ $7, X8
	MOVO X9, X12
	PSLLQ $54, X9
	POR X8, X9
	MOVO X9, 688(BX)
	PSRLQ $10, X12
	MOVO 752(AX), X11
	MOVO 768(AX), X13
	MOVO 784(AX), X14
	MOVO 800(AX), X0
	MOVO X11, X2
	PSLLQ $51, X11
	POR X12, X11
	MOVO X11, 704(BX)
	PSRLQ $13, X2
	MOVO X13, X3
	PSLLQ $48, X13
	POR X2, X13
	MOVO X13, 720(BX)
	PSRLQ $16, X3
	MOVO X14, X15
	PSLLQ $45, X14
	POR X3, X14
	MOVO X14, 736(BX)
	PSRLQ $19, X15
	MOVO X0, X4
	PSLLQ $42, X0
	POR X15, X0
	MOVO X0, 752(BX)
	PSRLQ $22, X4
	MOVO 816(AX), X1
	MOVO 832(AX), X10
	MOVO 848(AX), X5
	MOVO 864(AX), X6
	MOVO X1, X7
	PSLLQ $39, X1
	POR X4, X1
	MOVO X1, 768(BX)
	PSRLQ $25, X7
	MOVO X10, X8
	PSLLQ $36, X10
	POR X7, X10
	MOVO X10, 784(BX)
	PSRLQ $28, X8
	MOVO X5, X9
	PSLLQ $33, X5
	POR X8, X5
	MOVO X5, 800(BX)
	PSRLQ $31, X9
	MOVO X6, X12
	PSLLQ $30, X6
	POR X9, X6
	MOVO X6, 816(BX)
	PSRLQ $34, X12
	MOVO 880(AX), X11
	MOVO 896(AX), X2
	MOVO 912(AX), X13
	MOVO 928(AX), X3
	MOVO X11, X14
	PSLLQ $27, X11
	POR X12, X11
	MOVO X11, 832(BX)
	PSRLQ $37, X14
	MOVO X2, X15
	PSLLQ $24, X2
	POR X14, X2
	MOVO X2, 848(BX)
	PSRLQ $40, X15
	MOVO X13, X0
	PSLLQ $21, X13
	POR X15, X13
	MOVO X13, 864(BX)
	PSRLQ $43, X0
	MOVO X3, X4
	PSLLQ $18, X3
	POR X0, X3
	MOVO X3, 880(BX)
	PSRLQ $46, X4
	MOVO 944(AX), X1
	MOVO 960(AX), X7
	MOVO 976(AX), X10
	MOVO 992(AX), X8
	MOVO X1, X5
	PSLLQ $15, X1
	POR X4, X1
	MOVO X1, 896(BX)
	PSRLQ $49, X5
	MOVO X7, X9
	PSLLQ $12, X7
	POR X5, X7
	MOVO X7, 912(BX)
	PSRLQ $52, X9
	MOVO X10, X6
	PSLLQ $9, X10
	POR X9, X10
	MOVO X10, 928(BX)
	PSRLQ $55, X6
	MOVO X8, X12
	PSLLQ $6, X8
	POR X6, X8
	MOVO X8, 944(BX)
	PSRLQ $58, X12
	MOVO 1008(AX), X11
	PSLLQ $3, X11
	POR X12, X11
	MOVO X11, 960(BX)
	RET

// func pack64_62(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_62(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $62, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $2, X4
	MOVO X3, X5
	PSLLQ $60, X3
	POR X4, X3
	MOVO X3, 16(BX)
	PSRLQ $4, X5
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	MOVO X6, X10
	PSLLQ $58, X6
	POR X5, X6
	MOVO X6, 32(BX)
	PSRLQ $6, X10
	MOVO X7, X11
	PSLLQ $56, X7
	POR X10, X7
	MOVO X7, 48(BX)
	PSRLQ $8, X11
	MOVO X8, X12
	PSLLQ $54, X8
	POR X11, X8
	MOVO X8, 64(BX)
	PSRLQ $10, X12
	MOVO X9, X13
	PSLLQ $52, X9
	POR X12, X9
	MOVO X9, 80(BX)
	PSRLQ $12, X13
	MOVO 112(AX), X14
	MOVO 128(AX), X15
	MOVO 144(AX), X0
	MOVO 160(AX), X1
	MOVO X14, X2
	PSLLQ $50, X14
	POR X13, X14
	MOVO X14, 96(BX)
	PSRLQ $14, X2
	MOVO X15, X4
	PSLLQ $48, X15
	POR X2, X15
	MOVO X15, 112(BX)
	PSRLQ $16, X4
	MOVO X0, X3
	PSLLQ $46, X0
	POR X4, X0
	MOVO X0, 128(BX)
	PSRLQ $18, X3
	MOVO X1, X5
	PSLLQ $44, X1
	POR X3, X1
	MOVO X1, 144(BX)
	PSRLQ $20, X5
	MOVO 176(AX), X6
	MOVO 192(AX), X10
	MOVO 208(AX), X7
	MOVO 224(AX), X11
	MOVO X6, X8
	PSLLQ $42, X6
	POR X5, X6
	MOVO X6, 160(BX)
	PSRLQ $22, X8
	MOVO X10, X12
	PSLLQ $40, X10
	POR X8, X10
	MOVO X10, 176(BX)
	PSRLQ $24, X12
	MOVO X7, X9
	PSLLQ $38, X7
	POR X12, X7
	MOVO X7, 192(BX)
	PSRLQ $26, X9
	MOVO X11, X13
	PSLLQ $36, X11
	POR X9, X11
	MOVO X11, 208(BX)
	PSRLQ $28, X13
	MOVO 240(AX), X14
	MOVO 256(AX), X2
	MOVO 272(AX), X15
	MOVO 288(AX), X4
	MOVO X14, X0
	PSLLQ $34, X14
	POR X13, X14
	MOVO X14, 224(BX)
	PSRLQ $30, X0
	MOVO X2, X3
	PSLLQ $32, X2
	POR X0, X2
	MOVO X2, 240(BX)
	PSRLQ $32, X3
	MOVO X15, X1
	PSLLQ $30, X15
	POR X3, X15
	MOVO X15, 256(BX)
	PSRLQ $34, X1
	MOVO X4, X5
	PSLLQ $28, X4
	POR X1, X4
	MOVO X4, 272(BX)
	PSRLQ $36, X5
	MOVO 304(AX), X6
	MOVO 320(AX), X8
	MOVO 336(AX), X10
	MOVO 352(AX), X12
	MOVO X6, X7
	PSLLQ $26, X6
	POR X5, X6
	MOVO X6, 288(BX)
	PSRLQ $38, X7
	MOVO X8, X9
	PSLLQ $24, X8
	POR X7, X8
	MOVO X8, 304(BX)
	PSRLQ $40, X9
	MOVO X10, X11
	PSLLQ $22, X10
	POR X9, X10
	MOVO X10, 320(BX)
	PSRLQ $42, X11
	MOVO X12, X13
	PSLLQ $20, X12
	POR X11, X12
	MOVO X12, 336(BX)
	PSRLQ $44, X13
	MOVO 368(AX), X14
	MOVO 384(AX), X0
	MOVO 400(AX), X2
	MOVO 416(AX), X3
	MOVO X14, X15
	PSLLQ $18, X14
	POR X13, X14
	MOVO X14, 352(BX)
	PSRLQ $46, X15
	MOVO X0, X1
	PSLLQ $16, X0
	POR X15, X0
	MOVO X0, 368(BX)
	PSRLQ $48, X1
	MOVO X2, X4
	PSLLQ $14, X2
	POR X1, X2
	MOVO X2, 384(BX)
	PSRLQ $50, X4
	MOVO X3, X5
	PSLLQ $12, X3
	POR X4, X3
	MOVO X3, 400(BX)
	PSRLQ $52, X5
	MOVO 432(AX), X6
	MOVO 448(AX), X7
	MOVO 464(AX), X8
	MOVO 480(AX), X9
	MOVO X6, X10
	PSLLQ $10, X6
	POR X5, X6
	MOVO X6, 416(BX)
	PSRLQ $54, X10
	MOVO X7, X11
	PSLLQ $8, X7
	POR X10, X7
	MOVO X7, 432(BX)
	PSRLQ $56, X11
	MOVO X8, X12
	PSLLQ $6, X8
	POR X11, X8
	MOVO X8, 448(BX)
	PSRLQ $58, X12
	MOVO X9, X13
	PSLLQ $4, X9
	POR X12, X9
	MOVO X9, 464(BX)
	PSRLQ $60, X13
	MOVO 496(AX), X14
	MOVO 512(AX), X15
	MOVO 528(AX), X0
	MOVO 544(AX), X1
	PSLLQ $2, X14
	POR X13, X14
	MOVO X14, 480(BX)
	MOVO X0, X2
	PSLLQ $62, X0
	POR X15, X0
	MOVO X0, 496(BX)
	PSRLQ $2, X2
	MOVO X1, X4
	PSLLQ $60, X1
	POR X2, X1
	MOVO X1, 512(BX)
	PSRLQ $4, X4
	MOVO 560(AX), X3
	MOVO 576(AX), X5
	MOVO 592(AX), X6
	MOVO 608(AX), X10
	MOVO X3, X7
	PSLLQ $58, X3
	POR X4, X3
	MOVO X3, 528(BX)
	PSRLQ $6, X7
	MOVO X5, X11
	PSLLQ $56, X5
	POR X7, X5
	MOVO X5, 544(BX)
	PSRLQ $8, X11
	MOVO X6, X8
	PSLLQ $54, X6
	POR X11, X6
	MOVO X6, 560(BX)
	PSRLQ $10, X8
	MOVO X10, X12
	PSLLQ $52, X10
	POR X8, X10
	MOVO X10, 576(BX)
	PSRLQ $12, X12
	MOVO 624(AX), X9
	MOVO 640(AX), X13
	MOVO 656(AX), X14
	MOVO 672(AX), X15
	MOVO X9, X0
	PSLLQ $50, X9
	POR X12, X9
	MOVO X9, 592(BX)
	PSRLQ $14, X0
	MOVO X13, X2
	PSLLQ $48, X13
	POR X0, X13
	MOVO X13, 608(BX)
	PSRLQ $16, X2
	MOVO X14, X1
	PSLLQ $46, X14
	POR X2, X14
	MOVO X14, 624(BX)
	PSRLQ $18, X1
	MOVO X15, X4
	PSLLQ $44, X15
	POR X1, X15
	MOVO X15, 640(BX)
	PSRLQ $20, X4
	MOVO 688(AX), X3
	MOVO 704(AX), X7
	MOVO 720(AX), X5
	MOVO 736(AX), X11
	MOVO X3, X6
	PSLLQ $42, X3
	POR X4, X3
	MOVO X3, 656(BX)
	PSRLQ $22, X6
	MOVO X7, X8
	PSLLQ $40, X7
	POR X6, X7
	MOVO X7, 672(BX)
	PSRLQ $24, X8
	MOVO X5, X10
	PSLLQ $38, X5
	POR X8, X5
	MOVO X5, 688(BX)
	PSRLQ $26, X10
	MOVO X11, X12
	PSLLQ $36, X11
	POR X10, X11
	MOVO X11, 704(BX)
	PSRLQ $28, X12
	MOVO 752(AX), X9
	MOVO 768(AX), X0
	MOVO 784(AX), X13
	MOVO 800(AX), X2
	MOVO X9, X14
	PSLLQ $34, X9
	POR X12, X9
	MOVO X9, 720(BX)
	PSRLQ $30, X14
	MOVO X0, X1
	PSLLQ $32, X0
	POR X14, X0
	MOVO X0, 736(BX)
	PSRLQ $32, X1
	MOVO X13, X15
	PSLLQ $30, X13
	POR X1, X13
	MOVO X13, 752(BX)
	PSRLQ $34, X15
	MOVO X2, X4
	PSLLQ $28, X2
	POR X15, X2
	MOVO X2, 768(BX)
	PSRLQ $36, X4
	MOVO 816(AX), X3
	MOVO 832(AX), X6
	MOVO 848(AX), X7
	MOVO 864(AX), X8
	MOVO X3, X5
	PSLLQ $26, X3
	POR X4, X3
	MOVO X3, 784(BX)
	PSRLQ $38, X5
	MOVO X6, X10
	PSLLQ $24, X6
	POR X5, X6
	MOVO X6, 800(BX)
	PSRLQ $40, X10
	MOVO X7, X11
	PSLLQ $22, X7
	POR X10, X7
	MOVO X7, 816(BX)
	PSRLQ $42, X11
	MOVO X8, X12
	PSLLQ $20, X8
	POR X11, X8
	MOVO X8, 832(BX)
	PSRLQ $44, X12
	MOVO 880(AX), X9
	MOVO 896(AX), X14
	MOVO 912(AX), X0
	MOVO 928(AX), X1
	MOVO X9, X13
	PSLLQ $18, X9
	POR X12, X9
	MOVO X9, 848(BX)
	PSRLQ $46, X13
	MOVO X14, X15
	PSLLQ $16, X14
	POR X13, X14
	MOVO X14, 864(BX)
	PSRLQ $48, X15
	MOVO X0, X2
	PSLLQ $14, X0
	POR X15, X0
	MOVO X0, 880(BX)
	PSRLQ $50, X2
	MOVO X1, X4
	PSLLQ $12, X1
	POR X2, X1
	MOVO X1, 896(BX)
	PSRLQ $52, X4
	MOVO 944(AX), X3
	MOVO 960(AX), X5
	MOVO 976(AX), X6
	MOVO 992(AX), X10
	MOVO X3, X7
	PSLLQ $10, X3
	POR X4, X3
	MOVO X3, 912(BX)
	PSRLQ $54, X7
	MOVO X5, X11
	PSLLQ $8, X5
	POR X7, X5
	MOVO X5, 928(BX)
	PSRLQ $56, X11
	MOVO X6, X8
	PSLLQ $6, X6
	POR X11, X6
	MOVO X6, 944(BX)
	PSRLQ $58, X8
	MOVO X10, X12
	PSLLQ $4, X10
	POR X8, X10
	MOVO X10, 960(BX)
	PSRLQ $60, X12
	MOVO 1008(AX), X9
	PSLLQ $2, X9
	POR X12, X9
	MOVO X9, 976(BX)
	RET

// func pack64_63(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_63(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X2, X4
	PSLLQ $63, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $1, X4
	MOVO X3, X5
	PSLLQ $62, X3
	POR X4, X3
	MOVO X3, 16(BX)
	PSRLQ $2, X5
	MOVO 48(AX), X6
	MOVO 64(AX), X7
	MOVO 80(AX), X8
	MOVO 96(AX), X9
	MOVO X6, X10
	PSLLQ $61, X6
	POR X5, X6
	MOVO X6, 32(BX)
	PSRLQ $3, X10
	MOVO X7, X11
	PSLLQ $60, X7
	POR X10, X7
	MOVO X7, 48(BX)
	PSRLQ $4, X11
	MOVO X8, X12
	PSLLQ $59, X8
	POR X11, X8
	MOVO X8, 64(BX)
	PSRLQ $5, X12
	MOVO X9, X13
	PSLLQ $58, X9
	POR X12, X9
	MOVO X9, 80(BX)
	PSRLQ $6, X13
	MOVO 112(AX), X14
	MOVO 128(AX), X15
	MOVO 144(AX), X0
	MOVO 160(AX), X1
	MOVO X14, X2
	PSLLQ $57, X14
	POR X13, X14
	MOVO X14, 96(BX)
	PSRLQ $7, X2
	MOVO X15, X4
	PSLLQ $56, X15
	POR X2, X15
	MOVO X15, 112(BX)
	PSRLQ $8, X4
	MOVO X0, X3
	PSLLQ $55, X0
	POR X4, X0
	MOVO X0, 128(BX)
	PSRLQ $9, X3
	MOVO X1, X5
	PSLLQ $54, X1
	POR X3, X1
	MOVO X1, 144(BX)
	PSRLQ $10, X5
	MOVO 176(AX), X6
	MOVO 192(AX), X10
	MOVO 208(AX), X7
	MOVO 224(AX), X11
	MOVO X6, X8
	PSLLQ $53, X6
	POR X5, X6
	MOVO X6, 160(BX)
	PSRLQ $11, X8
	MOVO X10, X12
	PSLLQ $52, X10
	POR X8, X10
	MOVO X10, 176(BX)
	PSRLQ $12, X12
	MOVO X7, X9
	PSLLQ $51, X7
	POR X12, X7
	MOVO X7, 192(BX)
	PSRLQ $13, X9
	MOVO X11, X13
	PSLLQ $50, X11
	POR X9, X11
	MOVO X11, 208(BX)
	PSRLQ $14, X13
	MOVO 240(AX), X14
	MOVO 256(AX), X2
	MOVO 272(AX), X15
	MOVO 288(AX), X4
	MOVO X14, X0
	PSLLQ $49, X14
	POR X13, X14
	MOVO X14, 224(BX)
	PSRLQ $15, X0
	MOVO X2, X3
	PSLLQ $48, X2
	POR X0, X2
	MOVO X2, 240(BX)
	PSRLQ $16, X3
	MOVO X15, X1
	PSLLQ $47, X15
	POR X3, X15
	MOVO X15, 256(BX)
	PSRLQ $17, X1
	MOVO X4, X5
	PSLLQ $46, X4
	POR X1, X4
	MOVO X4, 272(BX)
	PSRLQ $18, X5
	MOVO 304(AX), X6
	MOVO 320(AX), X8
	MOVO 336(AX), X10
	MOVO 352(AX), X12
	MOVO X6, X7
	PSLLQ $45, X6
	POR X5, X6
	MOVO X6, 288(BX)
	PSRLQ $19, X7
	MOVO X8, X9
	PSLLQ $44, X8
	POR X7, X8
	MOVO X8, 304(BX)
	PSRLQ $20, X9
	MOVO X10, X11
	PSLLQ $43, X10
	POR X9, X10
	MOVO X10, 320(BX)
	PSRLQ $21, X11
	MOVO X12, X13
	PSLLQ $42, X12
	POR X11, X12
	MOVO X12, 336(BX)
	PSRLQ $22, X13
	MOVO 368(AX), X14
	MOVO 384(AX), X0
	MOVO 400(AX), X2
	MOVO 416(AX), X3
	MOVO X14, X15
	PSLLQ $41, X14
	POR X13, X14
	MOVO X14, 352(BX)
	PSRLQ $23, X15
	MOVO X0, X1
	PSLLQ $40, X0
	POR X15, X0
	MOVO X0, 368(BX)
	PSRLQ $24, X1
	MOVO X2, X4
	PSLLQ $39, X2
	POR X1, X2
	MOVO X2, 384(BX)
	PSRLQ $25, X4
	MOVO X3, X5
	PSLLQ $38, X3
	POR X4, X3
	MOVO X3, 400(BX)
	PSRLQ $26, X5
	MOVO 432(AX), X6
	MOVO 448(AX), X7
	MOVO 464(AX), X8
	MOVO 480(AX), X9
	MOVO X6, X10
	PSLLQ $37, X6
	POR X5, X6
	MOVO X6, 416(BX)
	PSRLQ $27, X10
	MOVO X7, X11
	PSLLQ $36, X7
	POR X10, X7
	MOVO X7, 432(BX)
	PSRLQ $28, X11
	MOVO X8, X12
	PSLLQ $35, X8
	POR X11, X8
	MOVO X8, 448(BX)
	PSRLQ $29, X12
	MOVO X9, X13
	PSLLQ $34, X9
	POR X12, X9
	MOVO X9, 464(BX)
	PSRLQ $30, X13
	MOVO 496(AX), X14
	MOVO 512(AX), X15
	MOVO 528(AX), X0
	MOVO 544(AX), X1
	MOVO X14, X2
	PSLLQ $33, X14
	POR X13, X14
	MOVO X14, 480(BX)
	PSRLQ $31, X2
	MOVO X15, X4
	PSLLQ $32, X15
	POR X2, X15
	MOVO X15, 496(BX)
	PSRLQ $32, X4
	MOVO X0, X3
	PSLLQ $31, X0
	POR X4, X0
	MOVO X0, 512(BX)
	PSRLQ $33, X3
	MOVO X1, X5
	PSLLQ $30, X1
	POR X3, X1
	MOVO X1, 528(BX)
	PSRLQ $34, X5
	MOVO 560(AX), X6
	MOVO 576(AX), X10
	MOVO 592(AX), X7
	MOVO 608(AX), X11
	MOVO X6, X8
	PSLLQ $29, X6
	POR X5, X6
	MOVO X6, 544(BX)
	PSRLQ $35, X8
	MOVO X10, X12
	PSLLQ $28, X10
	POR X8, X10
	MOVO X10, 560(BX)
	PSRLQ $36, X12
	MOVO X7, X9
	PSLLQ $27, X7
	POR X12, X7
	MOVO X7, 576(BX)
	PSRLQ $37, X9
	MOVO X11, X13
	PSLLQ $26, X11
	POR X9, X11
	MOVO X11, 592(BX)
	PSRLQ $38, X13
	MOVO 624(AX), X14
	MOVO 640(AX), X2
	MOVO 656(AX), X15
	MOVO 672(AX), X4
	MOVO X14, X0
	PSLLQ $25, X14
	POR X13, X14
	MOVO X14, 608(BX)
	PSRLQ $39, X0
	MOVO X2, X3
	PSLLQ $24, X2
	POR X0, X2
	MOVO X2, 624(BX)
	PSRLQ $40, X3
	MOVO X15, X1
	PSLLQ $23, X15
	POR X3, X15
	MOVO X15, 640(BX)
	PSRLQ $41, X1
	MOVO X4, X5
	PSLLQ $22, X4
	POR X1, X4
	MOVO X4, 656(BX)
	PSRLQ $42, X5
	MOVO 688(AX), X6
	MOVO 704(AX), X8
	MOVO 720(AX), X10
	MOVO 736(AX), X12
	MOVO X6, X7
	PSLLQ $21, X6
	POR X5, X6
	MOVO X6, 672(BX)
	PSRLQ $43, X7
	MOVO X8, X9
	PSLLQ $20, X8
	POR X7, X8
	MOVO X8, 688(BX)
	PSRLQ $44, X9
	MOVO X10, X11
	PSLLQ $19, X10
	POR X9, X10
	MOVO X10, 704(BX)
	PSRLQ $45, X11
	MOVO X12, X13
	PSLLQ $18, X12
	POR X11, X12
	MOVO X12, 720(BX)
	PSRLQ $46, X13
	MOVO 752(AX), X14
	MOVO 768(AX), X0
	MOVO 784(AX), X2
	MOVO 800(AX), X3
	MOVO X14, X15
	PSLLQ $17, X14
	POR X13, X14
	MOVO X14, 736(BX)
	PSRLQ $47, X15
	MOVO X0, X1
	PSLLQ $16, X0
	POR X15, X0
	MOVO X0, 752(BX)
	PSRLQ $48, X1
	MOVO X2, X4
	PSLLQ $15, X2
	POR X1, X2
	MOVO X2, 768(BX)
	PSRLQ $49, X4
	MOVO X3, X5
	PSLLQ $14, X3
	POR X4, X3
	MOVO X3, 784(BX)
	PSRLQ $50, X5
	MOVO 816(AX), X6
	MOVO 832(AX), X7
	MOVO 848(AX), X8
	MOVO 864(AX), X9
	MOVO X6, X10
	PSLLQ $13, X6
	POR X5, X6
	MOVO X6, 800(BX)
	PSRLQ $51, X10
	MOVO X7, X11
	PSLLQ $12, X7
	POR X10, X7
	MOVO X7, 816(BX)
	PSRLQ $52, X11
	MOVO X8, X12
	PSLLQ $11, X8
	POR X11, X8
	MOVO X8, 832(BX)
	PSRLQ $53, X12
	MOVO X9, X13
	PSLLQ $10, X9
	POR X12, X9
	MOVO X9, 848(BX)
	PSRLQ $54, X13
	MOVO 880(AX), X14
	MOVO 896(AX), X15
	MOVO 912(AX), X0
	MOVO 928(AX), X1
	MOVO X14, X2
	PSLLQ $9, X14
	POR X13, X14
	MOVO X14, 864(BX)
	PSRLQ $55, X2
	MOVO X15, X4
	PSLLQ $8, X15
	POR X2, X15
	MOVO X15, 880(BX)
	PSRLQ $56, X4
	MOVO X0, X3
	PSLLQ $7, X0
	POR X4, X0
	MOVO X0, 896(BX)
	PSRLQ $57, X3
	MOVO X1, X5
	PSLLQ $6, X1
	POR X3, X1
	MOVO X1, 912(BX)
	PSRLQ $58, X5
	MOVO 944(AX), X6
	MOVO 960(AX), X10
	MOVO 976(AX), X7
	MOVO 992(AX), X11
	MOVO X6, X8
	PSLLQ $5, X6
	POR X5, X6
	MOVO X6, 928(BX)
	PSRLQ $59, X8
	MOVO X10, X12
	PSLLQ $4, X10
	POR X8, X10
	MOVO X10, 944(BX)
	PSRLQ $60, X12
	MOVO X7, X9
	PSLLQ $3, X7
	POR X12, X7
	MOVO X7, 960(BX)
	PSRLQ $61, X9
	MOVO X11, X13
	PSLLQ $2, X11
	POR X9, X11
	MOVO X11, 976(BX)
	PSRLQ $62, X13
	MOVO 1008(AX), X14
	PSLLQ $1, X14
	POR X13, X14
	MOVO X14, 992(BX)
	RET

// func pack64_64(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·pack64_64(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, 0(BX)
	MOVO X2, 16(BX)
	MOVO X3, 32(BX)
	MOVO 48(AX), X4
	MOVO 64(AX), X5
	MOVO 80(AX), X6
	MOVO 96(AX), X7
	MOVO X4, 48(BX)
	MOVO X5, 64(BX)
	MOVO X6, 80(BX)
	MOVO X7, 96(BX)
	MOVO 112(AX), X8
	MOVO 128(AX), X9
	MOVO 144(AX), X10
	MOVO 160(AX), X11
	MOVO X8, 112(BX)
	MOVO X9, 128(BX)
	MOVO X10, 144(BX)
	MOVO X11, 160(BX)
	MOVO 176(AX), X12
	MOVO 192(AX), X13
	MOVO 208(AX), X14
	MOVO 224(AX), X15
	MOVO X12, 176(BX)
	MOVO X13, 192(BX)
	MOVO X14, 208(BX)
	MOVO X15, 224(BX)
	MOVO 240(AX), X0
	MOVO 256(AX), X1
	MOVO 272(AX), X2
	MOVO 288(AX), X3
	MOVO X0, 240(BX)
	MOVO X1, 256(BX)
	MOVO X2, 272(BX)
	MOVO X3, 288(BX)
	MOVO 304(AX), X4
	MOVO 320(AX), X5
	MOVO 336(AX), X6
	MOVO 352(AX), X7
	MOVO X4, 304(BX)
	MOVO X5, 320(BX)
	MOVO X6, 336(BX)
	MOVO X7, 352(BX)
	MOVO 368(AX), X8
	MOVO 384(AX), X9
	MOVO 400(AX), X10
	MOVO 416(AX), X11
	MOVO X8, 368(BX)
	MOVO X9, 384(BX)
	MOVO X10, 400(BX)
	MOVO X11, 416(BX)
	MOVO 432(AX), X12
	MOVO 448(AX), X13
	MOVO 464(AX), X14
	MOVO 480(AX), X15
	MOVO X12, 432(BX)
	MOVO X13, 448(BX)
	MOVO X14, 464(BX)
	MOVO X15, 480(BX)
	MOVO 496(AX), X0
	MOVO 512(AX), X1
	MOVO 528(AX), X2
	MOVO 544(AX), X3
	MOVO X0, 496(BX)
	MOVO X1, 512(BX)
	MOVO X2, 528(BX)
	MOVO X3, 544(BX)
	MOVO 560(AX), X4
	MOVO 576(AX), X5
	MOVO 592(AX), X6
	MOVO 608(AX), X7
	MOVO X4, 560(BX)
	MOVO X5, 576(BX)
	MOVO X6, 592(BX)
	MOVO X7, 608(BX)
	MOVO 624(AX), X8
	MOVO 640(AX), X9
	MOVO 656(AX), X10
	MOVO 672(AX), X11
	MOVO X8, 624(BX)
	MOVO X9, 640(BX)
	MOVO X10, 656(BX)
	MOVO X11, 672(BX)
	MOVO 688(AX), X12
	MOVO 704(AX), X13
	MOVO 720(AX), X14
	MOVO 736(AX), X15
	MOVO X12, 688(BX)
	MOVO X13, 704(BX)
	MOVO X14, 720(BX)
	MOVO X15, 736(BX)
	MOVO 752(AX), X0
	MOVO 768(AX), X1
	MOVO 784(AX), X2
	MOVO 800(AX), X3
	MOVO X0, 752(BX)
	MOVO X1, 768(BX)
	MOVO X2, 784(BX)
	MOVO X3, 800(BX)
	MOVO 816(AX), X4
	MOVO 832(AX), X5
	MOVO 848(AX), X6
	MOVO 864(AX), X7
	MOVO X4, 816(BX)
	MOVO X5, 832(BX)
	MOVO X6, 848(BX)
	MOVO X7, 864(BX)
	MOVO 880(AX), X8
	MOVO 896(AX), X9
	MOVO 912(AX), X10
	MOVO 928(AX), X11
	MOVO X8, 880(BX)
	MOVO X9, 896(BX)
	MOVO X10, 912(BX)
	MOVO X11, 928(BX)
	MOVO 944(AX), X12
	MOVO 960(AX), X13
	MOVO 976(AX), X14
	MOVO 992(AX), X15
	MOVO X12, 944(BX)
	MOVO X13, 960(BX)
	MOVO X14, 976(BX)
	MOVO X15, 992(BX)
	MOVO 1008(AX), X0
	MOVO X0, 1008(BX)
	RET

// func dpack32_1(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_1(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x01 // PSLLD xmm2, 1
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x02 // PSLLD xmm3, 2
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm7, xmm6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x03 // PSLLD xmm7, 3
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC3 // PSUBD xmm8, xmm11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x04 // PSLLD xmm8, 4
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x05 // PSLLD xmm9, 5
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x06 // PSLLD xmm10, 6
	MOVO 112(AX), X15
	MOVO 128(AX), X0
	MOVO 144(AX), X4
	MOVO 160(AX), X5
	MOVO X15, X6
	MOVO X0, X11
	MOVO X4, X12
	MOVO X5, X13
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm15, xmm14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x07 // PSLLD xmm15, 7
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC6 // PSUBD xmm0, xmm6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x08 // PSLLD xmm0, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE3 // PSUBD xmm4, xmm11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x09 // PSLLD xmm4, 9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xEC // PSUBD xmm5, xmm12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0A // PSLLD xmm5, 10
	MOVO 176(AX), X14
	MOVO 192(AX), X6
	MOVO 208(AX), X11
	MOVO 224(AX), X12
	POR X1, X2
	POR X3, X7
	POR X8, X9
	POR X10, X15
	POR X0, X4
	POR X5, X2
	POR X7, X9
	POR X15, X4
	POR X2, X9
	POR X4, X9
	MOVO X14, X1
	MOVO X6, X3
	MOVO X11, X8
	MOVO X12, X10
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF5 // PSUBD xmm14, xmm13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0B // PSLLD xmm14, 11
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF1 // PSUBD xmm6, xmm1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0C // PSLLD xmm6, 12
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xDB // PSUBD xmm11, xmm3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0D // PSLLD xmm11, 13
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE0 // PSUBD xmm12, xmm8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0E // PSLLD xmm12, 14
	MOVO 240(AX), X0
	MOVO 256(AX), X5
	MOVO 272(AX), X7
	MOVO 288(AX), X15
	MOVO X0, X2
	MOVO X5, X4
	MOVO X7, X13
	MOVO X15, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC2 // PSUBD xmm0, xmm10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0F // PSLLD xmm0, 15
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xEA // PSUBD xmm5, xmm2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x10 // PSLLD xmm5, 16
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xFC // PSUBD xmm7, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x11 // PSLLD xmm7, 17
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xFD // PSUBD xmm15, xmm13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x12 // PSLLD xmm15, 18
	MOVO 304(AX), X3
	MOVO 320(AX), X8
	MOVO 336(AX), X10
	MOVO 352(AX), X2
	POR X9, X14
	POR X6, X11
	POR X12, X0
	POR X5, X7
	POR X15, X14
	POR X11, X0
	POR X7, X14
	POR X0, X14
	MOVO X3, X4
	MOVO X8, X13
	MOVO X10, X9
	MOVO X2, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD9 // PSUBD xmm3, xmm1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x13 // PSLLD xmm3, 19
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC4 // PSUBD xmm8, xmm4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x14 // PSLLD xmm8, 20
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x15 // PSLLD xmm10, 21
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD1 // PSUBD xmm2, xmm9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x16 // PSLLD xmm2, 22
	MOVO 368(AX), X12
	MOVO 384(AX), X5
	MOVO 400(AX), X15
	MOVO 416(AX), X11
	MOVO X12, X7
	MOVO X5, X0
	MOVO X15, X1
	MOVO X11, X4
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE6 // PSUBD xmm12, xmm6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x17 // PSLLD xmm12, 23
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xEF // PSUBD xmm5, xmm7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x18 // PSLLD xmm5, 24
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF8 // PSUBD xmm15, xmm0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x19 // PSLLD xmm15, 25
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xD9 // PSUBD xmm11, xmm1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1A // PSLLD xmm11, 26
	MOVO 432(AX), X13
	MOVO 448(AX), X9
	MOVO 464(AX), X6
	MOVO 480(AX), X7
	POR X14, X3
	POR X8, X10
	POR X2, X12
	POR X5, X15
	POR X11, X3
	POR X10, X12
	POR X15, X3
	POR X12, X3
	MOVO X13, X0
	MOVO X9, X1
	MOVO X6, X14
	MOVO X7, X8
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xEC // PSUBD xmm13, xmm4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x1B // PSLLD xmm13, 27
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm9, xmm0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1C // PSLLD xmm9, 28
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF1 // PSUBD xmm6, xmm1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1D // PSLLD xmm6, 29
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm7, xmm14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1E // PSLLD xmm7, 30
	MOVO 496(AX), X2
	MOVO X2, X5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD0 // PSUBD xmm2, xmm8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1F // PSLLD xmm2, 31
	POR X3, X13
	POR X9, X6
	POR X7, X2
	POR X13, X6
	POR X2, X6
	MOVO X6, 0(BX)
	MOVO X5, 0(DX)
	RET

// func dpack32_2(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_2(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x02 // PSLLD xmm2, 2
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x04 // PSLLD xmm3, 4
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm7, xmm6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x06 // PSLLD xmm7, 6
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC3 // PSUBD xmm8, xmm11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x08 // PSLLD xmm8, 8
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0A // PSLLD xmm9, 10
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0C // PSLLD xmm10, 12
	MOVO 112(AX), X15
	MOVO 128(AX), X0
	MOVO 144(AX), X4
	MOVO 160(AX), X5
	MOVO X15, X6
	MOVO X0, X11
	MOVO X4, X12
	MOVO X5, X13
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm15, xmm14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0E // PSLLD xmm15, 14
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC6 // PSUBD xmm0, xmm6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x10 // PSLLD xmm0, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE3 // PSUBD xmm4, xmm11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x12 // PSLLD xmm4, 18
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xEC // PSUBD xmm5, xmm12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x14 // PSLLD xmm5, 20
	MOVO 176(AX), X14
	MOVO 192(AX), X6
	MOVO 208(AX), X11
	MOVO 224(AX), X12
	POR X1, X2
	POR X3, X7
	POR X8, X9
	POR X10, X15
	POR X0, X4
	POR X5, X2
	POR X7, X9
	POR X15, X4
	POR X2, X9
	POR X4, X9
	MOVO X14, X1
	MOVO X6, X3
	MOVO X11, X8
	MOVO X12, X10
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF5 // PSUBD xmm14, xmm13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x16 // PSLLD xmm14, 22
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF1 // PSUBD xmm6, xmm1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x18 // PSLLD xmm6, 24
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xDB // PSUBD xmm11, xmm3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1A // PSLLD xmm11, 26
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE0 // PSUBD xmm12, xmm8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x1C // PSLLD xmm12, 28
	MOVO 240(AX), X0
	MOVO 256(AX), X5
	MOVO 272(AX), X7
	MOVO 288(AX), X15
	MOVO X0, X2
	MOVO X5, X4
	MOVO X7, X13
	MOVO X15, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC2 // PSUBD xmm0, xmm10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1E // PSLLD xmm0, 30
	POR X9, X14
	POR X6, X11
	POR X12, X0
	POR X14, X11
	POR X0, X11
	MOVO X11, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xEA // PSUBD xmm5, xmm2
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xFC // PSUBD xmm7, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x02 // PSLLD xmm7, 2
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xFD // PSUBD xmm15, xmm13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x04 // PSLLD xmm15, 4
	MOVO 304(AX), X3
	MOVO 320(AX), X8
	MOVO 336(AX), X10
	MOVO 352(AX), X9
	MOVO X3, X6
	MOVO X8, X12
	MOVO X10, X14
	MOVO X9, X0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD9 // PSUBD xmm3, xmm1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x06 // PSLLD xmm3, 6
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC6 // PSUBD xmm8, xmm6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x08 // PSLLD xmm8, 8
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm10, xmm12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0A // PSLLD xmm10, 10
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCE // PSUBD xmm9, xmm14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0C // PSLLD xmm9, 12
	MOVO 368(AX), X11
	MOVO 384(AX), X2
	MOVO 400(AX), X4
	MOVO 416(AX), X13
	MOVO X11, X1
	MOVO X2, X6
	MOVO X4, X12
	MOVO X13, X14
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xD8 // PSUBD xmm11, xmm0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0E // PSLLD xmm11, 14
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD1 // PSUBD xmm2, xmm1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x10 // PSLLD xmm2, 16
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xE6 // PSUBD xmm4, xmm6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x12 // PSLLD xmm4, 18
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xEC // PSUBD xmm13, xmm12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x14 // PSLLD xmm13, 20
	MOVO 432(AX), X0
	MOVO 448(AX), X1
	MOVO 464(AX), X6
	MOVO 480(AX), X12
	POR X5, X7
	POR X15, X3
	POR X8, X10
	POR X9, X11
	POR X2, X4
	POR X13, X7
	POR X3, X10
	POR X11, X4
	POR X7, X10
	POR X4, X10
	MOVO X0, X5
	MOVO X1, X15
	MOVO X6, X8
	MOVO X12, X9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC6 // PSUBD xmm0, xmm14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x16 // PSLLD xmm0, 22
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xCD // PSUBD xmm1, xmm5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x18 // PSLLD xmm1, 24
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF7 // PSUBD xmm6, xmm15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1A // PSLLD xmm6, 26
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE0 // PSUBD xmm12, xmm8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x1C // PSLLD xmm12, 28
	MOVO 496(AX), X2
	MOVO X2, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD1 // PSUBD xmm2, xmm9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1E // PSLLD xmm2, 30
	POR X10, X0
	POR X1, X6
	POR X12, X2
	POR X0, X6
	POR X2, X6
	MOVO X6, 16(BX)
	MOVO X13, 0(DX)
	RET

// func dpack32_3(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_3(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x03 // PSLLD xmm2, 3
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x06 // PSLLD xmm3, 6
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm7, xmm6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x09 // PSLLD xmm7, 9
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC3 // PSUBD xmm8, xmm11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0C // PSLLD xmm8, 12
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0F // PSLLD xmm9, 15
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x12 // PSLLD xmm10, 18
	MOVO 112(AX), X15
	MOVO 128(AX), X0
	MOVO 144(AX), X4
	MOVO 160(AX), X5
	MOVO X15, X6
	MOVO X0, X11
	MOVO X4, X12
	MOVO X5, X13
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm15, xmm14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x15 // PSLLD xmm15, 21
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC6 // PSUBD xmm0, xmm6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x18 // PSLLD xmm0, 24
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE3 // PSUBD xmm4, xmm11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x1B // PSLLD xmm4, 27
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xEC // PSUBD xmm5, xmm12
	MOVO X5, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x1E // PSLLD xmm5, 30
	POR X1, X2
	POR X3, X7
	POR X8, X9
	POR X10, X15
	POR X0, X4
	POR X5, X2
	POR X7, X9
	POR X15, X4
	POR X2, X9
	POR X4, X9
	MOVO X9, 0(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x02 // PSRLD xmm14, 2
	MOVO 176(AX), X6
	MOVO 192(AX), X11
	MOVO 208(AX), X12
	MOVO 224(AX), X1
	MOVO X6, X3
	MOVO X11, X8
	MOVO X12, X10
	MOVO X1, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF5 // PSUBD xmm6, xmm13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x01 // PSLLD xmm6, 1
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xDB // PSUBD xmm11, xmm3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x04 // PSLLD xmm11, 4
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE0 // PSUBD xmm12, xmm8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x07 // PSLLD xmm12, 7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xCA // PSUBD xmm1, xmm10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0A // PSLLD xmm1, 10
	MOVO 240(AX), X5
	MOVO 256(AX), X7
	MOVO 272(AX), X15
	MOVO 288(AX), X2
	MOVO X5, X4
	MOVO X7, X9
	MOVO X15, X13
	MOVO X2, X3
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xE8 // PSUBD xmm5, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0D // PSLLD xmm5, 13
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xFC // PSUBD xmm7, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x10 // PSLLD xmm7, 16
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF9 // PSUBD xmm15, xmm9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x13 // PSLLD xmm15, 19
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm2, xmm13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x16 // PSLLD xmm2, 22
	MOVO 304(AX), X8
	MOVO 320(AX), X10
	MOVO 336(AX), X0
	MOVO 352(AX), X4
	POR X14, X6
	POR X11, X12
	POR X1, X5
	POR X7, X15
	POR X2, X6
	POR X12, X5
	POR X15, X6
	POR X5, X6
	MOVO X8, X9
	MOVO X10, X13
	MOVO X0, X14
	MOVO X4, X11
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC3 // PSUBD xmm8, xmm3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x19 // PSLLD xmm8, 25
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD1 // PSUBD xmm10, xmm9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1C // PSLLD xmm10, 28
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC5 // PSUBD xmm0, xmm13
	MOVO X0, X1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1F // PSLLD xmm0, 31
	POR X6, X8
	POR X10, X0
	POR X8, X0
	MOVO X0, 16(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x01 // PSRLD xmm1, 1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE6 // PSUBD xmm4, xmm14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x02 // PSLLD xmm4, 2
	MOVO 368(AX), X7
	MOVO 384(AX), X2
	MOVO 400(AX), X12
	MOVO 416(AX), X15
	MOVO X7, X5
	MOVO X2, X3
	MOVO X12, X9
	MOVO X15, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xFB // PSUBD xmm7, xmm11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x05 // PSLLD xmm7, 5
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm2, xmm5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x08 // PSLLD xmm2, 8
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE3 // PSUBD xmm12, xmm3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0B // PSLLD xmm12, 11
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF9 // PSUBD xmm15, xmm9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0E // PSLLD xmm15, 14
	MOVO 432(AX), X6
	MOVO 448(AX), X10
	MOVO 464(AX), X8
	MOVO 480(AX), X0
	MOVO X6, X14
	MOVO X10, X11
	MOVO X8, X5
	MOVO X0, X3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF5 // PSUBD xmm6, xmm13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x11 // PSLLD xmm6, 17
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD6 // PSUBD xmm10, xmm14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x14 // PSLLD xmm10, 20
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC3 // PSUBD xmm8, xmm11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x17 // PSLLD xmm8, 23
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC5 // PSUBD xmm0, xmm5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1A // PSLLD xmm0, 26
	MOVO 496(AX), X9
	MOVO X9, X13
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xCB // PSUBD xmm9, xmm3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1D // PSLLD xmm9, 29
	POR X1, X4
	POR X7, X2
	POR X12, X15
	POR X6, X10
	POR X8, X0
	POR X9, X4
	POR X2, X15
	POR X10, X0
	POR X4, X15
	POR X0, X15
	MOVO X15, 32(BX)
	MOVO X13, 0(DX)
	RET

// func dpack32_4(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_4(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x04 // PSLLD xmm2, 4
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x08 // PSLLD xmm3, 8
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm7, xmm6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0C // PSLLD xmm7, 12
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC3 // PSUBD xmm8, xmm11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x10 // PSLLD xmm8, 16
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x14 // PSLLD xmm9, 20
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x18 // PSLLD xmm10, 24
	MOVO 112(AX), X15
	MOVO 128(AX), X0
	MOVO 144(AX), X4
	MOVO 160(AX), X5
	MOVO X15, X6
	MOVO X0, X11
	MOVO X4, X12
	MOVO X5, X13
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm15, xmm14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1C // PSLLD xmm15, 28
	POR X1, X2
	POR X3, X7
	POR X8, X9
	POR X10, X15
	POR X2, X7
	POR X9, X15
	POR X7, X15
	MOVO X15, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC6 // PSUBD xmm0, xmm6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE3 // PSUBD xmm4, xmm11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x04 // PSLLD xmm4, 4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xEC // PSUBD xmm5, xmm12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x08 // PSLLD xmm5, 8
	MOVO 176(AX), X14
	MOVO 192(AX), X1
	MOVO 208(AX), X3
	MOVO 224(AX), X8
	MOVO X14, X10
	MOVO X1, X2
	MOVO X3, X9
	MOVO X8, X7
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF5 // PSUBD xmm14, xmm13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0C // PSLLD xmm14, 12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xCA // PSUBD xmm1, xmm10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x10 // PSLLD xmm1, 16
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDA // PSUBD xmm3, xmm2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x14 // PSLLD xmm3, 20
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC1 // PSUBD xmm8, xmm9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x18 // PSLLD xmm8, 24
	MOVO 240(AX), X15
	MOVO 256(AX), X6
	MOVO 272(AX), X11
	MOVO 288(AX), X12
	MOVO X15, X13
	MOVO X6, X10
	MOVO X11, X2
	MOVO X12, X9
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xFF // PSUBD xmm15, xmm7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1C // PSLLD xmm15, 28
	POR X0, X4
	POR X5, X14
	POR X1, X3
	POR X8, X15
	POR X4, X14
	POR X3, X15
	POR X14, X15
	MOVO X15, 16(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF5 // PSUBD xmm6, xmm13
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDA // PSUBD xmm11, xmm10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x04 // PSLLD xmm11, 4
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE2 // PSUBD xmm12, xmm2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x08 // PSLLD xmm12, 8
	MOVO 304(AX), X7
	MOVO 320(AX), X0
	MOVO 336(AX), X5
	MOVO 352(AX), X1
	MOVO X7, X8
	MOVO X0, X4
	MOVO X5, X3
	MOVO X1, X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF9 // PSUBD xmm7, xmm9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0C // PSLLD xmm7, 12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC0 // PSUBD xmm0, xmm8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x10 // PSLLD xmm0, 16
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xEC // PSUBD xmm5, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x14 // PSLLD xmm5, 20
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xCB // PSUBD xmm1, xmm3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x18 // PSLLD xmm1, 24
	MOVO 368(AX), X15
	MOVO 384(AX), X13
	MOVO 400(AX), X10
	MOVO 416(AX), X2
	MOVO X15, X9
	MOVO X13, X8
	MOVO X10, X4
	MOVO X2, X3
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm15, xmm14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1C // PSLLD xmm15, 28
	POR X6, X11
	POR X12, X7
	POR X0, X5
	POR X1, X15
	POR X11, X7
	POR X5, X15
	POR X7, X15
	MOVO X15, 32(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE9 // PSUBD xmm13, xmm9
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD0 // PSUBD xmm10, xmm8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x04 // PSLLD xmm10, 4
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x08 // PSLLD xmm2, 8
	MOVO 432(AX), X14
	MOVO 448(AX), X6
	MOVO 464(AX), X12
	MOVO 480(AX), X0
	MOVO X14, X1
	MOVO X6, X11
	MOVO X12, X5
	MOVO X0, X7
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF3 // PSUBD xmm14, xmm3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0C // PSLLD xmm14, 12
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF1 // PSUBD xmm6, xmm1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x10 // PSLLD xmm6, 16
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE3 // PSUBD xmm12, xmm11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x14 // PSLLD xmm12, 20
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC5 // PSUBD xmm0, xmm5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x18 // PSLLD xmm0, 24
	MOVO 496(AX), X15
	MOVO X15, X9
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xFF // PSUBD xmm15, xmm7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1C // PSLLD xmm15, 28
	POR X13, X10
	POR X2, X14
	POR X6, X12
	POR X0, X15
	POR X10, X14
	POR X12, X15
	POR X14, X15
	MOVO X15, 48(BX)
	MOVO X9, 0(DX)
	RET

// func dpack32_5(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_5(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x05 // PSLLD xmm2, 5
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0A // PSLLD xmm3, 10
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm7, xmm6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0F // PSLLD xmm7, 15
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC3 // PSUBD xmm8, xmm11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x14 // PSLLD xmm8, 20
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x19 // PSLLD xmm9, 25
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	MOVO X10, X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1E // PSLLD xmm10, 30
	POR X1, X2
	POR X3, X7
	POR X8, X9
	POR X10, X2
	POR X7, X9
	POR X2, X9
	MOVO X9, 0(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x02 // PSRLD xmm15, 2
	MOVO 112(AX), X0
	MOVO 128(AX), X4
	MOVO 144(AX), X5
	MOVO 160(AX), X6
	MOVO X0, X11
	MOVO X4, X12
	MOVO X5, X13
	MOVO X6, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC6 // PSUBD xmm0, xmm14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x03 // PSLLD xmm0, 3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE3 // PSUBD xmm4, xmm11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x08 // PSLLD xmm4, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xEC // PSUBD xmm5, xmm12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0D // PSLLD xmm5, 13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF5 // PSUBD xmm6, xmm13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x12 // PSLLD xmm6, 18
	MOVO 176(AX), X3
	MOVO 192(AX), X8
	MOVO 208(AX), X10
	MOVO 224(AX), X7
	MOVO X3, X2
	MOVO X8, X9
	MOVO X10, X14
	MOVO X7, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD9 // PSUBD xmm3, xmm1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x17 // PSLLD xmm3, 23
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC2 // PSUBD xmm8, xmm2
	MOVO X8, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1C // PSLLD xmm8, 28
	POR X15, X0
	POR X4, X5
	POR X6, X3
	POR X8, X0
	POR X5, X3
	POR X0, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x04 // PSRLD xmm12, 4
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD1 // PSUBD xmm10, xmm9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x01 // PSLLD xmm10, 1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm7, xmm14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x06 // PSLLD xmm7, 6
	MOVO 240(AX), X13
	MOVO 256(AX), X1
	MOVO 272(AX), X2
	MOVO 288(AX), X15
	MOVO X13, X4
	MOVO X1, X6
	MOVO X2, X8
	MOVO X15, X5
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xEB // PSUBD xmm13, xmm11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0B // PSLLD xmm13, 11
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm1, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x10 // PSLLD xmm1, 16
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD6 // PSUBD xmm2, xmm6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x15 // PSLLD xmm2, 21
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF8 // PSUBD xmm15, xmm8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1A // PSLLD xmm15, 26
	MOVO 304(AX), X0
	MOVO 320(AX), X3
	MOVO 336(AX), X9
	MOVO 352(AX), X14
	MOVO X0, X11
	MOVO X3, X4
	MOVO X9, X6
	MOVO X14, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC5 // PSUBD xmm0, xmm5
	MOVO X0, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1F // PSLLD xmm0, 31
	POR X12, X10
	POR X7, X13
	POR X1, X2
	POR X15, X0
	POR X10, X13
	POR X2, X0
	POR X13, X0
	MOVO X0, 32(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x01 // PSRLD xmm5, 1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xDB // PSUBD xmm3, xmm11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x04 // PSLLD xmm3, 4
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x09 // PSLLD xmm9, 9
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF6 // PSUBD xmm14, xmm6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0E // PSLLD xmm14, 14
	MOVO 368(AX), X12
	MOVO 384(AX), X7
	MOVO 400(AX), X1
	MOVO 416(AX), X15
	MOVO X12, X10
	MOVO X7, X2
	MOVO X1, X13
	MOVO X15, X0
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE0 // PSUBD xmm12, xmm8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x13 // PSLLD xmm12, 19
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xFA // PSUBD xmm7, xmm10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x18 // PSLLD xmm7, 24
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xCA // PSUBD xmm1, xmm2
	MOVO X1, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1D // PSLLD xmm1, 29
	POR X5, X3
	POR X9, X14
	POR X12, X7
	POR X1, X3
	POR X14, X7
	POR X3, X7
	MOVO X7, 48(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x03 // PSRLD xmm11, 3
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xFD // PSUBD xmm15, xmm13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x02 // PSLLD xmm15, 2
	MOVO 432(AX), X4
	MOVO 448(AX), X6
	MOVO 464(AX), X8
	MOVO 480(AX), X10
	MOVO X4, X2
	MOVO X6, X5
	MOVO X8, X9
	MOVO X10, X12
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xE0 // PSUBD xmm4, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x07 // PSLLD xmm4, 7
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF2 // PSUBD xmm6, xmm2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0C // PSLLD xmm6, 12
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC5 // PSUBD xmm8, xmm5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x11 // PSLLD xmm8, 17
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD1 // PSUBD xmm10, xmm9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x16 // PSLLD xmm10, 22
	MOVO 496(AX), X1
	MOVO X1, X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm1, xmm12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1B // PSLLD xmm1, 27
	POR X11, X15
	POR X4, X6
	POR X8, X10
	POR X1, X15
	POR X6, X10
	POR X15, X10
	MOVO X10, 64(BX)
	MOVO X14, 0(DX)
	RET

// func dpack32_6(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_6(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x06 // PSLLD xmm2, 6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0C // PSLLD xmm3, 12
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm7, xmm6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x12 // PSLLD xmm7, 18
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC3 // PSUBD xmm8, xmm11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x18 // PSLLD xmm8, 24
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm12
	MOVO X9, X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1E // PSLLD xmm9, 30
	POR X1, X2
	POR X3, X7
	POR X8, X9
	POR X2, X7
	POR X9, X7
	MOVO X7, 0(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x02 // PSRLD xmm15, 2
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x04 // PSLLD xmm10, 4
	MOVO 112(AX), X0
	MOVO 128(AX), X4
	MOVO 144(AX), X5
	MOVO 160(AX), X6
	MOVO X0, X11
	MOVO X4, X12
	MOVO X5, X1
	MOVO X6, X3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC6 // PSUBD xmm0, xmm14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0A // PSLLD xmm0, 10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE3 // PSUBD xmm4, xmm11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x10 // PSLLD xmm4, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xEC // PSUBD xmm5, xmm12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x16 // PSLLD xmm5, 22
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF1 // PSUBD xmm6, xmm1
	MOVO X6, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1C // PSLLD xmm6, 28
	POR X15, X10
	POR X0, X4
	POR X5, X6
	POR X10, X4
	POR X6, X4
	MOVO X4, 16(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x04 // PSRLD xmm8, 4
	MOVO 176(AX), X2
	MOVO 192(AX), X9
	MOVO 208(AX), X7
	MOVO 224(AX), X13
	MOVO X2, X14
	MOVO X9, X11
	MOVO X7, X12
	MOVO X13, X1
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD3 // PSUBD xmm2, xmm3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x02 // PSLLD xmm2, 2
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCE // PSUBD xmm9, xmm14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x08 // PSLLD xmm9, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xFB // PSUBD xmm7, xmm11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0E // PSLLD xmm7, 14
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xEC // PSUBD xmm13, xmm12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x14 // PSLLD xmm13, 20
	MOVO 240(AX), X15
	MOVO 256(AX), X0
	MOVO 272(AX), X5
	MOVO 288(AX), X10
	MOVO X15, X6
	MOVO X0, X4
	MOVO X5, X3
	MOVO X10, X14
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF9 // PSUBD xmm15, xmm1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1A // PSLLD xmm15, 26
	POR X8, X2
	POR X9, X7
	POR X13, X15
	POR X2, X7
	POR X15, X7
	MOVO X7, 32(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC6 // PSUBD xmm0, xmm6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xEC // PSUBD xmm5, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x06 // PSLLD xmm5, 6
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xD3 // PSUBD xmm10, xmm3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0C // PSLLD xmm10, 12
	MOVO 304(AX), X11
	MOVO 320(AX), X12
	MOVO 336(AX), X1
	MOVO 352(AX), X8
	MOVO X11, X9
	MOVO X12, X13
	MOVO X1, X2
	MOVO X8, X15
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDE // PSUBD xmm11, xmm14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x12 // PSLLD xmm11, 18
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE1 // PSUBD xmm12, xmm9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x18 // PSLLD xmm12, 24
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xCD // PSUBD xmm1, xmm13
	MOVO X1, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1E // PSLLD xmm1, 30
	POR X0, X5
	POR X10, X11
	POR X12, X1
	POR X5, X11
	POR X1, X11
	MOVO X11, 48(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x02 // PSRLD xmm7, 2
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC2 // PSUBD xmm8, xmm2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x04 // PSLLD xmm8, 4
	MOVO 368(AX), X6
	MOVO 384(AX), X4
	MOVO 400(AX), X3
	MOVO 416(AX), X14
	MOVO X6, X9
	MOVO X4, X13
	MOVO X3, X0
	MOVO X14, X10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF7 // PSUBD xmm6, xmm15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0A // PSLLD xmm6, 10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE1 // PSUBD xmm4, xmm9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x10 // PSLLD xmm4, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x16 // PSLLD xmm3, 22
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF0 // PSUBD xmm14, xmm0
	MOVO X14, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1C // PSLLD xmm14, 28
	POR X7, X8
	POR X6, X4
	POR X3, X14
	POR X8, X4
	POR X14, X4
	MOVO X4, 64(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x04 // PSRLD xmm12, 4
	MOVO 432(AX), X5
	MOVO 448(AX), X1
	MOVO 464(AX), X11
	MOVO 480(AX), X2
	MOVO X5, X15
	MOVO X1, X9
	MOVO X11, X13
	MOVO X2, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xEA // PSUBD xmm5, xmm10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x02 // PSLLD xmm5, 2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xCF // PSUBD xmm1, xmm15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x08 // PSLLD xmm1, 8
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD9 // PSUBD xmm11, xmm9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0E // PSLLD xmm11, 14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm2, xmm13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x14 // PSLLD xmm2, 20
	MOVO 496(AX), X7
	MOVO X7, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF8 // PSUBD xmm7, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1A // PSLLD xmm7, 26
	POR X12, X5
	POR X1, X11
	POR X2, X7
	POR X5, X11
	POR X7, X11
	MOVO X11, 80(BX)
	MOVO X6, 0(DX)
	RET

// func dpack32_7(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_7(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x07 // PSLLD xmm2, 7
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0E // PSLLD xmm3, 14
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm7, xmm6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x15 // PSLLD xmm7, 21
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC3 // PSUBD xmm8, xmm11
	MOVO X8, X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1C // PSLLD xmm8, 28
	POR X1, X2
	POR X3, X7
	POR X8, X2
	POR X7, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x04 // PSRLD xmm15, 4
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x03 // PSLLD xmm9, 3
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0A // PSLLD xmm10, 10
	MOVO 112(AX), X0
	MOVO 128(AX), X4
	MOVO 144(AX), X5
	MOVO 160(AX), X6
	MOVO X0, X11
	MOVO X4, X1
	MOVO X5, X3
	MOVO X6, X8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC6 // PSUBD xmm0, xmm14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x11 // PSLLD xmm0, 17
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE3 // PSUBD xmm4, xmm11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x18 // PSLLD xmm4, 24
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xE9 // PSUBD xmm5, xmm1
	MOVO X5, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x1F // PSLLD xmm5, 31
	POR X15, X9
	POR X10, X0
	POR X4, X5
	POR X9, X0
	POR X5, X0
	MOVO X0, 16(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x01 // PSRLD xmm7, 1
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF3 // PSUBD xmm6, xmm3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x06 // PSLLD xmm6, 6
	MOVO 176(AX), X2
	MOVO 192(AX), X12
	MOVO 208(AX), X13
	MOVO 224(AX), X14
	MOVO X2, X11
	MOVO X12, X1
	MOVO X13, X15
	MOVO X14, X10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD0 // PSUBD xmm2, xmm8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0D // PSLLD xmm2, 13
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE3 // PSUBD xmm12, xmm11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x14 // PSLLD xmm12, 20
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE9 // PSUBD xmm13, xmm1
	MOVO X13, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x1B // PSLLD xmm13, 27
	POR X7, X6
	POR X2, X12
	POR X13, X6
	POR X12, X6
	MOVO X6, 32(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x05 // PSRLD xmm4, 5
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF7 // PSUBD xmm14, xmm15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x02 // PSLLD xmm14, 2
	MOVO 240(AX), X9
	MOVO 256(AX), X5
	MOVO 272(AX), X0
	MOVO 288(AX), X3
	MOVO X9, X8
	MOVO X5, X11
	MOVO X0, X1
	MOVO X3, X7
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCA // PSUBD xmm9, xmm10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x09 // PSLLD xmm9, 9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE8 // PSUBD xmm5, xmm8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x10 // PSLLD xmm5, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC3 // PSUBD xmm0, xmm11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x17 // PSLLD xmm0, 23
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD9 // PSUBD xmm3, xmm1
	MOVO X3, X2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1E // PSLLD xmm3, 30
	POR X4, X14
	POR X9, X5
	POR X0, X3
	POR X14, X5
	POR X3, X5
	MOVO X5, 48(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x02 // PSRLD xmm2, 2
	MOVO 304(AX), X13
	MOVO 320(AX), X12
	MOVO 336(AX), X6
	MOVO 352(AX), X15
	MOVO X13, X10
	MOVO X12, X8
	MOVO X6, X11
	MOVO X15, X1
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xEF // PSUBD xmm13, xmm7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x05 // PSLLD xmm13, 5
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE2 // PSUBD xmm12, xmm10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0C // PSLLD xmm12, 12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF0 // PSUBD xmm6, xmm8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x13 // PSLLD xmm6, 19
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xFB // PSUBD xmm15, xmm11
	MOVO X15, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1A // PSLLD xmm15, 26
	POR X2, X13
	POR X12, X6
	POR X15, X13
	POR X6, X13
	MOVO X13, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x06 // PSRLD xmm4, 6
	MOVO 368(AX), X9
	MOVO 384(AX), X0
	MOVO 400(AX), X14
	MOVO 416(AX), X3
	MOVO X9, X5
	MOVO X0, X7
	MOVO X14, X10
	MOVO X3, X8
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC9 // PSUBD xmm9, xmm1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x01 // PSLLD xmm9, 1
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC5 // PSUBD xmm0, xmm5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x08 // PSLLD xmm0, 8
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF7 // PSUBD xmm14, xmm7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0F // PSLLD xmm14, 15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xDA // PSUBD xmm3, xmm10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x16 // PSLLD xmm3, 22
	MOVO 432(AX), X11
	MOVO 448(AX), X2
	MOVO 464(AX), X12
	MOVO 480(AX), X15
	MOVO X11, X6
	MOVO X2, X13
	MOVO X12, X1
	MOVO X15, X5
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD8 // PSUBD xmm11, xmm8
	MOVO X11, X7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1D // PSLLD xmm11, 29
	POR X4, X9
	POR X0, X14
	POR X3, X11
	POR X9, X14
	POR X11, X14
	MOVO X14, 80(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x03 // PSRLD xmm7, 3
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD6 // PSUBD xmm2, xmm6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x04 // PSLLD xmm2, 4
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE5 // PSUBD xmm12, xmm13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0B // PSLLD xmm12, 11
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF9 // PSUBD xmm15, xmm1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x12 // PSLLD xmm15, 18
	MOVO 496(AX), X10
	MOVO X10, X8
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x19 // PSLLD xmm10, 25
	POR X7, X2
	POR X12, X15
	POR X10, X2
	POR X15, X2
	MOVO X2, 96(BX)
	MOVO X8, 0(DX)
	RET

// func dpack32_8(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_8(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x08 // PSLLD xmm2, 8
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x10 // PSLLD xmm3, 16
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm7, xmm6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x18 // PSLLD xmm7, 24
	POR X1, X2
	POR X3, X7
	POR X2, X7
	MOVO X7, 0(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC3 // PSUBD xmm8, xmm11
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x08 // PSLLD xmm9, 8
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x10 // PSLLD xmm10, 16
	MOVO 112(AX), X15
	MOVO 128(AX), X0
	MOVO 144(AX), X4
	MOVO 160(AX), X5
	MOVO X15, X6
	MOVO X0, X1
	MOVO X4, X3
	MOVO X5, X2
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm15, xmm14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x18 // PSLLD xmm15, 24
	POR X8, X9
	POR X10, X15
	POR X9, X15
	MOVO X15, 16(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC6 // PSUBD xmm0, xmm6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xE1 // PSUBD xmm4, xmm1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x08 // PSLLD xmm4, 8
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xEB // PSUBD xmm5, xmm3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x10 // PSLLD xmm5, 16
	MOVO 176(AX), X7
	MOVO 192(AX), X11
	MOVO 208(AX), X12
	MOVO 224(AX), X13
	MOVO X7, X14
	MOVO X11, X8
	MOVO X12, X10
	MOVO X13, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xFA // PSUBD xmm7, xmm2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x18 // PSLLD xmm7, 24
	POR X0, X4
	POR X5, X7
	POR X4, X7
	MOVO X7, 32(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDE // PSUBD xmm11, xmm14
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE0 // PSUBD xmm12, xmm8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x08 // PSLLD xmm12, 8
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xEA // PSUBD xmm13, xmm10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x10 // PSLLD xmm13, 16
	MOVO 240(AX), X15
	MOVO 256(AX), X6
	MOVO 272(AX), X1
	MOVO 288(AX), X3
	MOVO X15, X2
	MOVO X6, X0
	MOVO X1, X5
	MOVO X3, X4
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF9 // PSUBD xmm15, xmm9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x18 // PSLLD xmm15, 24
	POR X11, X12
	POR X13, X15
	POR X12, X15
	MOVO X15, 48(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF2 // PSUBD xmm6, xmm2
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x08 // PSLLD xmm1, 8
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x10 // PSLLD xmm3, 16
	MOVO 304(AX), X7
	MOVO 320(AX), X14
	MOVO 336(AX), X8
	MOVO 352(AX), X10
	MOVO X7, X9
	MOVO X14, X11
	MOVO X8, X13
	MOVO X10, X12
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xFC // PSUBD xmm7, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x18 // PSLLD xmm7, 24
	POR X6, X1
	POR X3, X7
	POR X1, X7
	MOVO X7, 64(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF1 // PSUBD xmm14, xmm9
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC3 // PSUBD xmm8, xmm11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x08 // PSLLD xmm8, 8
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x10 // PSLLD xmm10, 16
	MOVO 368(AX), X15
	MOVO 384(AX), X2
	MOVO 400(AX), X0
	MOVO 416(AX), X5
	MOVO X15, X4
	MOVO X2, X6
	MOVO X0, X3
	MOVO X5, X1
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xFC // PSUBD xmm15, xmm12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x18 // PSLLD xmm15, 24
	POR X14, X8
	POR X10, X15
	POR X8, X15
	MOVO X15, 80(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC6 // PSUBD xmm0, xmm6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x08 // PSLLD xmm0, 8
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xEB // PSUBD xmm5, xmm3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x10 // PSLLD xmm5, 16
	MOVO 432(AX), X7
	MOVO 448(AX), X9
	MOVO 464(AX), X11
	MOVO 480(AX), X13
	MOVO X7, X12
	MOVO X9, X14
	MOVO X11, X10
	MOVO X13, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF9 // PSUBD xmm7, xmm1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x18 // PSLLD xmm7, 24
	POR X2, X0
	POR X5, X7
	POR X0, X7
	MOVO X7, 96(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm12
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDE // PSUBD xmm11, xmm14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x08 // PSLLD xmm11, 8
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xEA // PSUBD xmm13, xmm10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x10 // PSLLD xmm13, 16
	MOVO 496(AX), X15
	MOVO X15, X4
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF8 // PSUBD xmm15, xmm8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x18 // PSLLD xmm15, 24
	POR X9, X11
	POR X13, X15
	POR X11, X15
	MOVO X15, 112(BX)
	MOVO X4, 0(DX)
	RET

// func dpack32_9(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_9(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x09 // PSLLD xmm2, 9
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x12 // PSLLD xmm3, 18
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm7, xmm6
	MOVO X7, X15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1B // PSLLD xmm7, 27
	POR X1, X2
	POR X3, X7
	POR X2, X7
	MOVO X7, 0(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x05 // PSRLD xmm15, 5
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC3 // PSUBD xmm8, xmm11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x04 // PSLLD xmm8, 4
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0D // PSLLD xmm9, 13
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x16 // PSLLD xmm10, 22
	MOVO 112(AX), X0
	MOVO 128(AX), X4
	MOVO 144(AX), X5
	MOVO 160(AX), X6
	MOVO X0, X1
	MOVO X4, X3
	MOVO X5, X2
	MOVO X6, X7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC6 // PSUBD xmm0, xmm14
	MOVO X0, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1F // PSLLD xmm0, 31
	POR X15, X8
	POR X9, X10
	POR X0, X8
	POR X10, X8
	MOVO X8, 16(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x01 // PSRLD xmm11, 1
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xE1 // PSUBD xmm4, xmm1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x08 // PSLLD xmm4, 8
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xEB // PSUBD xmm5, xmm3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x11 // PSLLD xmm5, 17
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF2 // PSUBD xmm6, xmm2
	MOVO X6, X12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1A // PSLLD xmm6, 26
	POR X11, X4
	POR X5, X6
	POR X4, X6
	MOVO X6, 32(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x06 // PSRLD xmm12, 6
	MOVO 176(AX), X13
	MOVO 192(AX), X14
	MOVO 208(AX), X15
	MOVO 224(AX), X9
	MOVO X13, X0
	MOVO X14, X10
	MOVO X15, X8
	MOVO X9, X1
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xEF // PSUBD xmm13, xmm7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x03 // PSLLD xmm13, 3
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF0 // PSUBD xmm14, xmm0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0C // PSLLD xmm14, 12
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xFA // PSUBD xmm15, xmm10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x15 // PSLLD xmm15, 21
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm9, xmm8
	MOVO X9, X3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1E // PSLLD xmm9, 30
	POR X12, X13
	POR X14, X15
	POR X9, X13
	POR X15, X13
	MOVO X13, 48(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x02 // PSRLD xmm3, 2
	MOVO 240(AX), X2
	MOVO 256(AX), X11
	MOVO 272(AX), X5
	MOVO 288(AX), X4
	MOVO X2, X6
	MOVO X11, X7
	MOVO X5, X0
	MOVO X4, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD1 // PSUBD xmm2, xmm1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x07 // PSLLD xmm2, 7
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xDE // PSUBD xmm11, xmm6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x10 // PSLLD xmm11, 16
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xEF // PSUBD xmm5, xmm7
	MOVO X5, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x19 // PSLLD xmm5, 25
	POR X3, X2
	POR X11, X5
	POR X2, X5
	MOVO X5, 64(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x07 // PSRLD xmm8, 7
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xE0 // PSUBD xmm4, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x02 // PSLLD xmm4, 2
	MOVO 304(AX), X12
	MOVO 320(AX), X14
	MOVO 336(AX), X9
	MOVO 352(AX), X15
	MOVO X12, X13
	MOVO X14, X1
	MOVO X9, X6
	MOVO X15, X7
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE2 // PSUBD xmm12, xmm10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0B // PSLLD xmm12, 11
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF5 // PSUBD xmm14, xmm13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x14 // PSLLD xmm14, 20
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC9 // PSUBD xmm9, xmm1
	MOVO X9, X3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1D // PSLLD xmm9, 29
	POR X8, X4
	POR X12, X14
	POR X9, X4
	POR X14, X4
	MOVO X4, 80(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x03 // PSRLD xmm3, 3
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm15, xmm6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x06 // PSLLD xmm15, 6
	MOVO 368(AX), X11
	MOVO 384(AX), X2
	MOVO 400(AX), X5
	MOVO 416(AX), X0
	MOVO X11, X10
	MOVO X2, X13
	MOVO X5, X1
	MOVO X0, X8
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xDF // PSUBD xmm11, xmm7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0F // PSLLD xmm11, 15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD2 // PSUBD xmm2, xmm10
	MOVO X2, X12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x18 // PSLLD xmm2, 24
	POR X3, X15
	POR X11, X2
	POR X15, X2
	MOVO X2, 96(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x08 // PSRLD xmm12, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xED // PSUBD xmm5, xmm13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x01 // PSLLD xmm5, 1
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC1 // PSUBD xmm0, xmm1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0A // PSLLD xmm0, 10
	MOVO 432(AX), X9
	MOVO 448(AX), X14
	MOVO 464(AX), X4
	MOVO 480(AX), X6
	MOVO X9, X7
	MOVO X14, X10
	MOVO X4, X3
	MOVO X6, X11
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm9, xmm8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x13 // PSLLD xmm9, 19
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF7 // PSUBD xmm14, xmm7
	MOVO X14, X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1C // PSLLD xmm14, 28
	POR X12, X5
	POR X0, X9
	POR X14, X5
	POR X9, X5
	MOVO X5, 112(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x04 // PSRLD xmm15, 4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE2 // PSUBD xmm4, xmm10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x05 // PSLLD xmm4, 5
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF3 // PSUBD xmm6, xmm3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0E // PSLLD xmm6, 14
	MOVO 496(AX), X2
	MOVO X2, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD3 // PSUBD xmm2, xmm11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x17 // PSLLD xmm2, 23
	POR X15, X4
	POR X6, X2
	POR X4, X2
	MOVO X2, 128(BX)
	MOVO X13, 0(DX)
	RET

// func dpack32_10(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_10(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0A // PSLLD xmm2, 10
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x14 // PSLLD xmm3, 20
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm7, xmm6
	MOVO X7, X15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1E // PSLLD xmm7, 30
	POR X1, X2
	POR X3, X7
	POR X2, X7
	MOVO X7, 0(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x02 // PSRLD xmm15, 2
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC3 // PSUBD xmm8, xmm11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x08 // PSLLD xmm8, 8
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x12 // PSLLD xmm9, 18
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	MOVO X10, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1C // PSLLD xmm10, 28
	POR X15, X8
	POR X9, X10
	POR X8, X10
	MOVO X10, 16(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x04 // PSRLD xmm0, 4
	MOVO 112(AX), X4
	MOVO 128(AX), X5
	MOVO 144(AX), X6
	MOVO 160(AX), X1
	MOVO X4, X3
	MOVO X5, X2
	MOVO X6, X7
	MOVO X1, X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE6 // PSUBD xmm4, xmm14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x06 // PSLLD xmm4, 6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xEB // PSUBD xmm5, xmm3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x10 // PSLLD xmm5, 16
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF2 // PSUBD xmm6, xmm2
	MOVO X6, X12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1A // PSLLD xmm6, 26
	POR X0, X4
	POR X5, X6
	POR X4, X6
	MOVO X6, 32(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x06 // PSRLD xmm12, 6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xCF // PSUBD xmm1, xmm7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x04 // PSLLD xmm1, 4
	MOVO 176(AX), X13
	MOVO 192(AX), X15
	MOVO 208(AX), X9
	MOVO 224(AX), X8
	MOVO X13, X10
	MOVO X15, X14
	MOVO X9, X3
	MOVO X8, X2
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xEB // PSUBD xmm13, xmm11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0E // PSLLD xmm13, 14
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xFA // PSUBD xmm15, xmm10
	MOVO X15, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x18 // PSLLD xmm15, 24
	POR X12, X1
	POR X13, X15
	POR X1, X15
	MOVO X15, 48(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x08 // PSRLD xmm0, 8
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCE // PSUBD xmm9, xmm14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x02 // PSLLD xmm9, 2
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC3 // PSUBD xmm8, xmm3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0C // PSLLD xmm8, 12
	MOVO 240(AX), X5
	MOVO 256(AX), X4
	MOVO 272(AX), X6
	MOVO 288(AX), X7
	MOVO X5, X11
	MOVO X4, X10
	MOVO X6, X12
	MOVO X7, X13
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xEA // PSUBD xmm5, xmm2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x16 // PSLLD xmm5, 22
	POR X0, X9
	POR X8, X5
	POR X9, X5
	MOVO X5, 64(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE3 // PSUBD xmm4, xmm11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF2 // PSUBD xmm6, xmm10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0A // PSLLD xmm6, 10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xFC // PSUBD xmm7, xmm12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x14 // PSLLD xmm7, 20
	MOVO 304(AX), X1
	MOVO 320(AX), X15
	MOVO 336(AX), X14
	MOVO 352(AX), X3
	MOVO X1, X2
	MOVO X15, X0
	MOVO X14, X8
	MOVO X3, X9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xCD // PSUBD xmm1, xmm13
	MOVO X1, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1E // PSLLD xmm1, 30
	POR X4, X6
	POR X7, X1
	POR X6, X1
	MOVO X1, 80(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x02 // PSRLD xmm5, 2
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xFA // PSUBD xmm15, xmm2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x08 // PSLLD xmm15, 8
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF0 // PSUBD xmm14, xmm0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x12 // PSLLD xmm14, 18
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD8 // PSUBD xmm3, xmm8
	MOVO X3, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1C // PSLLD xmm3, 28
	POR X5, X15
	POR X14, X3
	POR X15, X3
	MOVO X3, 96(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x04 // PSRLD xmm11, 4
	MOVO 368(AX), X10
	MOVO 384(AX), X12
	MOVO 400(AX), X13
	MOVO 416(AX), X4
	MOVO X10, X7
	MOVO X12, X6
	MOVO X13, X1
	MOVO X4, X2
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD1 // PSUBD xmm10, xmm9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x06 // PSLLD xmm10, 6
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE7 // PSUBD xmm12, xmm7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x10 // PSLLD xmm12, 16
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xEE // PSUBD xmm13, xmm6
	MOVO X13, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x1A // PSLLD xmm13, 26
	POR X11, X10
	POR X12, X13
	POR X10, X13
	MOVO X13, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x06 // PSRLD xmm0, 6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xE1 // PSUBD xmm4, xmm1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x04 // PSLLD xmm4, 4
	MOVO 432(AX), X8
	MOVO 448(AX), X5
	MOVO 464(AX), X14
	MOVO 480(AX), X15
	MOVO X8, X3
	MOVO X5, X9
	MOVO X14, X7
	MOVO X15, X6
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC2 // PSUBD xmm8, xmm2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0E // PSLLD xmm8, 14
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xEB // PSUBD xmm5, xmm3
	MOVO X5, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x18 // PSLLD xmm5, 24
	POR X0, X4
	POR X8, X5
	POR X4, X5
	MOVO X5, 128(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x08 // PSRLD xmm11, 8
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF1 // PSUBD xmm14, xmm9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x02 // PSLLD xmm14, 2
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xFF // PSUBD xmm15, xmm7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0C // PSLLD xmm15, 12
	MOVO 496(AX), X12
	MOVO X12, X10
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE6 // PSUBD xmm12, xmm6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x16 // PSLLD xmm12, 22
	POR X11, X14
	POR X15, X12
	POR X14, X12
	MOVO X12, 144(BX)
	MOVO X10, 0(DX)
	RET

// func dpack32_11(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_11(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0B // PSLLD xmm2, 11
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	MOVO X3, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x16 // PSLLD xmm3, 22
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x0A // PSRLD xmm7, 10
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC6 // PSUBD xmm8, xmm6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x01 // PSLLD xmm8, 1
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0C // PSLLD xmm9, 12
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	MOVO X10, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x17 // PSLLD xmm10, 23
	POR X7, X8
	POR X9, X10
	POR X8, X10
	MOVO X10, 16(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x09 // PSRLD xmm0, 9
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDE // PSUBD xmm11, xmm14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x02 // PSLLD xmm11, 2
	MOVO 112(AX), X4
	MOVO 128(AX), X5
	MOVO 144(AX), X1
	MOVO 160(AX), X3
	MOVO X4, X2
	MOVO X5, X6
	MOVO X1, X12
	MOVO X3, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE7 // PSUBD xmm4, xmm15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0D // PSLLD xmm4, 13
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xEA // PSUBD xmm5, xmm2
	MOVO X5, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x18 // PSLLD xmm5, 24
	POR X0, X11
	POR X4, X5
	POR X11, X5
	MOVO X5, 32(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x08 // PSRLD xmm7, 8
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xCE // PSUBD xmm1, xmm6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x03 // PSLLD xmm1, 3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xDC // PSUBD xmm3, xmm12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0E // PSLLD xmm3, 14
	MOVO 176(AX), X9
	MOVO 192(AX), X8
	MOVO 208(AX), X10
	MOVO 224(AX), X14
	MOVO X9, X15
	MOVO X8, X2
	MOVO X10, X0
	MOVO X14, X4
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCD // PSUBD xmm9, xmm13
	MOVO X9, X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x19 // PSLLD xmm9, 25
	POR X7, X1
	POR X3, X9
	POR X1, X9
	MOVO X9, 48(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x07 // PSRLD xmm11, 7
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC7 // PSUBD xmm8, xmm15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x04 // PSLLD xmm8, 4
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xD2 // PSUBD xmm10, xmm2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0F // PSLLD xmm10, 15
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF0 // PSUBD xmm14, xmm0
	MOVO X14, X5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1A // PSLLD xmm14, 26
	POR X11, X8
	POR X10, X14
	POR X8, X14
	MOVO X14, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x06 // PSRLD xmm5, 6
	MOVO 240(AX), X6
	MOVO 256(AX), X12
	MOVO 272(AX), X13
	MOVO 288(AX), X7
	MOVO X6, X3
	MOVO X12, X1
	MOVO X13, X9
	MOVO X7, X15
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF4 // PSUBD xmm6, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x05 // PSLLD xmm6, 5
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE3 // PSUBD xmm12, xmm3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x10 // PSLLD xmm12, 16
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE9 // PSUBD xmm13, xmm1
	MOVO X13, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x1B // PSLLD xmm13, 27
	POR X5, X6
	POR X12, X13
	POR X6, X13
	MOVO X13, 80(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x05 // PSRLD xmm2, 5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF9 // PSUBD xmm7, xmm9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x06 // PSLLD xmm7, 6
	MOVO 304(AX), X0
	MOVO 320(AX), X11
	MOVO 336(AX), X10
	MOVO 352(AX), X8
	MOVO X0, X14
	MOVO X11, X4
	MOVO X10, X3
	MOVO X8, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC7 // PSUBD xmm0, xmm15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x11 // PSLLD xmm0, 17
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDE // PSUBD xmm11, xmm14
	MOVO X11, X5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1C // PSLLD xmm11, 28
	POR X2, X7
	POR X0, X11
	POR X7, X11
	MOVO X11, 96(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x04 // PSRLD xmm5, 4
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm10, xmm4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x07 // PSLLD xmm10, 7
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC3 // PSUBD xmm8, xmm3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x12 // PSLLD xmm8, 18
	MOVO 368(AX), X12
	MOVO 384(AX), X6
	MOVO 400(AX), X13
	MOVO 416(AX), X9
	MOVO X12, X15
	MOVO X6, X14
	MOVO X13, X2
	MOVO X9, X0
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE1 // PSUBD xmm12, xmm1
	MOVO X12, X7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x1D // PSLLD xmm12, 29
	POR X5, X10
	POR X8, X12
	POR X10, X12
	MOVO X12, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x03 // PSRLD xmm7, 3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF7 // PSUBD xmm6, xmm15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x08 // PSLLD xmm6, 8
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xEE // PSUBD xmm13, xmm14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x13 // PSLLD xmm13, 19
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xCA // PSUBD xmm9, xmm2
	MOVO X9, X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1E // PSLLD xmm9, 30
	POR X7, X6
	POR X13, X9
	POR X6, X9
	MOVO X9, 128(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x02 // PSRLD xmm11, 2
	MOVO 432(AX), X4
	MOVO 448(AX), X3
	MOVO 464(AX), X1
	MOVO 480(AX), X5
	MOVO X4, X8
	MOVO X3, X10
	MOVO X1, X12
	MOVO X5, X15
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xE0 // PSUBD xmm4, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x09 // PSLLD xmm4, 9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD8 // PSUBD xmm3, xmm8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x14 // PSLLD xmm3, 20
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xCA // PSUBD xmm1, xmm10
	MOVO X1, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1F // PSLLD xmm1, 31
	POR X11, X4
	POR X3, X1
	POR X4, X1
	MOVO X1, 144(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x01 // PSRLD xmm14, 1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xEC // PSUBD xmm5, xmm12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0A // PSLLD xmm5, 10
	MOVO 496(AX), X2
	MOVO X2, X7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD7 // PSUBD xmm2, xmm15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x15 // PSLLD xmm2, 21
	POR X14, X5
	POR X2, X5
	MOVO X5, 160(BX)
	MOVO X7, 0(DX)
	RET

// func dpack32_12(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_12(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0C // PSLLD xmm2, 12
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	MOVO X3, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x18 // PSLLD xmm3, 24
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x08 // PSRLD xmm7, 8
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC6 // PSUBD xmm8, xmm6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x04 // PSLLD xmm8, 4
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x10 // PSLLD xmm9, 16
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	MOVO X10, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1C // PSLLD xmm10, 28
	POR X7, X8
	POR X9, X10
	POR X8, X10
	MOVO X10, 16(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x04 // PSRLD xmm0, 4
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDE // PSUBD xmm11, xmm14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x08 // PSLLD xmm11, 8
	MOVO 112(AX), X4
	MOVO 128(AX), X5
	MOVO 144(AX), X1
	MOVO 160(AX), X3
	MOVO X4, X2
	MOVO X5, X6
	MOVO X1, X12
	MOVO X3, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE7 // PSUBD xmm4, xmm15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x14 // PSLLD xmm4, 20
	POR X0, X11
	POR X4, X11
	MOVO X11, 32(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xEA // PSUBD xmm5, xmm2
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xCE // PSUBD xmm1, xmm6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0C // PSLLD xmm1, 12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xDC // PSUBD xmm3, xmm12
	MOVO X3, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x18 // PSLLD xmm3, 24
	POR X5, X1
	POR X3, X1
	MOVO X1, 48(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x08 // PSRLD xmm7, 8
	MOVO 176(AX), X9
	MOVO 192(AX), X8
	MOVO 208(AX), X10
	MOVO 224(AX), X14
	MOVO X9, X15
	MOVO X8, X0
	MOVO X10, X4
	MOVO X14, X11
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCD // PSUBD xmm9, xmm13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x04 // PSLLD xmm9, 4
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC7 // PSUBD xmm8, xmm15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x10 // PSLLD xmm8, 16
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xD0 // PSUBD xmm10, xmm0
	MOVO X10, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1C // PSLLD xmm10, 28
	POR X7, X9
	POR X8, X10
	POR X9, X10
	MOVO X10, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x04 // PSRLD xmm2, 4
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF4 // PSUBD xmm14, xmm4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x08 // PSLLD xmm14, 8
	MOVO 240(AX), X6
	MOVO 256(AX), X12
	MOVO 272(AX), X5
	MOVO 288(AX), X3
	MOVO X6, X1
	MOVO X12, X13
	MOVO X5, X15
	MOVO X3, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF3 // PSUBD xmm6, xmm11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x14 // PSLLD xmm6, 20
	POR X2, X14
	POR X6, X14
	MOVO X14, 80(BX)
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE1 // PSUBD xmm12, xmm1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xED // PSUBD xmm5, xmm13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0C // PSLLD xmm5, 12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xDF // PSUBD xmm3, xmm15
	MOVO X3, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x18 // PSLLD xmm3, 24
	POR X12, X5
	POR X3, X5
	MOVO X5, 96(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x08 // PSRLD xmm7, 8
	MOVO 304(AX), X8
	MOVO 320(AX), X9
	MOVO 336(AX), X10
	MOVO 352(AX), X4
	MOVO X8, X11
	MOVO X9, X2
	MOVO X10, X6
	MOVO X4, X14
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC0 // PSUBD xmm8, xmm0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x04 // PSLLD xmm8, 4
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCB // PSUBD xmm9, xmm11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x10 // PSLLD xmm9, 16
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xD2 // PSUBD xmm10, xmm2
	MOVO X10, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1C // PSLLD xmm10, 28
	POR X7, X8
	POR X9, X10
	POR X8, X10
	MOVO X10, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x04 // PSRLD xmm1, 4
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xE6 // PSUBD xmm4, xmm6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x08 // PSLLD xmm4, 8
	MOVO 368(AX), X13
	MOVO 384(AX), X15
	MOVO 400(AX), X12
	MOVO 416(AX), X3
	MOVO X13, X5
	MOVO X15, X0
	MOVO X12, X11
	MOVO X3, X2
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xEE // PSUBD xmm13, xmm14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x14 // PSLLD xmm13, 20
	POR X1, X4
	POR X13, X4
	MOVO X4, 128(BX)
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xFD // PSUBD xmm15, xmm5
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE0 // PSUBD xmm12, xmm0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0C // PSLLD xmm12, 12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xDB // PSUBD xmm3, xmm11
	MOVO X3, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x18 // PSLLD xmm3, 24
	POR X15, X12
	POR X3, X12
	MOVO X12, 144(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x08 // PSRLD xmm7, 8
	MOVO 432(AX), X9
	MOVO 448(AX), X8
	MOVO 464(AX), X10
	MOVO 480(AX), X6
	MOVO X9, X14
	MOVO X8, X1
	MOVO X10, X13
	MOVO X6, X4
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xCA // PSUBD xmm9, xmm2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x04 // PSLLD xmm9, 4
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC6 // PSUBD xmm8, xmm14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x10 // PSLLD xmm8, 16
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xD1 // PSUBD xmm10, xmm1
	MOVO X10, X5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1C // PSLLD xmm10, 28
	POR X7, X9
	POR X8, X10
	POR X9, X10
	MOVO X10, 160(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x04 // PSRLD xmm5, 4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF5 // PSUBD xmm6, xmm13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x08 // PSLLD xmm6, 8
	MOVO 496(AX), X0
	MOVO X0, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC4 // PSUBD xmm0, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x14 // PSLLD xmm0, 20
	POR X5, X6
	POR X0, X6
	MOVO X6, 176(BX)
	MOVO X11, 0(DX)
	RET

// func dpack32_13(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_13(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0D // PSLLD xmm2, 13
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	MOVO X3, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1A // PSLLD xmm3, 26
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x06 // PSRLD xmm7, 6
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC6 // PSUBD xmm8, xmm6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x07 // PSLLD xmm8, 7
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm12
	MOVO X9, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x14 // PSLLD xmm9, 20
	POR X7, X8
	POR X9, X8
	MOVO X8, 16(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x0C // PSRLD xmm0, 12
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x01 // PSLLD xmm10, 1
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDE // PSUBD xmm11, xmm14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0E // PSLLD xmm11, 14
	MOVO 112(AX), X4
	MOVO 128(AX), X5
	MOVO 144(AX), X1
	MOVO 160(AX), X3
	MOVO X4, X2
	MOVO X5, X6
	MOVO X1, X12
	MOVO X3, X7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE7 // PSUBD xmm4, xmm15
	MOVO X4, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x1B // PSLLD xmm4, 27
	POR X0, X10
	POR X11, X4
	POR X10, X4
	MOVO X4, 32(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x05 // PSRLD xmm9, 5
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xEA // PSUBD xmm5, xmm2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x08 // PSLLD xmm5, 8
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xCE // PSUBD xmm1, xmm6
	MOVO X1, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x15 // PSLLD xmm1, 21
	POR X9, X5
	POR X1, X5
	MOVO X5, 48(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x0B // PSRLD xmm8, 11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xDC // PSUBD xmm3, xmm12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x02 // PSLLD xmm3, 2
	MOVO 176(AX), X13
	MOVO 192(AX), X14
	MOVO 208(AX), X15
	MOVO 224(AX), X0
	MOVO X13, X11
	MOVO X14, X10
	MOVO X15, X4
	MOVO X0, X2
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xEF // PSUBD xmm13, xmm7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0F // PSLLD xmm13, 15
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF3 // PSUBD xmm14, xmm11
	MOVO X14, X6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1C // PSLLD xmm14, 28
	POR X8, X3
	POR X13, X14
	POR X3, X14
	MOVO X14, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x04 // PSRLD xmm6, 4
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xFA // PSUBD xmm15, xmm10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x09 // PSLLD xmm15, 9
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC4 // PSUBD xmm0, xmm4
	MOVO X0, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x16 // PSLLD xmm0, 22
	POR X6, X15
	POR X0, X15
	MOVO X15, 80(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x0A // PSRLD xmm9, 10
	MOVO 240(AX), X1
	MOVO 256(AX), X5
	MOVO 272(AX), X12
	MOVO 288(AX), X7
	MOVO X1, X11
	MOVO X5, X8
	MOVO X12, X13
	MOVO X7, X3
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xCA // PSUBD xmm1, xmm2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x03 // PSLLD xmm1, 3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xEB // PSUBD xmm5, xmm11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x10 // PSLLD xmm5, 16
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE0 // PSUBD xmm12, xmm8
	MOVO X12, X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x1D // PSLLD xmm12, 29
	POR X9, X1
	POR X5, X12
	POR X1, X12
	MOVO X12, 96(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x03 // PSRLD xmm14, 3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xFD // PSUBD xmm7, xmm13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0A // PSLLD xmm7, 10
	MOVO 304(AX), X10
	MOVO 320(AX), X4
	MOVO 336(AX), X6
	MOVO 352(AX), X0
	MOVO X10, X15
	MOVO X4, X2
	MOVO X6, X11
	MOVO X0, X8
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xD3 // PSUBD xmm10, xmm3
	MOVO X10, X9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x17 // PSLLD xmm10, 23
	POR X14, X7
	POR X10, X7
	MOVO X7, 112(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x09 // PSRLD xmm9, 9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE7 // PSUBD xmm4, xmm15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x04 // PSLLD xmm4, 4
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF2 // PSUBD xmm6, xmm2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x11 // PSLLD xmm6, 17
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC3 // PSUBD xmm0, xmm11
	MOVO X0, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1E // PSLLD xmm0, 30
	POR X9, X4
	POR X6, X0
	POR X4, X0
	MOVO X0, 128(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x02 // PSRLD xmm5, 2
	MOVO 368(AX), X1
	MOVO 384(AX), X12
	MOVO 400(AX), X13
	MOVO 416(AX), X3
	MOVO X1, X14
	MOVO X12, X10
	MOVO X13, X7
	MOVO X3, X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0B // PSLLD xmm1, 11
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE6 // PSUBD xmm12, xmm14
	MOVO X12, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x18 // PSLLD xmm12, 24
	POR X5, X1
	POR X12, X1
	MOVO X1, 144(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x08 // PSRLD xmm2, 8
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xEA // PSUBD xmm13, xmm10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x05 // PSLLD xmm13, 5
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDF // PSUBD xmm3, xmm7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x12 // PSLLD xmm3, 18
	MOVO 432(AX), X11
	MOVO 448(AX), X9
	MOVO 464(AX), X6
	MOVO 480(AX), X4
	MOVO X11, X0
	MOVO X9, X8
	MOVO X6, X14
	MOVO X4, X5
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDF // PSUBD xmm11, xmm15
	MOVO X11, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1F // PSLLD xmm11, 31
	POR X2, X13
	POR X3, X11
	POR X13, X11
	MOVO X11, 160(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x01 // PSRLD xmm12, 1
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm9, xmm0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0C // PSLLD xmm9, 12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF0 // PSUBD xmm6, xmm8
	MOVO X6, X1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x19 // PSLLD xmm6, 25
	POR X12, X9
	POR X6, X9
	MOVO X9, 176(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x07 // PSRLD xmm1, 7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE6 // PSUBD xmm4, xmm14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x06 // PSLLD xmm4, 6
	MOVO 496(AX), X10
	MOVO X10, X7
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x13 // PSLLD xmm10, 19
	POR X1, X4
	POR X10, X4
	MOVO X4, 192(BX)
	MOVO X7, 0(DX)
	RET

// func dpack32_14(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_14(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0E // PSLLD xmm2, 14
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	MOVO X3, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1C // PSLLD xmm3, 28
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x04 // PSRLD xmm7, 4
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC6 // PSUBD xmm8, xmm6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0A // PSLLD xmm8, 10
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm12
	MOVO X9, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x18 // PSLLD xmm9, 24
	POR X7, X8
	POR X9, X8
	MOVO X8, 16(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x08 // PSRLD xmm0, 8
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x06 // PSLLD xmm10, 6
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDE // PSUBD xmm11, xmm14
	MOVO X11, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x14 // PSLLD xmm11, 20
	POR X0, X10
	POR X11, X10
	MOVO X10, 32(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x0C // PSRLD xmm4, 12
	MOVO 112(AX), X5
	MOVO 128(AX), X1
	MOVO 144(AX), X3
	MOVO 160(AX), X2
	MOVO X5, X6
	MOVO X1, X12
	MOVO X3, X7
	MOVO X2, X9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xEF // PSUBD xmm5, xmm15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x02 // PSLLD xmm5, 2
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xCE // PSUBD xmm1, xmm6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x10 // PSLLD xmm1, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xDC // PSUBD xmm3, xmm12
	MOVO X3, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1E // PSLLD xmm3, 30
	POR X4, X5
	POR X1, X3
	POR X5, X3
	MOVO X3, 48(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x02 // PSRLD xmm8, 2
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD7 // PSUBD xmm2, xmm7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0C // PSLLD xmm2, 12
	MOVO 176(AX), X13
	MOVO 192(AX), X14
	MOVO 208(AX), X0
	MOVO 224(AX), X11
	MOVO X13, X10
	MOVO X14, X15
	MOVO X0, X6
	MOVO X11, X12
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE9 // PSUBD xmm13, xmm9
	MOVO X13, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x1A // PSLLD xmm13, 26
	POR X8, X2
	POR X13, X2
	MOVO X2, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x06 // PSRLD xmm4, 6
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF2 // PSUBD xmm14, xmm10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x08 // PSLLD xmm14, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC7 // PSUBD xmm0, xmm15
	MOVO X0, X1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x16 // PSLLD xmm0, 22
	POR X4, X14
	POR X0, X14
	MOVO X14, 80(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x0A // PSRLD xmm1, 10
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xDE // PSUBD xmm11, xmm6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x04 // PSLLD xmm11, 4
	MOVO 240(AX), X5
	MOVO 256(AX), X3
	MOVO 272(AX), X7
	MOVO 288(AX), X9
	MOVO X5, X8
	MOVO X3, X13
	MOVO X7, X2
	MOVO X9, X10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xEC // PSUBD xmm5, xmm12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x12 // PSLLD xmm5, 18
	POR X1, X11
	POR X5, X11
	MOVO X11, 96(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD8 // PSUBD xmm3, xmm8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xFD // PSUBD xmm7, xmm13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0E // PSLLD xmm7, 14
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xCA // PSUBD xmm9, xmm2
	MOVO X9, X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1C // PSLLD xmm9, 28
	POR X3, X7
	POR X9, X7
	MOVO X7, 112(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x04 // PSRLD xmm15, 4
	MOVO 304(AX), X4
	MOVO 320(AX), X0
	MOVO 336(AX), X14
	MOVO 352(AX), X6
	MOVO X4, X12
	MOVO X0, X1
	MOVO X14, X5
	MOVO X6, X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE2 // PSUBD xmm4, xmm10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0A // PSLLD xmm4, 10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC4 // PSUBD xmm0, xmm12
	MOVO X0, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x18 // PSLLD xmm0, 24
	POR X15, X4
	POR X0, X4
	MOVO X4, 128(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x08 // PSRLD xmm8, 8
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF1 // PSUBD xmm14, xmm1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x06 // PSLLD xmm14, 6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF5 // PSUBD xmm6, xmm5
	MOVO X6, X13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x14 // PSLLD xmm6, 20
	POR X8, X14
	POR X6, X14
	MOVO X14, 144(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x0C // PSRLD xmm13, 12
	MOVO 368(AX), X2
	MOVO 384(AX), X3
	MOVO 400(AX), X9
	MOVO 416(AX), X7
	MOVO X2, X10
	MOVO X3, X12
	MOVO X9, X15
	MOVO X7, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD3 // PSUBD xmm2, xmm11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x02 // PSLLD xmm2, 2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xDA // PSUBD xmm3, xmm10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x10 // PSLLD xmm3, 16
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm12
	MOVO X9, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1E // PSLLD xmm9, 30
	POR X13, X2
	POR X3, X9
	POR X2, X9
	MOVO X9, 160(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x02 // PSRLD xmm4, 2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xFF // PSUBD xmm7, xmm15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0C // PSLLD xmm7, 12
	MOVO 432(AX), X1
	MOVO 448(AX), X5
	MOVO 464(AX), X8
	MOVO 480(AX), X6
	MOVO X1, X14
	MOVO X5, X11
	MOVO X8, X10
	MOVO X6, X12
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	MOVO X1, X13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1A // PSLLD xmm1, 26
	POR X4, X7
	POR X1, X7
	MOVO X7, 176(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x06 // PSRLD xmm13, 6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xEE // PSUBD xmm5, xmm14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x08 // PSLLD xmm5, 8
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC3 // PSUBD xmm8, xmm11
	MOVO X8, X3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x16 // PSLLD xmm8, 22
	POR X13, X5
	POR X8, X5
	MOVO X5, 192(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x0A // PSRLD xmm3, 10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF2 // PSUBD xmm6, xmm10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x04 // PSLLD xmm6, 4
	MOVO 496(AX), X2
	MOVO X2, X9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x12 // PSLLD xmm2, 18
	POR X3, X6
	POR X2, X6
	MOVO X6, 208(BX)
	MOVO X9, 0(DX)
	RET

// func dpack32_15(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_15(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0F // PSLLD xmm2, 15
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	MOVO X3, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1E // PSLLD xmm3, 30
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x02 // PSRLD xmm7, 2
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC6 // PSUBD xmm8, xmm6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0D // PSLLD xmm8, 13
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm12
	MOVO X9, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1C // PSLLD xmm9, 28
	POR X7, X8
	POR X9, X8
	MOVO X8, 16(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x04 // PSRLD xmm0, 4
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0B // PSLLD xmm10, 11
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDE // PSUBD xmm11, xmm14
	MOVO X11, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1A // PSLLD xmm11, 26
	POR X0, X10
	POR X11, X10
	MOVO X10, 32(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x06 // PSRLD xmm4, 6
	MOVO 112(AX), X5
	MOVO 128(AX), X1
	MOVO 144(AX), X3
	MOVO 160(AX), X2
	MOVO X5, X6
	MOVO X1, X12
	MOVO X3, X7
	MOVO X2, X9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xEF // PSUBD xmm5, xmm15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x09 // PSLLD xmm5, 9
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xCE // PSUBD xmm1, xmm6
	MOVO X1, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x18 // PSLLD xmm1, 24
	POR X4, X5
	POR X1, X5
	MOVO X5, 48(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x08 // PSRLD xmm8, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xDC // PSUBD xmm3, xmm12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x07 // PSLLD xmm3, 7
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD7 // PSUBD xmm2, xmm7
	MOVO X2, X13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x16 // PSLLD xmm2, 22
	POR X8, X3
	POR X2, X3
	MOVO X3, 64(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x0A // PSRLD xmm13, 10
	MOVO 176(AX), X14
	MOVO 192(AX), X0
	MOVO 208(AX), X11
	MOVO 224(AX), X10
	MOVO X14, X15
	MOVO X0, X6
	MOVO X11, X4
	MOVO X10, X1
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF1 // PSUBD xmm14, xmm9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x05 // PSLLD xmm14, 5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC7 // PSUBD xmm0, xmm15
	MOVO X0, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x14 // PSLLD xmm0, 20
	POR X13, X14
	POR X0, X14
	MOVO X14, 80(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x0C // PSRLD xmm5, 12
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xDE // PSUBD xmm11, xmm6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x03 // PSLLD xmm11, 3
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm10, xmm4
	MOVO X10, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x12 // PSLLD xmm10, 18
	POR X5, X11
	POR X10, X11
	MOVO X11, 96(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x0E // PSRLD xmm12, 14
	MOVO 240(AX), X7
	MOVO 256(AX), X8
	MOVO 272(AX), X2
	MOVO 288(AX), X3
	MOVO X7, X9
	MOVO X8, X15
	MOVO X2, X13
	MOVO X3, X0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF9 // PSUBD xmm7, xmm1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x01 // PSLLD xmm7, 1
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC1 // PSUBD xmm8, xmm9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x10 // PSLLD xmm8, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD7 // PSUBD xmm2, xmm15
	MOVO X2, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1F // PSLLD xmm2, 31
	POR X12, X7
	POR X8, X2
	POR X7, X2
	MOVO X2, 112(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x01 // PSRLD xmm14, 1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0E // PSLLD xmm3, 14
	MOVO 304(AX), X6
	MOVO 320(AX), X4
	MOVO 336(AX), X5
	MOVO 352(AX), X10
	MOVO X6, X11
	MOVO X4, X1
	MOVO X5, X9
	MOVO X10, X15
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF0 // PSUBD xmm6, xmm0
	MOVO X6, X12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1D // PSLLD xmm6, 29
	POR X14, X3
	POR X6, X3
	MOVO X3, 128(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x03 // PSRLD xmm12, 3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE3 // PSUBD xmm4, xmm11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0C // PSLLD xmm4, 12
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xE9 // PSUBD xmm5, xmm1
	MOVO X5, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x1B // PSLLD xmm5, 27
	POR X12, X4
	POR X5, X4
	MOVO X4, 144(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x05 // PSRLD xmm8, 5
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD1 // PSUBD xmm10, xmm9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0A // PSLLD xmm10, 10
	MOVO 368(AX), X7
	MOVO 384(AX), X2
	MOVO 400(AX), X13
	MOVO 416(AX), X0
	MOVO X7, X14
	MOVO X2, X6
	MOVO X13, X3
	MOVO X0, X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xFF // PSUBD xmm7, xmm15
	MOVO X7, X1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x19 // PSLLD xmm7, 25
	POR X8, X10
	POR X7, X10
	MOVO X10, 160(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x07 // PSRLD xmm1, 7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD6 // PSUBD xmm2, xmm14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x08 // PSLLD xmm2, 8
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xEE // PSUBD xmm13, xmm6
	MOVO X13, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x17 // PSLLD xmm13, 23
	POR X1, X2
	POR X13, X2
	MOVO X2, 176(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x09 // PSRLD xmm12, 9
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC3 // PSUBD xmm0, xmm3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x06 // PSLLD xmm0, 6
	MOVO 432(AX), X5
	MOVO 448(AX), X4
	MOVO 464(AX), X9
	MOVO 480(AX), X15
	MOVO X5, X8
	MOVO X4, X7
	MOVO X9, X10
	MOVO X15, X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xEB // PSUBD xmm5, xmm11
	MOVO X5, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x15 // PSLLD xmm5, 21
	POR X12, X0
	POR X5, X0
	MOVO X0, 192(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x0B // PSRLD xmm6, 11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE0 // PSUBD xmm4, xmm8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x04 // PSLLD xmm4, 4
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xCF // PSUBD xmm9, xmm7
	MOVO X9, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x13 // PSLLD xmm9, 19
	POR X6, X4
	POR X9, X4
	MOVO X4, 208(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x0D // PSRLD xmm1, 13
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xFA // PSUBD xmm15, xmm10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x02 // PSLLD xmm15, 2
	MOVO 496(AX), X13
	MOVO X13, X2
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xEE // PSUBD xmm13, xmm14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x11 // PSLLD xmm13, 17
	POR X1, X15
	POR X13, X15
	MOVO X15, 224(BX)
	MOVO X2, 0(DX)
	RET

// func dpack32_16(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_16(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x10 // PSLLD xmm2, 16
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm7, xmm6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x10 // PSLLD xmm7, 16
	POR X3, X7
	MOVO X7, 16(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC3 // PSUBD xmm8, xmm11
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x10 // PSLLD xmm9, 16
	POR X8, X9
	MOVO X9, 32(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	MOVO 112(AX), X15
	MOVO 128(AX), X0
	MOVO 144(AX), X4
	MOVO 160(AX), X1
	MOVO X15, X2
	MOVO X0, X5
	MOVO X4, X6
	MOVO X1, X3
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm15, xmm14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x10 // PSLLD xmm15, 16
	POR X10, X15
	MOVO X15, 48(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC2 // PSUBD xmm0, xmm2
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xE5 // PSUBD xmm4, xmm5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x10 // PSLLD xmm4, 16
	POR X0, X4
	MOVO X4, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xCE // PSUBD xmm1, xmm6
	MOVO 176(AX), X7
	MOVO 192(AX), X11
	MOVO 208(AX), X12
	MOVO 224(AX), X8
	MOVO X7, X9
	MOVO X11, X13
	MOVO X12, X14
	MOVO X8, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xFB // PSUBD xmm7, xmm3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x10 // PSLLD xmm7, 16
	POR X1, X7
	MOVO X7, 80(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD9 // PSUBD xmm11, xmm9
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE5 // PSUBD xmm12, xmm13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x10 // PSLLD xmm12, 16
	POR X11, X12
	MOVO X12, 96(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC6 // PSUBD xmm8, xmm14
	MOVO 240(AX), X15
	MOVO 256(AX), X2
	MOVO 272(AX), X5
	MOVO 288(AX), X0
	MOVO X15, X4
	MOVO X2, X6
	MOVO X5, X3
	MOVO X0, X1
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xFA // PSUBD xmm15, xmm10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x10 // PSLLD xmm15, 16
	POR X8, X15
	MOVO X15, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xEE // PSUBD xmm5, xmm6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x10 // PSLLD xmm5, 16
	POR X2, X5
	MOVO X5, 128(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC3 // PSUBD xmm0, xmm3
	MOVO 304(AX), X7
	MOVO 320(AX), X9
	MOVO 336(AX), X13
	MOVO 352(AX), X11
	MOVO X7, X12
	MOVO X9, X14
	MOVO X13, X10
	MOVO X11, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF9 // PSUBD xmm7, xmm1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x10 // PSLLD xmm7, 16
	POR X0, X7
	MOVO X7, 144(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm12
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xEE // PSUBD xmm13, xmm14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x10 // PSLLD xmm13, 16
	POR X9, X13
	MOVO X13, 160(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDA // PSUBD xmm11, xmm10
	MOVO 368(AX), X15
	MOVO 384(AX), X4
	MOVO 400(AX), X6
	MOVO 416(AX), X2
	MOVO X15, X5
	MOVO X4, X3
	MOVO X6, X1
	MOVO X2, X0
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF8 // PSUBD xmm15, xmm8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x10 // PSLLD xmm15, 16
	POR X11, X15
	MOVO X15, 176(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xE5 // PSUBD xmm4, xmm5
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF3 // PSUBD xmm6, xmm3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x10 // PSLLD xmm6, 16
	POR X4, X6
	MOVO X6, 192(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD1 // PSUBD xmm2, xmm1
	MOVO 432(AX), X7
	MOVO 448(AX), X12
	MOVO 464(AX), X14
	MOVO 480(AX), X9
	MOVO X7, X13
	MOVO X12, X10
	MOVO X14, X8
	MOVO X9, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF8 // PSUBD xmm7, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x10 // PSLLD xmm7, 16
	POR X2, X7
	MOVO X7, 208(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE5 // PSUBD xmm12, xmm13
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF2 // PSUBD xmm14, xmm10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x10 // PSLLD xmm14, 16
	POR X12, X14
	MOVO X14, 224(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm9, xmm8
	MOVO 496(AX), X15
	MOVO X15, X5
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xFB // PSUBD xmm15, xmm11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x10 // PSLLD xmm15, 16
	POR X9, X15
	MOVO X15, 240(BX)
	MOVO X5, 0(DX)
	RET

// func dpack32_17(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_17(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	MOVO X2, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x11 // PSLLD xmm2, 17
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x0F // PSRLD xmm7, 15
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x02 // PSLLD xmm3, 2
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC6 // PSUBD xmm8, xmm6
	MOVO X8, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x13 // PSLLD xmm8, 19
	POR X7, X3
	POR X8, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x0D // PSRLD xmm0, 13
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x04 // PSLLD xmm9, 4
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	MOVO X10, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x15 // PSLLD xmm10, 21
	POR X0, X9
	POR X10, X9
	MOVO X9, 32(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x0B // PSRLD xmm4, 11
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDE // PSUBD xmm11, xmm14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x06 // PSLLD xmm11, 6
	MOVO 112(AX), X1
	MOVO 128(AX), X2
	MOVO 144(AX), X5
	MOVO 160(AX), X6
	MOVO X1, X7
	MOVO X2, X8
	MOVO X5, X3
	MOVO X6, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xCF // PSUBD xmm1, xmm15
	MOVO X1, X13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x17 // PSLLD xmm1, 23
	POR X4, X11
	POR X1, X11
	MOVO X11, 48(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x09 // PSRLD xmm13, 9
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD7 // PSUBD xmm2, xmm7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x08 // PSLLD xmm2, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE8 // PSUBD xmm5, xmm8
	MOVO X5, X0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x19 // PSLLD xmm5, 25
	POR X13, X2
	POR X5, X2
	MOVO X2, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x07 // PSRLD xmm0, 7
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF3 // PSUBD xmm6, xmm3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0A // PSLLD xmm6, 10
	MOVO 176(AX), X10
	MOVO 192(AX), X9
	MOVO 208(AX), X14
	MOVO 224(AX), X15
	MOVO X10, X4
	MOVO X9, X1
	MOVO X14, X11
	MOVO X15, X7
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm10, xmm12
	MOVO X10, X8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1B // PSLLD xmm10, 27
	POR X0, X6
	POR X10, X6
	MOVO X6, 80(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x05 // PSRLD xmm8, 5
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0C // PSLLD xmm9, 12
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF1 // PSUBD xmm14, xmm1
	MOVO X14, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1D // PSLLD xmm14, 29
	POR X8, X9
	POR X14, X9
	MOVO X9, 96(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x03 // PSRLD xmm13, 3
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xFB // PSUBD xmm15, xmm11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0E // PSLLD xmm15, 14
	MOVO 240(AX), X5
	MOVO 256(AX), X2
	MOVO 272(AX), X3
	MOVO 288(AX), X12
	MOVO X5, X0
	MOVO X2, X10
	MOVO X3, X6
	MOVO X12, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xEF // PSUBD xmm5, xmm7
	MOVO X5, X1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x1F // PSLLD xmm5, 31
	POR X13, X15
	POR X5, X15
	MOVO X15, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x01 // PSRLD xmm1, 1
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD0 // PSUBD xmm2, xmm0
	MOVO X2, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x10 // PSLLD xmm2, 16
	POR X1, X2
	MOVO X2, 128(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x10 // PSRLD xmm8, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xDA // PSUBD xmm3, xmm10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x01 // PSLLD xmm3, 1
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE6 // PSUBD xmm12, xmm6
	MOVO X12, X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x12 // PSLLD xmm12, 18
	POR X8, X3
	POR X12, X3
	MOVO X3, 144(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x0E // PSRLD xmm14, 14
	MOVO 304(AX), X9
	MOVO 320(AX), X11
	MOVO 336(AX), X7
	MOVO 352(AX), X13
	MOVO X9, X5
	MOVO X11, X15
	MOVO X7, X0
	MOVO X13, X1
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x03 // PSLLD xmm9, 3
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm11, xmm5
	MOVO X11, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x14 // PSLLD xmm11, 20
	POR X14, X9
	POR X11, X9
	MOVO X9, 160(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x0C // PSRLD xmm2, 12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xFF // PSUBD xmm7, xmm15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x05 // PSLLD xmm7, 5
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE8 // PSUBD xmm13, xmm0
	MOVO X13, X10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x16 // PSLLD xmm13, 22
	POR X2, X7
	POR X13, X7
	MOVO X7, 176(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x0A // PSRLD xmm10, 10
	MOVO 368(AX), X6
	MOVO 384(AX), X8
	MOVO 400(AX), X12
	MOVO 416(AX), X3
	MOVO X6, X4
	MOVO X8, X5
	MOVO X12, X14
	MOVO X3, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF1 // PSUBD xmm6, xmm1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x07 // PSLLD xmm6, 7
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC4 // PSUBD xmm8, xmm4
	MOVO X8, X9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x18 // PSLLD xmm8, 24
	POR X10, X6
	POR X8, X6
	MOVO X6, 192(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x08 // PSRLD xmm9, 8
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE5 // PSUBD xmm12, xmm5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x09 // PSLLD xmm12, 9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xDE // PSUBD xmm3, xmm14
	MOVO X3, X15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1A // PSLLD xmm3, 26
	POR X9, X12
	POR X3, X12
	MOVO X12, 208(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x06 // PSRLD xmm15, 6
	MOVO 432(AX), X0
	MOVO 448(AX), X2
	MOVO 464(AX), X13
	MOVO 480(AX), X7
	MOVO X0, X1
	MOVO X2, X4
	MOVO X13, X10
	MOVO X7, X8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC3 // PSUBD xmm0, xmm11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0B // PSLLD xmm0, 11
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD1 // PSUBD xmm2, xmm1
	MOVO X2, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1C // PSLLD xmm2, 28
	POR X15, X0
	POR X2, X0
	MOVO X0, 224(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x04 // PSRLD xmm6, 4
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xEC // PSUBD xmm13, xmm4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0D // PSLLD xmm13, 13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xFA // PSUBD xmm7, xmm10
	MOVO X7, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1E // PSLLD xmm7, 30
	POR X6, X13
	POR X7, X13
	MOVO X13, 240(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x02 // PSRLD xmm5, 2
	MOVO 496(AX), X14
	MOVO X14, X9
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF0 // PSUBD xmm14, xmm8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0F // PSLLD xmm14, 15
	POR X5, X14
	MOVO X14, 256(BX)
	MOVO X9, 0(DX)
	RET

// func dpack32_18(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_18(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	MOVO X2, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x12 // PSLLD xmm2, 18
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x0E // PSRLD xmm7, 14
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x04 // PSLLD xmm3, 4
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC6 // PSUBD xmm8, xmm6
	MOVO X8, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x16 // PSLLD xmm8, 22
	POR X7, X3
	POR X8, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x0A // PSRLD xmm0, 10
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x08 // PSLLD xmm9, 8
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	MOVO X10, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1A // PSLLD xmm10, 26
	POR X0, X9
	POR X10, X9
	MOVO X9, 32(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x06 // PSRLD xmm4, 6
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDE // PSUBD xmm11, xmm14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0C // PSLLD xmm11, 12
	MOVO 112(AX), X1
	MOVO 128(AX), X2
	MOVO 144(AX), X5
	MOVO 160(AX), X6
	MOVO X1, X7
	MOVO X2, X8
	MOVO X5, X3
	MOVO X6, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xCF // PSUBD xmm1, xmm15
	MOVO X1, X13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1E // PSLLD xmm1, 30
	POR X4, X11
	POR X1, X11
	MOVO X11, 48(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x02 // PSRLD xmm13, 2
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD7 // PSUBD xmm2, xmm7
	MOVO X2, X0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x10 // PSLLD xmm2, 16
	POR X13, X2
	MOVO X2, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x10 // PSRLD xmm0, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE8 // PSUBD xmm5, xmm8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x02 // PSLLD xmm5, 2
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF3 // PSUBD xmm6, xmm3
	MOVO X6, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x14 // PSLLD xmm6, 20
	POR X0, X5
	POR X6, X5
	MOVO X5, 80(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x0C // PSRLD xmm10, 12
	MOVO 176(AX), X9
	MOVO 192(AX), X14
	MOVO 208(AX), X15
	MOVO 224(AX), X4
	MOVO X9, X1
	MOVO X14, X11
	MOVO X15, X7
	MOVO X4, X13
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x06 // PSLLD xmm9, 6
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF1 // PSUBD xmm14, xmm1
	MOVO X14, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x18 // PSLLD xmm14, 24
	POR X10, X9
	POR X14, X9
	MOVO X9, 96(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x08 // PSRLD xmm2, 8
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xFB // PSUBD xmm15, xmm11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0A // PSLLD xmm15, 10
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xE7 // PSUBD xmm4, xmm7
	MOVO X4, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x1C // PSLLD xmm4, 28
	POR X2, X15
	POR X4, X15
	MOVO X15, 112(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x04 // PSRLD xmm8, 4
	MOVO 240(AX), X3
	MOVO 256(AX), X0
	MOVO 272(AX), X6
	MOVO 288(AX), X5
	MOVO X3, X12
	MOVO X0, X1
	MOVO X6, X10
	MOVO X5, X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0E // PSLLD xmm3, 14
	POR X8, X3
	MOVO X3, 128(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC4 // PSUBD xmm0, xmm12
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF1 // PSUBD xmm6, xmm1
	MOVO X6, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x12 // PSLLD xmm6, 18
	POR X0, X6
	MOVO X6, 144(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x0E // PSRLD xmm9, 14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xEA // PSUBD xmm5, xmm10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x04 // PSLLD xmm5, 4
	MOVO 304(AX), X11
	MOVO 320(AX), X7
	MOVO 336(AX), X2
	MOVO 352(AX), X4
	MOVO X11, X15
	MOVO X7, X13
	MOVO X2, X8
	MOVO X4, X3
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDE // PSUBD xmm11, xmm14
	MOVO X11, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x16 // PSLLD xmm11, 22
	POR X9, X5
	POR X11, X5
	MOVO X5, 160(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x0A // PSRLD xmm12, 10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xFF // PSUBD xmm7, xmm15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x08 // PSLLD xmm7, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm2, xmm13
	MOVO X2, X1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1A // PSLLD xmm2, 26
	POR X12, X7
	POR X2, X7
	MOVO X7, 176(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x06 // PSRLD xmm1, 6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE0 // PSUBD xmm4, xmm8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0C // PSLLD xmm4, 12
	MOVO 368(AX), X0
	MOVO 384(AX), X6
	MOVO 400(AX), X10
	MOVO 416(AX), X14
	MOVO X0, X9
	MOVO X6, X11
	MOVO X10, X5
	MOVO X14, X15
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC3 // PSUBD xmm0, xmm3
	MOVO X0, X13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1E // PSLLD xmm0, 30
	POR X1, X4
	POR X0, X4
	MOVO X4, 192(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x02 // PSRLD xmm13, 2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF1 // PSUBD xmm6, xmm9
	MOVO X6, X12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x10 // PSLLD xmm6, 16
	POR X13, X6
	MOVO X6, 208(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x10 // PSRLD xmm12, 16
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD3 // PSUBD xmm10, xmm11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x02 // PSLLD xmm10, 2
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF5 // PSUBD xmm14, xmm5
	MOVO X14, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x14 // PSLLD xmm14, 20
	POR X12, X10
	POR X14, X10
	MOVO X10, 224(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x0C // PSRLD xmm2, 12
	MOVO 432(AX), X7
	MOVO 448(AX), X8
	MOVO 464(AX), X3
	MOVO 480(AX), X1
	MOVO X7, X0
	MOVO X8, X4
	MOVO X3, X9
	MOVO X1, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xFF // PSUBD xmm7, xmm15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x06 // PSLLD xmm7, 6
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC0 // PSUBD xmm8, xmm0
	MOVO X8, X6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x18 // PSLLD xmm8, 24
	POR X2, X7
	POR X8, X7
	MOVO X7, 240(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x08 // PSRLD xmm6, 8
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDC // PSUBD xmm3, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0A // PSLLD xmm3, 10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC9 // PSUBD xmm1, xmm9
	MOVO X1, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1C // PSLLD xmm1, 28
	POR X6, X3
	POR X1, X3
	MOVO X3, 256(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x04 // PSRLD xmm11, 4
	MOVO 496(AX), X5
	MOVO X5, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xED // PSUBD xmm5, xmm13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0E // PSLLD xmm5, 14
	POR X11, X5
	MOVO X5, 272(BX)
	MOVO X12, 0(DX)
	RET

// func dpack32_19(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_19(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	MOVO X2, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x13 // PSLLD xmm2, 19
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x0D // PSRLD xmm7, 13
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x06 // PSLLD xmm3, 6
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC6 // PSUBD xmm8, xmm6
	MOVO X8, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x19 // PSLLD xmm8, 25
	POR X7, X3
	POR X8, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x07 // PSRLD xmm0, 7
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0C // PSLLD xmm9, 12
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	MOVO X10, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1F // PSLLD xmm10, 31
	POR X0, X9
	POR X10, X9
	MOVO X9, 32(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x01 // PSRLD xmm4, 1
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDE // PSUBD xmm11, xmm14
	MOVO X11, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x12 // PSLLD xmm11, 18
	POR X4, X11
	MOVO X11, 48(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x0E // PSRLD xmm1, 14
	MOVO 112(AX), X2
	MOVO 128(AX), X5
	MOVO 144(AX), X6
	MOVO 160(AX), X7
	MOVO X2, X8
	MOVO X5, X3
	MOVO X6, X12
	MOVO X7, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD7 // PSUBD xmm2, xmm15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x05 // PSLLD xmm2, 5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE8 // PSUBD xmm5, xmm8
	MOVO X5, X0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x18 // PSLLD xmm5, 24
	POR X1, X2
	POR X5, X2
	MOVO X2, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x08 // PSRLD xmm0, 8
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF3 // PSUBD xmm6, xmm3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0B // PSLLD xmm6, 11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xFC // PSUBD xmm7, xmm12
	MOVO X7, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1E // PSLLD xmm7, 30
	POR X0, X6
	POR X7, X6
	MOVO X6, 80(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x02 // PSRLD xmm10, 2
	MOVO 176(AX), X9
	MOVO 192(AX), X14
	MOVO 208(AX), X4
	MOVO 224(AX), X11
	MOVO X9, X15
	MOVO X14, X8
	MOVO X4, X1
	MOVO X11, X5
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCD // PSUBD xmm9, xmm13
	MOVO X9, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x11 // PSLLD xmm9, 17
	POR X10, X9
	MOVO X9, 96(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x0F // PSRLD xmm2, 15
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF7 // PSUBD xmm14, xmm15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x04 // PSLLD xmm14, 4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE0 // PSUBD xmm4, xmm8
	MOVO X4, X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x17 // PSLLD xmm4, 23
	POR X2, X14
	POR X4, X14
	MOVO X14, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x09 // PSRLD xmm3, 9
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xD9 // PSUBD xmm11, xmm1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0A // PSLLD xmm11, 10
	MOVO 240(AX), X12
	MOVO 256(AX), X0
	MOVO 272(AX), X7
	MOVO 288(AX), X6
	MOVO X12, X13
	MOVO X0, X10
	MOVO X7, X9
	MOVO X6, X15
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE5 // PSUBD xmm12, xmm5
	MOVO X12, X8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x1D // PSLLD xmm12, 29
	POR X3, X11
	POR X12, X11
	MOVO X11, 128(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x03 // PSRLD xmm8, 3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC5 // PSUBD xmm0, xmm13
	MOVO X0, X2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x10 // PSLLD xmm0, 16
	POR X8, X0
	MOVO X0, 144(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x10 // PSRLD xmm2, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xFA // PSUBD xmm7, xmm10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x03 // PSLLD xmm7, 3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF1 // PSUBD xmm6, xmm9
	MOVO X6, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x16 // PSLLD xmm6, 22
	POR X2, X7
	POR X6, X7
	MOVO X7, 160(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x0A // PSRLD xmm4, 10
	MOVO 304(AX), X14
	MOVO 320(AX), X1
	MOVO 336(AX), X5
	MOVO 352(AX), X3
	MOVO X14, X12
	MOVO X1, X11
	MOVO X5, X13
	MOVO X3, X8
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF7 // PSUBD xmm14, xmm15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x09 // PSLLD xmm14, 9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm1, xmm12
	MOVO X1, X0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1C // PSLLD xmm1, 28
	POR X4, X14
	POR X1, X14
	MOVO X14, 176(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x04 // PSRLD xmm0, 4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xEB // PSUBD xmm5, xmm11
	MOVO X5, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0F // PSLLD xmm5, 15
	POR X0, X5
	MOVO X5, 192(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x11 // PSRLD xmm10, 17
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x02 // PSLLD xmm3, 2
	MOVO 368(AX), X9
	MOVO 384(AX), X2
	MOVO 400(AX), X6
	MOVO 416(AX), X7
	MOVO X9, X15
	MOVO X2, X12
	MOVO X6, X4
	MOVO X7, X1
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm9, xmm8
	MOVO X9, X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x15 // PSLLD xmm9, 21
	POR X10, X3
	POR X9, X3
	MOVO X3, 208(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x0B // PSRLD xmm14, 11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD7 // PSUBD xmm2, xmm15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x08 // PSLLD xmm2, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF4 // PSUBD xmm6, xmm12
	MOVO X6, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1B // PSLLD xmm6, 27
	POR X14, X2
	POR X6, X2
	MOVO X2, 224(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x05 // PSRLD xmm11, 5
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xFC // PSUBD xmm7, xmm4
	MOVO X7, X0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0E // PSLLD xmm7, 14
	POR X11, X7
	MOVO X7, 240(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x12 // PSRLD xmm0, 18
	MOVO 432(AX), X5
	MOVO 448(AX), X13
	MOVO 464(AX), X8
	MOVO 480(AX), X10
	MOVO X5, X9
	MOVO X13, X3
	MOVO X8, X15
	MOVO X10, X12
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xE9 // PSUBD xmm5, xmm1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x01 // PSLLD xmm5, 1
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE9 // PSUBD xmm13, xmm9
	MOVO X13, X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x14 // PSLLD xmm13, 20
	POR X0, X5
	POR X13, X5
	MOVO X5, 256(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x0C // PSRLD xmm14, 12
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC3 // PSUBD xmm8, xmm3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x07 // PSLLD xmm8, 7
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD7 // PSUBD xmm10, xmm15
	MOVO X10, X6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1A // PSLLD xmm10, 26
	POR X14, X8
	POR X10, X8
	MOVO X8, 272(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x06 // PSRLD xmm6, 6
	MOVO 496(AX), X2
	MOVO X2, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0D // PSLLD xmm2, 13
	POR X6, X2
	MOVO X2, 288(BX)
	MOVO X4, 0(DX)
	RET

// func dpack32_20(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_20(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	MOVO X2, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x14 // PSLLD xmm2, 20
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x0C // PSRLD xmm7, 12
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x08 // PSLLD xmm3, 8
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC6 // PSUBD xmm8, xmm6
	MOVO X8, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1C // PSLLD xmm8, 28
	POR X7, X3
	POR X8, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x04 // PSRLD xmm0, 4
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm12
	MOVO X9, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x10 // PSLLD xmm9, 16
	POR X0, X9
	MOVO X9, 32(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x10 // PSRLD xmm4, 16
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x04 // PSLLD xmm10, 4
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDE // PSUBD xmm11, xmm14
	MOVO X11, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x18 // PSLLD xmm11, 24
	POR X4, X10
	POR X11, X10
	MOVO X10, 48(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x08 // PSRLD xmm1, 8
	MOVO 112(AX), X2
	MOVO 128(AX), X5
	MOVO 144(AX), X6
	MOVO 160(AX), X7
	MOVO X2, X8
	MOVO X5, X3
	MOVO X6, X12
	MOVO X7, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD7 // PSUBD xmm2, xmm15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0C // PSLLD xmm2, 12
	POR X1, X2
	MOVO X2, 64(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE8 // PSUBD xmm5, xmm8
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF3 // PSUBD xmm6, xmm3
	MOVO X6, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x14 // PSLLD xmm6, 20
	POR X5, X6
	MOVO X6, 80(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x0C // PSRLD xmm9, 12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xFC // PSUBD xmm7, xmm12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x08 // PSLLD xmm7, 8
	MOVO 176(AX), X13
	MOVO 192(AX), X14
	MOVO 208(AX), X4
	MOVO 224(AX), X11
	MOVO X13, X10
	MOVO X14, X15
	MOVO X4, X1
	MOVO X11, X2
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE8 // PSUBD xmm13, xmm0
	MOVO X13, X8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x1C // PSLLD xmm13, 28
	POR X9, X7
	POR X13, X7
	MOVO X7, 96(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x04 // PSRLD xmm8, 4
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF2 // PSUBD xmm14, xmm10
	MOVO X14, X3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x10 // PSLLD xmm14, 16
	POR X8, X14
	MOVO X14, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x10 // PSRLD xmm3, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE7 // PSUBD xmm4, xmm15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x04 // PSLLD xmm4, 4
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xD9 // PSUBD xmm11, xmm1
	MOVO X11, X5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x18 // PSLLD xmm11, 24
	POR X3, X4
	POR X11, X4
	MOVO X4, 128(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x08 // PSRLD xmm5, 8
	MOVO 240(AX), X6
	MOVO 256(AX), X12
	MOVO 272(AX), X0
	MOVO 288(AX), X9
	MOVO X6, X13
	MOVO X12, X7
	MOVO X0, X10
	MOVO X9, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF2 // PSUBD xmm6, xmm2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0C // PSLLD xmm6, 12
	POR X5, X6
	MOVO X6, 144(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE5 // PSUBD xmm12, xmm13
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC7 // PSUBD xmm0, xmm7
	MOVO X0, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x14 // PSLLD xmm0, 20
	POR X12, X0
	MOVO X0, 160(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x0C // PSRLD xmm14, 12
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCA // PSUBD xmm9, xmm10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x08 // PSLLD xmm9, 8
	MOVO 304(AX), X15
	MOVO 320(AX), X1
	MOVO 336(AX), X3
	MOVO 352(AX), X11
	MOVO X15, X4
	MOVO X1, X2
	MOVO X3, X5
	MOVO X11, X6
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF8 // PSUBD xmm15, xmm8
	MOVO X15, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1C // PSLLD xmm15, 28
	POR X14, X9
	POR X15, X9
	MOVO X9, 176(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x04 // PSRLD xmm13, 4
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm1, xmm4
	MOVO X1, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x10 // PSLLD xmm1, 16
	POR X13, X1
	MOVO X1, 192(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x10 // PSRLD xmm7, 16
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDA // PSUBD xmm3, xmm2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x04 // PSLLD xmm3, 4
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm11, xmm5
	MOVO X11, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x18 // PSLLD xmm11, 24
	POR X7, X3
	POR X11, X3
	MOVO X3, 208(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x08 // PSRLD xmm12, 8
	MOVO 368(AX), X0
	MOVO 384(AX), X10
	MOVO 400(AX), X8
	MOVO 416(AX), X14
	MOVO X0, X15
	MOVO X10, X9
	MOVO X8, X4
	MOVO X14, X13
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC6 // PSUBD xmm0, xmm6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0C // PSLLD xmm0, 12
	POR X12, X0
	MOVO X0, 224(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD7 // PSUBD xmm10, xmm15
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC1 // PSUBD xmm8, xmm9
	MOVO X8, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x14 // PSLLD xmm8, 20
	POR X10, X8
	MOVO X8, 240(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x0C // PSRLD xmm1, 12
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF4 // PSUBD xmm14, xmm4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x08 // PSLLD xmm14, 8
	MOVO 432(AX), X2
	MOVO 448(AX), X5
	MOVO 464(AX), X7
	MOVO 480(AX), X11
	MOVO X2, X3
	MOVO X5, X6
	MOVO X7, X12
	MOVO X11, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm2, xmm13
	MOVO X2, X15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1C // PSLLD xmm2, 28
	POR X1, X14
	POR X2, X14
	MOVO X14, 256(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x04 // PSRLD xmm15, 4
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xEB // PSUBD xmm5, xmm3
	MOVO X5, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x10 // PSLLD xmm5, 16
	POR X15, X5
	MOVO X5, 272(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x10 // PSRLD xmm9, 16
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm7, xmm6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x04 // PSLLD xmm7, 4
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDC // PSUBD xmm11, xmm12
	MOVO X11, X10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x18 // PSLLD xmm11, 24
	POR X9, X7
	POR X11, X7
	MOVO X7, 288(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x08 // PSRLD xmm10, 8
	MOVO 496(AX), X8
	MOVO X8, X4
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC0 // PSUBD xmm8, xmm0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0C // PSLLD xmm8, 12
	POR X10, X8
	MOVO X8, 304(BX)
	MOVO X4, 0(DX)
	RET

// func dpack32_21(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_21(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	MOVO X2, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x15 // PSLLD xmm2, 21
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x0B // PSRLD xmm7, 11
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0A // PSLLD xmm3, 10
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC6 // PSUBD xmm8, xmm6
	MOVO X8, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1F // PSLLD xmm8, 31
	POR X7, X3
	POR X8, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x01 // PSRLD xmm0, 1
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm12
	MOVO X9, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x14 // PSLLD xmm9, 20
	POR X0, X9
	MOVO X9, 32(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x0C // PSRLD xmm4, 12
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x09 // PSLLD xmm10, 9
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDE // PSUBD xmm11, xmm14
	MOVO X11, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1E // PSLLD xmm11, 30
	POR X4, X10
	POR X11, X10
	MOVO X10, 48(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x02 // PSRLD xmm1, 2
	MOVO 112(AX), X2
	MOVO 128(AX), X5
	MOVO 144(AX), X6
	MOVO 160(AX), X7
	MOVO X2, X8
	MOVO X5, X3
	MOVO X6, X12
	MOVO X7, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD7 // PSUBD xmm2, xmm15
	MOVO X2, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x13 // PSLLD xmm2, 19
	POR X1, X2
	MOVO X2, 64(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x0D // PSRLD xmm9, 13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE8 // PSUBD xmm5, xmm8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x08 // PSLLD xmm5, 8
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF3 // PSUBD xmm6, xmm3
	MOVO X6, X13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1D // PSLLD xmm6, 29
	POR X9, X5
	POR X6, X5
	MOVO X5, 80(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x03 // PSRLD xmm13, 3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xFC // PSUBD xmm7, xmm12
	MOVO X7, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x12 // PSLLD xmm7, 18
	POR X13, X7
	MOVO X7, 96(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x0E // PSRLD xmm14, 14
	MOVO 176(AX), X4
	MOVO 192(AX), X11
	MOVO 208(AX), X10
	MOVO 224(AX), X15
	MOVO X4, X1
	MOVO X11, X2
	MOVO X10, X8
	MOVO X15, X3
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xE0 // PSUBD xmm4, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x07 // PSLLD xmm4, 7
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xD9 // PSUBD xmm11, xmm1
	MOVO X11, X9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1C // PSLLD xmm11, 28
	POR X14, X4
	POR X11, X4
	MOVO X4, 112(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x04 // PSRLD xmm9, 4
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xD2 // PSUBD xmm10, xmm2
	MOVO X10, X6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x11 // PSLLD xmm10, 17
	POR X9, X10
	MOVO X10, 128(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x0F // PSRLD xmm6, 15
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF8 // PSUBD xmm15, xmm8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x06 // PSLLD xmm15, 6
	MOVO 240(AX), X5
	MOVO 256(AX), X12
	MOVO 272(AX), X13
	MOVO 288(AX), X7
	MOVO X5, X0
	MOVO X12, X1
	MOVO X13, X14
	MOVO X7, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xEB // PSUBD xmm5, xmm3
	MOVO X5, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x1B // PSLLD xmm5, 27
	POR X6, X15
	POR X5, X15
	MOVO X15, 144(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x05 // PSRLD xmm4, 5
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE0 // PSUBD xmm12, xmm0
	MOVO X12, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x10 // PSLLD xmm12, 16
	POR X4, X12
	MOVO X12, 160(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x10 // PSRLD xmm2, 16
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE9 // PSUBD xmm13, xmm1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x05 // PSLLD xmm13, 5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm7, xmm14
	MOVO X7, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1A // PSLLD xmm7, 26
	POR X2, X13
	POR X7, X13
	MOVO X13, 176(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x06 // PSRLD xmm9, 6
	MOVO 304(AX), X10
	MOVO 320(AX), X8
	MOVO 336(AX), X3
	MOVO 352(AX), X6
	MOVO X10, X5
	MOVO X8, X15
	MOVO X3, X0
	MOVO X6, X4
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD3 // PSUBD xmm10, xmm11
	MOVO X10, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0F // PSLLD xmm10, 15
	POR X9, X10
	MOVO X10, 192(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x11 // PSRLD xmm12, 17
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC5 // PSUBD xmm8, xmm5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x04 // PSLLD xmm8, 4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xDF // PSUBD xmm3, xmm15
	MOVO X3, X1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x19 // PSLLD xmm3, 25
	POR X12, X8
	POR X3, X8
	MOVO X8, 208(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x07 // PSRLD xmm1, 7
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF0 // PSUBD xmm6, xmm0
	MOVO X6, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0E // PSLLD xmm6, 14
	POR X1, X6
	MOVO X6, 224(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x12 // PSRLD xmm14, 18
	MOVO 368(AX), X2
	MOVO 384(AX), X7
	MOVO 400(AX), X13
	MOVO 416(AX), X11
	MOVO X2, X9
	MOVO X7, X10
	MOVO X13, X5
	MOVO X11, X15
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x03 // PSLLD xmm2, 3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF9 // PSUBD xmm7, xmm9
	MOVO X7, X12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x18 // PSLLD xmm7, 24
	POR X14, X2
	POR X7, X2
	MOVO X2, 240(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x08 // PSRLD xmm12, 8
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xEA // PSUBD xmm13, xmm10
	MOVO X13, X3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0D // PSLLD xmm13, 13
	POR X12, X13
	MOVO X13, 256(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x13 // PSRLD xmm3, 19
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm11, xmm5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x02 // PSLLD xmm11, 2
	MOVO 432(AX), X8
	MOVO 448(AX), X0
	MOVO 464(AX), X1
	MOVO 480(AX), X6
	MOVO X8, X4
	MOVO X0, X9
	MOVO X1, X14
	MOVO X6, X7
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC7 // PSUBD xmm8, xmm15
	MOVO X8, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x17 // PSLLD xmm8, 23
	POR X3, X11
	POR X8, X11
	MOVO X11, 272(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x09 // PSRLD xmm2, 9
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC4 // PSUBD xmm0, xmm4
	MOVO X0, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0C // PSLLD xmm0, 12
	POR X2, X0
	MOVO X0, 288(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x14 // PSRLD xmm10, 20
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC9 // PSUBD xmm1, xmm9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x01 // PSLLD xmm1, 1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF6 // PSUBD xmm6, xmm14
	MOVO X6, X12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x16 // PSLLD xmm6, 22
	POR X10, X1
	POR X6, X1
	MOVO X1, 304(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x0A // PSRLD xmm12, 10
	MOVO 496(AX), X13
	MOVO X13, X5
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xEF // PSUBD xmm13, xmm7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0B // PSLLD xmm13, 11
	POR X12, X13
	MOVO X13, 320(BX)
	MOVO X5, 0(DX)
	RET

// func dpack32_22(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_22(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	MOVO X2, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x16 // PSLLD xmm2, 22
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x0A // PSRLD xmm7, 10
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	MOVO X3, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0C // PSLLD xmm3, 12
	POR X7, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x14 // PSRLD xmm8, 20
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xCE // PSUBD xmm9, xmm6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x02 // PSLLD xmm9, 2
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	MOVO X10, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x18 // PSLLD xmm10, 24
	POR X8, X9
	POR X10, X9
	MOVO X9, 32(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x08 // PSRLD xmm4, 8
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDE // PSUBD xmm11, xmm14
	MOVO X11, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0E // PSLLD xmm11, 14
	POR X4, X11
	MOVO X11, 48(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x12 // PSRLD xmm1, 18
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE7 // PSUBD xmm12, xmm15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x04 // PSLLD xmm12, 4
	MOVO 112(AX), X2
	MOVO 128(AX), X5
	MOVO 144(AX), X7
	MOVO 160(AX), X3
	MOVO X2, X6
	MOVO X5, X13
	MOVO X7, X8
	MOVO X3, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD0 // PSUBD xmm2, xmm0
	MOVO X2, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1A // PSLLD xmm2, 26
	POR X1, X12
	POR X2, X12
	MOVO X12, 64(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x06 // PSRLD xmm9, 6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xEE // PSUBD xmm5, xmm6
	MOVO X5, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x10 // PSLLD xmm5, 16
	POR X9, X5
	MOVO X5, 80(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x10 // PSRLD xmm14, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xFD // PSUBD xmm7, xmm13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x06 // PSLLD xmm7, 6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD8 // PSUBD xmm3, xmm8
	MOVO X3, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1C // PSLLD xmm3, 28
	POR X14, X7
	POR X3, X7
	MOVO X7, 96(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x04 // PSRLD xmm4, 4
	MOVO 176(AX), X11
	MOVO 192(AX), X15
	MOVO 208(AX), X0
	MOVO 224(AX), X1
	MOVO X11, X2
	MOVO X15, X12
	MOVO X0, X6
	MOVO X1, X9
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDA // PSUBD xmm11, xmm10
	MOVO X11, X5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x12 // PSLLD xmm11, 18
	POR X4, X11
	MOVO X11, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x0E // PSRLD xmm5, 14
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xFA // PSUBD xmm15, xmm2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x08 // PSLLD xmm15, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC4 // PSUBD xmm0, xmm12
	MOVO X0, X13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1E // PSLLD xmm0, 30
	POR X5, X15
	POR X0, X15
	MOVO X15, 128(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x02 // PSRLD xmm13, 2
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xCE // PSUBD xmm1, xmm6
	MOVO X1, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x14 // PSLLD xmm1, 20
	POR X13, X1
	MOVO X1, 144(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x0C // PSRLD xmm8, 12
	MOVO 240(AX), X14
	MOVO 256(AX), X3
	MOVO 272(AX), X7
	MOVO 288(AX), X10
	MOVO X14, X4
	MOVO X3, X11
	MOVO X7, X2
	MOVO X10, X12
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF1 // PSUBD xmm14, xmm9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0A // PSLLD xmm14, 10
	POR X8, X14
	MOVO X14, 160(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDC // PSUBD xmm3, xmm4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xFB // PSUBD xmm7, xmm11
	MOVO X7, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x16 // PSLLD xmm7, 22
	POR X3, X7
	MOVO X7, 176(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x0A // PSRLD xmm5, 10
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xD2 // PSUBD xmm10, xmm2
	MOVO X10, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0C // PSLLD xmm10, 12
	POR X5, X10
	MOVO X10, 192(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x14 // PSRLD xmm0, 20
	MOVO 304(AX), X15
	MOVO 320(AX), X6
	MOVO 336(AX), X13
	MOVO 352(AX), X1
	MOVO X15, X9
	MOVO X6, X8
	MOVO X13, X14
	MOVO X1, X4
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xFC // PSUBD xmm15, xmm12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x02 // PSLLD xmm15, 2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF1 // PSUBD xmm6, xmm9
	MOVO X6, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x18 // PSLLD xmm6, 24
	POR X0, X15
	POR X6, X15
	MOVO X15, 208(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x08 // PSRLD xmm11, 8
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE8 // PSUBD xmm13, xmm8
	MOVO X13, X3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0E // PSLLD xmm13, 14
	POR X11, X13
	MOVO X13, 224(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x12 // PSRLD xmm3, 18
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xCE // PSUBD xmm1, xmm14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x04 // PSLLD xmm1, 4
	MOVO 368(AX), X7
	MOVO 384(AX), X2
	MOVO 400(AX), X5
	MOVO 416(AX), X10
	MOVO X7, X12
	MOVO X2, X9
	MOVO X5, X0
	MOVO X10, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xFC // PSUBD xmm7, xmm4
	MOVO X7, X15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1A // PSLLD xmm7, 26
	POR X3, X1
	POR X7, X1
	MOVO X1, 240(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x06 // PSRLD xmm15, 6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm12
	MOVO X2, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x10 // PSLLD xmm2, 16
	POR X15, X2
	MOVO X2, 256(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x10 // PSRLD xmm8, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE9 // PSUBD xmm5, xmm9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x06 // PSLLD xmm5, 6
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xD0 // PSUBD xmm10, xmm0
	MOVO X10, X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1C // PSLLD xmm10, 28
	POR X8, X5
	POR X10, X5
	MOVO X5, 272(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x04 // PSRLD xmm11, 4
	MOVO 432(AX), X13
	MOVO 448(AX), X14
	MOVO 464(AX), X4
	MOVO 480(AX), X3
	MOVO X13, X7
	MOVO X14, X1
	MOVO X4, X12
	MOVO X3, X15
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xEE // PSUBD xmm13, xmm6
	MOVO X13, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x12 // PSLLD xmm13, 18
	POR X11, X13
	MOVO X13, 288(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x0E // PSRLD xmm2, 14
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF7 // PSUBD xmm14, xmm7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x08 // PSLLD xmm14, 8
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xE1 // PSUBD xmm4, xmm1
	MOVO X4, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x1E // PSLLD xmm4, 30
	POR X2, X14
	POR X4, X14
	MOVO X14, 304(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x02 // PSRLD xmm9, 2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xDC // PSUBD xmm3, xmm12
	MOVO X3, X0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x14 // PSLLD xmm3, 20
	POR X9, X3
	MOVO X3, 320(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x0C // PSRLD xmm0, 12
	MOVO 496(AX), X8
	MOVO X8, X10
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC7 // PSUBD xmm8, xmm15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0A // PSLLD xmm8, 10
	POR X0, X8
	MOVO X8, 336(BX)
	MOVO X10, 0(DX)
	RET

// func dpack32_23(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_23(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	MOVO X2, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x17 // PSLLD xmm2, 23
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x09 // PSRLD xmm7, 9
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	MOVO X3, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0E // PSLLD xmm3, 14
	POR X7, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x12 // PSRLD xmm8, 18
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xCE // PSUBD xmm9, xmm6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x05 // PSLLD xmm9, 5
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	MOVO X10, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1C // PSLLD xmm10, 28
	POR X8, X9
	POR X10, X9
	MOVO X9, 32(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x04 // PSRLD xmm4, 4
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDE // PSUBD xmm11, xmm14
	MOVO X11, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x13 // PSLLD xmm11, 19
	POR X4, X11
	MOVO X11, 48(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x0D // PSRLD xmm1, 13
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE7 // PSUBD xmm12, xmm15
	MOVO X12, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0A // PSLLD xmm12, 10
	POR X1, X12
	MOVO X12, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x16 // PSRLD xmm2, 22
	MOVO 112(AX), X5
	MOVO 128(AX), X7
	MOVO 144(AX), X3
	MOVO 160(AX), X6
	MOVO X5, X13
	MOVO X7, X8
	MOVO X3, X10
	MOVO X6, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xE8 // PSUBD xmm5, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x01 // PSLLD xmm5, 1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xFD // PSUBD xmm7, xmm13
	MOVO X7, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x18 // PSLLD xmm7, 24
	POR X2, X5
	POR X7, X5
	MOVO X5, 80(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x08 // PSRLD xmm14, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD8 // PSUBD xmm3, xmm8
	MOVO X3, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0F // PSLLD xmm3, 15
	POR X14, X3
	MOVO X3, 96(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x11 // PSRLD xmm4, 17
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF2 // PSUBD xmm6, xmm10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x06 // PSLLD xmm6, 6
	MOVO 176(AX), X11
	MOVO 192(AX), X15
	MOVO 208(AX), X1
	MOVO 224(AX), X12
	MOVO X11, X0
	MOVO X15, X13
	MOVO X1, X2
	MOVO X12, X7
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD9 // PSUBD xmm11, xmm9
	MOVO X11, X5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1D // PSLLD xmm11, 29
	POR X4, X6
	POR X11, X6
	MOVO X6, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x03 // PSRLD xmm5, 3
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF8 // PSUBD xmm15, xmm0
	MOVO X15, X8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x14 // PSLLD xmm15, 20
	POR X5, X15
	MOVO X15, 128(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x0C // PSRLD xmm8, 12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xCD // PSUBD xmm1, xmm13
	MOVO X1, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0B // PSLLD xmm1, 11
	POR X8, X1
	MOVO X1, 144(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x15 // PSRLD xmm14, 21
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE2 // PSUBD xmm12, xmm2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x02 // PSLLD xmm12, 2
	MOVO 240(AX), X3
	MOVO 256(AX), X10
	MOVO 272(AX), X9
	MOVO 288(AX), X4
	MOVO X3, X11
	MOVO X10, X6
	MOVO X9, X0
	MOVO X4, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDF // PSUBD xmm3, xmm7
	MOVO X3, X15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x19 // PSLLD xmm3, 25
	POR X14, X12
	POR X3, X12
	MOVO X12, 160(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x07 // PSRLD xmm15, 7
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD3 // PSUBD xmm10, xmm11
	MOVO X10, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x10 // PSLLD xmm10, 16
	POR X15, X10
	MOVO X10, 176(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x10 // PSRLD xmm13, 16
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xCE // PSUBD xmm9, xmm6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x07 // PSLLD xmm9, 7
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xE0 // PSUBD xmm4, xmm0
	MOVO X4, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x1E // PSLLD xmm4, 30
	POR X13, X9
	POR X4, X9
	MOVO X9, 192(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x02 // PSRLD xmm8, 2
	MOVO 304(AX), X1
	MOVO 320(AX), X2
	MOVO 336(AX), X7
	MOVO 352(AX), X14
	MOVO X1, X3
	MOVO X2, X12
	MOVO X7, X11
	MOVO X14, X15
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xCD // PSUBD xmm1, xmm5
	MOVO X1, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x15 // PSLLD xmm1, 21
	POR X8, X1
	MOVO X1, 208(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x0B // PSRLD xmm10, 11
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD3 // PSUBD xmm2, xmm3
	MOVO X2, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0C // PSLLD xmm2, 12
	POR X10, X2
	MOVO X2, 224(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x14 // PSRLD xmm6, 20
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xFC // PSUBD xmm7, xmm12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x03 // PSLLD xmm7, 3
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF3 // PSUBD xmm14, xmm11
	MOVO X14, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1A // PSLLD xmm14, 26
	POR X6, X7
	POR X14, X7
	MOVO X7, 240(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x06 // PSRLD xmm0, 6
	MOVO 368(AX), X13
	MOVO 384(AX), X4
	MOVO 400(AX), X9
	MOVO 416(AX), X5
	MOVO X13, X8
	MOVO X4, X1
	MOVO X9, X3
	MOVO X5, X10
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xEF // PSUBD xmm13, xmm15
	MOVO X13, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x11 // PSLLD xmm13, 17
	POR X0, X13
	MOVO X13, 256(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x0F // PSRLD xmm2, 15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE0 // PSUBD xmm4, xmm8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x08 // PSLLD xmm4, 8
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC9 // PSUBD xmm9, xmm1
	MOVO X9, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1F // PSLLD xmm9, 31
	POR X2, X4
	POR X9, X4
	MOVO X4, 272(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x01 // PSRLD xmm12, 1
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xEB // PSUBD xmm5, xmm3
	MOVO X5, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x16 // PSLLD xmm5, 22
	POR X12, X5
	MOVO X5, 288(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x0A // PSRLD xmm11, 10
	MOVO 432(AX), X6
	MOVO 448(AX), X14
	MOVO 464(AX), X7
	MOVO 480(AX), X15
	MOVO X6, X0
	MOVO X14, X13
	MOVO X7, X8
	MOVO X15, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF2 // PSUBD xmm6, xmm10
	MOVO X6, X2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0D // PSLLD xmm6, 13
	POR X11, X6
	MOVO X6, 304(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x13 // PSRLD xmm2, 19
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF0 // PSUBD xmm14, xmm0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x04 // PSLLD xmm14, 4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xFD // PSUBD xmm7, xmm13
	MOVO X7, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1B // PSLLD xmm7, 27
	POR X2, X14
	POR X7, X14
	MOVO X14, 320(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x05 // PSRLD xmm9, 5
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF8 // PSUBD xmm15, xmm8
	MOVO X15, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x12 // PSLLD xmm15, 18
	POR X9, X15
	MOVO X15, 336(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x0E // PSRLD xmm4, 14
	MOVO 496(AX), X3
	MOVO X3, X12
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD9 // PSUBD xmm3, xmm1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x09 // PSLLD xmm3, 9
	POR X4, X3
	MOVO X3, 352(BX)
	MOVO X12, 0(DX)
	RET

// func dpack32_24(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_24(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	MOVO X2, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x18 // PSLLD xmm2, 24
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x08 // PSRLD xmm7, 8
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	MOVO X3, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x10 // PSLLD xmm3, 16
	POR X7, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x10 // PSRLD xmm8, 16
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xCE // PSUBD xmm9, xmm6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x08 // PSLLD xmm9, 8
	POR X8, X9
	MOVO X9, 32(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDE // PSUBD xmm11, xmm14
	MOVO X11, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x18 // PSLLD xmm11, 24
	POR X10, X11
	MOVO X11, 48(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x08 // PSRLD xmm4, 8
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE7 // PSUBD xmm12, xmm15
	MOVO X12, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x10 // PSLLD xmm12, 16
	POR X4, X12
	MOVO X12, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x10 // PSRLD xmm1, 16
	MOVO 112(AX), X2
	MOVO 128(AX), X5
	MOVO 144(AX), X7
	MOVO 160(AX), X3
	MOVO X2, X6
	MOVO X5, X8
	MOVO X7, X9
	MOVO X3, X13
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD0 // PSUBD xmm2, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x08 // PSLLD xmm2, 8
	POR X1, X2
	MOVO X2, 80(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xEE // PSUBD xmm5, xmm6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF8 // PSUBD xmm7, xmm8
	MOVO X7, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x18 // PSLLD xmm7, 24
	POR X5, X7
	MOVO X7, 96(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x08 // PSRLD xmm14, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD9 // PSUBD xmm3, xmm9
	MOVO X3, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x10 // PSLLD xmm3, 16
	POR X14, X3
	MOVO X3, 112(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x10 // PSRLD xmm10, 16
	MOVO 176(AX), X11
	MOVO 192(AX), X15
	MOVO 208(AX), X4
	MOVO 224(AX), X12
	MOVO X11, X0
	MOVO X15, X1
	MOVO X4, X2
	MOVO X12, X6
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm11, xmm13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x08 // PSLLD xmm11, 8
	POR X10, X11
	MOVO X11, 128(BX)
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF8 // PSUBD xmm15, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xE1 // PSUBD xmm4, xmm1
	MOVO X4, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x18 // PSLLD xmm4, 24
	POR X15, X4
	MOVO X4, 144(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x08 // PSRLD xmm8, 8
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE2 // PSUBD xmm12, xmm2
	MOVO X12, X5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x10 // PSLLD xmm12, 16
	POR X8, X12
	MOVO X12, 160(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x10 // PSRLD xmm5, 16
	MOVO 240(AX), X7
	MOVO 256(AX), X9
	MOVO 272(AX), X14
	MOVO 288(AX), X3
	MOVO X7, X13
	MOVO X9, X10
	MOVO X14, X11
	MOVO X3, X0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm7, xmm6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x08 // PSLLD xmm7, 8
	POR X5, X7
	MOVO X7, 176(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCD // PSUBD xmm9, xmm13
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF2 // PSUBD xmm14, xmm10
	MOVO X14, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x18 // PSLLD xmm14, 24
	POR X9, X14
	MOVO X14, 192(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x08 // PSRLD xmm1, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xDB // PSUBD xmm3, xmm11
	MOVO X3, X15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x10 // PSLLD xmm3, 16
	POR X1, X3
	MOVO X3, 208(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x10 // PSRLD xmm15, 16
	MOVO 304(AX), X4
	MOVO 320(AX), X2
	MOVO 336(AX), X8
	MOVO 352(AX), X12
	MOVO X4, X6
	MOVO X2, X5
	MOVO X8, X7
	MOVO X12, X13
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xE0 // PSUBD xmm4, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x08 // PSLLD xmm4, 8
	POR X15, X4
	MOVO X4, 224(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD6 // PSUBD xmm2, xmm6
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC5 // PSUBD xmm8, xmm5
	MOVO X8, X10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x18 // PSLLD xmm8, 24
	POR X2, X8
	MOVO X8, 240(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x08 // PSRLD xmm10, 8
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE7 // PSUBD xmm12, xmm7
	MOVO X12, X9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x10 // PSLLD xmm12, 16
	POR X10, X12
	MOVO X12, 256(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x10 // PSRLD xmm9, 16
	MOVO 368(AX), X14
	MOVO 384(AX), X11
	MOVO 400(AX), X1
	MOVO 416(AX), X3
	MOVO X14, X0
	MOVO X11, X15
	MOVO X1, X4
	MOVO X3, X6
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF5 // PSUBD xmm14, xmm13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x08 // PSLLD xmm14, 8
	POR X9, X14
	MOVO X14, 272(BX)
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xD8 // PSUBD xmm11, xmm0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xCF // PSUBD xmm1, xmm15
	MOVO X1, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x18 // PSLLD xmm1, 24
	POR X11, X1
	MOVO X1, 288(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x08 // PSRLD xmm5, 8
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDC // PSUBD xmm3, xmm4
	MOVO X3, X2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x10 // PSLLD xmm3, 16
	POR X5, X3
	MOVO X3, 304(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x10 // PSRLD xmm2, 16
	MOVO 432(AX), X8
	MOVO 448(AX), X7
	MOVO 464(AX), X10
	MOVO 480(AX), X12
	MOVO X8, X13
	MOVO X7, X9
	MOVO X10, X14
	MOVO X12, X0
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC6 // PSUBD xmm8, xmm6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x08 // PSLLD xmm8, 8
	POR X2, X8
	MOVO X8, 320(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xFD // PSUBD xmm7, xmm13
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD1 // PSUBD xmm10, xmm9
	MOVO X10, X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x18 // PSLLD xmm10, 24
	POR X7, X10
	MOVO X10, 336(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x08 // PSRLD xmm15, 8
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE6 // PSUBD xmm12, xmm14
	MOVO X12, X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x10 // PSLLD xmm12, 16
	POR X15, X12
	MOVO X12, 352(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x10 // PSRLD xmm11, 16
	MOVO 496(AX), X1
	MOVO X1, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x08 // PSLLD xmm1, 8
	POR X11, X1
	MOVO X1, 368(BX)
	MOVO X4, 0(DX)
	RET

// func dpack32_25(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_25(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	MOVO X2, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x19 // PSLLD xmm2, 25
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x07 // PSRLD xmm7, 7
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	MOVO X3, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x12 // PSLLD xmm3, 18
	POR X7, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x0E // PSRLD xmm8, 14
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xCE // PSUBD xmm9, xmm6
	MOVO X9, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0B // PSLLD xmm9, 11
	POR X8, X9
	MOVO X9, 32(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x15 // PSRLD xmm4, 21
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x04 // PSLLD xmm10, 4
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDE // PSUBD xmm11, xmm14
	MOVO X11, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1D // PSLLD xmm11, 29
	POR X4, X10
	POR X11, X10
	MOVO X10, 48(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x03 // PSRLD xmm1, 3
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE7 // PSUBD xmm12, xmm15
	MOVO X12, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x16 // PSLLD xmm12, 22
	POR X1, X12
	MOVO X12, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x0A // PSRLD xmm2, 10
	MOVO 112(AX), X5
	MOVO 128(AX), X7
	MOVO 144(AX), X3
	MOVO 160(AX), X6
	MOVO X5, X8
	MOVO X7, X9
	MOVO X3, X13
	MOVO X6, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xE8 // PSUBD xmm5, xmm0
	MOVO X5, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0F // PSLLD xmm5, 15
	POR X2, X5
	MOVO X5, 80(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x11 // PSRLD xmm4, 17
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF8 // PSUBD xmm7, xmm8
	MOVO X7, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x08 // PSLLD xmm7, 8
	POR X4, X7
	MOVO X7, 96(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x18 // PSRLD xmm11, 24
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD9 // PSUBD xmm3, xmm9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x01 // PSLLD xmm3, 1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF5 // PSUBD xmm6, xmm13
	MOVO X6, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1A // PSLLD xmm6, 26
	POR X11, X3
	POR X6, X3
	MOVO X3, 112(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x06 // PSRLD xmm10, 6
	MOVO 176(AX), X15
	MOVO 192(AX), X1
	MOVO 208(AX), X12
	MOVO 224(AX), X0
	MOVO X15, X2
	MOVO X1, X5
	MOVO X12, X8
	MOVO X0, X4
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm15, xmm14
	MOVO X15, X7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x13 // PSLLD xmm15, 19
	POR X10, X15
	MOVO X15, 128(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x0D // PSRLD xmm7, 13
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xCA // PSUBD xmm1, xmm2
	MOVO X1, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0C // PSLLD xmm1, 12
	POR X7, X1
	MOVO X1, 144(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x14 // PSRLD xmm9, 20
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE5 // PSUBD xmm12, xmm5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x05 // PSLLD xmm12, 5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC0 // PSUBD xmm0, xmm8
	MOVO X0, X13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1E // PSLLD xmm0, 30
	POR X9, X12
	POR X0, X12
	MOVO X12, 160(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x02 // PSRLD xmm13, 2
	MOVO 240(AX), X11
	MOVO 256(AX), X6
	MOVO 272(AX), X3
	MOVO 288(AX), X14
	MOVO X11, X10
	MOVO X6, X15
	MOVO X3, X2
	MOVO X14, X7
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xDC // PSUBD xmm11, xmm4
	MOVO X11, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x17 // PSLLD xmm11, 23
	POR X13, X11
	MOVO X11, 176(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x09 // PSRLD xmm1, 9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF2 // PSUBD xmm6, xmm10
	MOVO X6, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x10 // PSLLD xmm6, 16
	POR X1, X6
	MOVO X6, 192(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x10 // PSRLD xmm5, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xDF // PSUBD xmm3, xmm15
	MOVO X3, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x09 // PSLLD xmm3, 9
	POR X5, X3
	MOVO X3, 208(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x17 // PSRLD xmm8, 23
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF2 // PSUBD xmm14, xmm2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x02 // PSLLD xmm14, 2
	MOVO 304(AX), X9
	MOVO 320(AX), X0
	MOVO 336(AX), X12
	MOVO 352(AX), X4
	MOVO X9, X13
	MOVO X0, X11
	MOVO X12, X10
	MOVO X4, X1
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xCF // PSUBD xmm9, xmm7
	MOVO X9, X6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1B // PSLLD xmm9, 27
	POR X8, X14
	POR X9, X14
	MOVO X14, 224(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x05 // PSRLD xmm6, 5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC5 // PSUBD xmm0, xmm13
	MOVO X0, X15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x14 // PSLLD xmm0, 20
	POR X6, X0
	MOVO X0, 240(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x0C // PSRLD xmm15, 12
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE3 // PSUBD xmm12, xmm11
	MOVO X12, X5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0D // PSLLD xmm12, 13
	POR X15, X12
	MOVO X12, 256(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x13 // PSRLD xmm5, 19
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE2 // PSUBD xmm4, xmm10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x06 // PSLLD xmm4, 6
	MOVO 368(AX), X3
	MOVO 384(AX), X2
	MOVO 400(AX), X7
	MOVO 416(AX), X8
	MOVO X3, X9
	MOVO X2, X14
	MOVO X7, X13
	MOVO X8, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD9 // PSUBD xmm3, xmm1
	MOVO X3, X0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1F // PSLLD xmm3, 31
	POR X5, X4
	POR X3, X4
	MOVO X4, 272(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x01 // PSRLD xmm0, 1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD1 // PSUBD xmm2, xmm9
	MOVO X2, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x18 // PSLLD xmm2, 24
	POR X0, X2
	MOVO X2, 288(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x08 // PSRLD xmm11, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm7, xmm14
	MOVO X7, X15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x11 // PSLLD xmm7, 17
	POR X11, X7
	MOVO X7, 304(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x0F // PSRLD xmm15, 15
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC5 // PSUBD xmm8, xmm13
	MOVO X8, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0A // PSLLD xmm8, 10
	POR X15, X8
	MOVO X8, 320(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x16 // PSRLD xmm12, 22
	MOVO 432(AX), X10
	MOVO 448(AX), X1
	MOVO 464(AX), X5
	MOVO 480(AX), X3
	MOVO X10, X4
	MOVO X1, X9
	MOVO X5, X0
	MOVO X3, X2
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xD6 // PSUBD xmm10, xmm6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x03 // PSLLD xmm10, 3
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm1, xmm4
	MOVO X1, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1C // PSLLD xmm1, 28
	POR X12, X10
	POR X1, X10
	MOVO X10, 336(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x04 // PSRLD xmm14, 4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE9 // PSUBD xmm5, xmm9
	MOVO X5, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x15 // PSLLD xmm5, 21
	POR X14, X5
	MOVO X5, 352(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x0B // PSRLD xmm11, 11
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD8 // PSUBD xmm3, xmm0
	MOVO X3, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0E // PSLLD xmm3, 14
	POR X11, X3
	MOVO X3, 368(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x12 // PSRLD xmm7, 18
	MOVO 496(AX), X13
	MOVO X13, X15
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xEA // PSUBD xmm13, xmm2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x07 // PSLLD xmm13, 7
	POR X7, X13
	MOVO X13, 384(BX)
	MOVO X15, 0(DX)
	RET

// func dpack32_26(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_26(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	MOVO X2, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1A // PSLLD xmm2, 26
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x06 // PSRLD xmm7, 6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	MOVO X3, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x14 // PSLLD xmm3, 20
	POR X7, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x0C // PSRLD xmm8, 12
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xCE // PSUBD xmm9, xmm6
	MOVO X9, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0E // PSLLD xmm9, 14
	POR X8, X9
	MOVO X9, 32(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x12 // PSRLD xmm4, 18
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	MOVO X10, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x08 // PSLLD xmm10, 8
	POR X4, X10
	MOVO X10, 48(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x18 // PSRLD xmm1, 24
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDE // PSUBD xmm11, xmm14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x02 // PSLLD xmm11, 2
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE7 // PSUBD xmm12, xmm15
	MOVO X12, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x1C // PSLLD xmm12, 28
	POR X1, X11
	POR X12, X11
	MOVO X11, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x04 // PSRLD xmm2, 4
	MOVO 112(AX), X5
	MOVO 128(AX), X7
	MOVO 144(AX), X3
	MOVO 160(AX), X6
	MOVO X5, X8
	MOVO X7, X9
	MOVO X3, X13
	MOVO X6, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xE8 // PSUBD xmm5, xmm0
	MOVO X5, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x16 // PSLLD xmm5, 22
	POR X2, X5
	MOVO X5, 80(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x0A // PSRLD xmm10, 10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF8 // PSUBD xmm7, xmm8
	MOVO X7, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x10 // PSLLD xmm7, 16
	POR X10, X7
	MOVO X7, 96(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x10 // PSRLD xmm14, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD9 // PSUBD xmm3, xmm9
	MOVO X3, X15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0A // PSLLD xmm3, 10
	POR X14, X3
	MOVO X3, 112(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x16 // PSRLD xmm15, 22
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF5 // PSUBD xmm6, xmm13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x04 // PSLLD xmm6, 4
	MOVO 176(AX), X1
	MOVO 192(AX), X12
	MOVO 208(AX), X11
	MOVO 224(AX), X0
	MOVO X1, X2
	MOVO X12, X5
	MOVO X11, X8
	MOVO X0, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm1, xmm4
	MOVO X1, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1E // PSLLD xmm1, 30
	POR X15, X6
	POR X1, X6
	MOVO X6, 128(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x02 // PSRLD xmm7, 2
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE2 // PSUBD xmm12, xmm2
	MOVO X12, X9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x18 // PSLLD xmm12, 24
	POR X7, X12
	MOVO X12, 144(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x08 // PSRLD xmm9, 8
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm11, xmm5
	MOVO X11, X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x12 // PSLLD xmm11, 18
	POR X9, X11
	MOVO X11, 160(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x0E // PSRLD xmm14, 14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC0 // PSUBD xmm0, xmm8
	MOVO X0, X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0C // PSLLD xmm0, 12
	POR X14, X0
	MOVO X0, 176(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x14 // PSRLD xmm3, 20
	MOVO 240(AX), X13
	MOVO 256(AX), X4
	MOVO 272(AX), X15
	MOVO 288(AX), X1
	MOVO X13, X6
	MOVO X4, X2
	MOVO X15, X7
	MOVO X1, X12
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xEA // PSUBD xmm13, xmm10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x06 // PSLLD xmm13, 6
	POR X3, X13
	MOVO X13, 192(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xE6 // PSUBD xmm4, xmm6
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xFA // PSUBD xmm15, xmm2
	MOVO X15, X5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1A // PSLLD xmm15, 26
	POR X4, X15
	MOVO X15, 208(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x06 // PSRLD xmm5, 6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xCF // PSUBD xmm1, xmm7
	MOVO X1, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x14 // PSLLD xmm1, 20
	POR X5, X1
	MOVO X1, 224(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x0C // PSRLD xmm9, 12
	MOVO 304(AX), X11
	MOVO 320(AX), X8
	MOVO 336(AX), X14
	MOVO 352(AX), X0
	MOVO X11, X10
	MOVO X8, X3
	MOVO X14, X13
	MOVO X0, X6
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDC // PSUBD xmm11, xmm12
	MOVO X11, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0E // PSLLD xmm11, 14
	POR X9, X11
	MOVO X11, 240(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x12 // PSRLD xmm2, 18
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC2 // PSUBD xmm8, xmm10
	MOVO X8, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x08 // PSLLD xmm8, 8
	POR X2, X8
	MOVO X8, 256(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x18 // PSRLD xmm4, 24
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF3 // PSUBD xmm14, xmm3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x02 // PSLLD xmm14, 2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC5 // PSUBD xmm0, xmm13
	MOVO X0, X15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1C // PSLLD xmm0, 28
	POR X4, X14
	POR X0, X14
	MOVO X14, 272(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x04 // PSRLD xmm15, 4
	MOVO 368(AX), X7
	MOVO 384(AX), X5
	MOVO 400(AX), X1
	MOVO 416(AX), X12
	MOVO X7, X9
	MOVO X5, X11
	MOVO X1, X10
	MOVO X12, X2
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm7, xmm6
	MOVO X7, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x16 // PSLLD xmm7, 22
	POR X15, X7
	MOVO X7, 288(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x0A // PSRLD xmm8, 10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE9 // PSUBD xmm5, xmm9
	MOVO X5, X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x10 // PSLLD xmm5, 16
	POR X8, X5
	MOVO X5, 304(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x10 // PSRLD xmm3, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xCB // PSUBD xmm1, xmm11
	MOVO X1, X13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0A // PSLLD xmm1, 10
	POR X3, X1
	MOVO X1, 320(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x16 // PSRLD xmm13, 22
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE2 // PSUBD xmm12, xmm10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x04 // PSLLD xmm12, 4
	MOVO 432(AX), X4
	MOVO 448(AX), X0
	MOVO 464(AX), X14
	MOVO 480(AX), X6
	MOVO X4, X15
	MOVO X0, X7
	MOVO X14, X9
	MOVO X6, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xE2 // PSUBD xmm4, xmm2
	MOVO X4, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x1E // PSLLD xmm4, 30
	POR X13, X12
	POR X4, X12
	MOVO X12, 336(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x02 // PSRLD xmm5, 2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC7 // PSUBD xmm0, xmm15
	MOVO X0, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x18 // PSLLD xmm0, 24
	POR X5, X0
	MOVO X0, 352(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x08 // PSRLD xmm11, 8
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF7 // PSUBD xmm14, xmm7
	MOVO X14, X3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x12 // PSLLD xmm14, 18
	POR X11, X14
	MOVO X14, 368(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x0E // PSRLD xmm3, 14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF1 // PSUBD xmm6, xmm9
	MOVO X6, X1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0C // PSLLD xmm6, 12
	POR X3, X6
	MOVO X6, 384(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x14 // PSRLD xmm1, 20
	MOVO 496(AX), X10
	MOVO X10, X2
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD0 // PSUBD xmm10, xmm8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x06 // PSLLD xmm10, 6
	POR X1, X10
	MOVO X10, 400(BX)
	MOVO X2, 0(DX)
	RET

// func dpack32_27(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_27(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	MOVO X2, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1B // PSLLD xmm2, 27
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x05 // PSRLD xmm7, 5
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	MOVO X3, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x16 // PSLLD xmm3, 22
	POR X7, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x0A // PSRLD xmm8, 10
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xCE // PSUBD xmm9, xmm6
	MOVO X9, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x11 // PSLLD xmm9, 17
	POR X8, X9
	MOVO X9, 32(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x0F // PSRLD xmm4, 15
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	MOVO X10, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0C // PSLLD xmm10, 12
	POR X4, X10
	MOVO X10, 48(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x14 // PSRLD xmm1, 20
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDE // PSUBD xmm11, xmm14
	MOVO X11, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x07 // PSLLD xmm11, 7
	POR X1, X11
	MOVO X11, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x19 // PSRLD xmm2, 25
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE7 // PSUBD xmm12, xmm15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x02 // PSLLD xmm12, 2
	MOVO 112(AX), X5
	MOVO 128(AX), X7
	MOVO 144(AX), X3
	MOVO 160(AX), X6
	MOVO X5, X8
	MOVO X7, X9
	MOVO X3, X13
	MOVO X6, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xE8 // PSUBD xmm5, xmm0
	MOVO X5, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x1D // PSLLD xmm5, 29
	POR X2, X12
	POR X5, X12
	MOVO X12, 80(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x03 // PSRLD xmm10, 3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF8 // PSUBD xmm7, xmm8
	MOVO X7, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x18 // PSLLD xmm7, 24
	POR X10, X7
	MOVO X7, 96(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x08 // PSRLD xmm14, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD9 // PSUBD xmm3, xmm9
	MOVO X3, X1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x13 // PSLLD xmm3, 19
	POR X14, X3
	MOVO X3, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x0D // PSRLD xmm1, 13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF5 // PSUBD xmm6, xmm13
	MOVO X6, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0E // PSLLD xmm6, 14
	POR X1, X6
	MOVO X6, 128(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x12 // PSRLD xmm11, 18
	MOVO 176(AX), X15
	MOVO 192(AX), X0
	MOVO 208(AX), X2
	MOVO 224(AX), X5
	MOVO X15, X12
	MOVO X0, X8
	MOVO X2, X10
	MOVO X5, X7
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xFC // PSUBD xmm15, xmm4
	MOVO X15, X9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x09 // PSLLD xmm15, 9
	POR X11, X15
	MOVO X15, 144(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x17 // PSRLD xmm9, 23
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC4 // PSUBD xmm0, xmm12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x04 // PSLLD xmm0, 4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD0 // PSUBD xmm2, xmm8
	MOVO X2, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1F // PSLLD xmm2, 31
	POR X9, X0
	POR X2, X0
	MOVO X0, 160(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x01 // PSRLD xmm14, 1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xEA // PSUBD xmm5, xmm10
	MOVO X5, X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x1A // PSLLD xmm5, 26
	POR X14, X5
	MOVO X5, 176(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x06 // PSRLD xmm3, 6
	MOVO 240(AX), X13
	MOVO 256(AX), X1
	MOVO 272(AX), X6
	MOVO 288(AX), X4
	MOVO X13, X11
	MOVO X1, X15
	MOVO X6, X12
	MOVO X4, X8
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xEF // PSUBD xmm13, xmm7
	MOVO X13, X9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x15 // PSLLD xmm13, 21
	POR X3, X13
	MOVO X13, 192(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x0B // PSRLD xmm9, 11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xCB // PSUBD xmm1, xmm11
	MOVO X1, X2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x10 // PSLLD xmm1, 16
	POR X9, X1
	MOVO X1, 208(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x10 // PSRLD xmm2, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF7 // PSUBD xmm6, xmm15
	MOVO X6, X0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0B // PSLLD xmm6, 11
	POR X2, X6
	MOVO X6, 224(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x15 // PSRLD xmm0, 21
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE4 // PSUBD xmm4, xmm12
	MOVO X4, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x06 // PSLLD xmm4, 6
	POR X0, X4
	MOVO X4, 240(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x1A // PSRLD xmm10, 26
	MOVO 304(AX), X14
	MOVO 320(AX), X5
	MOVO 336(AX), X7
	MOVO 352(AX), X3
	MOVO X14, X13
	MOVO X5, X11
	MOVO X7, X9
	MOVO X3, X1
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF0 // PSUBD xmm14, xmm8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x01 // PSLLD xmm14, 1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xED // PSUBD xmm5, xmm13
	MOVO X5, X15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x1C // PSLLD xmm5, 28
	POR X10, X14
	POR X5, X14
	MOVO X14, 256(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x04 // PSRLD xmm15, 4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xFB // PSUBD xmm7, xmm11
	MOVO X7, X2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x17 // PSLLD xmm7, 23
	POR X15, X7
	MOVO X7, 272(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x09 // PSRLD xmm2, 9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD9 // PSUBD xmm3, xmm9
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x12 // PSLLD xmm3, 18
	POR X2, X3
	MOVO X3, 288(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x0E // PSRLD xmm6, 14
	MOVO 368(AX), X12
	MOVO 384(AX), X0
	MOVO 400(AX), X4
	MOVO 416(AX), X8
	MOVO X12, X13
	MOVO X0, X10
	MOVO X4, X5
	MOVO X8, X14
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE1 // PSUBD xmm12, xmm1
	MOVO X12, X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0D // PSLLD xmm12, 13
	POR X6, X12
	MOVO X12, 304(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x13 // PSRLD xmm11, 19
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC5 // PSUBD xmm0, xmm13
	MOVO X0, X15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x08 // PSLLD xmm0, 8
	POR X11, X0
	MOVO X0, 320(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x18 // PSRLD xmm15, 24
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE2 // PSUBD xmm4, xmm10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x03 // PSLLD xmm4, 3
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC5 // PSUBD xmm8, xmm5
	MOVO X8, X7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1E // PSLLD xmm8, 30
	POR X15, X4
	POR X8, X4
	MOVO X4, 336(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x02 // PSRLD xmm7, 2
	MOVO 432(AX), X9
	MOVO 448(AX), X2
	MOVO 464(AX), X3
	MOVO 480(AX), X1
	MOVO X9, X6
	MOVO X2, X12
	MOVO X3, X13
	MOVO X1, X11
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCE // PSUBD xmm9, xmm14
	MOVO X9, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x19 // PSLLD xmm9, 25
	POR X7, X9
	MOVO X9, 352(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x07 // PSRLD xmm0, 7
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD6 // PSUBD xmm2, xmm6
	MOVO X2, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x14 // PSLLD xmm2, 20
	POR X0, X2
	MOVO X2, 368(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x0C // PSRLD xmm10, 12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xDC // PSUBD xmm3, xmm12
	MOVO X3, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0F // PSLLD xmm3, 15
	POR X10, X3
	MOVO X3, 384(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x11 // PSRLD xmm5, 17
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xCD // PSUBD xmm1, xmm13
	MOVO X1, X15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0A // PSLLD xmm1, 10
	POR X5, X1
	MOVO X1, 400(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x16 // PSRLD xmm15, 22
	MOVO 496(AX), X8
	MOVO X8, X4
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC3 // PSUBD xmm8, xmm11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x05 // PSLLD xmm8, 5
	POR X15, X8
	MOVO X8, 416(BX)
	MOVO X4, 0(DX)
	RET

// func dpack32_28(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_28(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	MOVO X2, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1C // PSLLD xmm2, 28
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x04 // PSRLD xmm7, 4
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	MOVO X3, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x18 // PSLLD xmm3, 24
	POR X7, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x08 // PSRLD xmm8, 8
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xCE // PSUBD xmm9, xmm6
	MOVO X9, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x14 // PSLLD xmm9, 20
	POR X8, X9
	MOVO X9, 32(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x0C // PSRLD xmm4, 12
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	MOVO X10, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x10 // PSLLD xmm10, 16
	POR X4, X10
	MOVO X10, 48(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x10 // PSRLD xmm1, 16
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDE // PSUBD xmm11, xmm14
	MOVO X11, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0C // PSLLD xmm11, 12
	POR X1, X11
	MOVO X11, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x14 // PSRLD xmm2, 20
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE7 // PSUBD xmm12, xmm15
	MOVO X12, X5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x08 // PSLLD xmm12, 8
	POR X2, X12
	MOVO X12, 80(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x18 // PSRLD xmm5, 24
	MOVO 112(AX), X7
	MOVO 128(AX), X3
	MOVO 144(AX), X6
	MOVO 160(AX), X8
	MOVO X7, X9
	MOVO X3, X13
	MOVO X6, X4
	MOVO X8, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF8 // PSUBD xmm7, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x04 // PSLLD xmm7, 4
	POR X5, X7
	MOVO X7, 96(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD9 // PSUBD xmm3, xmm9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF5 // PSUBD xmm6, xmm13
	MOVO X6, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1C // PSLLD xmm6, 28
	POR X3, X6
	MOVO X6, 112(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x04 // PSRLD xmm14, 4
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC4 // PSUBD xmm8, xmm4
	MOVO X8, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x18 // PSLLD xmm8, 24
	POR X14, X8
	MOVO X8, 128(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x08 // PSRLD xmm1, 8
	MOVO 176(AX), X11
	MOVO 192(AX), X15
	MOVO 208(AX), X2
	MOVO 224(AX), X12
	MOVO X11, X0
	MOVO X15, X5
	MOVO X2, X7
	MOVO X12, X9
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDA // PSUBD xmm11, xmm10
	MOVO X11, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x14 // PSLLD xmm11, 20
	POR X1, X11
	MOVO X11, 144(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x0C // PSRLD xmm13, 12
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF8 // PSUBD xmm15, xmm0
	MOVO X15, X3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x10 // PSLLD xmm15, 16
	POR X13, X15
	MOVO X15, 160(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x10 // PSRLD xmm3, 16
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm2, xmm5
	MOVO X2, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0C // PSLLD xmm2, 12
	POR X3, X2
	MOVO X2, 176(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x14 // PSRLD xmm6, 20
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE7 // PSUBD xmm12, xmm7
	MOVO X12, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x08 // PSLLD xmm12, 8
	POR X6, X12
	MOVO X12, 192(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x18 // PSRLD xmm4, 24
	MOVO 240(AX), X14
	MOVO 256(AX), X8
	MOVO 272(AX), X10
	MOVO 288(AX), X1
	MOVO X14, X11
	MOVO X8, X0
	MOVO X10, X13
	MOVO X1, X15
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF1 // PSUBD xmm14, xmm9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x04 // PSLLD xmm14, 4
	POR X4, X14
	MOVO X14, 208(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC3 // PSUBD xmm8, xmm11
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xD0 // PSUBD xmm10, xmm0
	MOVO X10, X5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1C // PSLLD xmm10, 28
	POR X8, X10
	MOVO X10, 224(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x04 // PSRLD xmm5, 4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xCD // PSUBD xmm1, xmm13
	MOVO X1, X3
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x18 // PSLLD xmm1, 24
	POR X5, X1
	MOVO X1, 240(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x08 // PSRLD xmm3, 8
	MOVO 304(AX), X2
	MOVO 320(AX), X7
	MOVO 336(AX), X6
	MOVO 352(AX), X12
	MOVO X2, X9
	MOVO X7, X4
	MOVO X6, X14
	MOVO X12, X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD7 // PSUBD xmm2, xmm15
	MOVO X2, X0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x14 // PSLLD xmm2, 20
	POR X3, X2
	MOVO X2, 256(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x0C // PSRLD xmm0, 12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF9 // PSUBD xmm7, xmm9
	MOVO X7, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x10 // PSLLD xmm7, 16
	POR X0, X7
	MOVO X7, 272(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x10 // PSRLD xmm8, 16
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF4 // PSUBD xmm6, xmm4
	MOVO X6, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0C // PSLLD xmm6, 12
	POR X8, X6
	MOVO X6, 288(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x14 // PSRLD xmm10, 20
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE6 // PSUBD xmm12, xmm14
	MOVO X12, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x08 // PSLLD xmm12, 8
	POR X10, X12
	MOVO X12, 304(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x18 // PSRLD xmm13, 24
	MOVO 368(AX), X5
	MOVO 384(AX), X1
	MOVO 400(AX), X15
	MOVO 416(AX), X3
	MOVO X5, X2
	MOVO X1, X9
	MOVO X15, X0
	MOVO X3, X7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xEB // PSUBD xmm5, xmm11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x04 // PSLLD xmm5, 4
	POR X13, X5
	MOVO X5, 320(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xCA // PSUBD xmm1, xmm2
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF9 // PSUBD xmm15, xmm9
	MOVO X15, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1C // PSLLD xmm15, 28
	POR X1, X15
	MOVO X15, 336(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x04 // PSRLD xmm4, 4
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD8 // PSUBD xmm3, xmm0
	MOVO X3, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x18 // PSLLD xmm3, 24
	POR X4, X3
	MOVO X3, 352(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x08 // PSRLD xmm8, 8
	MOVO 432(AX), X6
	MOVO 448(AX), X14
	MOVO 464(AX), X10
	MOVO 480(AX), X12
	MOVO X6, X11
	MOVO X14, X13
	MOVO X10, X5
	MOVO X12, X2
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF7 // PSUBD xmm6, xmm7
	MOVO X6, X9
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x14 // PSLLD xmm6, 20
	POR X8, X6
	MOVO X6, 368(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x0C // PSRLD xmm9, 12
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF3 // PSUBD xmm14, xmm11
	MOVO X14, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x10 // PSLLD xmm14, 16
	POR X9, X14
	MOVO X14, 384(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x10 // PSRLD xmm1, 16
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	MOVO X10, X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0C // PSLLD xmm10, 12
	POR X1, X10
	MOVO X10, 400(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x14 // PSRLD xmm15, 20
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE5 // PSUBD xmm12, xmm5
	MOVO X12, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x08 // PSLLD xmm12, 8
	POR X15, X12
	MOVO X12, 416(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x18 // PSRLD xmm0, 24
	MOVO 496(AX), X4
	MOVO X4, X3
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xE2 // PSUBD xmm4, xmm2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x04 // PSLLD xmm4, 4
	POR X0, X4
	MOVO X4, 432(BX)
	MOVO X3, 0(DX)
	RET

// func dpack32_29(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_29(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	MOVO X2, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1D // PSLLD xmm2, 29
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x03 // PSRLD xmm7, 3
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	MOVO X3, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1A // PSLLD xmm3, 26
	POR X7, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x06 // PSRLD xmm8, 6
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xCE // PSUBD xmm9, xmm6
	MOVO X9, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x17 // PSLLD xmm9, 23
	POR X8, X9
	MOVO X9, 32(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x09 // PSRLD xmm4, 9
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	MOVO X10, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x14 // PSLLD xmm10, 20
	POR X4, X10
	MOVO X10, 48(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x0C // PSRLD xmm1, 12
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDE // PSUBD xmm11, xmm14
	MOVO X11, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x11 // PSLLD xmm11, 17
	POR X1, X11
	MOVO X11, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x0F // PSRLD xmm2, 15
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE7 // PSUBD xmm12, xmm15
	MOVO X12, X5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0E // PSLLD xmm12, 14
	POR X2, X12
	MOVO X12, 80(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x12 // PSRLD xmm5, 18
	MOVO 112(AX), X7
	MOVO 128(AX), X3
	MOVO 144(AX), X6
	MOVO 160(AX), X8
	MOVO X7, X9
	MOVO X3, X13
	MOVO X6, X4
	MOVO X8, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF8 // PSUBD xmm7, xmm0
	MOVO X7, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0B // PSLLD xmm7, 11
	POR X5, X7
	MOVO X7, 96(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x15 // PSRLD xmm14, 21
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD9 // PSUBD xmm3, xmm9
	MOVO X3, X1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x08 // PSLLD xmm3, 8
	POR X14, X3
	MOVO X3, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x18 // PSRLD xmm1, 24
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF5 // PSUBD xmm6, xmm13
	MOVO X6, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x05 // PSLLD xmm6, 5
	POR X1, X6
	MOVO X6, 128(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x1B // PSRLD xmm11, 27
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC4 // PSUBD xmm8, xmm4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x02 // PSLLD xmm8, 2
	MOVO 176(AX), X15
	MOVO 192(AX), X2
	MOVO 208(AX), X12
	MOVO 224(AX), X0
	MOVO X15, X5
	MOVO X2, X7
	MOVO X12, X9
	MOVO X0, X14
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xFA // PSUBD xmm15, xmm10
	MOVO X15, X3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1F // PSLLD xmm15, 31
	POR X11, X8
	POR X15, X8
	MOVO X8, 144(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x01 // PSRLD xmm3, 1
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm2, xmm5
	MOVO X2, X13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1C // PSLLD xmm2, 28
	POR X3, X2
	MOVO X2, 160(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x04 // PSRLD xmm13, 4
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE7 // PSUBD xmm12, xmm7
	MOVO X12, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x19 // PSLLD xmm12, 25
	POR X13, X12
	MOVO X12, 176(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x07 // PSRLD xmm1, 7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC1 // PSUBD xmm0, xmm9
	MOVO X0, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x16 // PSLLD xmm0, 22
	POR X1, X0
	MOVO X0, 192(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x0A // PSRLD xmm6, 10
	MOVO 240(AX), X4
	MOVO 256(AX), X10
	MOVO 272(AX), X11
	MOVO 288(AX), X15
	MOVO X4, X8
	MOVO X10, X5
	MOVO X11, X3
	MOVO X15, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE6 // PSUBD xmm4, xmm14
	MOVO X4, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x13 // PSLLD xmm4, 19
	POR X6, X4
	MOVO X4, 208(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x0D // PSRLD xmm7, 13
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD0 // PSUBD xmm10, xmm8
	MOVO X10, X13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x10 // PSLLD xmm10, 16
	POR X7, X10
	MOVO X10, 224(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x10 // PSRLD xmm13, 16
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm11, xmm5
	MOVO X11, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0D // PSLLD xmm11, 13
	POR X13, X11
	MOVO X11, 240(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x13 // PSRLD xmm12, 19
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xFB // PSUBD xmm15, xmm3
	MOVO X15, X9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0A // PSLLD xmm15, 10
	POR X12, X15
	MOVO X15, 256(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x16 // PSRLD xmm9, 22
	MOVO 304(AX), X1
	MOVO 320(AX), X0
	MOVO 336(AX), X14
	MOVO 352(AX), X6
	MOVO X1, X4
	MOVO X0, X8
	MOVO X14, X7
	MOVO X6, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xCA // PSUBD xmm1, xmm2
	MOVO X1, X5
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x07 // PSLLD xmm1, 7
	POR X9, X1
	MOVO X1, 272(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x19 // PSRLD xmm5, 25
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC4 // PSUBD xmm0, xmm4
	MOVO X0, X13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x04 // PSLLD xmm0, 4
	POR X5, X0
	MOVO X0, 288(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x1C // PSRLD xmm13, 28
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xF0 // PSUBD xmm14, xmm8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x01 // PSLLD xmm14, 1
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF7 // PSUBD xmm6, xmm7
	MOVO X6, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x1E // PSLLD xmm6, 30
	POR X13, X14
	POR X6, X14
	MOVO X14, 304(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x02 // PSRLD xmm11, 2
	MOVO 368(AX), X3
	MOVO 384(AX), X12
	MOVO 400(AX), X15
	MOVO 416(AX), X2
	MOVO X3, X9
	MOVO X12, X1
	MOVO X15, X4
	MOVO X2, X5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xDA // PSUBD xmm3, xmm10
	MOVO X3, X0
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1B // PSLLD xmm3, 27
	POR X11, X3
	MOVO X3, 320(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x05 // PSRLD xmm0, 5
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE1 // PSUBD xmm12, xmm9
	MOVO X12, X8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x18 // PSLLD xmm12, 24
	POR X0, X12
	MOVO X12, 336(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x08 // PSRLD xmm8, 8
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF9 // PSUBD xmm15, xmm1
	MOVO X15, X7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x15 // PSLLD xmm15, 21
	POR X8, X15
	MOVO X15, 352(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x0B // PSRLD xmm7, 11
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	MOVO X2, X13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x12 // PSLLD xmm2, 18
	POR X7, X2
	MOVO X2, 368(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x0E // PSRLD xmm13, 14
	MOVO 432(AX), X6
	MOVO 448(AX), X14
	MOVO 464(AX), X10
	MOVO 480(AX), X11
	MOVO X6, X3
	MOVO X14, X9
	MOVO X10, X0
	MOVO X11, X12
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF5 // PSUBD xmm6, xmm5
	MOVO X6, X1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0F // PSLLD xmm6, 15
	POR X13, X6
	MOVO X6, 384(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x11 // PSRLD xmm1, 17
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF3 // PSUBD xmm14, xmm3
	MOVO X14, X8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0C // PSLLD xmm14, 12
	POR X1, X14
	MOVO X14, 400(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x14 // PSRLD xmm8, 20
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD1 // PSUBD xmm10, xmm9
	MOVO X10, X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x09 // PSLLD xmm10, 9
	POR X8, X10
	MOVO X10, 416(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x17 // PSRLD xmm15, 23
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xD8 // PSUBD xmm11, xmm0
	MOVO X11, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x06 // PSLLD xmm11, 6
	POR X15, X11
	MOVO X11, 432(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x1A // PSRLD xmm4, 26
	MOVO 496(AX), X7
	MOVO X7, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xFC // PSUBD xmm7, xmm12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x03 // PSLLD xmm7, 3
	POR X4, X7
	MOVO X7, 448(BX)
	MOVO X2, 0(DX)
	RET

// func dpack32_30(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_30(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	MOVO X2, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1E // PSLLD xmm2, 30
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x02 // PSRLD xmm7, 2
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	MOVO X3, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1C // PSLLD xmm3, 28
	POR X7, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x04 // PSRLD xmm8, 4
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xCE // PSUBD xmm9, xmm6
	MOVO X9, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1A // PSLLD xmm9, 26
	POR X8, X9
	MOVO X9, 32(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x06 // PSRLD xmm4, 6
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	MOVO X10, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x18 // PSLLD xmm10, 24
	POR X4, X10
	MOVO X10, 48(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x08 // PSRLD xmm1, 8
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDE // PSUBD xmm11, xmm14
	MOVO X11, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x16 // PSLLD xmm11, 22
	POR X1, X11
	MOVO X11, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x0A // PSRLD xmm2, 10
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE7 // PSUBD xmm12, xmm15
	MOVO X12, X5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x14 // PSLLD xmm12, 20
	POR X2, X12
	MOVO X12, 80(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x0C // PSRLD xmm5, 12
	MOVO 112(AX), X7
	MOVO 128(AX), X3
	MOVO 144(AX), X6
	MOVO 160(AX), X8
	MOVO X7, X9
	MOVO X3, X13
	MOVO X6, X4
	MOVO X8, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF8 // PSUBD xmm7, xmm0
	MOVO X7, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x12 // PSLLD xmm7, 18
	POR X5, X7
	MOVO X7, 96(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x0E // PSRLD xmm14, 14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD9 // PSUBD xmm3, xmm9
	MOVO X3, X1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x10 // PSLLD xmm3, 16
	POR X14, X3
	MOVO X3, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x10 // PSRLD xmm1, 16
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF5 // PSUBD xmm6, xmm13
	MOVO X6, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0E // PSLLD xmm6, 14
	POR X1, X6
	MOVO X6, 128(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x12 // PSRLD xmm11, 18
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC4 // PSUBD xmm8, xmm4
	MOVO X8, X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x0C // PSLLD xmm8, 12
	POR X11, X8
	MOVO X8, 144(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x14 // PSRLD xmm15, 20
	MOVO 176(AX), X2
	MOVO 192(AX), X12
	MOVO 208(AX), X0
	MOVO 224(AX), X5
	MOVO X2, X7
	MOVO X12, X9
	MOVO X0, X14
	MOVO X5, X3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD2 // PSUBD xmm2, xmm10
	MOVO X2, X13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0A // PSLLD xmm2, 10
	POR X15, X2
	MOVO X2, 160(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x16 // PSRLD xmm13, 22
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE7 // PSUBD xmm12, xmm7
	MOVO X12, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x08 // PSLLD xmm12, 8
	POR X13, X12
	MOVO X12, 176(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x18 // PSRLD xmm1, 24
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC1 // PSUBD xmm0, xmm9
	MOVO X0, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x06 // PSLLD xmm0, 6
	POR X1, X0
	MOVO X0, 192(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x1A // PSRLD xmm6, 26
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xEE // PSUBD xmm5, xmm14
	MOVO X5, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x04 // PSLLD xmm5, 4
	POR X6, X5
	MOVO X5, 208(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x1C // PSRLD xmm4, 28
	MOVO 240(AX), X11
	MOVO 256(AX), X8
	MOVO 272(AX), X10
	MOVO 288(AX), X15
	MOVO X11, X2
	MOVO X8, X7
	MOVO X10, X13
	MOVO X15, X12
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xDB // PSUBD xmm11, xmm3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x02 // PSLLD xmm11, 2
	POR X4, X11
	MOVO X11, 224(BX)
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC2 // PSUBD xmm8, xmm2
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xD7 // PSUBD xmm10, xmm7
	MOVO X10, X9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1E // PSLLD xmm10, 30
	POR X8, X10
	MOVO X10, 240(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x02 // PSRLD xmm9, 2
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xFD // PSUBD xmm15, xmm13
	MOVO X15, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x1C // PSLLD xmm15, 28
	POR X9, X15
	MOVO X15, 256(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x04 // PSRLD xmm1, 4
	MOVO 304(AX), X0
	MOVO 320(AX), X14
	MOVO 336(AX), X6
	MOVO 352(AX), X5
	MOVO X0, X3
	MOVO X14, X4
	MOVO X6, X11
	MOVO X5, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC4 // PSUBD xmm0, xmm12
	MOVO X0, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x1A // PSLLD xmm0, 26
	POR X1, X0
	MOVO X0, 272(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x06 // PSRLD xmm7, 6
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF3 // PSUBD xmm14, xmm3
	MOVO X14, X8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x18 // PSLLD xmm14, 24
	POR X7, X14
	MOVO X14, 288(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x08 // PSRLD xmm8, 8
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF4 // PSUBD xmm6, xmm4
	MOVO X6, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x16 // PSLLD xmm6, 22
	POR X8, X6
	MOVO X6, 304(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x0A // PSRLD xmm10, 10
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xEB // PSUBD xmm5, xmm11
	MOVO X5, X13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x14 // PSLLD xmm5, 20
	POR X10, X5
	MOVO X5, 320(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x0C // PSRLD xmm13, 12
	MOVO 368(AX), X9
	MOVO 384(AX), X15
	MOVO 400(AX), X12
	MOVO 416(AX), X1
	MOVO X9, X0
	MOVO X15, X3
	MOVO X12, X7
	MOVO X1, X14
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xCA // PSUBD xmm9, xmm2
	MOVO X9, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x12 // PSLLD xmm9, 18
	POR X13, X9
	MOVO X9, 336(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x0E // PSRLD xmm4, 14
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF8 // PSUBD xmm15, xmm0
	MOVO X15, X8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x10 // PSLLD xmm15, 16
	POR X4, X15
	MOVO X15, 352(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x10 // PSRLD xmm8, 16
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE3 // PSUBD xmm12, xmm3
	MOVO X12, X6
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0E // PSLLD xmm12, 14
	POR X8, X12
	MOVO X12, 368(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x12 // PSRLD xmm6, 18
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xCF // PSUBD xmm1, xmm7
	MOVO X1, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x0C // PSLLD xmm1, 12
	POR X6, X1
	MOVO X1, 384(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x14 // PSRLD xmm11, 20
	MOVO 432(AX), X10
	MOVO 448(AX), X5
	MOVO 464(AX), X2
	MOVO 480(AX), X13
	MOVO X10, X9
	MOVO X5, X0
	MOVO X2, X4
	MOVO X13, X15
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD6 // PSUBD xmm10, xmm14
	MOVO X10, X3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0A // PSLLD xmm10, 10
	POR X11, X10
	MOVO X10, 400(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x16 // PSRLD xmm3, 22
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE9 // PSUBD xmm5, xmm9
	MOVO X5, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x08 // PSLLD xmm5, 8
	POR X3, X5
	MOVO X5, 416(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x18 // PSRLD xmm8, 24
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD0 // PSUBD xmm2, xmm0
	MOVO X2, X12
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x06 // PSLLD xmm2, 6
	POR X8, X2
	MOVO X2, 432(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x1A // PSRLD xmm12, 26
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xEC // PSUBD xmm13, xmm4
	MOVO X13, X7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x04 // PSLLD xmm13, 4
	POR X12, X13
	MOVO X13, 448(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x1C // PSRLD xmm7, 28
	MOVO 496(AX), X6
	MOVO X6, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF7 // PSUBD xmm6, xmm15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x02 // PSLLD xmm6, 2
	POR X7, X6
	MOVO X6, 464(BX)
	MOVO X1, 0(DX)
	RET

// func dpack32_31(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_31(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	MOVO X2, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1F // PSLLD xmm2, 31
	POR X1, X2
	MOVO X2, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x01 // PSRLD xmm7, 1
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	MOVO X3, X8
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1E // PSLLD xmm3, 30
	POR X7, X3
	MOVO X3, 16(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x02 // PSRLD xmm8, 2
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xCE // PSUBD xmm9, xmm6
	MOVO X9, X4
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF1; BYTE $0x1D // PSLLD xmm9, 29
	POR X8, X9
	MOVO X9, 32(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x03 // PSRLD xmm4, 3
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	MOVO X10, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x1C // PSLLD xmm10, 28
	POR X4, X10
	MOVO X10, 48(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x04 // PSRLD xmm1, 4
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDE // PSUBD xmm11, xmm14
	MOVO X11, X2
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x1B // PSLLD xmm11, 27
	POR X1, X11
	MOVO X11, 64(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x05 // PSRLD xmm2, 5
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE7 // PSUBD xmm12, xmm15
	MOVO X12, X5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x1A // PSLLD xmm12, 26
	POR X2, X12
	MOVO X12, 80(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x06 // PSRLD xmm5, 6
	MOVO 112(AX), X7
	MOVO 128(AX), X3
	MOVO 144(AX), X6
	MOVO 160(AX), X8
	MOVO X7, X9
	MOVO X3, X13
	MOVO X6, X4
	MOVO X8, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xF8 // PSUBD xmm7, xmm0
	MOVO X7, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x19 // PSLLD xmm7, 25
	POR X5, X7
	MOVO X7, 96(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x07 // PSRLD xmm14, 7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD9 // PSUBD xmm3, xmm9
	MOVO X3, X1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x18 // PSLLD xmm3, 24
	POR X14, X3
	MOVO X3, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x08 // PSRLD xmm1, 8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF5 // PSUBD xmm6, xmm13
	MOVO X6, X11
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x17 // PSLLD xmm6, 23
	POR X1, X6
	MOVO X6, 128(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x09 // PSRLD xmm11, 9
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC4 // PSUBD xmm8, xmm4
	MOVO X8, X15
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x16 // PSLLD xmm8, 22
	POR X11, X8
	MOVO X8, 144(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x0A // PSRLD xmm15, 10
	MOVO 176(AX), X2
	MOVO 192(AX), X12
	MOVO 208(AX), X0
	MOVO 224(AX), X5
	MOVO X2, X7
	MOVO X12, X9
	MOVO X0, X14
	MOVO X5, X3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xD2 // PSUBD xmm2, xmm10
	MOVO X2, X13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x15 // PSLLD xmm2, 21
	POR X15, X2
	MOVO X2, 160(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x0B // PSRLD xmm13, 11
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xE7 // PSUBD xmm12, xmm7
	MOVO X12, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x14 // PSLLD xmm12, 20
	POR X13, X12
	MOVO X12, 176(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x0C // PSRLD xmm1, 12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC1 // PSUBD xmm0, xmm9
	MOVO X0, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x13 // PSLLD xmm0, 19
	POR X1, X0
	MOVO X0, 192(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x0D // PSRLD xmm6, 13
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xEE // PSUBD xmm5, xmm14
	MOVO X5, X4
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x12 // PSLLD xmm5, 18
	POR X6, X5
	MOVO X5, 208(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x0E // PSRLD xmm4, 14
	MOVO 240(AX), X11
	MOVO 256(AX), X8
	MOVO 272(AX), X10
	MOVO 288(AX), X15
	MOVO X11, X2
	MOVO X8, X7
	MOVO X10, X13
	MOVO X15, X12
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xDB // PSUBD xmm11, xmm3
	MOVO X11, X9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x11 // PSLLD xmm11, 17
	POR X4, X11
	MOVO X11, 224(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x0F // PSRLD xmm9, 15
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC2 // PSUBD xmm8, xmm2
	MOVO X8, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x10 // PSLLD xmm8, 16
	POR X9, X8
	MOVO X8, 240(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x10 // PSRLD xmm1, 16
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xD7 // PSUBD xmm10, xmm7
	MOVO X10, X0
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x0F // PSLLD xmm10, 15
	POR X1, X10
	MOVO X10, 256(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD0; BYTE $0x11 // PSRLD xmm0, 17
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xFD // PSUBD xmm15, xmm13
	MOVO X15, X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x0E // PSLLD xmm15, 14
	POR X0, X15
	MOVO X15, 272(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD6; BYTE $0x12 // PSRLD xmm14, 18
	MOVO 304(AX), X6
	MOVO 320(AX), X5
	MOVO 336(AX), X3
	MOVO 352(AX), X4
	MOVO X6, X11
	MOVO X5, X2
	MOVO X3, X9
	MOVO X4, X8
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xF4 // PSUBD xmm6, xmm12
	MOVO X6, X7
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x0D // PSLLD xmm6, 13
	POR X14, X6
	MOVO X6, 288(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x13 // PSRLD xmm7, 19
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xEB // PSUBD xmm5, xmm11
	MOVO X5, X1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x0C // PSLLD xmm5, 12
	POR X7, X5
	MOVO X5, 304(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x14 // PSRLD xmm1, 20
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDA // PSUBD xmm3, xmm2
	MOVO X3, X10
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x0B // PSLLD xmm3, 11
	POR X1, X3
	MOVO X3, 320(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x15 // PSRLD xmm10, 21
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xE1 // PSUBD xmm4, xmm9
	MOVO X4, X13
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x0A // PSLLD xmm4, 10
	POR X10, X4
	MOVO X4, 336(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD5; BYTE $0x16 // PSRLD xmm13, 22
	MOVO 368(AX), X0
	MOVO 384(AX), X15
	MOVO 400(AX), X12
	MOVO 416(AX), X14
	MOVO X0, X6
	MOVO X15, X11
	MOVO X12, X7
	MOVO X14, X5
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xC0 // PSUBD xmm0, xmm8
	MOVO X0, X2
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x09 // PSLLD xmm0, 9
	POR X13, X0
	MOVO X0, 352(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD2; BYTE $0x17 // PSRLD xmm2, 23
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm15, xmm6
	MOVO X15, X1
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF7; BYTE $0x08 // PSLLD xmm15, 8
	POR X2, X15
	MOVO X15, 368(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x18 // PSRLD xmm1, 24
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE3 // PSUBD xmm12, xmm11
	MOVO X12, X3
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x07 // PSLLD xmm12, 7
	POR X1, X12
	MOVO X12, 384(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x19 // PSRLD xmm3, 25
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xF7 // PSUBD xmm14, xmm7
	MOVO X14, X9
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF6; BYTE $0x06 // PSLLD xmm14, 6
	POR X3, X14
	MOVO X14, 400(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x1A // PSRLD xmm9, 26
	MOVO 432(AX), X10
	MOVO 448(AX), X4
	MOVO 464(AX), X8
	MOVO 480(AX), X13
	MOVO X10, X0
	MOVO X4, X6
	MOVO X8, X2
	MOVO X13, X15
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm5
	MOVO X10, X11
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF2; BYTE $0x05 // PSLLD xmm10, 5
	POR X9, X10
	MOVO X10, 416(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD3; BYTE $0x1B // PSRLD xmm11, 27
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xE0 // PSUBD xmm4, xmm0
	MOVO X4, X1
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF4; BYTE $0x04 // PSLLD xmm4, 4
	POR X11, X4
	MOVO X4, 432(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD1; BYTE $0x1C // PSRLD xmm1, 28
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xC6 // PSUBD xmm8, xmm6
	MOVO X8, X12
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF0; BYTE $0x03 // PSLLD xmm8, 3
	POR X1, X8
	MOVO X8, 448(BX)
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xD4; BYTE $0x1D // PSRLD xmm12, 29
	BYTE $0x66; BYTE $0x44; BYTE $0x0F; BYTE $0xFA; BYTE $0xEA // PSUBD xmm13, xmm2
	MOVO X13, X7
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0x72; BYTE $0xF5; BYTE $0x02 // PSLLD xmm13, 2
	POR X12, X13
	MOVO X13, 464(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xD7; BYTE $0x1E // PSRLD xmm7, 30
	MOVO 496(AX), X3
	MOVO X3, X14
	BYTE $0x66; BYTE $0x41; BYTE $0x0F; BYTE $0xFA; BYTE $0xDF // PSUBD xmm3, xmm15
	BYTE $0x66; BYTE $0x0F; BYTE $0x72; BYTE $0xF3; BYTE $0x01 // PSLLD xmm3, 1
	POR X7, X3
	MOVO X3, 480(BX)
	MOVO X14, 0(DX)
	RET

// func dpack32_32(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack32_32(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $2, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	MOVO X1, 0(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	MOVO X2, 16(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	MOVO X3, 32(BX)
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm7, xmm6
	MOVO X7, 48(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC3 // PSUBD xmm8, xmm11
	MOVO X8, 64(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm12
	MOVO X9, 80(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	MOVO X10, 96(BX)
	MOVO 112(AX), X15
	MOVO 128(AX), X0
	MOVO 144(AX), X1
	MOVO 160(AX), X4
	MOVO X15, X2
	MOVO X0, X5
	MOVO X1, X3
	MOVO X4, X6
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm15, xmm14
	MOVO X15, 112(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC2 // PSUBD xmm0, xmm2
	MOVO X0, 128(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xCD // PSUBD xmm1, xmm5
	MOVO X1, 144(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xE3 // PSUBD xmm4, xmm3
	MOVO X4, 160(BX)
	MOVO 176(AX), X7
	MOVO 192(AX), X11
	MOVO 208(AX), X8
	MOVO 224(AX), X12
	MOVO X7, X9
	MOVO X11, X13
	MOVO X8, X10
	MOVO X12, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm7, xmm6
	MOVO X7, 176(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD9 // PSUBD xmm11, xmm9
	MOVO X11, 192(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC5 // PSUBD xmm8, xmm13
	MOVO X8, 208(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xE2 // PSUBD xmm12, xmm10
	MOVO X12, 224(BX)
	MOVO 240(AX), X15
	MOVO 256(AX), X2
	MOVO 272(AX), X0
	MOVO 288(AX), X5
	MOVO X15, X1
	MOVO X2, X3
	MOVO X0, X4
	MOVO X5, X6
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm15, xmm14
	MOVO X15, 240(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD1 // PSUBD xmm2, xmm1
	MOVO X2, 256(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC3 // PSUBD xmm0, xmm3
	MOVO X0, 272(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xEC // PSUBD xmm5, xmm4
	MOVO X5, 288(BX)
	MOVO 304(AX), X7
	MOVO 320(AX), X9
	MOVO 336(AX), X11
	MOVO 352(AX), X13
	MOVO X7, X8
	MOVO X9, X10
	MOVO X11, X12
	MOVO X13, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm7, xmm6
	MOVO X7, 304(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm9, xmm8
	MOVO X9, 320(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xDA // PSUBD xmm11, xmm10
	MOVO X11, 336(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xEC // PSUBD xmm13, xmm12
	MOVO X13, 352(BX)
	MOVO 368(AX), X15
	MOVO 384(AX), X1
	MOVO 400(AX), X2
	MOVO 416(AX), X3
	MOVO X15, X0
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm15, xmm14
	MOVO X15, 368(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xC8 // PSUBD xmm1, xmm0
	MOVO X1, 384(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xD4 // PSUBD xmm2, xmm4
	MOVO X2, 400(BX)
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xDD // PSUBD xmm3, xmm5
	MOVO X3, 416(BX)
	MOVO 432(AX), X7
	MOVO 448(AX), X8
	MOVO 464(AX), X9
	MOVO 480(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm7, xmm6
	MOVO X7, 432(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xC3 // PSUBD xmm8, xmm11
	MOVO X8, 448(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xCC // PSUBD xmm9, xmm12
	MOVO X9, 464(BX)
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xD5 // PSUBD xmm10, xmm13
	MOVO X10, 480(BX)
	MOVO 496(AX), X15
	MOVO X15, X0
	BYTE $0x66; BYTE $0x45; BYTE $0x0F; BYTE $0xFA; BYTE $0xFE // PSUBD xmm15, xmm14
	MOVO X15, 496(BX)
	MOVO X0, 0(DX)
	RET

// func dpack64_1(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_1(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $1, X2
	PSUBQ X5, X3
	PSLLQ $2, X3
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	PSUBQ X6, X7
	PSLLQ $3, X7
	PSUBQ X11, X8
	PSLLQ $4, X8
	PSUBQ X12, X9
	PSLLQ $5, X9
	PSUBQ X13, X10
	PSLLQ $6, X10
	MOVO 112(AX), X15
	MOVO 128(AX), X0
	MOVO 144(AX), X4
	MOVO 160(AX), X5
	MOVO X15, X6
	MOVO X0, X11
	MOVO X4, X12
	MOVO X5, X13
	PSUBQ X14, X15
	PSLLQ $7, X15
	PSUBQ X6, X0
	PSLLQ $8, X0
	PSUBQ X11, X4
	PSLLQ $9, X4
	PSUBQ X12, X5
	PSLLQ $10, X5
	MOVO 176(AX), X14
	MOVO 192(AX), X6
	MOVO 208(AX), X11
	MOVO 224(AX), X12
	POR X1, X2
	POR X3, X7
	POR X8, X9
	POR X10, X15
	POR X0, X4
	POR X5, X2
	POR X7, X9
	POR X15, X4
	POR X2, X9
	POR X4, X9
	MOVO X14, X1
	MOVO X6, X3
	MOVO X11, X8
	MOVO X12, X10
	PSUBQ X13, X14
	PSLLQ $11, X14
	PSUBQ X1, X6
	PSLLQ $12, X6
	PSUBQ X3, X11
	PSLLQ $13, X11
	PSUBQ X8, X12
	PSLLQ $14, X12
	MOVO 240(AX), X0
	MOVO 256(AX), X5
	MOVO 272(AX), X7
	MOVO 288(AX), X15
	MOVO X0, X2
	MOVO X5, X4
	MOVO X7, X13
	MOVO X15, X1
	PSUBQ X10, X0
	PSLLQ $15, X0
	PSUBQ X2, X5
	PSLLQ $16, X5
	PSUBQ X4, X7
	PSLLQ $17, X7
	PSUBQ X13, X15
	PSLLQ $18, X15
	MOVO 304(AX), X3
	MOVO 320(AX), X8
	MOVO 336(AX), X10
	MOVO 352(AX), X2
	POR X9, X14
	POR X6, X11
	POR X12, X0
	POR X5, X7
	POR X15, X14
	POR X11, X0
	POR X7, X14
	POR X0, X14
	MOVO X3, X4
	MOVO X8, X13
	MOVO X10, X9
	MOVO X2, X6
	PSUBQ X1, X3
	PSLLQ $19, X3
	PSUBQ X4, X8
	PSLLQ $20, X8
	PSUBQ X13, X10
	PSLLQ $21, X10
	PSUBQ X9, X2
	PSLLQ $22, X2
	MOVO 368(AX), X12
	MOVO 384(AX), X5
	MOVO 400(AX), X15
	MOVO 416(AX), X11
	MOVO X12, X7
	MOVO X5, X0
	MOVO X15, X1
	MOVO X11, X4
	PSUBQ X6, X12
	PSLLQ $23, X12
	PSUBQ X7, X5
	PSLLQ $24, X5
	PSUBQ X0, X15
	PSLLQ $25, X15
	PSUBQ X1, X11
	PSLLQ $26, X11
	MOVO 432(AX), X13
	MOVO 448(AX), X9
	MOVO 464(AX), X6
	MOVO 480(AX), X7
	POR X14, X3
	POR X8, X10
	POR X2, X12
	POR X5, X15
	POR X11, X3
	POR X10, X12
	POR X15, X3
	POR X12, X3
	MOVO X13, X0
	MOVO X9, X1
	MOVO X6, X14
	MOVO X7, X8
	PSUBQ X4, X13
	PSLLQ $27, X13
	PSUBQ X0, X9
	PSLLQ $28, X9
	PSUBQ X1, X6
	PSLLQ $29, X6
	PSUBQ X14, X7
	PSLLQ $30, X7
	MOVO 496(AX), X2
	MOVO 512(AX), X5
	MOVO 528(AX), X11
	MOVO 544(AX), X10
	MOVO X2, X15
	MOVO X5, X12
	MOVO X11, X4
	MOVO X10, X0
	PSUBQ X8, X2
	PSLLQ $31, X2
	PSUBQ X15, X5
	PSLLQ $32, X5
	PSUBQ X12, X11
	PSLLQ $33, X11
	PSUBQ X4, X10
	PSLLQ $34, X10
	MOVO 560(AX), X1
	MOVO 576(AX), X14
	MOVO 592(AX), X8
	MOVO 608(AX), X15
	POR X3, X13
	POR X9, X6
	POR X7, X2
	POR X5, X11
	POR X10, X13
	POR X6, X2
	POR X11, X13
	POR X2, X13
	MOVO X1, X12
	MOVO X14, X4
	MOVO X8, X3
	MOVO X15, X9
	PSUBQ X0, X1
	PSLLQ $35, X1
	PSUBQ X12, X14
	PSLLQ $36, X14
	PSUBQ X4, X8
	PSLLQ $37, X8
	PSUBQ X3, X15
	PSLLQ $38, X15
	MOVO 624(AX), X7
	MOVO 640(AX), X5
	MOVO 656(AX), X10
	MOVO 672(AX), X6
	MOVO X7, X11
	MOVO X5, X2
	MOVO X10, X0
	MOVO X6, X12
	PSUBQ X9, X7
	PSLLQ $39, X7
	PSUBQ X11, X5
	PSLLQ $40, X5
	PSUBQ X2, X10
	PSLLQ $41, X10
	PSUBQ X0, X6
	PSLLQ $42, X6
	MOVO 688(AX), X4
	MOVO 704(AX), X3
	MOVO 720(AX), X9
	MOVO 736(AX), X11
	POR X13, X1
	POR X14, X8
	POR X15, X7
	POR X5, X10
	POR X6, X1
	POR X8, X7
	POR X10, X1
	POR X7, X1
	MOVO X4, X2
	MOVO X3, X0
	MOVO X9, X13
	MOVO X11, X14
	PSUBQ X12, X4
	PSLLQ $43, X4
	PSUBQ X2, X3
	PSLLQ $44, X3
	PSUBQ X0, X9
	PSLLQ $45, X9
	PSUBQ X13, X11
	PSLLQ $46, X11
	MOVO 752(AX), X15
	MOVO 768(AX), X5
	MOVO 784(AX), X6
	MOVO 800(AX), X8
	MOVO X15, X10
	MOVO X5, X7
	MOVO X6, X12
	MOVO X8, X2
	PSUBQ X14, X15
	PSLLQ $47, X15
	PSUBQ X10, X5
	PSLLQ $48, X5
	PSUBQ X7, X6
	PSLLQ $49, X6
	PSUBQ X12, X8
	PSLLQ $50, X8
	MOVO 816(AX), X0
	MOVO 832(AX), X13
	MOVO 848(AX), X14
	MOVO 864(AX), X10
	POR X1, X4
	POR X3, X9
	POR X11, X15
	POR X5, X6
	POR X8, X4
	POR X9, X15
	POR X6, X4
	POR X15, X4
	MOVO X0, X7
	MOVO X13, X12
	MOVO X14, X1
	MOVO X10, X3
	PSUBQ X2, X0
	PSLLQ $51, X0
	PSUBQ X7, X13
	PSLLQ $52, X13
	PSUBQ X12, X14
	PSLLQ $53, X14
	PSUBQ X1, X10
	PSLLQ $54, X10
	MOVO 880(AX), X11
	MOVO 896(AX), X5
	MOVO 912(AX), X8
	MOVO 928(AX), X9
	MOVO X11, X6
	MOVO X5, X15
	MOVO X8, X2
	MOVO X9, X7
	PSUBQ X3, X11
	PSLLQ $55, X11
	PSUBQ X6, X5
	PSLLQ $56, X5
	PSUBQ X15, X8
	PSLLQ $57, X8
	PSUBQ X2, X9
	PSLLQ $58, X9
	MOVO 944(AX), X12
	MOVO 960(AX), X1
	MOVO 976(AX), X3
	MOVO 992(AX), X6
	POR X4, X0
	POR X13, X14
	POR X10, X11
	POR X5, X8
	POR X9, X0
	POR X14, X11
	POR X8, X0
	POR X11, X0
	MOVO X12, X15
	MOVO X1, X2
	MOVO X3, X4
	MOVO X6, X13
	PSUBQ X7, X12
	PSLLQ $59, X12
	PSUBQ X15, X1
	PSLLQ $60, X1
	PSUBQ X2, X3
	PSLLQ $61, X3
	PSUBQ X4, X6
	PSLLQ $62, X6
	MOVO 1008(AX), X10
	MOVO X10, X5
	PSUBQ X13, X10
	PSLLQ $63, X10
	POR X0, X12
	POR X1, X3
	POR X6, X10
	POR X12, X3
	POR X10, X3
	MOVO X3, 0(BX)
	MOVO X5, 0(DX)
	RET

// func dpack64_2(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_2(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $2, X2
	PSUBQ X5, X3
	PSLLQ $4, X3
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	PSUBQ X6, X7
	PSLLQ $6, X7
	PSUBQ X11, X8
	PSLLQ $8, X8
	PSUBQ X12, X9
	PSLLQ $10, X9
	PSUBQ X13, X10
	PSLLQ $12, X10
	MOVO 112(AX), X15
	MOVO 128(AX), X0
	MOVO 144(AX), X4
	MOVO 160(AX), X5
	MOVO X15, X6
	MOVO X0, X11
	MOVO X4, X12
	MOVO X5, X13
	PSUBQ X14, X15
	PSLLQ $14, X15
	PSUBQ X6, X0
	PSLLQ $16, X0
	PSUBQ X11, X4
	PSLLQ $18, X4
	PSUBQ X12, X5
	PSLLQ $20, X5
	MOVO 176(AX), X14
	MOVO 192(AX), X6
	MOVO 208(AX), X11
	MOVO 224(AX), X12
	POR X1, X2
	POR X3, X7
	POR X8, X9
	POR X10, X15
	POR X0, X4
	POR X5, X2
	POR X7, X9
	POR X15, X4
	POR X2, X9
	POR X4, X9
	MOVO X14, X1
	MOVO X6, X3
	MOVO X11, X8
	MOVO X12, X10
	PSUBQ X13, X14
	PSLLQ $22, X14
	PSUBQ X1, X6
	PSLLQ $24, X6
	PSUBQ X3, X11
	PSLLQ $26, X11
	PSUBQ X8, X12
	PSLLQ $28, X12
	MOVO 240(AX), X0
	MOVO 256(AX), X5
	MOVO 272(AX), X7
	MOVO 288(AX), X15
	MOVO X0, X2
	MOVO X5, X4
	MOVO X7, X13
	MOVO X15, X1
	PSUBQ X10, X0
	PSLLQ $30, X0
	PSUBQ X2, X5
	PSLLQ $32, X5
	PSUBQ X4, X7
	PSLLQ $34, X7
	PSUBQ X13, X15
	PSLLQ $36, X15
	MOVO 304(AX), X3
	MOVO 320(AX), X8
	MOVO 336(AX), X10
	MOVO 352(AX), X2
	POR X9, X14
	POR X6, X11
	POR X12, X0
	POR X5, X7
	POR X15, X14
	POR X11, X0
	POR X7, X14
	POR X0, X14
	MOVO X3, X4
	MOVO X8, X13
	MOVO X10, X9
	MOVO X2, X6
	PSUBQ X1, X3
	PSLLQ $38, X3
	PSUBQ X4, X8
	PSLLQ $40, X8
	PSUBQ X13, X10
	PSLLQ $42, X10
	PSUBQ X9, X2
	PSLLQ $44, X2
	MOVO 368(AX), X12
	MOVO 384(AX), X5
	MOVO 400(AX), X15
	MOVO 416(AX), X11
	MOVO X12, X7
	MOVO X5, X0
	MOVO X15, X1
	MOVO X11, X4
	PSUBQ X6, X12
	PSLLQ $46, X12
	PSUBQ X7, X5
	PSLLQ $48, X5
	PSUBQ X0, X15
	PSLLQ $50, X15
	PSUBQ X1, X11
	PSLLQ $52, X11
	MOVO 432(AX), X13
	MOVO 448(AX), X9
	MOVO 464(AX), X6
	MOVO 480(AX), X7
	POR X14, X3
	POR X8, X10
	POR X2, X12
	POR X5, X15
	POR X11, X3
	POR X10, X12
	POR X15, X3
	POR X12, X3
	MOVO X13, X0
	MOVO X9, X1
	MOVO X6, X14
	MOVO X7, X8
	PSUBQ X4, X13
	PSLLQ $54, X13
	PSUBQ X0, X9
	PSLLQ $56, X9
	PSUBQ X1, X6
	PSLLQ $58, X6
	PSUBQ X14, X7
	PSLLQ $60, X7
	MOVO 496(AX), X2
	MOVO 512(AX), X5
	MOVO 528(AX), X11
	MOVO 544(AX), X10
	MOVO X2, X15
	MOVO X5, X12
	MOVO X11, X4
	MOVO X10, X0
	PSUBQ X8, X2
	PSLLQ $62, X2
	POR X3, X13
	POR X9, X6
	POR X7, X2
	POR X13, X6
	POR X2, X6
	MOVO X6, 0(BX)
	PSUBQ X15, X5
	PSUBQ X12, X11
	PSLLQ $2, X11
	PSUBQ X4, X10
	PSLLQ $4, X10
	MOVO 560(AX), X1
	MOVO 576(AX), X14
	MOVO 592(AX), X8
	MOVO 608(AX), X3
	MOVO X1, X9
	MOVO X14, X7
	MOVO X8, X13
	MOVO X3, X2
	PSUBQ X0, X1
	PSLLQ $6, X1
	PSUBQ X9, X14
	PSLLQ $8, X14
	PSUBQ X7, X8
	PSLLQ $10, X8
	PSUBQ X13, X3
	PSLLQ $12, X3
	MOVO 624(AX), X6
	MOVO 640(AX), X15
	MOVO 656(AX), X12
	MOVO 672(AX), X4
	MOVO X6, X0
	MOVO X15, X9
	MOVO X12, X7
	MOVO X4, X13
	PSUBQ X2, X6
	PSLLQ $14, X6
	PSUBQ X0, X15
	PSLLQ $16, X15
	PSUBQ X9, X12
	PSLLQ $18, X12
	PSUBQ X7, X4
	PSLLQ $20, X4
	MOVO 688(AX), X2
	MOVO 704(AX), X0
	MOVO 720(AX), X9
	MOVO 736(AX), X7
	POR X5, X11
	POR X10, X1
	POR X14, X8
	POR X3, X6
	POR X15, X12
	POR X4, X11
	POR X1, X8
	POR X6, X12
	POR X11, X8
	POR X12, X8
	MOVO X2, X5
	MOVO X0, X10
	MOVO X9, X14
	MOVO X7, X3
	PSUBQ X13, X2
	PSLLQ $22, X2
	PSUBQ X5, X0
	PSLLQ $24, X0
	PSUBQ X10, X9
	PSLLQ $26, X9
	PSUBQ X14, X7
	PSLLQ $28, X7
	MOVO 752(AX), X15
	MOVO 768(AX), X4
	MOVO 784(AX), X1
	MOVO 800(AX), X6
	MOVO X15, X11
	MOVO X4, X12
	MOVO X1, X13
	MOVO X6, X5
	PSUBQ X3, X15
	PSLLQ $30, X15
	PSUBQ X11, X4
	PSLLQ $32, X4
	PSUBQ X12, X1
	PSLLQ $34, X1
	PSUBQ X13, X6
	PSLLQ $36, X6
	MOVO 816(AX), X10
	MOVO 832(AX), X14
	MOVO 848(AX), X3
	MOVO 864(AX), X11
	POR X8, X2
	POR X0, X9
	POR X7, X15
	POR X4, X1
	POR X6, X2
	POR X9, X15
	POR X1, X2
	POR X15, X2
	MOVO X10, X12
	MOVO X14, X13
	MOVO X3, X8
	MOVO X11, X0
	PSUBQ X5, X10
	PSLLQ $38, X10
	PSUBQ X12, X14
	PSLLQ $40, X14
	PSUBQ X13, X3
	PSLLQ $42, X3
	PSUBQ X8, X11
	PSLLQ $44, X11
	MOVO 880(AX), X7
	MOVO 896(AX), X4
	MOVO 912(AX), X6
	MOVO 928(AX), X9
	MOVO X7, X1
	MOVO X4, X15
	MOVO X6, X5
	MOVO X9, X12
	PSUBQ X0, X7
	PSLLQ $46, X7
	PSUBQ X1, X4
	PSLLQ $48, X4
	PSUBQ X15, X6
	PSLLQ $50, X6
	PSUBQ X5, X9
	PSLLQ $52, X9
	MOVO 944(AX), X13
	MOVO 960(AX), X8
	MOVO 976(AX), X0
	MOVO 992(AX), X1
	POR X2, X10
	POR X14, X3
	POR X11, X7
	POR X4, X6
	POR X9, X10
	POR X3, X7
	POR X6, X10
	POR X7, X10
	MOVO X13, X15
	MOVO X8, X5
	MOVO X0, X2
	MOVO X1, X14
	PSUBQ X12, X13
	PSLLQ $54, X13
	PSUBQ X15, X8
	PSLLQ $56, X8
	PSUBQ X5, X0
	PSLLQ $58, X0
	PSUBQ X2, X1
	PSLLQ $60, X1
	MOVO 1008(AX), X11
	MOVO X11, X4
	PSUBQ X14, X11
	PSLLQ $62, X11
	POR X10, X13
	POR X8, X0
	POR X1, X11
	POR X13, X0
	POR X11, X0
	MOVO X0, 16(BX)
	MOVO X4, 0(DX)
	RET

// func dpack64_3(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_3(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $3, X2
	PSUBQ X5, X3
	PSLLQ $6, X3
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	PSUBQ X6, X7
	PSLLQ $9, X7
	PSUBQ X11, X8
	PSLLQ $12, X8
	PSUBQ X12, X9
	PSLLQ $15, X9
	PSUBQ X13, X10
	PSLLQ $18, X10
	MOVO 112(AX), X15
	MOVO 128(AX), X0
	MOVO 144(AX), X4
	MOVO 160(AX), X5
	MOVO X15, X6
	MOVO X0, X11
	MOVO X4, X12
	MOVO X5, X13
	PSUBQ X14, X15
	PSLLQ $21, X15
	PSUBQ X6, X0
	PSLLQ $24, X0
	PSUBQ X11, X4
	PSLLQ $27, X4
	PSUBQ X12, X5
	PSLLQ $30, X5
	MOVO 176(AX), X14
	MOVO 192(AX), X6
	MOVO 208(AX), X11
	MOVO 224(AX), X12
	POR X1, X2
	POR X3, X7
	POR X8, X9
	POR X10, X15
	POR X0, X4
	POR X5, X2
	POR X7, X9
	POR X15, X4
	POR X2, X9
	POR X4, X9
	MOVO X14, X1
	MOVO X6, X3
	MOVO X11, X8
	MOVO X12, X10
	PSUBQ X13, X14
	PSLLQ $33, X14
	PSUBQ X1, X6
	PSLLQ $36, X6
	PSUBQ X3, X11
	PSLLQ $39, X11
	PSUBQ X8, X12
	PSLLQ $42, X12
	MOVO 240(AX), X0
	MOVO 256(AX), X5
	MOVO 272(AX), X7
	MOVO 288(AX), X15
	MOVO X0, X2
	MOVO X5, X4
	MOVO X7, X13
	MOVO X15, X1
	PSUBQ X10, X0
	PSLLQ $45, X0
	PSUBQ X2, X5
	PSLLQ $48, X5
	PSUBQ X4, X7
	PSLLQ $51, X7
	PSUBQ X13, X15
	PSLLQ $54, X15
	MOVO 304(AX), X3
	MOVO 320(AX), X8
	MOVO 336(AX), X10
	MOVO 352(AX), X2
	POR X9, X14
	POR X6, X11
	POR X12, X0
	POR X5, X7
	POR X15, X14
	POR X11, X0
	POR X7, X14
	POR X0, X14
	MOVO X3, X4
	MOVO X8, X13
	MOVO X10, X9
	MOVO X2, X6
	PSUBQ X1, X3
	PSLLQ $57, X3
	PSUBQ X4, X8
	PSLLQ $60, X8
	PSUBQ X13, X10
	MOVO X10, X12
	PSLLQ $63, X10
	POR X14, X3
	POR X8, X10
	POR X3, X10
	MOVO X10, 0(BX)
	PSRLQ $1, X12
	PSUBQ X9, X2
	PSLLQ $2, X2
	MOVO 368(AX), X5
	MOVO 384(AX), X15
	MOVO 400(AX), X11
	MOVO 416(AX), X7
	MOVO X5, X0
	MOVO X15, X1
	MOVO X11, X4
	MOVO X7, X13
	PSUBQ X6, X5
	PSLLQ $5, X5
	PSUBQ X0, X15
	PSLLQ $8, X15
	PSUBQ X1, X11
	PSLLQ $11, X11
	PSUBQ X4, X7
	PSLLQ $14, X7
	MOVO 432(AX), X14
	MOVO 448(AX), X8
	MOVO 464(AX), X3
	MOVO 480(AX), X10
	MOVO X14, X9
	MOVO X8, X6
	MOVO X3, X0
	MOVO X10, X1
	PSUBQ X13, X14
	PSLLQ $17, X14
	PSUBQ X9, X8
	PSLLQ $20, X8
	PSUBQ X6, X3
	PSLLQ $23, X3
	PSUBQ X0, X10
	PSLLQ $26, X10
	MOVO 496(AX), X4
	MOVO 512(AX), X13
	MOVO 528(AX), X9
	MOVO 544(AX), X6
	POR X12, X2
	POR X5, X15
	POR X11, X7
	POR X14, X8
	POR X3, X10
	POR X2, X15
	POR X7, X8
	POR X10, X15
	POR X8, X15
	MOVO X4, X0
	MOVO X13, X12
	MOVO X9, X5
	MOVO X6, X11
	PSUBQ X1, X4
	PSLLQ $29, X4
	PSUBQ X0, X13
	PSLLQ $32, X13
	PSUBQ X12, X9
	PSLLQ $35, X9
	PSUBQ X5, X6
	PSLLQ $38, X6
	MOVO 560(AX), X14
	MOVO 576(AX), X3
	MOVO 592(AX), X2
	MOVO 608(AX), X7
	MOVO X14, X10
	MOVO X3, X8
	MOVO X2, X1
	MOVO X7, X0
	PSUBQ X11, X14
	PSLLQ $41, X14
	PSUBQ X10, X3
	PSLLQ $44, X3
	PSUBQ X8, X2
	PSLLQ $47, X2
	PSUBQ X1, X7
	PSLLQ $50, X7
	MOVO 624(AX), X12
	MOVO 640(AX), X5
	MOVO 656(AX), X11
	MOVO 672(AX), X10
	POR X15, X4
	POR X13, X9
	POR X6, X14
	POR X3, X2
	POR X7, X4
	POR X9, X14
	POR X2, X4
	POR X14, X4
	MOVO X12, X8
	MOVO X5, X1
	MOVO X11, X15
	MOVO X10, X13
	PSUBQ X0, X12
	PSLLQ $53, X12
	PSUBQ X8, X5
	PSLLQ $56, X5
	PSUBQ X1, X11
	PSLLQ $59, X11
	PSUBQ X15, X10
	MOVO X10, X6
	PSLLQ $62, X10
	POR X4, X12
	POR X5, X11
	POR X10, X12
	POR X11, X12
	MOVO X12, 16(BX)
	PSRLQ $2, X6
	MOVO 688(AX), X3
	MOVO 704(AX), X7
	MOVO 720(AX), X9
	MOVO 736(AX), X2
	MOVO X3, X14
	MOVO X7, X0
	MOVO X9, X8
	MOVO X2, X1
	PSUBQ X13, X3
	PSLLQ $1, X3
	PSUBQ X14, X7
	PSLLQ $4, X7
	PSUBQ X0, X9
	PSLLQ $7, X9
	PSUBQ X8, X2
	PSLLQ $10, X2
	MOVO 752(AX), X15
	MOVO 768(AX), X4
	MOVO 784(AX), X5
	MOVO 800(AX), X10
	MOVO X15, X11
	MOVO X4, X12
	MOVO X5, X13
	MOVO X10, X14
	PSUBQ X1, X15
	PSLLQ $13, X15
	PSUBQ X11, X4
	PSLLQ $16, X4
	PSUBQ X12, X5
	PSLLQ $19, X5
	PSUBQ X13, X10
	PSLLQ $22, X10
	MOVO 816(AX), X0
	MOVO 832(AX), X8
	MOVO 848(AX), X1
	MOVO 864(AX), X11
	POR X6, X3
	POR X7, X9
	POR X2, X15
	POR X4, X5
	POR X10, X3
	POR X9, X15
	POR X5, X3
	POR X15, X3
	MOVO X0, X12
	MOVO X8, X13
	MOVO X1, X6
	MOVO X11, X7
	PSUBQ X14, X0
	PSLLQ $25, X0
	PSUBQ X12, X8
	PSLLQ $28, X8
	PSUBQ X13, X1
	PSLLQ $31, X1
	PSUBQ X6, X11
	PSLLQ $34, X11
	MOVO 880(AX), X2
	MOVO 896(AX), X4
	MOVO 912(AX), X10
	MOVO 928(AX), X9
	MOVO X2, X5
	MOVO X4, X15
	MOVO X10, X14
	MOVO X9, X12
	PSUBQ X7, X2
	PSLLQ $37, X2
	PSUBQ X5, X4
	PSLLQ $40, X4
	PSUBQ X15, X10
	PSLLQ $43, X10
	PSUBQ X14, X9
	PSLLQ $46, X9
	MOVO 944(AX), X13
	MOVO 960(AX), X6
	MOVO 976(AX), X7
	MOVO 992(AX), X5
	POR X3, X0
	POR X8, X1
	POR X11, X2
	POR X4, X10
	POR X9, X0
	POR X1, X2
	POR X10, X0
	POR X2, X0
	MOVO X13, X15
	MOVO X6, X14
	MOVO X7, X3
	MOVO X5, X8
	PSUBQ X12, X13
	PSLLQ $49, X13
	PSUBQ X15, X6
	PSLLQ $52, X6
	PSUBQ X14, X7
	PSLLQ $55, X7
	PSUBQ X3, X5
	PSLLQ $58, X5
	MOVO 1008(AX), X11
	MOVO X11, X4
	PSUBQ X8, X11
	PSLLQ $61, X11
	POR X0, X13
	POR X6, X7
	POR X5, X11
	POR X13, X7
	POR X11, X7
	MOVO X7, 32(BX)
	MOVO X4, 0(DX)
	RET

// func dpack64_4(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_4(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $4, X2
	PSUBQ X5, X3
	PSLLQ $8, X3
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	PSUBQ X6, X7
	PSLLQ $12, X7
	PSUBQ X11, X8
	PSLLQ $16, X8
	PSUBQ X12, X9
	PSLLQ $20, X9
	PSUBQ X13, X10
	PSLLQ $24, X10
	MOVO 112(AX), X15
	MOVO 128(AX), X0
	MOVO 144(AX), X4
	MOVO 160(AX), X5
	MOVO X15, X6
	MOVO X0, X11
	MOVO X4, X12
	MOVO X5, X13
	PSUBQ X14, X15
	PSLLQ $28, X15
	PSUBQ X6, X0
	PSLLQ $32, X0
	PSUBQ X11, X4
	PSLLQ $36, X4
	PSUBQ X12, X5
	PSLLQ $40, X5
	MOVO 176(AX), X14
	MOVO 192(AX), X6
	MOVO 208(AX), X11
	MOVO 224(AX), X12
	POR X1, X2
	POR X3, X7
	POR X8, X9
	POR X10, X15
	POR X0, X4
	POR X5, X2
	POR X7, X9
	POR X15, X4
	POR X2, X9
	POR X4, X9
	MOVO X14, X1
	MOVO X6, X3
	MOVO X11, X8
	MOVO X12, X10
	PSUBQ X13, X14
	PSLLQ $44, X14
	PSUBQ X1, X6
	PSLLQ $48, X6
	PSUBQ X3, X11
	PSLLQ $52, X11
	PSUBQ X8, X12
	PSLLQ $56, X12
	MOVO 240(AX), X0
	MOVO 256(AX), X5
	MOVO 272(AX), X7
	MOVO 288(AX), X15
	MOVO X0, X2
	MOVO X5, X4
	MOVO X7, X13
	MOVO X15, X1
	PSUBQ X10, X0
	PSLLQ $60, X0
	POR X9, X14
	POR X6, X11
	POR X12, X0
	POR X14, X11
	POR X0, X11
	MOVO X11, 0(BX)
	PSUBQ X2, X5
	PSUBQ X4, X7
	PSLLQ $4, X7
	PSUBQ X13, X15
	PSLLQ $8, X15
	MOVO 304(AX), X3
	MOVO 320(AX), X8
	MOVO 336(AX), X10
	MOVO 352(AX), X9
	MOVO X3, X6
	MOVO X8, X12
	MOVO X10, X14
	MOVO X9, X0
	PSUBQ X1, X3
	PSLLQ $12, X3
	PSUBQ X6, X8
	PSLLQ $16, X8
	PSUBQ X12, X10
	PSLLQ $20, X10
	PSUBQ X14, X9
	PSLLQ $24, X9
	MOVO 368(AX), X11
	MOVO 384(AX), X2
	MOVO 400(AX), X4
	MOVO 416(AX), X13
	MOVO X11, X1
	MOVO X2, X6
	MOVO X4, X12
	MOVO X13, X14
	PSUBQ X0, X11
	PSLLQ $28, X11
	PSUBQ X1, X2
	PSLLQ $32, X2
	PSUBQ X6, X4
	PSLLQ $36, X4
	PSUBQ X12, X13
	PSLLQ $40, X13
	MOVO 432(AX), X0
	MOVO 448(AX), X1
	MOVO 464(AX), X6
	MOVO 480(AX), X12
	POR X5, X7
	POR X15, X3
	POR X8, X10
	POR X9, X11
	POR X2, X4
	POR X13, X7
	POR X3, X10
	POR X11, X4
	POR X7, X10
	POR X4, X10
	MOVO X0, X5
	MOVO X1, X15
	MOVO X6, X8
	MOVO X12, X9
	PSUBQ X14, X0
	PSLLQ $44, X0
	PSUBQ X5, X1
	PSLLQ $48, X1
	PSUBQ X15, X6
	PSLLQ $52, X6
	PSUBQ X8, X12
	PSLLQ $56, X12
	MOVO 496(AX), X2
	MOVO 512(AX), X13
	MOVO 528(AX), X3
	MOVO 544(AX), X11
	MOVO X2, X7
	MOVO X13, X4
	MOVO X3, X14
	MOVO X11, X5
	PSUBQ X9, X2
	PSLLQ $60, X2
	POR X10, X0
	POR X1, X6
	POR X12, X2
	POR X0, X6
	POR X2, X6
	MOVO X6, 16(BX)
	PSUBQ X7, X13
	PSUBQ X4, X3
	PSLLQ $4, X3
	PSUBQ X14, X11
	PSLLQ $8, X11
	MOVO 560(AX), X15
	MOVO 576(AX), X8
	MOVO 592(AX), X9
	MOVO 608(AX), X10
	MOVO X15, X1
	MOVO X8, X12
	MOVO X9, X0
	MOVO X10, X2
	PSUBQ X5, X15
	PSLLQ $12, X15
	PSUBQ X1, X8
	PSLLQ $16, X8
	PSUBQ X12, X9
	PSLLQ $20, X9
	PSUBQ X0, X10
	PSLLQ $24, X10
	MOVO 624(AX), X6
	MOVO 640(AX), X7
	MOVO 656(AX), X4
	MOVO 672(AX), X14
	MOVO X6, X5
	MOVO X7, X1
	MOVO X4, X12
	MOVO X14, X0
	PSUBQ X2, X6
	PSLLQ $28, X6
	PSUBQ X5, X7
	PSLLQ $32, X7
	PSUBQ X1, X4
	PSLLQ $36, X4
	PSUBQ X12, X14
	PSLLQ $40, X14
	MOVO 688(AX), X2
	MOVO 704(AX), X5
	MOVO 720(AX), X1
	MOVO 736(AX), X12
	POR X13, X3
	POR X11, X15
	POR X8, X9
	POR X10, X6
	POR X7, X4
	POR X14, X3
	POR X15, X9
	POR X6, X4
	POR X3, X9
	POR X4, X9
	MOVO X2, X13
	MOVO X5, X11
	MOVO X1, X8
	MOVO X12, X10
	PSUBQ X0, X2
	PSLLQ $44, X2
	PSUBQ X13, X5
	PSLLQ $48, X5
	PSUBQ X11, X1
	PSLLQ $52, X1
	PSUBQ X8, X12
	PSLLQ $56, X12
	MOVO 752(AX), X7
	MOVO 768(AX), X14
	MOVO 784(AX), X15
	MOVO 800(AX), X6
	MOVO X7, X3
	MOVO X14, X4
	MOVO X15, X0
	MOVO X6, X13
	PSUBQ X10, X7
	PSLLQ $60, X7
	POR X9, X2
	POR X5, X1
	POR X12, X7
	POR X2, X1
	POR X7, X1
	MOVO X1, 32(BX)
	PSUBQ X3, X14
	PSUBQ X4, X15
	PSLLQ $4, X15
	PSUBQ X0, X6
	PSLLQ $8, X6
	MOVO 816(AX), X11
	MOVO 832(AX), X8
	MOVO 848(AX), X10
	MOVO 864(AX), X9
	MOVO X11, X5
	MOVO X8, X12
	MOVO X10, X2
	MOVO X9, X7
	PSUBQ X13, X11
	PSLLQ $12, X11
	PSUBQ X5, X8
	PSLLQ $16, X8
	PSUBQ X12, X10
	PSLLQ $20, X10
	PSUBQ X2, X9
	PSLLQ $24, X9
	MOVO 880(AX), X1
	MOVO 896(AX), X3
	MOVO 912(AX), X4
	MOVO 928(AX), X0
	MOVO X1, X13
	MOVO X3, X5
	MOVO X4, X12
	MOVO X0, X2
	PSUBQ X7, X1
	PSLLQ $28, X1
	PSUBQ X13, X3
	PSLLQ $32, X3
	PSUBQ X5, X4
	PSLLQ $36, X4
	PSUBQ X12, X0
	PSLLQ $40, X0
	MOVO 944(AX), X7
	MOVO 960(AX), X13
	MOVO 976(AX), X5
	MOVO 992(AX), X12
	POR X14, X15
	POR X6, X11
	POR X8, X10
	POR X9, X1
	POR X3, X4
	POR X0, X15
	POR X11, X10
	POR X1, X4
	POR X15, X10
	POR X4, X10
	MOVO X7, X14
	MOVO X13, X6
	MOVO X5, X8
	MOVO X12, X9
	PSUBQ X2, X7
	PSLLQ $44, X7
	PSUBQ X14, X13
	PSLLQ $48, X13
	PSUBQ X6, X5
	PSLLQ $52, X5
	PSUBQ X8, X12
	PSLLQ $56, X12
	MOVO 1008(AX), X3
	MOVO X3, X0
	PSUBQ X9, X3
	PSLLQ $60, X3
	POR X10, X7
	POR X13, X5
	POR X12, X3
	POR X7, X5
	POR X3, X5
	MOVO X5, 48(BX)
	MOVO X0, 0(DX)
	RET

// func dpack64_5(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_5(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $5, X2
	PSUBQ X5, X3
	PSLLQ $10, X3
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	PSUBQ X6, X7
	PSLLQ $15, X7
	PSUBQ X11, X8
	PSLLQ $20, X8
	PSUBQ X12, X9
	PSLLQ $25, X9
	PSUBQ X13, X10
	PSLLQ $30, X10
	MOVO 112(AX), X15
	MOVO 128(AX), X0
	MOVO 144(AX), X4
	MOVO 160(AX), X5
	MOVO X15, X6
	MOVO X0, X11
	MOVO X4, X12
	MOVO X5, X13
	PSUBQ X14, X15
	PSLLQ $35, X15
	PSUBQ X6, X0
	PSLLQ $40, X0
	PSUBQ X11, X4
	PSLLQ $45, X4
	PSUBQ X12, X5
	PSLLQ $50, X5
	MOVO 176(AX), X14
	MOVO 192(AX), X6
	MOVO 208(AX), X11
	MOVO 224(AX), X12
	POR X1, X2
	POR X3, X7
	POR X8, X9
	POR X10, X15
	POR X0, X4
	POR X5, X2
	POR X7, X9
	POR X15, X4
	POR X2, X9
	POR X4, X9
	MOVO X14, X1
	MOVO X6, X3
	MOVO X11, X8
	MOVO X12, X10
	PSUBQ X13, X14
	PSLLQ $55, X14
	PSUBQ X1, X6
	MOVO X6, X0
	PSLLQ $60, X6
	POR X9, X14
	POR X6, X14
	MOVO X14, 0(BX)
	PSRLQ $4, X0
	PSUBQ X3, X11
	PSLLQ $1, X11
	PSUBQ X8, X12
	PSLLQ $6, X12
	MOVO 240(AX), X5
	MOVO 256(AX), X7
	MOVO 272(AX), X15
	MOVO 288(AX), X2
	MOVO X5, X4
	MOVO X7, X13
	MOVO X15, X1
	MOVO X2, X9
	PSUBQ X10, X5
	PSLLQ $11, X5
	PSUBQ X4, X7
	PSLLQ $16, X7
	PSUBQ X13, X15
	PSLLQ $21, X15
	PSUBQ X1, X2
	PSLLQ $26, X2
	MOVO 304(AX), X6
	MOVO 320(AX), X14
	MOVO 336(AX), X3
	MOVO 352(AX), X8
	MOVO X6, X10
	MOVO X14, X4
	MOVO X3, X13
	MOVO X8, X1
	PSUBQ X9, X6
	PSLLQ $31, X6
	PSUBQ X10, X14
	PSLLQ $36, X14
	PSUBQ X4, X3
	PSLLQ $41, X3
	PSUBQ X13, X8
	PSLLQ $46, X8
	MOVO 368(AX), X9
	MOVO 384(AX), X10
	MOVO 400(AX), X4
	MOVO 416(AX), X13
	POR X0, X11
	POR X12, X5
	POR X7, X15
	POR X2, X6
	POR X14, X3
	POR X8, X11
	POR X5, X15
	POR X6, X3
	POR X11, X15
	POR X3, X15
	MOVO X9, X0
	MOVO X10, X12
	MOVO X4, X7
	MOVO X13, X2
	PSUBQ X1, X9
	PSLLQ $51, X9
	PSUBQ X0, X10
	PSLLQ $56, X10
	PSUBQ X12, X4
	MOVO X4, X14
	PSLLQ $61, X4
	POR X15, X9
	POR X10, X4
	POR X9, X4
	MOVO X4, 16(BX)
	PSRLQ $3, X14
	PSUBQ X7, X13
	PSLLQ $2, X13
	MOVO 432(AX), X8
	MOVO 448(AX), X5
	MOVO 464(AX), X6
	MOVO 480(AX), X11
	MOVO X8, X3
	MOVO X5, X1
	MOVO X6, X0
	MOVO X11, X12
	PSUBQ X2, X8
	PSLLQ $7, X8
	PSUBQ X3, X5
	PSLLQ $12, X5
	PSUBQ X1, X6
	PSLLQ $17, X6
	PSUBQ X0, X11
	PSLLQ $22, X11
	MOVO 496(AX), X15
	MOVO 512(AX), X10
	MOVO 528(AX), X9
	MOVO 544(AX), X4
	MOVO X15, X7
	MOVO X10, X2
	MOVO X9, X3
	MOVO X4, X1
	PSUBQ X12, X15
	PSLLQ $27, X15
	PSUBQ X7, X10
	PSLLQ $32, X10
	PSUBQ X2, X9
	PSLLQ $37, X9
	PSUBQ X3, X4
	PSLLQ $42, X4
	MOVO 560(AX), X0
	MOVO 576(AX), X12
	MOVO 592(AX), X7
	MOVO 608(AX), X2
	POR X14, X13
	POR X8, X5
	POR X6, X11
	POR X15, X10
	POR X9, X4
	POR X13, X5
	POR X11, X10
	POR X4, X5
	POR X10, X5
	MOVO X0, X3
	MOVO X12, X14
	MOVO X7, X8
	MOVO X2, X6
	PSUBQ X1, X0
	PSLLQ $47, X0
	PSUBQ X3, X12
	PSLLQ $52, X12
	PSUBQ X14, X7
	PSLLQ $57, X7
	PSUBQ X8, X2
	MOVO X2, X15
	PSLLQ $62, X2
	POR X5, X0
	POR X12, X7
	POR X2, X0
	POR X7, X0
	MOVO X0, 32(BX)
	PSRLQ $2, X15
	MOVO 624(AX), X9
	MOVO 640(AX), X13
	MOVO 656(AX), X11
	MOVO 672(AX), X4
	MOVO X9, X10
	MOVO X13, X1
	MOVO X11, X3
	MOVO X4, X14
	PSUBQ X6, X9
	PSLLQ $3, X9
	PSUBQ X10, X13
	PSLLQ $8, X13
	PSUBQ X1, X11
	PSLLQ $13, X11
	PSUBQ X3, X4
	PSLLQ $18, X4
	MOVO 688(AX), X8
	MOVO 704(AX), X5
	MOVO 720(AX), X12
	MOVO 736(AX), X2
	MOVO X8, X7
	MOVO X5, X0
	MOVO X12, X6
	MOVO X2, X10
	PSUBQ X14, X8
	PSLLQ $23, X8
	PSUBQ X7, X5
	PSLLQ $28, X5
	PSUBQ X0, X12
	PSLLQ $33, X12
	PSUBQ X6, X2
	PSLLQ $38, X2
	MOVO 752(AX), X1
	MOVO 768(AX), X3
	MOVO 784(AX), X14
	MOVO 800(AX), X7
	POR X15, X9
	POR X13, X11
	POR X4, X8
	POR X5, X12
	POR X2, X9
	POR X11, X8
	POR X12, X9
	POR X8, X9
	MOVO X1, X0
	MOVO X3, X6
	MOVO X14, X15
	MOVO X7, X13
	PSUBQ X10, X1
	PSLLQ $43, X1
	PSUBQ X0, X3
	PSLLQ $48, X3
	PSUBQ X6, X14
	PSLLQ $53, X14
	PSUBQ X15, X7
	PSLLQ $58, X7
	MOVO 816(AX), X4
	MOVO 832(AX), X5
	MOVO 848(AX), X2
	MOVO 864(AX), X11
	MOVO X4, X12
	MOVO X5, X8
	MOVO X2, X10
	MOVO X11, X0
	PSUBQ X13, X4
	MOVO X4, X6
	PSLLQ $63, X4
	POR X9, X1
	POR X3, X14
	POR X7, X4
	POR X1, X14
	POR X4, X14
	MOVO X14, 48(BX)
	PSRLQ $1, X6
	PSUBQ X12, X5
	PSLLQ $4, X5
	PSUBQ X8, X2
	PSLLQ $9, X2
	PSUBQ X10, X11
	PSLLQ $14, X11
	MOVO 880(AX), X15
	MOVO 896(AX), X13
	MOVO 912(AX), X9
	MOVO 928(AX), X3
	MOVO X15, X7
	MOVO X13, X1
	MOVO X9, X4
	MOVO X3, X14
	PSUBQ X0, X15
	PSLLQ $19, X15
	PSUBQ X7, X13
	PSLLQ $24, X13
	PSUBQ X1, X9
	PSLLQ $29, X9
	PSUBQ X4, X3
	PSLLQ $34, X3
	MOVO 944(AX), X12
	MOVO 960(AX), X8
	MOVO 976(AX), X10
	MOVO 992(AX), X0
	POR X6, X5
	POR X2, X11
	POR X15, X13
	POR X9, X3
	POR X5, X11
	POR X13, X3
	POR X11, X3
	MOVO X12, X7
	MOVO X8, X1
	MOVO X10, X4
	MOVO X0, X6
	PSUBQ X14, X12
	PSLLQ $39, X12
	PSUBQ X7, X8
	PSLLQ $44, X8
	PSUBQ X1, X10
	PSLLQ $49, X10
	PSUBQ X4, X0
	PSLLQ $54, X0
	MOVO 1008(AX), X2
	MOVO X2, X15
	PSUBQ X6, X2
	PSLLQ $59, X2
	POR X3, X12
	POR X8, X10
	POR X0, X2
	POR X12, X10
	POR X2, X10
	MOVO X10, 64(BX)
	MOVO X15, 0(DX)
	RET

// func dpack64_6(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_6(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $6, X2
	PSUBQ X5, X3
	PSLLQ $12, X3
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	PSUBQ X6, X7
	PSLLQ $18, X7
	PSUBQ X11, X8
	PSLLQ $24, X8
	PSUBQ X12, X9
	PSLLQ $30, X9
	PSUBQ X13, X10
	PSLLQ $36, X10
	MOVO 112(AX), X15
	MOVO 128(AX), X0
	MOVO 144(AX), X4
	MOVO 160(AX), X5
	MOVO X15, X6
	MOVO X0, X11
	MOVO X4, X12
	MOVO X5, X13
	PSUBQ X14, X15
	PSLLQ $42, X15
	PSUBQ X6, X0
	PSLLQ $48, X0
	PSUBQ X11, X4
	PSLLQ $54, X4
	PSUBQ X12, X5
	MOVO X5, X14
	PSLLQ $60, X5
	POR X1, X2
	POR X3, X7
	POR X8, X9
	POR X10, X15
	POR X0, X4
	POR X5, X2
	POR X7, X9
	POR X15, X4
	POR X2, X9
	POR X4, X9
	MOVO X9, 0(BX)
	PSRLQ $4, X14
	MOVO 176(AX), X6
	MOVO 192(AX), X11
	MOVO 208(AX), X12
	MOVO 224(AX), X1
	MOVO X6, X3
	MOVO X11, X8
	MOVO X12, X10
	MOVO X1, X0
	PSUBQ X13, X6
	PSLLQ $2, X6
	PSUBQ X3, X11
	PSLLQ $8, X11
	PSUBQ X8, X12
	PSLLQ $14, X12
	PSUBQ X10, X1
	PSLLQ $20, X1
	MOVO 240(AX), X5
	MOVO 256(AX), X7
	MOVO 272(AX), X15
	MOVO 288(AX), X2
	MOVO X5, X4
	MOVO X7, X9
	MOVO X15, X13
	MOVO X2, X3
	PSUBQ X0, X5
	PSLLQ $26, X5
	PSUBQ X4, X7
	PSLLQ $32, X7
	PSUBQ X9, X15
	PSLLQ $38, X15
	PSUBQ X13, X2
	PSLLQ $44, X2
	MOVO 304(AX), X8
	MOVO 320(AX), X10
	MOVO 336(AX), X0
	MOVO 352(AX), X4
	POR X14, X6
	POR X11, X12
	POR X1, X5
	POR X7, X15
	POR X2, X6
	POR X12, X5
	POR X15, X6
	POR X5, X6
	MOVO X8, X9
	MOVO X10, X13
	MOVO X0, X14
	MOVO X4, X11
	PSUBQ X3, X8
	PSLLQ $50, X8
	PSUBQ X9, X10
	PSLLQ $56, X10
	PSUBQ X13, X0
	MOVO X0, X1
	PSLLQ $62, X0
	POR X6, X8
	POR X10, X0
	POR X8, X0
	MOVO X0, 16(BX)
	PSRLQ $2, X1
	PSUBQ X14, X4
	PSLLQ $4, X4
	MOVO 368(AX), X7
	MOVO 384(AX), X2
	MOVO 400(AX), X12
	MOVO 416(AX), X15
	MOVO X7, X5
	MOVO X2, X3
	MOVO X12, X9
	MOVO X15, X13
	PSUBQ X11, X7
	PSLLQ $10, X7
	PSUBQ X5, X2
	PSLLQ $16, X2
	PSUBQ X3, X12
	PSLLQ $22, X12
	PSUBQ X9, X15
	PSLLQ $28, X15
	MOVO 432(AX), X6
	MOVO 448(AX), X10
	MOVO 464(AX), X8
	MOVO 480(AX), X0
	MOVO X6, X14
	MOVO X10, X11
	MOVO X8, X5
	MOVO X0, X3
	PSUBQ X13, X6
	PSLLQ $34, X6
	PSUBQ X14, X10
	PSLLQ $40, X10
	PSUBQ X11, X8
	PSLLQ $46, X8
	PSUBQ X5, X0
	PSLLQ $52, X0
	MOVO 496(AX), X9
	MOVO 512(AX), X13
	MOVO 528(AX), X14
	MOVO 544(AX), X11
	POR X1, X4
	POR X7, X2
	POR X12, X15
	POR X6, X10
	POR X8, X0
	POR X4, X2
	POR X15, X10
	POR X0, X2
	POR X10, X2
	MOVO X9, X5
	MOVO X13, X1
	MOVO X14, X7
	MOVO X11, X12
	PSUBQ X3, X9
	PSLLQ $58, X9
	POR X2, X9
	MOVO X9, 32(BX)
	PSUBQ X5, X13
	PSUBQ X1, X14
	PSLLQ $6, X14
	PSUBQ X7, X11
	PSLLQ $12, X11
	MOVO 560(AX), X6
	MOVO 576(AX), X8
	MOVO 592(AX), X4
	MOVO 608(AX), X15
	MOVO X6, X0
	MOVO X8, X10
	MOVO X4, X3
	MOVO X15, X2
	PSUBQ X12, X6
	PSLLQ $18, X6
	PSUBQ X0, X8
	PSLLQ $24, X8
	PSUBQ X10, X4
	PSLLQ $30, X4
	PSUBQ X3, X15
	PSLLQ $36, X15
	MOVO 624(AX), X9
	MOVO 640(AX), X5
	MOVO 656(AX), X1
	MOVO 672(AX), X7
	MOVO X9, X12
	MOVO X5, X0
	MOVO X1, X10
	MOVO X7, X3
	PSUBQ X2, X9
	PSLLQ $42, X9
	PSUBQ X12, X5
	PSLLQ $48, X5
	PSUBQ X0, X1
	PSLLQ $54, X1
	PSUBQ X10, X7
	MOVO X7, X2
	PSLLQ $60, X7
	POR X13, X14
	POR X11, X6
	POR X8, X4
	POR X15, X9
	POR X5, X1
	POR X7, X14
	POR X6, X4
	POR X9, X1
	POR X14, X4
	POR X1, X4
	MOVO X4, 48(BX)
	PSRLQ $4, X2
	MOVO 688(AX), X12
	MOVO 704(AX), X0
	MOVO 720(AX), X10
	MOVO 736(AX), X13
	MOVO X12, X11
	MOVO X0, X8
	MOVO X10, X15
	MOVO X13, X5
	PSUBQ X3, X12
	PSLLQ $2, X12
	PSUBQ X11, X0
	PSLLQ $8, X0
	PSUBQ X8, X10
	PSLLQ $14, X10
	PSUBQ X15, X13
	PSLLQ $20, X13
	MOVO 752(AX), X7
	MOVO 768(AX), X6
	MOVO 784(AX), X9
	MOVO 800(AX), X14
	MOVO X7, X1
	MOVO X6, X4
	MOVO X9, X3
	MOVO X14, X11
	PSUBQ X5, X7
	PSLLQ $26, X7
	PSUBQ X1, X6
	PSLLQ $32, X6
	PSUBQ X4, X9
	PSLLQ $38, X9
	PSUBQ X3, X14
	PSLLQ $44, X14
	MOVO 816(AX), X8
	MOVO 832(AX), X15
	MOVO 848(AX), X5
	MOVO 864(AX), X1
	POR X2, X12
	POR X0, X10
	POR X13, X7
	POR X6, X9
	POR X14, X12
	POR X10, X7
	POR X9, X12
	POR X7, X12
	MOVO X8, X4
	MOVO X15, X3
	MOVO X5, X2
	MOVO X1, X0
	PSUBQ X11, X8
	PSLLQ $50, X8
	PSUBQ X4, X15
	PSLLQ $56, X15
	PSUBQ X3, X5
	MOVO X5, X13
	PSLLQ $62, X5
	POR X12, X8
	POR X15, X5
	POR X8, X5
	MOVO X5, 64(BX)
	PSRLQ $2, X13
	PSUBQ X2, X1
	PSLLQ $4, X1
	MOVO 880(AX), X6
	MOVO 896(AX), X14
	MOVO 912(AX), X10
	MOVO 928(AX), X9
	MOVO X6, X7
	MOVO X14, X11
	MOVO X10, X4
	MOVO X9, X3
	PSUBQ X0, X6
	PSLLQ $10, X6
	PSUBQ X7, X14
	PSLLQ $16, X14
	PSUBQ X11, X10
	PSLLQ $22, X10
	PSUBQ X4, X9
	PSLLQ $28, X9
	MOVO 944(AX), X12
	MOVO 960(AX), X15
	MOVO 976(AX), X8
	MOVO 992(AX), X5
	MOVO X12, X2
	MOVO X15, X0
	MOVO X8, X7
	MOVO X5, X11
	PSUBQ X3, X12
	PSLLQ $34, X12
	PSUBQ X2, X15
	PSLLQ $40, X15
	PSUBQ X0, X8
	PSLLQ $46, X8
	PSUBQ X7, X5
	PSLLQ $52, X5
	MOVO 1008(AX), X4
	MOVO X4, X3
	PSUBQ X11, X4
	PSLLQ $58, X4
	POR X13, X1
	POR X6, X14
	POR X10, X9
	POR X12, X15
	POR X8, X5
	POR X4, X1
	POR X14, X9
	POR X15, X5
	POR X1, X9
	POR X5, X9
	MOVO X9, 80(BX)
	MOVO X3, 0(DX)
	RET

// func dpack64_7(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_7(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $7, X2
	PSUBQ X5, X3
	PSLLQ $14, X3
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	PSUBQ X6, X7
	PSLLQ $21, X7
	PSUBQ X11, X8
	PSLLQ $28, X8
	PSUBQ X12, X9
	PSLLQ $35, X9
	PSUBQ X13, X10
	PSLLQ $42, X10
	MOVO 112(AX), X15
	MOVO 128(AX), X0
	MOVO 144(AX), X4
	MOVO 160(AX), X5
	MOVO X15, X6
	MOVO X0, X11
	MOVO X4, X12
	MOVO X5, X13
	PSUBQ X14, X15
	PSLLQ $49, X15
	PSUBQ X6, X0
	PSLLQ $56, X0
	PSUBQ X11, X4
	MOVO X4, X14
	PSLLQ $63, X4
	POR X1, X2
	POR X3, X7
	POR X8, X9
	POR X10, X15
	POR X0, X4
	POR X2, X7
	POR X9, X15
	POR X4, X7
	POR X15, X7
	MOVO X7, 0(BX)
	PSRLQ $1, X14
	PSUBQ X12, X5
	PSLLQ $6, X5
	MOVO 176(AX), X6
	MOVO 192(AX), X11
	MOVO 208(AX), X1
	MOVO 224(AX), X3
	MOVO X6, X8
	MOVO X11, X10
	MOVO X1, X0
	MOVO X3, X2
	PSUBQ X13, X6
	PSLLQ $13, X6
	PSUBQ X8, X11
	PSLLQ $20, X11
	PSUBQ X10, X1
	PSLLQ $27, X1
	PSUBQ X0, X3
	PSLLQ $34, X3
	MOVO 240(AX), X9
	MOVO 256(AX), X4
	MOVO 272(AX), X15
	MOVO 288(AX), X7
	MOVO X9, X12
	MOVO X4, X13
	MOVO X15, X8
	MOVO X7, X10
	PSUBQ X2, X9
	PSLLQ $41, X9
	PSUBQ X12, X4
	PSLLQ $48, X4
	PSUBQ X13, X15
	PSLLQ $55, X15
	PSUBQ X8, X7
	MOVO X7, X0
	PSLLQ $62, X7
	POR X14, X5
	POR X6, X11
	POR X1, X3
	POR X9, X4
	POR X15, X7
	POR X5, X11
	POR X3, X4
	POR X7, X11
	POR X4, X11
	MOVO X11, 16(BX)
	PSRLQ $2, X0
	MOVO 304(AX), X2
	MOVO 320(AX), X12
	MOVO 336(AX), X13
	MOVO 352(AX), X8
	MOVO X2, X14
	MOVO X12, X6
	MOVO X13, X1
	MOVO X8, X9
	PSUBQ X10, X2
	PSLLQ $5, X2
	PSUBQ X14, X12
	PSLLQ $12, X12
	PSUBQ X6, X13
	PSLLQ $19, X13
	PSUBQ X1, X8
	PSLLQ $26, X8
	MOVO 368(AX), X15
	MOVO 384(AX), X5
	MOVO 400(AX), X3
	MOVO 416(AX), X7
	MOVO X15, X4
	MOVO X5, X11
	MOVO X3, X10
	MOVO X7, X14
	PSUBQ X9, X15
	PSLLQ $33, X15
	PSUBQ X4, X5
	PSLLQ $40, X5
	PSUBQ X11, X3
	PSLLQ $47, X3
	PSUBQ X10, X7
	PSLLQ $54, X7
	MOVO 432(AX), X6
	MOVO 448(AX), X1
	MOVO 464(AX), X9
	MOVO 480(AX), X4
	POR X0, X2
	POR X12, X13
	POR X8, X15
	POR X5, X3
	POR X7, X2
	POR X13, X15
	POR X3, X2
	POR X15, X2
	MOVO X6, X11
	MOVO X1, X10
	MOVO X9, X0
	MOVO X4, X12
	PSUBQ X14, X6
	MOVO X6, X8
	PSLLQ $61, X6
	POR X2, X6
	MOVO X6, 32(BX)
	PSRLQ $3, X8
	PSUBQ X11, X1
	PSLLQ $4, X1
	PSUBQ X10, X9
	PSLLQ $11, X9
	PSUBQ X0, X4
	PSLLQ $18, X4
	MOVO 496(AX), X5
	MOVO 512(AX), X7
	MOVO 528(AX), X13
	MOVO 544(AX), X3
	MOVO X5, X15
	MOVO X7, X14
	MOVO X13, X2
	MOVO X3, X6
	PSUBQ X12, X5
	PSLLQ $25, X5
	PSUBQ X15, X7
	PSLLQ $32, X7
	PSUBQ X14, X13
	PSLLQ $39, X13
	PSUBQ X2, X3
	PSLLQ $46, X3
	MOVO 560(AX), X11
	MOVO 576(AX), X10
	MOVO 592(AX), X0
	MOVO 608(AX), X12
	POR X8, X1
	POR X9, X4
	POR X5, X7
	POR X13, X3
	POR X1, X4
	POR X7, X3
	POR X4, X3
	MOVO X11, X15
	MOVO X10, X14
	MOVO X0, X2
	MOVO X12, X8
	PSUBQ X6, X11
	PSLLQ $53, X11
	PSUBQ X15, X10
	MOVO X10, X9
	PSLLQ $60, X10
	POR X3, X11
	POR X10, X11
	MOVO X11, 48(BX)
	PSRLQ $4, X9
	PSUBQ X14, X0
	PSLLQ $3, X0
	PSUBQ X2, X12
	PSLLQ $10, X12
	MOVO 624(AX), X5
	MOVO 640(AX), X13
	MOVO 656(AX), X1
	MOVO 672(AX), X7
	MOVO X5, X4
	MOVO X13, X6
	MOVO X1, X15
	MOVO X7, X3
	PSUBQ X8, X5
	PSLLQ $17, X5
	PSUBQ X4, X13
	PSLLQ $24, X13
	PSUBQ X6, X1
	PSLLQ $31, X1
	PSUBQ X15, X7
	PSLLQ $38, X7
	MOVO 688(AX), X10
	MOVO 704(AX), X11
	MOVO 720(AX), X14
	MOVO 736(AX), X2
	MOVO X10, X8
	MOVO X11, X4
	MOVO X14, X6
	MOVO X2, X15
	PSUBQ X3, X10
	PSLLQ $45, X10
	PSUBQ X8, X11
	PSLLQ $52, X11
	PSUBQ X4, X14
	MOVO X14, X3
	PSLLQ $59, X14
	POR X9, X0
	POR X12, X5
	POR X13, X1
	POR X7, X10
	POR X11, X14
	POR X0, X5
	POR X1, X10
	POR X14, X5
	POR X10, X5
	MOVO X5, 64(BX)
	PSRLQ $5, X3
	PSUBQ X6, X2
	PSLLQ $2, X2
	MOVO 752(AX), X8
	MOVO 768(AX), X4
	MOVO 784(AX), X9
	MOVO 800(AX), X12
	MOVO X8, X13
	MOVO X4, X7
	MOVO X9, X11
	MOVO X12, X0
	PSUBQ X15, X8
	PSLLQ $9, X8
	PSUBQ X13, X4
	PSLLQ $16, X4
	PSUBQ X7, X9
	PSLLQ $23, X9
	PSUBQ X11, X12
	PSLLQ $30, X12
	MOVO 816(AX), X1
	MOVO 832(AX), X14
	MOVO 848(AX), X10
	MOVO 864(AX), X5
	MOVO X1, X6
	MOVO X14, X15
	MOVO X10, X13
	MOVO X5, X7
	PSUBQ X0, X1
	PSLLQ $37, X1
	PSUBQ X6, X14
	PSLLQ $44, X14
	PSUBQ X15, X10
	PSLLQ $51, X10
	PSUBQ X13, X5
	MOVO X5, X11
	PSLLQ $58, X5
	POR X3, X2
	POR X8, X4
	POR X9, X12
	POR X1, X14
	POR X10, X5
	POR X2, X4
	POR X12, X14
	POR X5, X4
	POR X14, X4
	MOVO X4, 80(BX)
	PSRLQ $6, X11
	MOVO 880(AX), X0
	MOVO 896(AX), X6
	MOVO 912(AX), X15
	MOVO 928(AX), X13
	MOVO X0, X3
	MOVO X6, X8
	MOVO X15, X9
	MOVO X13, X1
	PSUBQ X7, X0
	PSLLQ $1, X0
	PSUBQ X3, X6
	PSLLQ $8, X6
	PSUBQ X8, X15
	PSLLQ $15, X15
	PSUBQ X9, X13
	PSLLQ $22, X13
	MOVO 944(AX), X10
	MOVO 960(AX), X2
	MOVO 976(AX), X12
	MOVO 992(AX), X5
	MOVO X10, X14
	MOVO X2, X4
	MOVO X12, X7
	MOVO X5, X3
	PSUBQ X1, X10
	PSLLQ $29, X10
	PSUBQ X14, X2
	PSLLQ $36, X2
	PSUBQ X4, X12
	PSLLQ $43, X12
	PSUBQ X7, X5
	PSLLQ $50, X5
	MOVO 1008(AX), X8
	MOVO X8, X9
	PSUBQ X3, X8
	PSLLQ $57, X8
	POR X11, X0
	POR X6, X15
	POR X13, X10
	POR X2, X12
	POR X5, X8
	POR X0, X15
	POR X10, X12
	POR X8, X15
	POR X12, X15
	MOVO X15, 96(BX)
	MOVO X9, 0(DX)
	RET

// func dpack64_8(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_8(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $8, X2
	PSUBQ X5, X3
	PSLLQ $16, X3
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	PSUBQ X6, X7
	PSLLQ $24, X7
	PSUBQ X11, X8
	PSLLQ $32, X8
	PSUBQ X12, X9
	PSLLQ $40, X9
	PSUBQ X13, X10
	PSLLQ $48, X10
	MOVO 112(AX), X15
	MOVO 128(AX), X0
	MOVO 144(AX), X4
	MOVO 160(AX), X5
	MOVO X15, X6
	MOVO X0, X11
	MOVO X4, X12
	MOVO X5, X13
	PSUBQ X14, X15
	PSLLQ $56, X15
	POR X1, X2
	POR X3, X7
	POR X8, X9
	POR X10, X15
	POR X2, X7
	POR X9, X15
	POR X7, X15
	MOVO X15, 0(BX)
	PSUBQ X6, X0
	PSUBQ X11, X4
	PSLLQ $8, X4
	PSUBQ X12, X5
	PSLLQ $16, X5
	MOVO 176(AX), X14
	MOVO 192(AX), X1
	MOVO 208(AX), X3
	MOVO 224(AX), X8
	MOVO X14, X10
	MOVO X1, X2
	MOVO X3, X9
	MOVO X8, X7
	PSUBQ X13, X14
	PSLLQ $24, X14
	PSUBQ X10, X1
	PSLLQ $32, X1
	PSUBQ X2, X3
	PSLLQ $40, X3
	PSUBQ X9, X8
	PSLLQ $48, X8
	MOVO 240(AX), X15
	MOVO 256(AX), X6
	MOVO 272(AX), X11
	MOVO 288(AX), X12
	MOVO X15, X13
	MOVO X6, X10
	MOVO X11, X2
	MOVO X12, X9
	PSUBQ X7, X15
	PSLLQ $56, X15
	POR X0, X4
	POR X5, X14
	POR X1, X3
	POR X8, X15
	POR X4, X14
	POR X3, X15
	POR X14, X15
	MOVO X15, 16(BX)
	PSUBQ X13, X6
	PSUBQ X10, X11
	PSLLQ $8, X11
	PSUBQ X2, X12
	PSLLQ $16, X12
	MOVO 304(AX), X7
	MOVO 320(AX), X0
	MOVO 336(AX), X5
	MOVO 352(AX), X1
	MOVO X7, X8
	MOVO X0, X4
	MOVO X5, X3
	MOVO X1, X14
	PSUBQ X9, X7
	PSLLQ $24, X7
	PSUBQ X8, X0
	PSLLQ $32, X0
	PSUBQ X4, X5
	PSLLQ $40, X5
	PSUBQ X3, X1
	PSLLQ $48, X1
	MOVO 368(AX), X15
	MOVO 384(AX), X13
	MOVO 400(AX), X10
	MOVO 416(AX), X2
	MOVO X15, X9
	MOVO X13, X8
	MOVO X10, X4
	MOVO X2, X3
	PSUBQ X14, X15
	PSLLQ $56, X15
	POR X6, X11
	POR X12, X7
	POR X0, X5
	POR X1, X15
	POR X11, X7
	POR X5, X15
	POR X7, X15
	MOVO X15, 32(BX)
	PSUBQ X9, X13
	PSUBQ X8, X10
	PSLLQ $8, X10
	PSUBQ X4, X2
	PSLLQ $16, X2
	MOVO 432(AX), X14
	MOVO 448(AX), X6
	MOVO 464(AX), X12
	MOVO 480(AX), X0
	MOVO X14, X1
	MOVO X6, X11
	MOVO X12, X5
	MOVO X0, X7
	PSUBQ X3, X14
	PSLLQ $24, X14
	PSUBQ X1, X6
	PSLLQ $32, X6
	PSUBQ X11, X12
	PSLLQ $40, X12
	PSUBQ X5, X0
	PSLLQ $48, X0
	MOVO 496(AX), X15
	MOVO 512(AX), X9
	MOVO 528(AX), X8
	MOVO 544(AX), X4
	MOVO X15, X3
	MOVO X9, X1
	MOVO X8, X11
	MOVO X4, X5
	PSUBQ X7, X15
	PSLLQ $56, X15
	POR X13, X10
	POR X2, X14
	POR X6, X12
	POR X0, X15
	POR X10, X14
	POR X12, X15
	POR X14, X15
	MOVO X15, 48(BX)
	PSUBQ X3, X9
	PSUBQ X1, X8
	PSLLQ $8, X8
	PSUBQ X11, X4
	PSLLQ $16, X4
	MOVO 560(AX), X7
	MOVO 576(AX), X13
	MOVO 592(AX), X2
	MOVO 608(AX), X6
	MOVO X7, X0
	MOVO X13, X10
	MOVO X2, X12
	MOVO X6, X14
	PSUBQ X5, X7
	PSLLQ $24, X7
	PSUBQ X0, X13
	PSLLQ $32, X13
	PSUBQ X10, X2
	PSLLQ $40, X2
	PSUBQ X12, X6
	PSLLQ $48, X6
	MOVO 624(AX), X15
	MOVO 640(AX), X3
	MOVO 656(AX), X1
	MOVO 672(AX), X11
	MOVO X15, X5
	MOVO X3, X0
	MOVO X1, X10
	MOVO X11, X12
	PSUBQ X14, X15
	PSLLQ $56, X15
	POR X9, X8
	POR X4, X7
	POR X13, X2
	POR X6, X15
	POR X8, X7
	POR X2, X15
	POR X7, X15
	MOVO X15, 64(BX)
	PSUBQ X5, X3
	PSUBQ X0, X1
	PSLLQ $8, X1
	PSUBQ X10, X11
	PSLLQ $16, X11
	MOVO 688(AX), X14
	MOVO 704(AX), X9
	MOVO 720(AX), X4
	MOVO 736(AX), X13
	MOVO X14, X6
	MOVO X9, X8
	MOVO X4, X2
	MOVO X13, X7
	PSUBQ X12, X14
	PSLLQ $24, X14
	PSUBQ X6, X9
	PSLLQ $32, X9
	PSUBQ X8, X4
	PSLLQ $40, X4
	PSUBQ X2, X13
	PSLLQ $48, X13
	MOVO 752(AX), X15
	MOVO 768(AX), X5
	MOVO 784(AX), X0
	MOVO 800(AX), X10
	MOVO X15, X12
	MOVO X5, X6
	MOVO X0, X8
	MOVO X10, X2
	PSUBQ X7, X15
	PSLLQ $56, X15
	POR X3, X1
	POR X11, X14
	POR X9, X4
	POR X13, X15
	POR X1, X14
	POR X4, X15
	POR X14, X15
	MOVO X15, 80(BX)
	PSUBQ X12, X5
	PSUBQ X6, X0
	PSLLQ $8, X0
	PSUBQ X8, X10
	PSLLQ $16, X10
	MOVO 816(AX), X7
	MOVO 832(AX), X3
	MOVO 848(AX), X11
	MOVO 864(AX), X9
	MOVO X7, X13
	MOVO X3, X1
	MOVO X11, X4
	MOVO X9, X14
	PSUBQ X2, X7
	PSLLQ $24, X7
	PSUBQ X13, X3
	PSLLQ $32, X3
	PSUBQ X1, X11
	PSLLQ $40, X11
	PSUBQ X4, X9
	PSLLQ $48, X9
	MOVO 880(AX), X15
	MOVO 896(AX), X12
	MOVO 912(AX), X6
	MOVO 928(AX), X8
	MOVO X15, X2
	MOVO X12, X13
	MOVO X6, X1
	MOVO X8, X4
	PSUBQ X14, X15
	PSLLQ $56, X15
	POR X5, X0
	POR X10, X7
	POR X3, X11
	POR X9, X15
	POR X0, X7
	POR X11, X15
	POR X7, X15
	MOVO X15, 96(BX)
	PSUBQ X2, X12
	PSUBQ X13, X6
	PSLLQ $8, X6
	PSUBQ X1, X8
	PSLLQ $16, X8
	MOVO 944(AX), X14
	MOVO 960(AX), X5
	MOVO 976(AX), X10
	MOVO 992(AX), X3
	MOVO X14, X9
	MOVO X5, X0
	MOVO X10, X11
	MOVO X3, X7
	PSUBQ X4, X14
	PSLLQ $24, X14
	PSUBQ X9, X5
	PSLLQ $32, X5
	PSUBQ X0, X10
	PSLLQ $40, X10
	PSUBQ X11, X3
	PSLLQ $48, X3
	MOVO 1008(AX), X15
	MOVO X15, X2
	PSUBQ X7, X15
	PSLLQ $56, X15
	POR X12, X6
	POR X8, X14
	POR X5, X10
	POR X3, X15
	POR X6, X14
	POR X10, X15
	POR X14, X15
	MOVO X15, 112(BX)
	MOVO X2, 0(DX)
	RET

// func dpack64_9(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_9(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $9, X2
	PSUBQ X5, X3
	PSLLQ $18, X3
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	PSUBQ X6, X7
	PSLLQ $27, X7
	PSUBQ X11, X8
	PSLLQ $36, X8
	PSUBQ X12, X9
	PSLLQ $45, X9
	PSUBQ X13, X10
	PSLLQ $54, X10
	MOVO 112(AX), X15
	MOVO 128(AX), X0
	MOVO 144(AX), X4
	MOVO 160(AX), X5
	MOVO X15, X6
	MOVO X0, X11
	MOVO X4, X12
	MOVO X5, X13
	PSUBQ X14, X15
	MOVO X15, X14
	PSLLQ $63, X15
	POR X1, X2
	POR X3, X7
	POR X8, X9
	POR X10, X15
	POR X2, X7
	POR X9, X15
	POR X7, X15
	MOVO X15, 0(BX)
	PSRLQ $1, X14
	PSUBQ X6, X0
	PSLLQ $8, X0
	PSUBQ X11, X4
	PSLLQ $17, X4
	PSUBQ X12, X5
	PSLLQ $26, X5
	MOVO 176(AX), X1
	MOVO 192(AX), X3
	MOVO 208(AX), X8
	MOVO 224(AX), X10
	MOVO X1, X2
	MOVO X3, X9
	MOVO X8, X7
	MOVO X10, X15
	PSUBQ X13, X1
	PSLLQ $35, X1
	PSUBQ X2, X3
	PSLLQ $44, X3
	PSUBQ X9, X8
	PSLLQ $53, X8
	PSUBQ X7, X10
	MOVO X10, X6
	PSLLQ $62, X10
	POR X14, X0
	POR X4, X5
	POR X1, X3
	POR X8, X10
	POR X0, X5
	POR X3, X10
	POR X5, X10
	MOVO X10, 16(BX)
	PSRLQ $2, X6
	MOVO 240(AX), X11
	MOVO 256(AX), X12
	MOVO 272(AX), X13
	MOVO 288(AX), X2
	MOVO X11, X9
	MOVO X12, X7
	MOVO X13, X14
	MOVO X2, X4
	PSUBQ X15, X11
	PSLLQ $7, X11
	PSUBQ X9, X12
	PSLLQ $16, X12
	PSUBQ X7, X13
	PSLLQ $25, X13
	PSUBQ X14, X2
	PSLLQ $34, X2
	MOVO 304(AX), X1
	MOVO 320(AX), X8
	MOVO 336(AX), X0
	MOVO 352(AX), X3
	MOVO X1, X5
	MOVO X8, X10
	MOVO X0, X15
	MOVO X3, X9
	PSUBQ X4, X1
	PSLLQ $43, X1
	PSUBQ X5, X8
	PSLLQ $52, X8
	PSUBQ X10, X0
	MOVO X0, X7
	PSLLQ $61, X0
	POR X6, X11
	POR X12, X13
	POR X2, X1
	POR X8, X0
	POR X11, X13
	POR X1, X0
	POR X13, X0
	MOVO X0, 32(BX)
	PSRLQ $3, X7
	PSUBQ X15, X3
	PSLLQ $6, X3
	MOVO 368(AX), X14
	MOVO 384(AX), X4
	MOVO 400(AX), X5
	MOVO 416(AX), X10
	MOVO X14, X6
	MOVO X4, X12
	MOVO X5, X2
	MOVO X10, X8
	PSUBQ X9, X14
	PSLLQ $15, X14
	PSUBQ X6, X4
	PSLLQ $24, X4
	PSUBQ X12, X5
	PSLLQ $33, X5
	PSUBQ X2, X10
	PSLLQ $42, X10
	MOVO 432(AX), X11
	MOVO 448(AX), X1
	MOVO 464(AX), X13
	MOVO 480(AX), X0
	MOVO X11, X15
	MOVO X1, X9
	MOVO X13, X6
	MOVO X0, X12
	PSUBQ X8, X11
	PSLLQ $51, X11
	PSUBQ X15, X1
	MOVO X1, X2
	PSLLQ $60, X1
	POR X7, X3
	POR X14, X4
	POR X5, X10
	POR X11, X1
	POR X3, X4
	POR X10, X1
	POR X4, X1
	MOVO X1, 48(BX)
	PSRLQ $4, X2
	PSUBQ X9, X13
	PSLLQ $5, X13
	PSUBQ X6, X0
	PSLLQ $14, X0
	MOVO 496(AX), X8
	MOVO 512(AX), X15
	MOVO 528(AX), X7
	MOVO 544(AX), X14
	MOVO X8, X5
	MOVO X15, X11
	MOVO X7, X3
	MOVO X14, X10
	PSUBQ X12, X8
	PSLLQ $23, X8
	PSUBQ X5, X15
	PSLLQ $32, X15
	PSUBQ X11, X7
	PSLLQ $41, X7
	PSUBQ X3, X14
	PSLLQ $50, X14
	MOVO 560(AX), X4
	MOVO 576(AX), X1
	MOVO 592(AX), X9
	MOVO 608(AX), X6
	MOVO X4, X12
	MOVO X1, X5
	MOVO X9, X11
	MOVO X6, X3
	PSUBQ X10, X4
	MOVO X4, X10
	PSLLQ $59, X4
	POR X2, X13
	POR X0, X8
	POR X15, X7
	POR X14, X4
	POR X13, X8
	POR X7, X4
	POR X8, X4
	MOVO X4, 64(BX)
	PSRLQ $5, X10
	PSUBQ X12, X1
	PSLLQ $4, X1
	PSUBQ X5, X9
	PSLLQ $13, X9
	PSUBQ X11, X6
	PSLLQ $22, X6
	MOVO 624(AX), X2
	MOVO 640(AX), X0
	MOVO 656(AX), X15
	MOVO 672(AX), X14
	MOVO X2, X13
	MOVO X0, X7
	MOVO X15, X8
	MOVO X14, X4
	PSUBQ X3, X2
	PSLLQ $31, X2
	PSUBQ X13, X0
	PSLLQ $40, X0
	PSUBQ X7, X15
	PSLLQ $49, X15
	PSUBQ X8, X14
	MOVO X14, X12
	PSLLQ $58, X14
	POR X10, X1
	POR X9, X6
	POR X2, X0
	POR X15, X14
	POR X1, X6
	POR X0, X14
	POR X6, X14
	MOVO X14, 80(BX)
	PSRLQ $6, X12
	MOVO 688(AX), X5
	MOVO 704(AX), X11
	MOVO 720(AX), X3
	MOVO 736(AX), X13
	MOVO X5, X7
	MOVO X11, X8
	MOVO X3, X10
	MOVO X13, X9
	PSUBQ X4, X5
	PSLLQ $3, X5
	PSUBQ X7, X11
	PSLLQ $12, X11
	PSUBQ X8, X3
	PSLLQ $21, X3
	PSUBQ X10, X13
	PSLLQ $30, X13
	MOVO 752(AX), X2
	MOVO 768(AX), X15
	MOVO 784(AX), X1
	MOVO 800(AX), X0
	MOVO X2, X6
	MOVO X15, X14
	MOVO X1, X4
	MOVO X0, X7
	PSUBQ X9, X2
	PSLLQ $39, X2
	PSUBQ X6, X15
	PSLLQ $48, X15
	PSUBQ X14, X1
	MOVO X1, X8
	PSLLQ $57, X1
	POR X12, X5
	POR X11, X3
	POR X13, X2
	POR X15, X1
	POR X5, X3
	POR X2, X1
	POR X3, X1
	MOVO X1, 96(BX)
	PSRLQ $7, X8
	PSUBQ X4, X0
	PSLLQ $2, X0
	MOVO 816(AX), X10
	MOVO 832(AX), X9
	MOVO 848(AX), X6
	MOVO 864(AX), X14
	MOVO X10, X12
	MOVO X9, X11
	MOVO X6, X13
	MOVO X14, X15
	PSUBQ X7, X10
	PSLLQ $11, X10
	PSUBQ X12, X9
	PSLLQ $20, X9
	PSUBQ X11, X6
	PSLLQ $29, X6
	PSUBQ X13, X14
	PSLLQ $38, X14
	MOVO 880(AX), X5
	MOVO 896(AX), X2
	MOVO 912(AX), X3
	MOVO 928(AX), X1
	MOVO X5, X4
	MOVO X2, X7
	MOVO X3, X12
	MOVO X1, X11
	PSUBQ X15, X5
	PSLLQ $47, X5
	PSUBQ X4, X2
	MOVO X2, X13
	PSLLQ $56, X2
	POR X8, X0
	POR X10, X9
	POR X6, X14
	POR X5, X2
	POR X0, X9
	POR X14, X2
	POR X9, X2
	MOVO X2, 112(BX)
	PSRLQ $8, X13
	PSUBQ X7, X3
	PSLLQ $1, X3
	PSUBQ X12, X1
	PSLLQ $10, X1
	MOVO 944(AX), X15
	MOVO 960(AX), X4
	MOVO 976(AX), X8
	MOVO 992(AX), X10
	MOVO X15, X6
	MOVO X4, X5
	MOVO X8, X0
	MOVO X10, X14
	PSUBQ X11, X15
	PSLLQ $19, X15
	PSUBQ X6, X4
	PSLLQ $28, X4
	PSUBQ X5, X8
	PSLLQ $37, X8
	PSUBQ X0, X10
	PSLLQ $46, X10
	MOVO 1008(AX), X9
	MOVO X9, X2
	PSUBQ X14, X9
	PSLLQ $55, X9
	POR X13, X3
	POR X1, X15
	POR X4, X8
	POR X10, X9
	POR X3, X15
	POR X8, X9
	POR X15, X9
	MOVO X9, 128(BX)
	MOVO X2, 0(DX)
	RET

// func dpack64_10(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_10(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $10, X2
	PSUBQ X5, X3
	PSLLQ $20, X3
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	PSUBQ X6, X7
	PSLLQ $30, X7
	PSUBQ X11, X8
	PSLLQ $40, X8
	PSUBQ X12, X9
	PSLLQ $50, X9
	PSUBQ X13, X10
	MOVO X10, X15
	PSLLQ $60, X10
	POR X1, X2
	POR X3, X7
	POR X8, X9
	POR X10, X2
	POR X7, X9
	POR X2, X9
	MOVO X9, 0(BX)
	PSRLQ $4, X15
	MOVO 112(AX), X0
	MOVO 128(AX), X4
	MOVO 144(AX), X5
	MOVO 160(AX), X6
	MOVO X0, X11
	MOVO X4, X12
	MOVO X5, X13
	MOVO X6, X1
	PSUBQ X14, X0
	PSLLQ $6, X0
	PSUBQ X11, X4
	PSLLQ $16, X4
	PSUBQ X12, X5
	PSLLQ $26, X5
	PSUBQ X13, X6
	PSLLQ $36, X6
	MOVO 176(AX), X3
	MOVO 192(AX), X8
	MOVO 208(AX), X10
	MOVO 224(AX), X7
	MOVO X3, X2
	MOVO X8, X9
	MOVO X10, X14
	MOVO X7, X11
	PSUBQ X1, X3
	PSLLQ $46, X3
	PSUBQ X2, X8
	MOVO X8, X12
	PSLLQ $56, X8
	POR X15, X0
	POR X4, X5
	POR X6, X3
	POR X8, X0
	POR X5, X3
	POR X0, X3
	MOVO X3, 16(BX)
	PSRLQ $8, X12
	PSUBQ X9, X10
	PSLLQ $2, X10
	PSUBQ X14, X7
	PSLLQ $12, X7
	MOVO 240(AX), X13
	MOVO 256(AX), X1
	MOVO 272(AX), X2
	MOVO 288(AX), X15
	MOVO X13, X4
	MOVO X1, X6
	MOVO X2, X8
	MOVO X15, X5
	PSUBQ X11, X13
	PSLLQ $22, X13
	PSUBQ X4, X1
	PSLLQ $32, X1
	PSUBQ X6, X2
	PSLLQ $42, X2
	PSUBQ X8, X15
	PSLLQ $52, X15
	MOVO 304(AX), X0
	MOVO 320(AX), X3
	MOVO 336(AX), X9
	MOVO 352(AX), X14
	MOVO X0, X11
	MOVO X3, X4
	MOVO X9, X6
	MOVO X14, X8
	PSUBQ X5, X0
	MOVO X0, X5
	PSLLQ $62, X0
	POR X12, X10
	POR X7, X13
	POR X1, X2
	POR X15, X0
	POR X10, X13
	POR X2, X0
	POR X13, X0
	MOVO X0, 32(BX)
	PSRLQ $2, X5
	PSUBQ X11, X3
	PSLLQ $8, X3
	PSUBQ X4, X9
	PSLLQ $18, X9
	PSUBQ X6, X14
	PSLLQ $28, X14
	MOVO 368(AX), X12
	MOVO 384(AX), X7
	MOVO 400(AX), X1
	MOVO 416(AX), X15
	MOVO X12, X10
	MOVO X7, X2
	MOVO X1, X13
	MOVO X15, X0
	PSUBQ X8, X12
	PSLLQ $38, X12
	PSUBQ X10, X7
	PSLLQ $48, X7
	PSUBQ X2, X1
	MOVO X1, X11
	PSLLQ $58, X1
	POR X5, X3
	POR X9, X14
	POR X12, X7
	POR X1, X3
	POR X14, X7
	POR X3, X7
	MOVO X7, 48(BX)
	PSRLQ $6, X11
	PSUBQ X13, X15
	PSLLQ $4, X15
	MOVO 432(AX), X4
	MOVO 448(AX), X6
	MOVO 464(AX), X8
	MOVO 480(AX), X10
	MOVO X4, X2
	MOVO X6, X5
	MOVO X8, X9
	MOVO X10, X12
	PSUBQ X0, X4
	PSLLQ $14, X4
	PSUBQ X2, X6
	PSLLQ $24, X6
	PSUBQ X5, X8
	PSLLQ $34, X8
	PSUBQ X9, X10
	PSLLQ $44, X10
	MOVO 496(AX), X1
	MOVO 512(AX), X14
	MOVO 528(AX), X3
	MOVO 544(AX), X7
	MOVO X1, X13
	MOVO X14, X0
	MOVO X3, X2
	MOVO X7, X5
	PSUBQ X12, X1
	PSLLQ $54, X1
	POR X11, X15
	POR X4, X6
	POR X8, X10
	POR X1, X15
	POR X6, X10
	POR X15, X10
	MOVO X10, 64(BX)
	PSUBQ X13, X14
	PSUBQ X0, X3
	PSLLQ $10, X3
	PSUBQ X2, X7
	PSLLQ $20, X7
	MOVO 560(AX), X9
	MOVO 576(AX), X12
	MOVO 592(AX), X11
	MOVO 608(AX), X4
	MOVO X9, X8
	MOVO X12, X1
	MOVO X11, X6
	MOVO X4, X15
	PSUBQ X5, X9
	PSLLQ $30, X9
	PSUBQ X8, X12
	PSLLQ $40, X12
	PSUBQ X1, X11
	PSLLQ $50, X11
	PSUBQ X6, X4
	MOVO X4, X10
	PSLLQ $60, X4
	POR X14, X3
	POR X7, X9
	POR X12, X11
	POR X4, X3
	POR X9, X11
	POR X3, X11
	MOVO X11, 80(BX)
	PSRLQ $4, X10
	MOVO 624(AX), X13
	MOVO 640(AX), X0
	MOVO 656(AX), X2
	MOVO 672(AX), X5
	MOVO X13, X8
	MOVO X0, X1
	MOVO X2, X6
	MOVO X5, X14
	PSUBQ X15, X13
	PSLLQ $6, X13
	PSUBQ X8, X0
	PSLLQ $16, X0
	PSUBQ X1, X2
	PSLLQ $26, X2
	PSUBQ X6, X5
	PSLLQ $36, X5
	MOVO 688(AX), X7
	MOVO 704(AX), X12
	MOVO 720(AX), X4
	MOVO 736(AX), X9
	MOVO X7, X3
	MOVO X12, X11
	MOVO X4, X15
	MOVO X9, X8
	PSUBQ X14, X7
	PSLLQ $46, X7
	PSUBQ X3, X12
	MOVO X12, X1
	PSLLQ $56, X12
	POR X10, X13
	POR X0, X2
	POR X5, X7
	POR X12, X13
	POR X2, X7
	POR X13, X7
	MOVO X7, 96(BX)
	PSRLQ $8, X1
	PSUBQ X11, X4
	PSLLQ $2, X4
	PSUBQ X15, X9
	PSLLQ $12, X9
	MOVO 752(AX), X6
	MOVO 768(AX), X14
	MOVO 784(AX), X3
	MOVO 800(AX), X10
	MOVO X6, X0
	MOVO X14, X5
	MOVO X3, X12
	MOVO X10, X2
	PSUBQ X8, X6
	PSLLQ $22, X6
	PSUBQ X0, X14
	PSLLQ $32, X14
	PSUBQ X5, X3
	PSLLQ $42, X3
	PSUBQ X12, X10
	PSLLQ $52, X10
	MOVO 816(AX), X13
	MOVO 832(AX), X7
	MOVO 848(AX), X11
	MOVO 864(AX), X15
	MOVO X13, X8
	MOVO X7, X0
	MOVO X11, X5
	MOVO X15, X12
	PSUBQ X2, X13
	MOVO X13, X2
	PSLLQ $62, X13
	POR X1, X4
	POR X9, X6
	POR X14, X3
	POR X10, X13
	POR X4, X6
	POR X3, X13
	POR X6, X13
	MOVO X13, 112(BX)
	PSRLQ $2, X2
	PSUBQ X8, X7
	PSLLQ $8, X7
	PSUBQ X0, X11
	PSLLQ $18, X11
	PSUBQ X5, X15
	PSLLQ $28, X15
	MOVO 880(AX), X1
	MOVO 896(AX), X9
	MOVO 912(AX), X14
	MOVO 928(AX), X10
	MOVO X1, X4
	MOVO X9, X3
	MOVO X14, X6
	MOVO X10, X13
	PSUBQ X12, X1
	PSLLQ $38, X1
	PSUBQ X4, X9
	PSLLQ $48, X9
	PSUBQ X3, X14
	MOVO X14, X8
	PSLLQ $58, X14
	POR X2, X7
	POR X11, X15
	POR X1, X9
	POR X14, X7
	POR X15, X9
	POR X7, X9
	MOVO X9, 128(BX)
	PSRLQ $6, X8
	PSUBQ X6, X10
	PSLLQ $4, X10
	MOVO 944(AX), X0
	MOVO 960(AX), X5
	MOVO 976(AX), X12
	MOVO 992(AX), X4
	MOVO X0, X3
	MOVO X5, X2
	MOVO X12, X11
	MOVO X4, X1
	PSUBQ X13, X0
	PSLLQ $14, X0
	PSUBQ X3, X5
	PSLLQ $24, X5
	PSUBQ X2, X12
	PSLLQ $34, X12
	PSUBQ X11, X4
	PSLLQ $44, X4
	MOVO 1008(AX), X14
	MOVO X14, X15
	PSUBQ X1, X14
	PSLLQ $54, X14
	POR X8, X10
	POR X0, X5
	POR X12, X4
	POR X14, X10
	POR X5, X4
	POR X10, X4
	MOVO X4, 144(BX)
	MOVO X15, 0(DX)
	RET

// func dpack64_11(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_11(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $11, X2
	PSUBQ X5, X3
	PSLLQ $22, X3
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	PSUBQ X6, X7
	PSLLQ $33, X7
	PSUBQ X11, X8
	PSLLQ $44, X8
	PSUBQ X12, X9
	MOVO X9, X15
	PSLLQ $55, X9
	POR X1, X2
	POR X3, X7
	POR X8, X9
	POR X2, X7
	POR X9, X7
	MOVO X7, 0(BX)
	PSRLQ $9, X15
	PSUBQ X13, X10
	PSLLQ $2, X10
	MOVO 112(AX), X0
	MOVO 128(AX), X4
	MOVO 144(AX), X5
	MOVO 160(AX), X6
	MOVO X0, X11
	MOVO X4, X12
	MOVO X5, X1
	MOVO X6, X3
	PSUBQ X14, X0
	PSLLQ $13, X0
	PSUBQ X11, X4
	PSLLQ $24, X4
	PSUBQ X12, X5
	PSLLQ $35, X5
	PSUBQ X1, X6
	PSLLQ $46, X6
	MOVO 176(AX), X8
	MOVO 192(AX), X2
	MOVO 208(AX), X9
	MOVO 224(AX), X7
	MOVO X8, X13
	MOVO X2, X14
	MOVO X9, X11
	MOVO X7, X12
	PSUBQ X3, X8
	MOVO X8, X1
	PSLLQ $57, X8
	POR X15, X10
	POR X0, X4
	POR X5, X6
	POR X8, X10
	POR X4, X6
	POR X10, X6
	MOVO X6, 16(BX)
	PSRLQ $7, X1
	PSUBQ X13, X2
	PSLLQ $4, X2
	PSUBQ X14, X9
	PSLLQ $15, X9
	PSUBQ X11, X7
	PSLLQ $26, X7
	MOVO 240(AX), X3
	MOVO 256(AX), X15
	MOVO 272(AX), X0
	MOVO 288(AX), X5
	MOVO X3, X8
	MOVO X15, X4
	MOVO X0, X10
	MOVO X5, X6
	PSUBQ X12, X3
	PSLLQ $37, X3
	PSUBQ X8, X15
	PSLLQ $48, X15
	PSUBQ X4, X0
	MOVO X0, X13
	PSLLQ $59, X0
	POR X1, X2
	POR X9, X7
	POR X3, X15
	POR X0, X2
	POR X7, X15
	POR X2, X15
	MOVO X15, 32(BX)
	PSRLQ $5, X13
	PSUBQ X10, X5
	PSLLQ $6, X5
	MOVO 304(AX), X14
	MOVO 320(AX), X11
	MOVO 336(AX), X12
	MOVO 352(AX), X8
	MOVO X14, X4
	MOVO X11, X1
	MOVO X12, X9
	MOVO X8, X3
	PSUBQ X6, X14
	PSLLQ $17, X14
	PSUBQ X4, X11
	PSLLQ $28, X11
	PSUBQ X1, X12
	PSLLQ $39, X12
	PSUBQ X9, X8
	PSLLQ $50, X8
	MOVO 368(AX), X0
	MOVO 384(AX), X7
	MOVO 400(AX), X2
	MOVO 416(AX), X15
	MOVO X0, X10
	MOVO X7, X6
	MOVO X2, X4
	MOVO X15, X1
	PSUBQ X3, X0
	MOVO X0, X9
	PSLLQ $61, X0
	POR X13, X5
	POR X14, X11
	POR X12, X8
	POR X0, X5
	POR X11, X8
	POR X5, X8
	MOVO X8, 48(BX)
	PSRLQ $3, X9
	PSUBQ X10, X7
	PSLLQ $8, X7
	PSUBQ X6, X2
	PSLLQ $19, X2
	PSUBQ X4, X15
	PSLLQ $30, X15
	MOVO 432(AX), X3
	MOVO 448(AX), X13
	MOVO 464(AX), X14
	MOVO 480(AX), X12
	MOVO X3, X0
	MOVO X13, X11
	MOVO X14, X5
	MOVO X12, X8
	PSUBQ X1, X3
	PSLLQ $41, X3
	PSUBQ X0, X13
	PSLLQ $52, X13
	PSUBQ X11, X14
	MOVO X14, X10
	PSLLQ $63, X14
	POR X9, X7
	POR X2, X15
	POR X3, X13
	POR X14, X7
	POR X15, X13
	POR X7, X13
	MOVO X13, 64(BX)
	PSRLQ $1, X10
	PSUBQ X5, X12
	PSLLQ $10, X12
	MOVO 496(AX), X6
	MOVO 512(AX), X4
	MOVO 528(AX), X1
	MOVO 544(AX), X0
	MOVO X6, X11
	MOVO X4, X9
	MOVO X1, X2
	MOVO X0, X3
	PSUBQ X8, X6
	PSLLQ $21, X6
	PSUBQ X11, X4
	PSLLQ $32, X4
	PSUBQ X9, X1
	PSLLQ $43, X1
	PSUBQ X2, X0
	MOVO X0, X14
	PSLLQ $54, X0
	POR X10, X12
	POR X6, X4
	POR X1, X0
	POR X12, X4
	POR X0, X4
	MOVO X4, 80(BX)
	PSRLQ $10, X14
	MOVO 560(AX), X15
	MOVO 576(AX), X7
	MOVO 592(AX), X13
	MOVO 608(AX), X5
	MOVO X15, X8
	MOVO X7, X11
	MOVO X13, X9
	MOVO X5, X2
	PSUBQ X3, X15
	PSLLQ $1, X15
	PSUBQ X8, X7
	PSLLQ $12, X7
	PSUBQ X11, X13
	PSLLQ $23, X13
	PSUBQ X9, X5
	PSLLQ $34, X5
	MOVO 624(AX), X10
	MOVO 640(AX), X6
	MOVO 656(AX), X1
	MOVO 672(AX), X12
	MOVO X10, X0
	MOVO X6, X4
	MOVO X1, X3
	MOVO X12, X8
	PSUBQ X2, X10
	PSLLQ $45, X10
	PSUBQ X0, X6
	MOVO X6, X11
	PSLLQ $56, X6
	POR X14, X15
	POR X7, X13
	POR X5, X10
	POR X6, X15
	POR X13, X10
	POR X15, X10
	MOVO X10, 96(BX)
	PSRLQ $8, X11
	PSUBQ X4, X1
	PSLLQ $3, X1
	PSUBQ X3, X12
	PSLLQ $14, X12
	MOVO 688(AX), X9
	MOVO 704(AX), X2
	MOVO 720(AX), X0
	MOVO 736(AX), X14
	MOVO X9, X7
	MOVO X2, X5
	MOVO X0, X6
	MOVO X14, X13
	PSUBQ X8, X9
	PSLLQ $25, X9
	PSUBQ X7, X2
	PSLLQ $36, X2
	PSUBQ X5, X0
	PSLLQ $47, X0
	PSUBQ X6, X14
	MOVO X14, X15
	PSLLQ $58, X14
	POR X11, X1
	POR X12, X9
	POR X2, X0
	POR X14, X1
	POR X9, X0
	POR X1, X0
	MOVO X0, 112(BX)
	PSRLQ $6, X15
	MOVO 752(AX), X10
	MOVO 768(AX), X4
	MOVO 784(AX), X3
	MOVO 800(AX), X8
	MOVO X10, X7
	MOVO X4, X5
	MOVO X3, X6
	MOVO X8, X11
	PSUBQ X13, X10
	PSLLQ $5, X10
	PSUBQ X7, X4
	PSLLQ $16, X4
	PSUBQ X5, X3
	PSLLQ $27, X3
	PSUBQ X6, X8
	PSLLQ $38, X8
	MOVO 816(AX), X12
	MOVO 832(AX), X2
	MOVO 848(AX), X14
	MOVO 864(AX), X9
	MOVO X12, X1
	MOVO X2, X0
	MOVO X14, X13
	MOVO X9, X7
	PSUBQ X11, X12
	PSLLQ $49, X12
	PSUBQ X1, X2
	MOVO X2, X5
	PSLLQ $60, X2
	POR X15, X10
	POR X4, X3
	POR X8, X12
	POR X2, X10
	POR X3, X12
	POR X10, X12
	MOVO X12, 128(BX)
	PSRLQ $4, X5
	PSUBQ X0, X14
	PSLLQ $7, X14
	PSUBQ X13, X9
	PSLLQ $18, X9
	MOVO 880(AX), X6
	MOVO 896(AX), X11
	MOVO 912(AX), X1
	MOVO 928(AX), X15
	MOVO X6, X4
	MOVO X11, X8
	MOVO X1, X2
	MOVO X15, X3
	PSUBQ X7, X6
	PSLLQ $29, X6
	PSUBQ X4, X11
	PSLLQ $40, X11
	PSUBQ X8, X1
	PSLLQ $51, X1
	PSUBQ X2, X15
	MOVO X15, X10
	PSLLQ $62, X15
	POR X5, X14
	POR X9, X6
	POR X11, X1
	POR X15, X14
	POR X6, X1
	POR X14, X1
	MOVO X1, 144(BX)
	PSRLQ $2, X10
	MOVO 944(AX), X12
	MOVO 960(AX), X0
	MOVO 976(AX), X13
	MOVO 992(AX), X7
	MOVO X12, X4
	MOVO X0, X8
	MOVO X13, X2
	MOVO X7, X5
	PSUBQ X3, X12
	PSLLQ $9, X12
	PSUBQ X4, X0
	PSLLQ $20, X0
	PSUBQ X8, X13
	PSLLQ $31, X13
	PSUBQ X2, X7
	PSLLQ $42, X7
	MOVO 1008(AX), X9
	MOVO X9, X11
	PSUBQ X5, X9
	PSLLQ $53, X9
	POR X10, X12
	POR X0, X13
	POR X7, X9
	POR X12, X13
	POR X9, X13
	MOVO X13, 160(BX)
	MOVO X11, 0(DX)
	RET

// func dpack64_12(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_12(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $12, X2
	PSUBQ X5, X3
	PSLLQ $24, X3
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	PSUBQ X6, X7
	PSLLQ $36, X7
	PSUBQ X11, X8
	PSLLQ $48, X8
	PSUBQ X12, X9
	MOVO X9, X15
	PSLLQ $60, X9
	POR X1, X2
	POR X3, X7
	POR X8, X9
	POR X2, X7
	POR X9, X7
	MOVO X7, 0(BX)
	PSRLQ $4, X15
	PSUBQ X13, X10
	PSLLQ $8, X10
	MOVO 112(AX), X0
	MOVO 128(AX), X4
	MOVO 144(AX), X5
	MOVO 160(AX), X6
	MOVO X0, X11
	MOVO X4, X12
	MOVO X5, X1
	MOVO X6, X3
	PSUBQ X14, X0
	PSLLQ $20, X0
	PSUBQ X11, X4
	PSLLQ $32, X4
	PSUBQ X12, X5
	PSLLQ $44, X5
	PSUBQ X1, X6
	MOVO X6, X8
	PSLLQ $56, X6
	POR X15, X10
	POR X0, X4
	POR X5, X6
	POR X10, X4
	POR X6, X4
	MOVO X4, 16(BX)
	PSRLQ $8, X8
	MOVO 176(AX), X2
	MOVO 192(AX), X9
	MOVO 208(AX), X7
	MOVO 224(AX), X13
	MOVO X2, X14
	MOVO X9, X11
	MOVO X7, X12
	MOVO X13, X1
	PSUBQ X3, X2
	PSLLQ $4, X2
	PSUBQ X14, X9
	PSLLQ $16, X9
	PSUBQ X11, X7
	PSLLQ $28, X7
	PSUBQ X12, X13
	PSLLQ $40, X13
	MOVO 240(AX), X15
	MOVO 256(AX), X0
	MOVO 272(AX), X5
	MOVO 288(AX), X10
	MOVO X15, X6
	MOVO X0, X4
	MOVO X5, X3
	MOVO X10, X14
	PSUBQ X1, X15
	PSLLQ $52, X15
	POR X8, X2
	POR X9, X7
	POR X13, X15
	POR X2, X7
	POR X15, X7
	MOVO X7, 32(BX)
	PSUBQ X6, X0
	PSUBQ X4, X5
	PSLLQ $12, X5
	PSUBQ X3, X10
	PSLLQ $24, X10
	MOVO 304(AX), X11
	MOVO 320(AX), X12
	MOVO 336(AX), X1
	MOVO 352(AX), X8
	MOVO X11, X9
	MOVO X12, X13
	MOVO X1, X2
	MOVO X8, X15
	PSUBQ X14, X11
	PSLLQ $36, X11
	PSUBQ X9, X12
	PSLLQ $48, X12
	PSUBQ X13, X1
	MOVO X1, X7
	PSLLQ $60, X1
	POR X0, X5
	POR X10, X11
	POR X12, X1
	POR X5, X11
	POR X1, X11
	MOVO X11, 48(BX)
	PSRLQ $4, X7
	PSUBQ X2, X8
	PSLLQ $8, X8
	MOVO 368(AX), X6
	MOVO 384(AX), X4
	MOVO 400(AX), X3
	MOVO 416(AX), X14
	MOVO X6, X9
	MOVO X4, X13
	MOVO X3, X0
	MOVO X14, X10
	PSUBQ X15, X6
	PSLLQ $20, X6
	PSUBQ X9, X4
	PSLLQ $32, X4
	PSUBQ X13, X3
	PSLLQ $44, X3
	PSUBQ X0, X14
	MOVO X14, X12
	PSLLQ $56, X14
	POR X7, X8
	POR X6, X4
	POR X3, X14
	POR X8, X4
	POR X14, X4
	MOVO X4, 64(BX)
	PSRLQ $8, X12
	MOVO 432(AX), X5
	MOVO 448(AX), X1
	MOVO 464(AX), X11
	MOVO 480(AX), X2
	MOVO X5, X15
	MOVO X1, X9
	MOVO X11, X13
	MOVO X2, X0
	PSUBQ X10, X5
	PSLLQ $4, X5
	PSUBQ X15, X1
	PSLLQ $16, X1
	PSUBQ X9, X11
	PSLLQ $28, X11
	PSUBQ X13, X2
	PSLLQ $40, X2
	MOVO 496(AX), X7
	MOVO 512(AX), X6
	MOVO 528(AX), X3
	MOVO 544(AX), X8
	MOVO X7, X14
	MOVO X6, X4
	MOVO X3, X10
	MOVO X8, X15
	PSUBQ X0, X7
	PSLLQ $52, X7
	POR X12, X5
	POR X1, X11
	POR X2, X7
	POR X5, X11
	POR X7, X11
	MOVO X11, 80(BX)
	PSUBQ X14, X6
	PSUBQ X4, X3
	PSLLQ $12, X3
	PSUBQ X10, X8
	PSLLQ $24, X8
	MOVO 560(AX), X9
	MOVO 576(AX), X13
	MOVO 592(AX), X0
	MOVO 608(AX), X12
	MOVO X9, X1
	MOVO X13, X2
	MOVO X0, X5
	MOVO X12, X7
	PSUBQ X15, X9
	PSLLQ $36, X9
	PSUBQ X1, X13
	PSLLQ $48, X13
	PSUBQ X2, X0
	MOVO X0, X11
	PSLLQ $60, X0
	POR X6, X3
	POR X8, X9
	POR X13, X0
	POR X3, X9
	POR X0, X9
	MOVO X9, 96(BX)
	PSRLQ $4, X11
	PSUBQ X5, X12
	PSLLQ $8, X12
	MOVO 624(AX), X14
	MOVO 640(AX), X4
	MOVO 656(AX), X10
	MOVO 672(AX), X15
	MOVO X14, X1
	MOVO X4, X2
	MOVO X10, X6
	MOVO X15, X8
	PSUBQ X7, X14
	PSLLQ $20, X14
	PSUBQ X1, X4
	PSLLQ $32, X4
	PSUBQ X2, X10
	PSLLQ $44, X10
	PSUBQ X6, X15
	MOVO X15, X13
	PSLLQ $56, X15
	POR X11, X12
	POR X14, X4
	POR X10, X15
	POR X12, X4
	POR X15, X4
	MOVO X4, 112(BX)
	PSRLQ $8, X13
	MOVO 688(AX), X3
	MOVO 704(AX), X0
	MOVO 720(AX), X9
	MOVO 736(AX), X5
	MOVO X3, X7
	MOVO X0, X1
	MOVO X9, X2
	MOVO X5, X6
	PSUBQ X8, X3
	PSLLQ $4, X3
	PSUBQ X7, X0
	PSLLQ $16, X0
	PSUBQ X1, X9
	PSLLQ $28, X9
	PSUBQ X2, X5
	PSLLQ $40, X5
	MOVO 752(AX), X11
	MOVO 768(AX), X14
	MOVO 784(AX), X10
	MOVO 800(AX), X12
	MOVO X11, X15
	MOVO X14, X4
	MOVO X10, X8
	MOVO X12, X7
	PSUBQ X6, X11
	PSLLQ $52, X11
	POR X13, X3
	POR X0, X9
	POR X5, X11
	POR X3, X9
	POR X11, X9
	MOVO X9, 128(BX)
	PSUBQ X15, X14
	PSUBQ X4, X10
	PSLLQ $12, X10
	PSUBQ X8, X12
	PSLLQ $24, X12
	MOVO 816(AX), X1
	MOVO 832(AX), X2
	MOVO 848(AX), X6
	MOVO 864(AX), X13
	MOVO X1, X0
	MOVO X2, X5
	MOVO X6, X3
	MOVO X13, X11
	PSUBQ X7, X1
	PSLLQ $36, X1
	PSUBQ X0, X2
	PSLLQ $48, X2
	PSUBQ X5, X6
	MOVO X6, X9
	PSLLQ $60, X6
	POR X14, X10
	POR X12, X1
	POR X2, X6
	POR X10, X1
	POR X6, X1
	MOVO X1, 144(BX)
	PSRLQ $4, X9
	PSUBQ X3, X13
	PSLLQ $8, X13
	MOVO 880(AX), X15
	MOVO 896(AX), X4
	MOVO 912(AX), X8
	MOVO 928(AX), X7
	MOVO X15, X0
	MOVO X4, X5
	MOVO X8, X14
	MOVO X7, X12
	PSUBQ X11, X15
	PSLLQ $20, X15
	PSUBQ X0, X4
	PSLLQ $32, X4
	PSUBQ X5, X8
	PSLLQ $44, X8
	PSUBQ X14, X7
	MOVO X7, X2
	PSLLQ $56, X7
	POR X9, X13
	POR X15, X4
	POR X8, X7
	POR X13, X4
	POR X7, X4
	MOVO X4, 160(BX)
	PSRLQ $8, X2
	MOVO 944(AX), X10
	MOVO 960(AX), X6
	MOVO 976(AX), X1
	MOVO 992(AX), X3
	MOVO X10, X11
	MOVO X6, X0
	MOVO X1, X5
	MOVO X3, X14
	PSUBQ X12, X10
	PSLLQ $4, X10
	PSUBQ X11, X6
	PSLLQ $16, X6
	PSUBQ X0, X1
	PSLLQ $28, X1
	PSUBQ X5, X3
	PSLLQ $40, X3
	MOVO 1008(AX), X9
	MOVO X9, X15
	PSUBQ X14, X9
	PSLLQ $52, X9
	POR X2, X10
	POR X6, X1
	POR X3, X9
	POR X10, X1
	POR X9, X1
	MOVO X1, 176(BX)
	MOVO X15, 0(DX)
	RET

// func dpack64_13(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_13(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $13, X2
	PSUBQ X5, X3
	PSLLQ $26, X3
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	PSUBQ X6, X7
	PSLLQ $39, X7
	PSUBQ X11, X8
	MOVO X8, X15
	PSLLQ $52, X8
	POR X1, X2
	POR X3, X7
	POR X8, X2
	POR X7, X2
	MOVO X2, 0(BX)
	PSRLQ $12, X15
	PSUBQ X12, X9
	PSLLQ $1, X9
	PSUBQ X13, X10
	PSLLQ $14, X10
	MOVO 112(AX), X0
	MOVO 128(AX), X4
	MOVO 144(AX), X5
	MOVO 160(AX), X6
	MOVO X0, X11
	MOVO X4, X1
	MOVO X5, X3
	MOVO X6, X8
	PSUBQ X14, X0
	PSLLQ $27, X0
	PSUBQ X11, X4
	PSLLQ $40, X4
	PSUBQ X1, X5
	MOVO X5, X7
	PSLLQ $53, X5
	POR X15, X9
	POR X10, X0
	POR X4, X5
	POR X9, X0
	POR X5, X0
	MOVO X0, 16(BX)
	PSRLQ $11, X7
	PSUBQ X3, X6
	PSLLQ $2, X6
	MOVO 176(AX), X2
	MOVO 192(AX), X12
	MOVO 208(AX), X13
	MOVO 224(AX), X14
	MOVO X2, X11
	MOVO X12, X1
	MOVO X13, X15
	MOVO X14, X10
	PSUBQ X8, X2
	PSLLQ $15, X2
	PSUBQ X11, X12
	PSLLQ $28, X12
	PSUBQ X1, X13
	PSLLQ $41, X13
	PSUBQ X15, X14
	MOVO X14, X4
	PSLLQ $54, X14
	POR X7, X6
	POR X2, X12
	POR X13, X14
	POR X6, X12
	POR X14, X12
	MOVO X12, 32(BX)
	PSRLQ $10, X4
	MOVO 240(AX), X9
	MOVO 256(AX), X5
	MOVO 272(AX), X0
	MOVO 288(AX), X3
	MOVO X9, X8
	MOVO X5, X11
	MOVO X0, X1
	MOVO X3, X15
	PSUBQ X10, X9
	PSLLQ $3, X9
	PSUBQ X8, X5
	PSLLQ $16, X5
	PSUBQ X11, X0
	PSLLQ $29, X0
	PSUBQ X1, X3
	PSLLQ $42, X3
	MOVO 304(AX), X7
	MOVO 320(AX), X2
	MOVO 336(AX), X13
	MOVO 352(AX), X6
	MOVO X7, X14
	MOVO X2, X12
	MOVO X13, X10
	MOVO X6, X8
	PSUBQ X15, X7
	MOVO X7, X11
	PSLLQ $55, X7
	POR X4, X9
	POR X5, X0
	POR X3, X7
	POR X9, X0
	POR X7, X0
	MOVO X0, 48(BX)
	PSRLQ $9, X11
	PSUBQ X14, X2
	PSLLQ $4, X2
	PSUBQ X12, X13
	PSLLQ $17, X13
	PSUBQ X10, X6
	PSLLQ $30, X6
	MOVO 368(AX), X1
	MOVO 384(AX), X15
	MOVO 400(AX), X4
	MOVO 416(AX), X5
	MOVO X1, X3
	MOVO X15, X9
	MOVO X4, X7
	MOVO X5, X0
	PSUBQ X8, X1
	PSLLQ $43, X1
	PSUBQ X3, X15
	MOVO X15, X14
	PSLLQ $56, X15
	POR X11, X2
	POR X13, X6
	POR X1, X15
	POR X2, X6
	POR X15, X6
	MOVO X6, 64(BX)
	PSRLQ $8, X14
	PSUBQ X9, X4
	PSLLQ $5, X4
	PSUBQ X7, X5
	PSLLQ $18, X5
	MOVO 432(AX), X12
	MOVO 448(AX), X10
	MOVO 464(AX), X8
	MOVO 480(AX), X3
	MOVO X12, X11
	MOVO X10, X13
	MOVO X8, X1
	MOVO X3, X2
	PSUBQ X0, X12
	PSLLQ $31, X12
	PSUBQ X11, X10
	PSLLQ $44, X10
	PSUBQ X13, X8
	MOVO X8, X15
	PSLLQ $57, X8
	POR X14, X4
	POR X5, X12
	POR X10, X8
	POR X4, X12
	POR X8, X12
	MOVO X12, 80(BX)
	PSRLQ $7, X15
	PSUBQ X1, X3
	PSLLQ $6, X3
	MOVO 496(AX), X6
	MOVO 512(AX), X9
	MOVO 528(AX), X7
	MOVO 544(AX), X0
	MOVO X6, X11
	MOVO X9, X13
	MOVO X7, X14
	MOVO X0, X5
	PSUBQ X2, X6
	PSLLQ $19, X6
	PSUBQ X11, X9
	PSLLQ $32, X9
	PSUBQ X13, X7
	PSLLQ $45, X7
	PSUBQ X14, X0
	MOVO X0, X10
	PSLLQ $58, X0
	POR X15, X3
	POR X6, X9
	POR X7, X0
	POR X3, X9
	POR X0, X9
	MOVO X9, 96(BX)
	PSRLQ $6, X10
	MOVO 560(AX), X4
	MOVO 576(AX), X8
	MOVO 592(AX), X12
	MOVO 608(AX), X1
	MOVO X4, X2
	MOVO X8, X11
	MOVO X12, X13
	MOVO X1, X14
	PSUBQ X5, X4
	PSLLQ $7, X4
	PSUBQ X2, X8
	PSLLQ $20, X8
	PSUBQ X11, X12
	PSLLQ $33, X12
	PSUBQ X13, X1
	PSLLQ $46, X1
	MOVO 624(AX), X15
	MOVO 640(AX), X6
	MOVO 656(AX), X7
	MOVO 672(AX), X3
	MOVO X15, X0
	MOVO X6, X9
	MOVO X7, X5
	MOVO X3, X2
	PSUBQ X14, X15
	MOVO X15, X11
	PSLLQ $59, X15
	POR X10, X4
	POR X8, X12
	POR X1, X15
	POR X4, X12
	POR X15, X12
	MOVO X12, 112(BX)
	PSRLQ $5, X11
	PSUBQ X0, X6
	PSLLQ $8, X6
	PSUBQ X9, X7
	PSLLQ $21, X7
	PSUBQ X5, X3
	PSLLQ $34, X3
	MOVO 688(AX), X13
	MOVO 704(AX), X14
	MOVO 720(AX), X10
	MOVO 736(AX), X8
	MOVO X13, X1
	MOVO X14, X4
	MOVO X10, X15
	MOVO X8, X12
	PSUBQ X2, X13
	PSLLQ $47, X13
	PSUBQ X1, X14
	MOVO X14, X0
	PSLLQ $60, X14
	POR X11, X6
	POR X7, X3
	POR X13, X14
	POR X6, X3
	POR X14, X3
	MOVO X3, 128(BX)
	PSRLQ $4, X0
	PSUBQ X4, X10
	PSLLQ $9, X10
	PSUBQ X15, X8
	PSLLQ $22, X8
	MOVO 752(AX), X9
	MOVO 768(AX), X5
	MOVO 784(AX), X2
	MOVO 800(AX), X1
	MOVO X9, X11
	MOVO X5, X7
	MOVO X2, X13
	MOVO X1, X6
	PSUBQ X12, X9
	PSLLQ $35, X9
	PSUBQ X11, X5
	PSLLQ $48, X5
	PSUBQ X7, X2
	MOVO X2, X14
	PSLLQ $61, X2
	POR X0, X10
	POR X8, X9
	POR X5, X2
	POR X10, X9
	POR X2, X9
	MOVO X9, 144(BX)
	PSRLQ $3, X14
	PSUBQ X13, X1
	PSLLQ $10, X1
	MOVO 816(AX), X3
	MOVO 832(AX), X4
	MOVO 848(AX), X15
	MOVO 864(AX), X12
	MOVO X3, X11
	MOVO X4, X7
	MOVO X15, X0
	MOVO X12, X8
	PSUBQ X6, X3
	PSLLQ $23, X3
	PSUBQ X11, X4
	PSLLQ $36, X4
	PSUBQ X7, X15
	PSLLQ $49, X15
	PSUBQ X0, X12
	MOVO X12, X5
	PSLLQ $62, X12
	POR X14, X1
	POR X3, X4
	POR X15, X12
	POR X1, X4
	POR X12, X4
	MOVO X4, 160(BX)
	PSRLQ $2, X5
	MOVO 880(AX), X10
	MOVO 896(AX), X2
	MOVO 912(AX), X9
	MOVO 928(AX), X13
	MOVO X10, X6
	MOVO X2, X11
	MOVO X9, X7
	MOVO X13, X0
	PSUBQ X8, X10
	PSLLQ $11, X10
	PSUBQ X6, X2
	PSLLQ $24, X2
	PSUBQ X11, X9
	PSLLQ $37, X9
	PSUBQ X7, X13
	PSLLQ $50, X13
	MOVO 944(AX), X14
	MOVO 960(AX), X3
	MOVO 976(AX), X15
	MOVO 992(AX), X1
	MOVO X14, X12
	MOVO X3, X4
	MOVO X15, X8
	MOVO X1, X6
	PSUBQ X0, X14
	MOVO X14, X11
	PSLLQ $63, X14
	POR X5, X10
	POR X2, X9
	POR X13, X14
	POR X10, X9
	POR X14, X9
	MOVO X9, 176(BX)
	PSRLQ $1, X11
	PSUBQ X12, X3
	PSLLQ $12, X3
	PSUBQ X4, X15
	PSLLQ $25, X15
	PSUBQ X8, X1
	PSLLQ $38, X1
	MOVO 1008(AX), X7
	MOVO X7, X0
	PSUBQ X6, X7
	PSLLQ $51, X7
	POR X11, X3
	POR X15, X1
	POR X7, X3
	POR X1, X3
	MOVO X3, 192(BX)
	MOVO X0, 0(DX)
	RET

// func dpack64_14(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_14(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $14, X2
	PSUBQ X5, X3
	PSLLQ $28, X3
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	PSUBQ X6, X7
	PSLLQ $42, X7
	PSUBQ X11, X8
	MOVO X8, X15
	PSLLQ $56, X8
	POR X1, X2
	POR X3, X7
	POR X8, X2
	POR X7, X2
	MOVO X2, 0(BX)
	PSRLQ $8, X15
	PSUBQ X12, X9
	PSLLQ $6, X9
	PSUBQ X13, X10
	PSLLQ $20, X10
	MOVO 112(AX), X0
	MOVO 128(AX), X4
	MOVO 144(AX), X5
	MOVO 160(AX), X6
	MOVO X0, X11
	MOVO X4, X1
	MOVO X5, X3
	MOVO X6, X8
	PSUBQ X14, X0
	PSLLQ $34, X0
	PSUBQ X11, X4
	PSLLQ $48, X4
	PSUBQ X1, X5
	MOVO X5, X7
	PSLLQ $62, X5
	POR X15, X9
	POR X10, X0
	POR X4, X5
	POR X9, X0
	POR X5, X0
	MOVO X0, 16(BX)
	PSRLQ $2, X7
	PSUBQ X3, X6
	PSLLQ $12, X6
	MOVO 176(AX), X2
	MOVO 192(AX), X12
	MOVO 208(AX), X13
	MOVO 224(AX), X14
	MOVO X2, X11
	MOVO X12, X1
	MOVO X13, X15
	MOVO X14, X10
	PSUBQ X8, X2
	PSLLQ $26, X2
	PSUBQ X11, X12
	PSLLQ $40, X12
	PSUBQ X1, X13
	MOVO X13, X4
	PSLLQ $54, X13
	POR X7, X6
	POR X2, X12
	POR X13, X6
	POR X12, X6
	MOVO X6, 32(BX)
	PSRLQ $10, X4
	PSUBQ X15, X14
	PSLLQ $4, X14
	MOVO 240(AX), X9
	MOVO 256(AX), X5
	MOVO 272(AX), X0
	MOVO 288(AX), X3
	MOVO X9, X8
	MOVO X5, X11
	MOVO X0, X1
	MOVO X3, X7
	PSUBQ X10, X9
	PSLLQ $18, X9
	PSUBQ X8, X5
	PSLLQ $32, X5
	PSUBQ X11, X0
	PSLLQ $46, X0
	PSUBQ X1, X3
	MOVO X3, X2
	PSLLQ $60, X3
	POR X4, X14
	POR X9, X5
	POR X0, X3
	POR X14, X5
	POR X3, X5
	MOVO X5, 48(BX)
	PSRLQ $4, X2
	MOVO 304(AX), X13
	MOVO 320(AX), X12
	MOVO 336(AX), X6
	MOVO 352(AX), X15
	MOVO X13, X10
	MOVO X12, X8
	MOVO X6, X11
	MOVO X15, X1
	PSUBQ X7, X13
	PSLLQ $10, X13
	PSUBQ X10, X12
	PSLLQ $24, X12
	PSUBQ X8, X6
	PSLLQ $38, X6
	PSUBQ X11, X15
	MOVO X15, X4
	PSLLQ $52, X15
	POR X2, X13
	POR X12, X6
	POR X15, X13
	POR X6, X13
	MOVO X13, 64(BX)
	PSRLQ $12, X4
	MOVO 368(AX), X9
	MOVO 384(AX), X0
	MOVO 400(AX), X14
	MOVO 416(AX), X3
	MOVO X9, X5
	MOVO X0, X7
	MOVO X14, X10
	MOVO X3, X8
	PSUBQ X1, X9
	PSLLQ $2, X9
	PSUBQ X5, X0
	PSLLQ $16, X0
	PSUBQ X7, X14
	PSLLQ $30, X14
	PSUBQ X10, X3
	PSLLQ $44, X3
	MOVO 432(AX), X11
	MOVO 448(AX), X2
	MOVO 464(AX), X12
	MOVO 480(AX), X15
	MOVO X11, X6
	MOVO X2, X13
	MOVO X12, X1
	MOVO X15, X5
	PSUBQ X8, X11
	MOVO X11, X7
	PSLLQ $58, X11
	POR X4, X9
	POR X0, X14
	POR X3, X11
	POR X9, X14
	POR X11, X14
	MOVO X14, 80(BX)
	PSRLQ $6, X7
	PSUBQ X6, X2
	PSLLQ $8, X2
	PSUBQ X13, X12
	PSLLQ $22, X12
	PSUBQ X1, X15
	PSLLQ $36, X15
	MOVO 496(AX), X10
	MOVO 512(AX), X8
	MOVO 528(AX), X4
	MOVO 544(AX), X0
	MOVO X10, X3
	MOVO X8, X9
	MOVO X4, X11
	MOVO X0, X14
	PSUBQ X5, X10
	PSLLQ $50, X10
	POR X7, X2
	POR X12, X15
	POR X10, X2
	POR X15, X2
	MOVO X2, 96(BX)
	PSUBQ X3, X8
	PSUBQ X9, X4
	PSLLQ $14, X4
	PSUBQ X11, X0
	PSLLQ $28, X0
	MOVO 560(AX), X6
	MOVO 576(AX), X13
	MOVO 592(AX), X1
	MOVO 608(AX), X5
	MOVO X6, X7
	MOVO X13, X12
	MOVO X1, X10
	MOVO X5, X15
	PSUBQ X14, X6
	PSLLQ $42, X6
	PSUBQ X7, X13
	MOVO X13, X2
	PSLLQ $56, X13
	POR X8, X4
	POR X0, X6
	POR X13, X4
	POR X6, X4
	MOVO X4, 112(BX)
	PSRLQ $8, X2
	PSUBQ X12, X1
	PSLLQ $6, X1
	PSUBQ X10, X5
	PSLLQ $20, X5
	MOVO 624(AX), X3
	MOVO 640(AX), X9
	MOVO 656(AX), X11
	MOVO 672(AX), X14
	MOVO X3, X7
	MOVO X9, X8
	MOVO X11, X0
	MOVO X14, X13
	PSUBQ X15, X3
	PSLLQ $34, X3
	PSUBQ X7, X9
	PSLLQ $48, X9
	PSUBQ X8, X11
	MOVO X11, X6
	PSLLQ $62, X11
	POR X2, X1
	POR X5, X3
	POR X9, X11
	POR X1, X3
	POR X11, X3
	MOVO X3, 128(BX)
	PSRLQ $2, X6
	PSUBQ X0, X14
	PSLLQ $12, X14
	MOVO 688(AX), X4
	MOVO 704(AX), X12
	MOVO 720(AX), X10
	MOVO 736(AX), X15
	MOVO X4, X7
	MOVO X12, X8
	MOVO X10, X2
	MOVO X15, X5
	PSUBQ X13, X4
	PSLLQ $26, X4
	PSUBQ X7, X12
	PSLLQ $40, X12
	PSUBQ X8, X10
	MOVO X10, X9
	PSLLQ $54, X10
	POR X6, X14
	POR X4, X12
	POR X10, X14
	POR X12, X14
	MOVO X14, 144(BX)
	PSRLQ $10, X9
	PSUBQ X2, X15
	PSLLQ $4, X15
	MOVO 752(AX), X1
	MOVO 768(AX), X11
	MOVO 784(AX), X3
	MOVO 800(AX), X0
	MOVO X1, X13
	MOVO X11, X7
	MOVO X3, X8
	MOVO X0, X6
	PSUBQ X5, X1
	PSLLQ $18, X1
	PSUBQ X13, X11
	PSLLQ $32, X11
	PSUBQ X7, X3
	PSLLQ $46, X3
	PSUBQ X8, X0
	MOVO X0, X4
	PSLLQ $60, X0
	POR X9, X15
	POR X1, X11
	POR X3, X0
	POR X15, X11
	POR X0, X11
	MOVO X11, 160(BX)
	PSRLQ $4, X4
	MOVO 816(AX), X10
	MOVO 832(AX), X12
	MOVO 848(AX), X14
	MOVO 864(AX), X2
	MOVO X10, X5
	MOVO X12, X13
	MOVO X14, X7
	MOVO X2, X8
	PSUBQ X6, X10
	PSLLQ $10, X10
	PSUBQ X5, X12
	PSLLQ $24, X12
	PSUBQ X13, X14
	PSLLQ $38, X14
	PSUBQ X7, X2
	MOVO X2, X9
	PSLLQ $52, X2
	POR X4, X10
	POR X12, X14
	POR X2, X10
	POR X14, X10
	MOVO X10, 176(BX)
	PSRLQ $12, X9
	MOVO 880(AX), X1
	MOVO 896(AX), X3
	MOVO 912(AX), X15
	MOVO 928(AX), X0
	MOVO X1, X11
	MOVO X3, X6
	MOVO X15, X5
	MOVO X0, X13
	PSUBQ X8, X1
	PSLLQ $2, X1
	PSUBQ X11, X3
	PSLLQ $16, X3
	PSUBQ X6, X15
	PSLLQ $30, X15
	PSUBQ X5, X0
	PSLLQ $44, X0
	MOVO 944(AX), X7
	MOVO 960(AX), X4
	MOVO 976(AX), X12
	MOVO 992(AX), X2
	MOVO X7, X14
	MOVO X4, X10
	MOVO X12, X8
	MOVO X2, X11
	PSUBQ X13, X7
	MOVO X7, X6
	PSLLQ $58, X7
	POR X9, X1
	POR X3, X15
	POR X0, X7
	POR X1, X15
	POR X7, X15
	MOVO X15, 192(BX)
	PSRLQ $6, X6
	PSUBQ X14, X4
	PSLLQ $8, X4
	PSUBQ X10, X12
	PSLLQ $22, X12
	PSUBQ X8, X2
	PSLLQ $36, X2
	MOVO 1008(AX), X5
	MOVO X5, X13
	PSUBQ X11, X5
	PSLLQ $50, X5
	POR X6, X4
	POR X12, X2
	POR X5, X4
	POR X2, X4
	MOVO X4, 208(BX)
	MOVO X13, 0(DX)
	RET

// func dpack64_15(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_15(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $15, X2
	PSUBQ X5, X3
	PSLLQ $30, X3
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	PSUBQ X6, X7
	PSLLQ $45, X7
	PSUBQ X11, X8
	MOVO X8, X15
	PSLLQ $60, X8
	POR X1, X2
	POR X3, X7
	POR X8, X2
	POR X7, X2
	MOVO X2, 0(BX)
	PSRLQ $4, X15
	PSUBQ X12, X9
	PSLLQ $11, X9
	PSUBQ X13, X10
	PSLLQ $26, X10
	MOVO 112(AX), X0
	MOVO 128(AX), X4
	MOVO 144(AX), X5
	MOVO 160(AX), X6
	MOVO X0, X11
	MOVO X4, X1
	MOVO X5, X3
	MOVO X6, X8
	PSUBQ X14, X0
	PSLLQ $41, X0
	PSUBQ X11, X4
	MOVO X4, X7
	PSLLQ $56, X4
	POR X15, X9
	POR X10, X0
	POR X4, X9
	POR X0, X9
	MOVO X9, 16(BX)
	PSRLQ $8, X7
	PSUBQ X1, X5
	PSLLQ $7, X5
	PSUBQ X3, X6
	PSLLQ $22, X6
	MOVO 176(AX), X2
	MOVO 192(AX), X12
	MOVO 208(AX), X13
	MOVO 224(AX), X14
	MOVO X2, X11
	MOVO X12, X15
	MOVO X13, X10
	MOVO X14, X4
	PSUBQ X8, X2
	PSLLQ $37, X2
	PSUBQ X11, X12
	MOVO X12, X0
	PSLLQ $52, X12
	POR X7, X5
	POR X6, X2
	POR X12, X5
	POR X2, X5
	MOVO X5, 32(BX)
	PSRLQ $12, X0
	PSUBQ X15, X13
	PSLLQ $3, X13
	PSUBQ X10, X14
	PSLLQ $18, X14
	MOVO 240(AX), X9
	MOVO 256(AX), X1
	MOVO 272(AX), X3
	MOVO 288(AX), X8
	MOVO X9, X11
	MOVO X1, X7
	MOVO X3, X6
	MOVO X8, X12
	PSUBQ X4, X9
	PSLLQ $33, X9
	PSUBQ X11, X1
	PSLLQ $48, X1
	PSUBQ X7, X3
	MOVO X3, X2
	PSLLQ $63, X3
	POR X0, X13
	POR X14, X9
	POR X1, X3
	POR X13, X9
	POR X3, X9
	MOVO X9, 48(BX)
	PSRLQ $1, X2
	PSUBQ X6, X8
	PSLLQ $14, X8
	MOVO 304(AX), X5
	MOVO 320(AX), X15
	MOVO 336(AX), X10
	MOVO 352(AX), X4
	MOVO X5, X11
	MOVO X15, X7
	MOVO X10, X0
	MOVO X4, X14
	PSUBQ X12, X5
	PSLLQ $29, X5
	PSUBQ X11, X15
	PSLLQ $44, X15
	PSUBQ X7, X10
	MOVO X10, X1
	PSLLQ $59, X10
	POR X2, X8
	POR X5, X15
	POR X10, X8
	POR X15, X8
	MOVO X8, 64(BX)
	PSRLQ $5, X1
	PSUBQ X0, X4
	PSLLQ $10, X4
	MOVO 368(AX), X13
	MOVO 384(AX), X3
	MOVO 400(AX), X9
	MOVO 416(AX), X6
	MOVO X13, X12
	MOVO X3, X11
	MOVO X9, X7
	MOVO X6, X2
	PSUBQ X14, X13
	PSLLQ $25, X13
	PSUBQ X12, X3
	PSLLQ $40, X3
	PSUBQ X11, X9
	MOVO X9, X5
	PSLLQ $55, X9
	POR X1, X4
	POR X13, X3
	POR X9, X4
	POR X3, X4
	MOVO X4, 80(BX)
	PSRLQ $9, X5
	PSUBQ X7, X6
	PSLLQ $6, X6
	MOVO 432(AX), X10
	MOVO 448(AX), X15
	MOVO 464(AX), X8
	MOVO 480(AX), X0
	MOVO X10, X14
	MOVO X15, X12
	MOVO X8, X11
	MOVO X0, X1
	PSUBQ X2, X10
	PSLLQ $21, X10
	PSUBQ X14, X15
	PSLLQ $36, X15
	PSUBQ X12, X8
	MOVO X8, X13
	PSLLQ $51, X8
	POR X5, X6
	POR X10, X15
	POR X8, X6
	POR X15, X6
	MOVO X6, 96(BX)
	PSRLQ $13, X13
	PSUBQ X11, X0
	PSLLQ $2, X0
	MOVO 496(AX), X9
	MOVO 512(AX), X3
	MOVO 528(AX), X4
	MOVO 544(AX), X7
	MOVO X9, X2
	MOVO X3, X14
	MOVO X4, X12
	MOVO X7, X5
	PSUBQ X1, X9
	PSLLQ $17, X9
	PSUBQ X2, X3
	PSLLQ $32, X3
	PSUBQ X14, X4
	PSLLQ $47, X4
	PSUBQ X12, X7
	MOVO X7, X10
	PSLLQ $62, X7
	POR X13, X0
	POR X9, X3
	POR X4, X7
	POR X0, X3
	POR X7, X3
	MOVO X3, 112(BX)
	PSRLQ $2, X10
	MOVO 560(AX), X8
	MOVO 576(AX), X15
	MOVO 592(AX), X6
	MOVO 608(AX), X11
	MOVO X8, X1
	MOVO X15, X2
	MOVO X6, X14
	MOVO X11, X12
	PSUBQ X5, X8
	PSLLQ $13, X8
	PSUBQ X1, X15
	PSLLQ $28, X15
	PSUBQ X2, X6
	PSLLQ $43, X6
	PSUBQ X14, X11
	MOVO X11, X13
	PSLLQ $58, X11
	POR X10, X8
	POR X15, X6
	POR X11, X8
	POR X6, X8
	MOVO X8, 128(BX)
	PSRLQ $6, X13
	MOVO 624(AX), X9
	MOVO 640(AX), X4
	MOVO 656(AX), X0
	MOVO 672(AX), X7
	MOVO X9, X3
	MOVO X4, X5
	MOVO X0, X1
	MOVO X7, X2
	PSUBQ X12, X9
	PSLLQ $9, X9
	PSUBQ X3, X4
	PSLLQ $24, X4
	PSUBQ X5, X0
	PSLLQ $39, X0
	PSUBQ X1, X7
	MOVO X7, X14
	PSLLQ $54, X7
	POR X13, X9
	POR X4, X0
	POR X7, X9
	POR X0, X9
	MOVO X9, 144(BX)
	PSRLQ $10, X14
	MOVO 688(AX), X10
	MOVO 704(AX), X15
	MOVO 720(AX), X11
	MOVO 736(AX), X6
	MOVO X10, X8
	MOVO X15, X12
	MOVO X11, X3
	MOVO X6, X5
	PSUBQ X2, X10
	PSLLQ $5, X10
	PSUBQ X8, X15
	PSLLQ $20, X15
	PSUBQ X12, X11
	PSLLQ $35, X11
	PSUBQ X3, X6
	MOVO X6, X1
	PSLLQ $50, X6
	POR X14, X10
	POR X15, X11
	POR X6, X10
	POR X11, X10
	MOVO X10, 160(BX)
	PSRLQ $14, X1
	MOVO 752(AX), X13
	MOVO 768(AX), X4
	MOVO 784(AX), X7
	MOVO 800(AX), X0
	MOVO X13, X9
	MOVO X4, X2
	MOVO X7, X8
	MOVO X0, X12
	PSUBQ X5, X13
	PSLLQ $1, X13
	PSUBQ X9, X4
	PSLLQ $16, X4
	PSUBQ X2, X7
	PSLLQ $31, X7
	PSUBQ X8, X0
	PSLLQ $46, X0
	MOVO 816(AX), X3
	MOVO 832(AX), X14
	MOVO 848(AX), X15
	MOVO 864(AX), X6
	MOVO X3, X11
	MOVO X14, X10
	MOVO X15, X5
	MOVO X6, X9
	PSUBQ X12, X3
	MOVO X3, X2
	PSLLQ $61, X3
	POR X1, X13
	POR X4, X7
	POR X0, X3
	POR X13, X7
	POR X3, X7
	MOVO X7, 176(BX)
	PSRLQ $3, X2
	PSUBQ X11, X14
	PSLLQ $12, X14
	PSUBQ X10, X15
	PSLLQ $27, X15
	PSUBQ X5, X6
	PSLLQ $42, X6
	MOVO 880(AX), X8
	MOVO 896(AX), X12
	MOVO 912(AX), X1
	MOVO 928(AX), X4
	MOVO X8, X0
	MOVO X12, X13
	MOVO X1, X3
	MOVO X4, X7
	PSUBQ X9, X8
	MOVO X8, X11
	PSLLQ $57, X8
	POR X2, X14
	POR X15, X6
	POR X8, X14
	POR X6, X14
	MOVO X14, 192(BX)
	PSRLQ $7, X11
	PSUBQ X0, X12
	PSLLQ $8, X12
	PSUBQ X13, X1
	PSLLQ $23, X1
	PSUBQ X3, X4
	PSLLQ $38, X4
	MOVO 944(AX), X10
	MOVO 960(AX), X5
	MOVO 976(AX), X9
	MOVO 992(AX), X2
	MOVO X10, X15
	MOVO X5, X8
	MOVO X9, X6
	MOVO X2, X14
	PSUBQ X7, X10
	MOVO X10, X0
	PSLLQ $53, X10
	POR X11, X12
	POR X1, X4
	POR X10, X12
	POR X4, X12
	MOVO X12, 208(BX)
	PSRLQ $11, X0
	PSUBQ X15, X5
	PSLLQ $4, X5
	PSUBQ X8, X9
	PSLLQ $19, X9
	PSUBQ X6, X2
	PSLLQ $34, X2
	MOVO 1008(AX), X13
	MOVO X13, X3
	PSUBQ X14, X13
	PSLLQ $49, X13
	POR X0, X5
	POR X9, X2
	POR X13, X5
	POR X2, X5
	MOVO X5, 224(BX)
	MOVO X3, 0(DX)
	RET

// func dpack64_16(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_16(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $16, X2
	PSUBQ X5, X3
	PSLLQ $32, X3
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	PSUBQ X6, X7
	PSLLQ $48, X7
	POR X1, X2
	POR X3, X7
	POR X2, X7
	MOVO X7, 0(BX)
	PSUBQ X11, X8
	PSUBQ X12, X9
	PSLLQ $16, X9
	PSUBQ X13, X10
	PSLLQ $32, X10
	MOVO 112(AX), X15
	MOVO 128(AX), X0
	MOVO 144(AX), X4
	MOVO 160(AX), X5
	MOVO X15, X6
	MOVO X0, X1
	MOVO X4, X3
	MOVO X5, X2
	PSUBQ X14, X15
	PSLLQ $48, X15
	POR X8, X9
	POR X10, X15
	POR X9, X15
	MOVO X15, 16(BX)
	PSUBQ X6, X0
	PSUBQ X1, X4
	PSLLQ $16, X4
	PSUBQ X3, X5
	PSLLQ $32, X5
	MOVO 176(AX), X7
	MOVO 192(AX), X11
	MOVO 208(AX), X12
	MOVO 224(AX), X13
	MOVO X7, X14
	MOVO X11, X8
	MOVO X12, X10
	MOVO X13, X9
	PSUBQ X2, X7
	PSLLQ $48, X7
	POR X0, X4
	POR X5, X7
	POR X4, X7
	MOVO X7, 32(BX)
	PSUBQ X14, X11
	PSUBQ X8, X12
	PSLLQ $16, X12
	PSUBQ X10, X13
	PSLLQ $32, X13
	MOVO 240(AX), X15
	MOVO 256(AX), X6
	MOVO 272(AX), X1
	MOVO 288(AX), X3
	MOVO X15, X2
	MOVO X6, X0
	MOVO X1, X5
	MOVO X3, X4
	PSUBQ X9, X15
	PSLLQ $48, X15
	POR X11, X12
	POR X13, X15
	POR X12, X15
	MOVO X15, 48(BX)
	PSUBQ X2, X6
	PSUBQ X0, X1
	PSLLQ $16, X1
	PSUBQ X5, X3
	PSLLQ $32, X3
	MOVO 304(AX), X7
	MOVO 320(AX), X14
	MOVO 336(AX), X8
	MOVO 352(AX), X10
	MOVO X7, X9
	MOVO X14, X11
	MOVO X8, X13
	MOVO X10, X12
	PSUBQ X4, X7
	PSLLQ $48, X7
	POR X6, X1
	POR X3, X7
	POR X1, X7
	MOVO X7, 64(BX)
	PSUBQ X9, X14
	PSUBQ X11, X8
	PSLLQ $16, X8
	PSUBQ X13, X10
	PSLLQ $32, X10
	MOVO 368(AX), X15
	MOVO 384(AX), X2
	MOVO 400(AX), X0
	MOVO 416(AX), X5
	MOVO X15, X4
	MOVO X2, X6
	MOVO X0, X3
	MOVO X5, X1
	PSUBQ X12, X15
	PSLLQ $48, X15
	POR X14, X8
	POR X10, X15
	POR X8, X15
	MOVO X15, 80(BX)
	PSUBQ X4, X2
	PSUBQ X6, X0
	PSLLQ $16, X0
	PSUBQ X3, X5
	PSLLQ $32, X5
	MOVO 432(AX), X7
	MOVO 448(AX), X9
	MOVO 464(AX), X11
	MOVO 480(AX), X13
	MOVO X7, X12
	MOVO X9, X14
	MOVO X11, X10
	MOVO X13, X8
	PSUBQ X1, X7
	PSLLQ $48, X7
	POR X2, X0
	POR X5, X7
	POR X0, X7
	MOVO X7, 96(BX)
	PSUBQ X12, X9
	PSUBQ X14, X11
	PSLLQ $16, X11
	PSUBQ X10, X13
	PSLLQ $32, X13
	MOVO 496(AX), X15
	MOVO 512(AX), X4
	MOVO 528(AX), X6
	MOVO 544(AX), X3
	MOVO X15, X1
	MOVO X4, X2
	MOVO X6, X5
	MOVO X3, X0
	PSUBQ X8, X15
	PSLLQ $48, X15
	POR X9, X11
	POR X13, X15
	POR X11, X15
	MOVO X15, 112(BX)
	PSUBQ X1, X4
	PSUBQ X2, X6
	PSLLQ $16, X6
	PSUBQ X5, X3
	PSLLQ $32, X3
	MOVO 560(AX), X7
	MOVO 576(AX), X12
	MOVO 592(AX), X14
	MOVO 608(AX), X10
	MOVO X7, X8
	MOVO X12, X9
	MOVO X14, X13
	MOVO X10, X11
	PSUBQ X0, X7
	PSLLQ $48, X7
	POR X4, X6
	POR X3, X7
	POR X6, X7
	MOVO X7, 128(BX)
	PSUBQ X8, X12
	PSUBQ X9, X14
	PSLLQ $16, X14
	PSUBQ X13, X10
	PSLLQ $32, X10
	MOVO 624(AX), X15
	MOVO 640(AX), X1
	MOVO 656(AX), X2
	MOVO 672(AX), X5
	MOVO X15, X0
	MOVO X1, X4
	MOVO X2, X3
	MOVO X5, X6
	PSUBQ X11, X15
	PSLLQ $48, X15
	POR X12, X14
	POR X10, X15
	POR X14, X15
	MOVO X15, 144(BX)
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $16, X2
	PSUBQ X3, X5
	PSLLQ $32, X5
	MOVO 688(AX), X7
	MOVO 704(AX), X8
	MOVO 720(AX), X9
	MOVO 736(AX), X13
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X10
	MOVO X13, X14
	PSUBQ X6, X7
	PSLLQ $48, X7
	POR X1, X2
	POR X5, X7
	POR X2, X7
	MOVO X7, 160(BX)
	PSUBQ X11, X8
	PSUBQ X12, X9
	PSLLQ $16, X9
	PSUBQ X10, X13
	PSLLQ $32, X13
	MOVO 752(AX), X15
	MOVO 768(AX), X0
	MOVO 784(AX), X4
	MOVO 800(AX), X3
	MOVO X15, X6
	MOVO X0, X1
	MOVO X4, X5
	MOVO X3, X2
	PSUBQ X14, X15
	PSLLQ $48, X15
	POR X8, X9
	POR X13, X15
	POR X9, X15
	MOVO X15, 176(BX)
	PSUBQ X6, X0
	PSUBQ X1, X4
	PSLLQ $16, X4
	PSUBQ X5, X3
	PSLLQ $32, X3
	MOVO 816(AX), X7
	MOVO 832(AX), X11
	MOVO 848(AX), X12
	MOVO 864(AX), X10
	MOVO X7, X14
	MOVO X11, X8
	MOVO X12, X13
	MOVO X10, X9
	PSUBQ X2, X7
	PSLLQ $48, X7
	POR X0, X4
	POR X3, X7
	POR X4, X7
	MOVO X7, 192(BX)
	PSUBQ X14, X11
	PSUBQ X8, X12
	PSLLQ $16, X12
	PSUBQ X13, X10
	PSLLQ $32, X10
	MOVO 880(AX), X15
	MOVO 896(AX), X6
	MOVO 912(AX), X1
	MOVO 928(AX), X5
	MOVO X15, X2
	MOVO X6, X0
	MOVO X1, X3
	MOVO X5, X4
	PSUBQ X9, X15
	PSLLQ $48, X15
	POR X11, X12
	POR X10, X15
	POR X12, X15
	MOVO X15, 208(BX)
	PSUBQ X2, X6
	PSUBQ X0, X1
	PSLLQ $16, X1
	PSUBQ X3, X5
	PSLLQ $32, X5
	MOVO 944(AX), X7
	MOVO 960(AX), X14
	MOVO 976(AX), X8
	MOVO 992(AX), X13
	MOVO X7, X9
	MOVO X14, X11
	MOVO X8, X10
	MOVO X13, X12
	PSUBQ X4, X7
	PSLLQ $48, X7
	POR X6, X1
	POR X5, X7
	POR X1, X7
	MOVO X7, 224(BX)
	PSUBQ X9, X14
	PSUBQ X11, X8
	PSLLQ $16, X8
	PSUBQ X10, X13
	PSLLQ $32, X13
	MOVO 1008(AX), X15
	MOVO X15, X2
	PSUBQ X12, X15
	PSLLQ $48, X15
	POR X14, X8
	POR X13, X15
	POR X8, X15
	MOVO X15, 240(BX)
	MOVO X2, 0(DX)
	RET

// func dpack64_17(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_17(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $17, X2
	PSUBQ X5, X3
	PSLLQ $34, X3
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	PSUBQ X6, X7
	MOVO X7, X15
	PSLLQ $51, X7
	POR X1, X2
	POR X3, X7
	POR X2, X7
	MOVO X7, 0(BX)
	PSRLQ $13, X15
	PSUBQ X11, X8
	PSLLQ $4, X8
	PSUBQ X12, X9
	PSLLQ $21, X9
	PSUBQ X13, X10
	PSLLQ $38, X10
	MOVO 112(AX), X0
	MOVO 128(AX), X4
	MOVO 144(AX), X5
	MOVO 160(AX), X6
	MOVO X0, X1
	MOVO X4, X3
	MOVO X5, X2
	MOVO X6, X7
	PSUBQ X14, X0
	MOVO X0, X11
	PSLLQ $55, X0
	POR X15, X8
	POR X9, X10
	POR X0, X8
	POR X10, X8
	MOVO X8, 16(BX)
	PSRLQ $9, X11
	PSUBQ X1, X4
	PSLLQ $8, X4
	PSUBQ X3, X5
	PSLLQ $25, X5
	PSUBQ X2, X6
	PSLLQ $42, X6
	MOVO 176(AX), X12
	MOVO 192(AX), X13
	MOVO 208(AX), X14
	MOVO 224(AX), X15
	MOVO X12, X9
	MOVO X13, X0
	MOVO X14, X10
	MOVO X15, X8
	PSUBQ X7, X12
	MOVO X12, X1
	PSLLQ $59, X12
	POR X11, X4
	POR X5, X6
	POR X12, X4
	POR X6, X4
	MOVO X4, 32(BX)
	PSRLQ $5, X1
	PSUBQ X9, X13
	PSLLQ $12, X13
	PSUBQ X0, X14
	PSLLQ $29, X14
	PSUBQ X10, X15
	PSLLQ $46, X15
	MOVO 240(AX), X3
	MOVO 256(AX), X2
	MOVO 272(AX), X7
	MOVO 288(AX), X11
	MOVO X3, X5
	MOVO X2, X12
	MOVO X7, X6
	MOVO X11, X4
	PSUBQ X8, X3
	MOVO X3, X9
	PSLLQ $63, X3
	POR X1, X13
	POR X14, X15
	POR X3, X13
	POR X15, X13
	MOVO X13, 48(BX)
	PSRLQ $1, X9
	PSUBQ X5, X2
	PSLLQ $16, X2
	PSUBQ X12, X7
	PSLLQ $33, X7
	PSUBQ X6, X11
	MOVO X11, X0
	PSLLQ $50, X11
	POR X9, X2
	POR X7, X11
	POR X2, X11
	MOVO X11, 64(BX)
	PSRLQ $14, X0
	MOVO 304(AX), X10
	MOVO 320(AX), X8
	MOVO 336(AX), X1
	MOVO 352(AX), X14
	MOVO X10, X3
	MOVO X8, X15
	MOVO X1, X13
	MOVO X14, X5
	PSUBQ X4, X10
	PSLLQ $3, X10
	PSUBQ X3, X8
	PSLLQ $20, X8
	PSUBQ X15, X1
	PSLLQ $37, X1
	PSUBQ X13, X14
	MOVO X14, X12
	PSLLQ $54, X14
	POR X0, X10
	POR X8, X1
	POR X14, X10
	POR X1, X10
	MOVO X10, 80(BX)
	PSRLQ $10, X12
	MOVO 368(AX), X6
	MOVO 384(AX), X9
	MOVO 400(AX), X7
	MOVO 416(AX), X2
	MOVO X6, X11
	MOVO X9, X4
	MOVO X7, X3
	MOVO X2, X15
	PSUBQ X5, X6
	PSLLQ $7, X6
	PSUBQ X11, X9
	PSLLQ $24, X9
	PSUBQ X4, X7
	PSLLQ $41, X7
	PSUBQ X3, X2
	MOVO X2, X13
	PSLLQ $58, X2
	POR X12, X6
	POR X9, X7
	POR X2, X6
	POR X7, X6
	MOVO X6, 96(BX)
	PSRLQ $6, X13
	MOVO 432(AX), X0
	MOVO 448(AX), X8
	MOVO 464(AX), X14
	MOVO 480(AX), X1
	MOVO X0, X10
	MOVO X8, X5
	MOVO X14, X11
	MOVO X1, X4
	PSUBQ X15, X0
	PSLLQ $11, X0
	PSUBQ X10, X8
	PSLLQ $28, X8
	PSUBQ X5, X14
	PSLLQ $45, X14
	PSUBQ X11, X1
	MOVO X1, X3
	PSLLQ $62, X1
	POR X13, X0
	POR X8, X14
	POR X1, X0
	POR X14, X0
	MOVO X0, 112(BX)
	PSRLQ $2, X3
	MOVO 496(AX), X12
	MOVO 512(AX), X9
	MOVO 528(AX), X2
	MOVO 544(AX), X7
	MOVO X12, X6
	MOVO X9, X15
	MOVO X2, X10
	MOVO X7, X5
	PSUBQ X4, X12
	PSLLQ $15, X12
	PSUBQ X6, X9
	PSLLQ $32, X9
	PSUBQ X15, X2
	MOVO X2, X11
	PSLLQ $49, X2
	POR X3, X12
	POR X9, X2
	POR X12, X2
	MOVO X2, 128(BX)
	PSRLQ $15, X11
	PSUBQ X10, X7
	PSLLQ $2, X7
	MOVO 560(AX), X13
	MOVO 576(AX), X8
	MOVO 592(AX), X1
	MOVO 608(AX), X14
	MOVO X13, X0
	MOVO X8, X4
	MOVO X1, X6
	MOVO X14, X15
	PSUBQ X5, X13
	PSLLQ $19, X13
	PSUBQ X0, X8
	PSLLQ $36, X8
	PSUBQ X4, X1
	MOVO X1, X3
	PSLLQ $53, X1
	POR X11, X7
	POR X13, X8
	POR X1, X7
	POR X8, X7
	MOVO X7, 144(BX)
	PSRLQ $11, X3
	PSUBQ X6, X14
	PSLLQ $6, X14
	MOVO 624(AX), X9
	MOVO 640(AX), X12
	MOVO 656(AX), X2
	MOVO 672(AX), X10
	MOVO X9, X5
	MOVO X12, X0
	MOVO X2, X4
	MOVO X10, X11
	PSUBQ X15, X9
	PSLLQ $23, X9
	PSUBQ X5, X12
	PSLLQ $40, X12
	PSUBQ X0, X2
	MOVO X2, X13
	PSLLQ $57, X2
	POR X3, X14
	POR X9, X12
	POR X2, X14
	POR X12, X14
	MOVO X14, 160(BX)
	PSRLQ $7, X13
	PSUBQ X4, X10
	PSLLQ $10, X10
	MOVO 688(AX), X1
	MOVO 704(AX), X8
	MOVO 720(AX), X7
	MOVO 736(AX), X6
	MOVO X1, X15
	MOVO X8, X5
	MOVO X7, X0
	MOVO X6, X3
	PSUBQ X11, X1
	PSLLQ $27, X1
	PSUBQ X15, X8
	PSLLQ $44, X8
	PSUBQ X5, X7
	MOVO X7, X9
	PSLLQ $61, X7
	POR X13, X10
	POR X1, X8
	POR X7, X10
	POR X8, X10
	MOVO X10, 176(BX)
	PSRLQ $3, X9
	PSUBQ X0, X6
	PSLLQ $14, X6
	MOVO 752(AX), X2
	MOVO 768(AX), X12
	MOVO 784(AX), X14
	MOVO 800(AX), X4
	MOVO X2, X11
	MOVO X12, X15
	MOVO X14, X5
	MOVO X4, X13
	PSUBQ X3, X2
	PSLLQ $31, X2
	PSUBQ X11, X12
	MOVO X12, X1
	PSLLQ $48, X12
	POR X9, X6
	POR X2, X12
	POR X6, X12
	MOVO X12, 192(BX)
	PSRLQ $16, X1
	PSUBQ X15, X14
	PSLLQ $1, X14
	PSUBQ X5, X4
	PSLLQ $18, X4
	MOVO 816(AX), X7
	MOVO 832(AX), X8
	MOVO 848(AX), X10
	MOVO 864(AX), X0
	MOVO X7, X3
	MOVO X8, X11
	MOVO X10, X9
	MOVO X0, X2
	PSUBQ X13, X7
	PSLLQ $35, X7
	PSUBQ X3, X8
	MOVO X8, X6
	PSLLQ $52, X8
	POR X1, X14
	POR X4, X7
	POR X8, X14
	POR X7, X14
	MOVO X14, 208(BX)
	PSRLQ $12, X6
	PSUBQ X11, X10
	PSLLQ $5, X10
	PSUBQ X9, X0
	PSLLQ $22, X0
	MOVO 880(AX), X12
	MOVO 896(AX), X15
	MOVO 912(AX), X5
	MOVO 928(AX), X13
	MOVO X12, X3
	MOVO X15, X1
	MOVO X5, X4
	MOVO X13, X8
	PSUBQ X2, X12
	PSLLQ $39, X12
	PSUBQ X3, X15
	MOVO X15, X7
	PSLLQ $56, X15
	POR X6, X10
	POR X0, X12
	POR X15, X10
	POR X12, X10
	MOVO X10, 224(BX)
	PSRLQ $8, X7
	PSUBQ X1, X5
	PSLLQ $9, X5
	PSUBQ X4, X13
	PSLLQ $26, X13
	MOVO 944(AX), X14
	MOVO 960(AX), X11
	MOVO 976(AX), X9
	MOVO 992(AX), X2
	MOVO X14, X3
	MOVO X11, X6
	MOVO X9, X0
	MOVO X2, X15
	PSUBQ X8, X14
	PSLLQ $43, X14
	PSUBQ X3, X11
	MOVO X11, X12
	PSLLQ $60, X11
	POR X7, X5
	POR X13, X14
	POR X11, X5
	POR X14, X5
	MOVO X5, 240(BX)
	PSRLQ $4, X12
	PSUBQ X6, X9
	PSLLQ $13, X9
	PSUBQ X0, X2
	PSLLQ $30, X2
	MOVO 1008(AX), X10
	MOVO X10, X1
	PSUBQ X15, X10
	PSLLQ $47, X10
	POR X12, X9
	POR X2, X10
	POR X9, X10
	MOVO X10, 256(BX)
	MOVO X1, 0(DX)
	RET

// func dpack64_18(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_18(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $18, X2
	PSUBQ X5, X3
	PSLLQ $36, X3
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	PSUBQ X6, X7
	MOVO X7, X15
	PSLLQ $54, X7
	POR X1, X2
	POR X3, X7
	POR X2, X7
	MOVO X7, 0(BX)
	PSRLQ $10, X15
	PSUBQ X11, X8
	PSLLQ $8, X8
	PSUBQ X12, X9
	PSLLQ $26, X9
	PSUBQ X13, X10
	PSLLQ $44, X10
	MOVO 112(AX), X0
	MOVO 128(AX), X4
	MOVO 144(AX), X5
	MOVO 160(AX), X6
	MOVO X0, X1
	MOVO X4, X3
	MOVO X5, X2
	MOVO X6, X7
	PSUBQ X14, X0
	MOVO X0, X11
	PSLLQ $62, X0
	POR X15, X8
	POR X9, X10
	POR X0, X8
	POR X10, X8
	MOVO X8, 16(BX)
	PSRLQ $2, X11
	PSUBQ X1, X4
	PSLLQ $16, X4
	PSUBQ X3, X5
	PSLLQ $34, X5
	PSUBQ X2, X6
	MOVO X6, X12
	PSLLQ $52, X6
	POR X11, X4
	POR X5, X6
	POR X4, X6
	MOVO X6, 32(BX)
	PSRLQ $12, X12
	MOVO 176(AX), X13
	MOVO 192(AX), X14
	MOVO 208(AX), X15
	MOVO 224(AX), X9
	MOVO X13, X0
	MOVO X14, X10
	MOVO X15, X8
	MOVO X9, X1
	PSUBQ X7, X13
	PSLLQ $6, X13
	PSUBQ X0, X14
	PSLLQ $24, X14
	PSUBQ X10, X15
	PSLLQ $42, X15
	PSUBQ X8, X9
	MOVO X9, X3
	PSLLQ $60, X9
	POR X12, X13
	POR X14, X15
	POR X9, X13
	POR X15, X13
	MOVO X13, 48(BX)
	PSRLQ $4, X3
	MOVO 240(AX), X2
	MOVO 256(AX), X11
	MOVO 272(AX), X5
	MOVO 288(AX), X4
	MOVO X2, X6
	MOVO X11, X7
	MOVO X5, X0
	MOVO X4, X10
	PSUBQ X1, X2
	PSLLQ $14, X2
	PSUBQ X6, X11
	PSLLQ $32, X11
	PSUBQ X7, X5
	MOVO X5, X8
	PSLLQ $50, X5
	POR X3, X2
	POR X11, X5
	POR X2, X5
	MOVO X5, 64(BX)
	PSRLQ $14, X8
	PSUBQ X0, X4
	PSLLQ $4, X4
	MOVO 304(AX), X12
	MOVO 320(AX), X14
	MOVO 336(AX), X9
	MOVO 352(AX), X15
	MOVO X12, X13
	MOVO X14, X1
	MOVO X9, X6
	MOVO X15, X7
	PSUBQ X10, X12
	PSLLQ $22, X12
	PSUBQ X13, X14
	PSLLQ $40, X14
	PSUBQ X1, X9
	MOVO X9, X3
	PSLLQ $58, X9
	POR X8, X4
	POR X12, X14
	POR X9, X4
	POR X14, X4
	MOVO X4, 80(BX)
	PSRLQ $6, X3
	PSUBQ X6, X15
	PSLLQ $12, X15
	MOVO 368(AX), X11
	MOVO 384(AX), X2
	MOVO 400(AX), X5
	MOVO 416(AX), X0
	MOVO X11, X10
	MOVO X2, X13
	MOVO X5, X1
	MOVO X0, X8
	PSUBQ X7, X11
	PSLLQ $30, X11
	PSUBQ X10, X2
	MOVO X2, X12
	PSLLQ $48, X2
	POR X3, X15
	POR X11, X2
	POR X15, X2
	MOVO X2, 96(BX)
	PSRLQ $16, X12
	PSUBQ X13, X5
	PSLLQ $2, X5
	PSUBQ X1, X0
	PSLLQ $20, X0
	MOVO 432(AX), X9
	MOVO 448(AX), X14
	MOVO 464(AX), X4
	MOVO 480(AX), X6
	MOVO X9, X7
	MOVO X14, X10
	MOVO X4, X3
	MOVO X6, X11
	PSUBQ X8, X9
	PSLLQ $38, X9
	PSUBQ X7, X14
	MOVO X14, X15
	PSLLQ $56, X14
	POR X12, X5
	POR X0, X9
	POR X14, X5
	POR X9, X5
	MOVO X5, 112(BX)
	PSRLQ $8, X15
	PSUBQ X10, X4
	PSLLQ $10, X4
	PSUBQ X3, X6
	PSLLQ $28, X6
	MOVO 496(AX), X2
	MOVO 512(AX), X13
	MOVO 528(AX), X1
	MOVO 544(AX), X8
	MOVO X2, X7
	MOVO X13, X12
	MOVO X1, X0
	MOVO X8, X14
	PSUBQ X11, X2
	PSLLQ $46, X2
	POR X15, X4
	POR X6, X2
	POR X4, X2
	MOVO X2, 128(BX)
	PSUBQ X7, X13
	PSUBQ X12, X1
	PSLLQ $18, X1
	PSUBQ X0, X8
	PSLLQ $36, X8
	MOVO 560(AX), X9
	MOVO 576(AX), X5
	MOVO 592(AX), X10
	MOVO 608(AX), X3
	MOVO X9, X11
	MOVO X5, X15
	MOVO X10, X6
	MOVO X3, X4
	PSUBQ X14, X9
	MOVO X9, X2
	PSLLQ $54, X9
	POR X13, X1
	POR X8, X9
	POR X1, X9
	MOVO X9, 144(BX)
	PSRLQ $10, X2
	PSUBQ X11, X5
	PSLLQ $8, X5
	PSUBQ X15, X10
	PSLLQ $26, X10
	PSUBQ X6, X3
	PSLLQ $44, X3
	MOVO 624(AX), X7
	MOVO 640(AX), X12
	MOVO 656(AX), X0
	MOVO 672(AX), X14
	MOVO X7, X13
	MOVO X12, X8
	MOVO X0, X1
	MOVO X14, X9
	PSUBQ X4, X7
	MOVO X7, X11
	PSLLQ $62, X7
	POR X2, X5
	POR X10, X3
	POR X7, X5
	POR X3, X5
	MOVO X5, 160(BX)
	PSRLQ $2, X11
	PSUBQ X13, X12
	PSLLQ $16, X12
	PSUBQ X8, X0
	PSLLQ $34, X0
	PSUBQ X1, X14
	MOVO X14, X15
	PSLLQ $52, X14
	POR X11, X12
	POR X0, X14
	POR X12, X14
	MOVO X14, 176(BX)
	PSRLQ $12, X15
	MOVO 688(AX), X6
	MOVO 704(AX), X4
	MOVO 720(AX), X2
	MOVO 736(AX), X10
	MOVO X6, X7
	MOVO X4, X3
	MOVO X2, X5
	MOVO X10, X13
	PSUBQ X9, X6
	PSLLQ $6, X6
	PSUBQ X7, X4
	PSLLQ $24, X4
	PSUBQ X3, X2
	PSLLQ $42, X2
	PSUBQ X5, X10
	MOVO X10, X8
	PSLLQ $60, X10
	POR X15, X6
	POR X4, X2
	POR X10, X6
	POR X2, X6
	MOVO X6, 192(BX)
	PSRLQ $4, X8
	MOVO 752(AX), X1
	MOVO 768(AX), X11
	MOVO 784(AX), X0
	MOVO 800(AX), X12
	MOVO X1, X14
	MOVO X11, X9
	MOVO X0, X7
	MOVO X12, X3
	PSUBQ X13, X1
	PSLLQ $14, X1
	PSUBQ X14, X11
	PSLLQ $32, X11
	PSUBQ X9, X0
	MOVO X0, X5
	PSLLQ $50, X0
	POR X8, X1
	POR X11, X0
	POR X1, X0
	MOVO X0, 208(BX)
	PSRLQ $14, X5
	PSUBQ X7, X12
	PSLLQ $4, X12
	MOVO 816(AX), X15
	MOVO 832(AX), X4
	MOVO 848(AX), X10
	MOVO 864(AX), X2
	MOVO X15, X6
	MOVO X4, X13
	MOVO X10, X14
	MOVO X2, X9
	PSUBQ X3, X15
	PSLLQ $22, X15
	PSUBQ X6, X4
	PSLLQ $40, X4
	PSUBQ X13, X10
	MOVO X10, X8
	PSLLQ $58, X10
	POR X5, X12
	POR X15, X4
	POR X10, X12
	POR X4, X12
	MOVO X12, 224(BX)
	PSRLQ $6, X8
	PSUBQ X14, X2
	PSLLQ $12, X2
	MOVO 880(AX), X11
	MOVO 896(AX), X1
	MOVO 912(AX), X0
	MOVO 928(AX), X7
	MOVO X11, X3
	MOVO X1, X6
	MOVO X0, X13
	MOVO X7, X5
	PSUBQ X9, X11
	PSLLQ $30, X11
	PSUBQ X3, X1
	MOVO X1, X15
	PSLLQ $48, X1
	POR X8, X2
	POR X11, X1
	POR X2, X1
	MOVO X1, 240(BX)
	PSRLQ $16, X15
	PSUBQ X6, X0
	PSLLQ $2, X0
	PSUBQ X13, X7
	PSLLQ $20, X7
	MOVO 944(AX), X10
	MOVO 960(AX), X4
	MOVO 976(AX), X12
	MOVO 992(AX), X14
	MOVO X10, X9
	MOVO X4, X3
	MOVO X12, X8
	MOVO X14, X11
	PSUBQ X5, X10
	PSLLQ $38, X10
	PSUBQ X9, X4
	MOVO X4, X2
	PSLLQ $56, X4
	POR X15, X0
	POR X7, X10
	POR X4, X0
	POR X10, X0
	MOVO X0, 256(BX)
	PSRLQ $8, X2
	PSUBQ X3, X12
	PSLLQ $10, X12
	PSUBQ X8, X14
	PSLLQ $28, X14
	MOVO 1008(AX), X1
	MOVO X1, X6
	PSUBQ X11, X1
	PSLLQ $46, X1
	POR X2, X12
	POR X14, X1
	POR X12, X1
	MOVO X1, 272(BX)
	MOVO X6, 0(DX)
	RET

// func dpack64_19(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_19(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $19, X2
	PSUBQ X5, X3
	PSLLQ $38, X3
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	PSUBQ X6, X7
	MOVO X7, X15
	PSLLQ $57, X7
	POR X1, X2
	POR X3, X7
	POR X2, X7
	MOVO X7, 0(BX)
	PSRLQ $7, X15
	PSUBQ X11, X8
	PSLLQ $12, X8
	PSUBQ X12, X9
	PSLLQ $31, X9
	PSUBQ X13, X10
	MOVO X10, X0
	PSLLQ $50, X10
	POR X15, X8
	POR X9, X10
	POR X8, X10
	MOVO X10, 16(BX)
	PSRLQ $14, X0
	MOVO 112(AX), X4
	MOVO 128(AX), X5
	MOVO 144(AX), X6
	MOVO 160(AX), X1
	MOVO X4, X3
	MOVO X5, X2
	MOVO X6, X7
	MOVO X1, X11
	PSUBQ X14, X4
	PSLLQ $5, X4
	PSUBQ X3, X5
	PSLLQ $24, X5
	PSUBQ X2, X6
	PSLLQ $43, X6
	PSUBQ X7, X1
	MOVO X1, X12
	PSLLQ $62, X1
	POR X0, X4
	POR X5, X6
	POR X1, X4
	POR X6, X4
	MOVO X4, 32(BX)
	PSRLQ $2, X12
	MOVO 176(AX), X13
	MOVO 192(AX), X15
	MOVO 208(AX), X9
	MOVO 224(AX), X8
	MOVO X13, X10
	MOVO X15, X14
	MOVO X9, X3
	MOVO X8, X2
	PSUBQ X11, X13
	PSLLQ $17, X13
	PSUBQ X10, X15
	PSLLQ $36, X15
	PSUBQ X14, X9
	MOVO X9, X7
	PSLLQ $55, X9
	POR X12, X13
	POR X15, X9
	POR X13, X9
	MOVO X9, 48(BX)
	PSRLQ $9, X7
	PSUBQ X3, X8
	PSLLQ $10, X8
	MOVO 240(AX), X0
	MOVO 256(AX), X5
	MOVO 272(AX), X1
	MOVO 288(AX), X6
	MOVO X0, X4
	MOVO X5, X11
	MOVO X1, X10
	MOVO X6, X14
	PSUBQ X2, X0
	PSLLQ $29, X0
	PSUBQ X4, X5
	MOVO X5, X12
	PSLLQ $48, X5
	POR X7, X8
	POR X0, X5
	POR X8, X5
	MOVO X5, 64(BX)
	PSRLQ $16, X12
	PSUBQ X11, X1
	PSLLQ $3, X1
	PSUBQ X10, X6
	PSLLQ $22, X6
	MOVO 304(AX), X15
	MOVO 320(AX), X13
	MOVO 336(AX), X9
	MOVO 352(AX), X3
	MOVO X15, X2
	MOVO X13, X4
	MOVO X9, X7
	MOVO X3, X0
	PSUBQ X14, X15
	PSLLQ $41, X15
	PSUBQ X2, X13
	MOVO X13, X8
	PSLLQ $60, X13
	POR X12, X1
	POR X6, X15
	POR X13, X1
	POR X15, X1
	MOVO X1, 80(BX)
	PSRLQ $4, X8
	PSUBQ X4, X9
	PSLLQ $15, X9
	PSUBQ X7, X3
	PSLLQ $34, X3
	MOVO 368(AX), X5
	MOVO 384(AX), X11
	MOVO 400(AX), X10
	MOVO 416(AX), X14
	MOVO X5, X2
	MOVO X11, X12
	MOVO X10, X6
	MOVO X14, X13
	PSUBQ X0, X5
	MOVO X5, X15
	PSLLQ $53, X5
	POR X8, X9
	POR X3, X5
	POR X9, X5
	MOVO X5, 96(BX)
	PSRLQ $11, X15
	PSUBQ X2, X11
	PSLLQ $8, X11
	PSUBQ X12, X10
	PSLLQ $27, X10
	PSUBQ X6, X14
	MOVO X14, X1
	PSLLQ $46, X14
	POR X15, X11
	POR X10, X14
	POR X11, X14
	MOVO X14, 112(BX)
	PSRLQ $18, X1
	MOVO 432(AX), X4
	MOVO 448(AX), X7
	MOVO 464(AX), X0
	MOVO 480(AX), X8
	MOVO X4, X3
	MOVO X7, X9
	MOVO X0, X5
	MOVO X8, X2
	PSUBQ X13, X4
	PSLLQ $1, X4
	PSUBQ X3, X7
	PSLLQ $20, X7
	PSUBQ X9, X0
	PSLLQ $39, X0
	PSUBQ X5, X8
	MOVO X8, X12
	PSLLQ $58, X8
	POR X1, X4
	POR X7, X0
	POR X8, X4
	POR X0, X4
	MOVO X4, 128(BX)
	PSRLQ $6, X12
	MOVO 496(AX), X6
	MOVO 512(AX), X15
	MOVO 528(AX), X10
	MOVO 544(AX), X11
	MOVO X6, X14
	MOVO X15, X13
	MOVO X10, X3
	MOVO X11, X9
	PSUBQ X2, X6
	PSLLQ $13, X6
	PSUBQ X14, X15
	PSLLQ $32, X15
	PSUBQ X13, X10
	MOVO X10, X5
	PSLLQ $51, X10
	POR X12, X6
	POR X15, X10
	POR X6, X10
	MOVO X10, 144(BX)
	PSRLQ $13, X5
	PSUBQ X3, X11
	PSLLQ $6, X11
	MOVO 560(AX), X1
	MOVO 576(AX), X7
	MOVO 592(AX), X8
	MOVO 608(AX), X0
	MOVO X1, X4
	MOVO X7, X2
	MOVO X8, X14
	MOVO X0, X13
	PSUBQ X9, X1
	PSLLQ $25, X1
	PSUBQ X4, X7
	PSLLQ $44, X7
	PSUBQ X2, X8
	MOVO X8, X12
	PSLLQ $63, X8
	POR X5, X11
	POR X1, X7
	POR X8, X11
	POR X7, X11
	MOVO X11, 160(BX)
	PSRLQ $1, X12
	PSUBQ X14, X0
	PSLLQ $18, X0
	MOVO 624(AX), X15
	MOVO 640(AX), X6
	MOVO 656(AX), X10
	MOVO 672(AX), X3
	MOVO X15, X9
	MOVO X6, X4
	MOVO X10, X2
	MOVO X3, X5
	PSUBQ X13, X15
	PSLLQ $37, X15
	PSUBQ X9, X6
	MOVO X6, X1
	PSLLQ $56, X6
	POR X12, X0
	POR X15, X6
	POR X0, X6
	MOVO X6, 176(BX)
	PSRLQ $8, X1
	PSUBQ X4, X10
	PSLLQ $11, X10
	PSUBQ X2, X3
	PSLLQ $30, X3
	MOVO 688(AX), X8
	MOVO 704(AX), X7
	MOVO 720(AX), X11
	MOVO 736(AX), X14
	MOVO X8, X13
	MOVO X7, X9
	MOVO X11, X12
	MOVO X14, X15
	PSUBQ X5, X8
	MOVO X8, X0
	PSLLQ $49, X8
	POR X1, X10
	POR X3, X8
	POR X10, X8
	MOVO X8, 192(BX)
	PSRLQ $15, X0
	PSUBQ X13, X7
	PSLLQ $4, X7
	PSUBQ X9, X11
	PSLLQ $23, X11
	PSUBQ X12, X14
	PSLLQ $42, X14
	MOVO 752(AX), X6
	MOVO 768(AX), X4
	MOVO 784(AX), X2
	MOVO 800(AX), X5
	MOVO X6, X1
	MOVO X4, X3
	MOVO X2, X10
	MOVO X5, X8
	PSUBQ X15, X6
	MOVO X6, X13
	PSLLQ $61, X6
	POR X0, X7
	POR X11, X14
	POR X6, X7
	POR X14, X7
	MOVO X7, 208(BX)
	PSRLQ $3, X13
	PSUBQ X1, X4
	PSLLQ $16, X4
	PSUBQ X3, X2
	PSLLQ $35, X2
	PSUBQ X10, X5
	MOVO X5, X9
	PSLLQ $54, X5
	POR X13, X4
	POR X2, X5
	POR X4, X5
	MOVO X5, 224(BX)
	PSRLQ $10, X9
	MOVO 816(AX), X12
	MOVO 832(AX), X15
	MOVO 848(AX), X0
	MOVO 864(AX), X11
	MOVO X12, X6
	MOVO X15, X14
	MOVO X0, X7
	MOVO X11, X1
	PSUBQ X8, X12
	PSLLQ $9, X12
	PSUBQ X6, X15
	PSLLQ $28, X15
	PSUBQ X14, X0
	MOVO X0, X3
	PSLLQ $47, X0
	POR X9, X12
	POR X15, X0
	POR X12, X0
	MOVO X0, 240(BX)
	PSRLQ $17, X3
	PSUBQ X7, X11
	PSLLQ $2, X11
	MOVO 880(AX), X10
	MOVO 896(AX), X13
	MOVO 912(AX), X2
	MOVO 928(AX), X4
	MOVO X10, X5
	MOVO X13, X8
	MOVO X2, X6
	MOVO X4, X14
	PSUBQ X1, X10
	PSLLQ $21, X10
	PSUBQ X5, X13
	PSLLQ $40, X13
	PSUBQ X8, X2
	MOVO X2, X9
	PSLLQ $59, X2
	POR X3, X11
	POR X10, X13
	POR X2, X11
	POR X13, X11
	MOVO X11, 256(BX)
	PSRLQ $5, X9
	PSUBQ X6, X4
	PSLLQ $14, X4
	MOVO 944(AX), X15
	MOVO 960(AX), X12
	MOVO 976(AX), X0
	MOVO 992(AX), X7
	MOVO X15, X1
	MOVO X12, X5
	MOVO X0, X8
	MOVO X7, X3
	PSUBQ X14, X15
	PSLLQ $33, X15
	PSUBQ X1, X12
	MOVO X12, X10
	PSLLQ $52, X12
	POR X9, X4
	POR X15, X12
	POR X4, X12
	MOVO X12, 272(BX)
	PSRLQ $12, X10
	PSUBQ X5, X0
	PSLLQ $7, X0
	PSUBQ X8, X7
	PSLLQ $26, X7
	MOVO 1008(AX), X2
	MOVO X2, X13
	PSUBQ X3, X2
	PSLLQ $45, X2
	POR X10, X0
	POR X7, X2
	POR X0, X2
	MOVO X2, 288(BX)
	MOVO X13, 0(DX)
	RET

// func dpack64_20(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_20(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $20, X2
	PSUBQ X5, X3
	PSLLQ $40, X3
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	PSUBQ X6, X7
	MOVO X7, X15
	PSLLQ $60, X7
	POR X1, X2
	POR X3, X7
	POR X2, X7
	MOVO X7, 0(BX)
	PSRLQ $4, X15
	PSUBQ X11, X8
	PSLLQ $16, X8
	PSUBQ X12, X9
	PSLLQ $36, X9
	PSUBQ X13, X10
	MOVO X10, X0
	PSLLQ $56, X10
	POR X15, X8
	POR X9, X10
	POR X8, X10
	MOVO X10, 16(BX)
	PSRLQ $8, X0
	MOVO 112(AX), X4
	MOVO 128(AX), X5
	MOVO 144(AX), X6
	MOVO 160(AX), X1
	MOVO X4, X3
	MOVO X5, X2
	MOVO X6, X7
	MOVO X1, X11
	PSUBQ X14, X4
	PSLLQ $12, X4
	PSUBQ X3, X5
	PSLLQ $32, X5
	PSUBQ X2, X6
	MOVO X6, X12
	PSLLQ $52, X6
	POR X0, X4
	POR X5, X6
	POR X4, X6
	MOVO X6, 32(BX)
	PSRLQ $12, X12
	PSUBQ X7, X1
	PSLLQ $8, X1
	MOVO 176(AX), X13
	MOVO 192(AX), X15
	MOVO 208(AX), X9
	MOVO 224(AX), X8
	MOVO X13, X10
	MOVO X15, X14
	MOVO X9, X3
	MOVO X8, X2
	PSUBQ X11, X13
	PSLLQ $28, X13
	PSUBQ X10, X15
	MOVO X15, X0
	PSLLQ $48, X15
	POR X12, X1
	POR X13, X15
	POR X1, X15
	MOVO X15, 48(BX)
	PSRLQ $16, X0
	PSUBQ X14, X9
	PSLLQ $4, X9
	PSUBQ X3, X8
	PSLLQ $24, X8
	MOVO 240(AX), X5
	MOVO 256(AX), X4
	MOVO 272(AX), X6
	MOVO 288(AX), X7
	MOVO X5, X11
	MOVO X4, X10
	MOVO X6, X12
	MOVO X7, X13
	PSUBQ X2, X5
	PSLLQ $44, X5
	POR X0, X9
	POR X8, X5
	POR X9, X5
	MOVO X5, 64(BX)
	PSUBQ X11, X4
	PSUBQ X10, X6
	PSLLQ $20, X6
	PSUBQ X12, X7
	PSLLQ $40, X7
	MOVO 304(AX), X1
	MOVO 320(AX), X15
	MOVO 336(AX), X14
	MOVO 352(AX), X3
	MOVO X1, X2
	MOVO X15, X0
	MOVO X14, X8
	MOVO X3, X9
	PSUBQ X13, X1
	MOVO X1, X5
	PSLLQ $60, X1
	POR X4, X6
	POR X7, X1
	POR X6, X1
	MOVO X1, 80(BX)
	PSRLQ $4, X5
	PSUBQ X2, X15
	PSLLQ $16, X15
	PSUBQ X0, X14
	PSLLQ $36, X14
	PSUBQ X8, X3
	MOVO X3, X11
	PSLLQ $56, X3
	POR X5, X15
	POR X14, X3
	POR X15, X3
	MOVO X3, 96(BX)
	PSRLQ $8, X11
	MOVO 368(AX), X10
	MOVO 384(AX), X12
	MOVO 400(AX), X13
	MOVO 416(AX), X4
	MOVO X10, X7
	MOVO X12, X6
	MOVO X13, X1
	MOVO X4, X2
	PSUBQ X9, X10
	PSLLQ $12, X10
	PSUBQ X7, X12
	PSLLQ $32, X12
	PSUBQ X6, X13
	MOVO X13, X0
	PSLLQ $52, X13
	POR X11, X10
	POR X12, X13
	POR X10, X13
	MOVO X13, 112(BX)
	PSRLQ $12, X0
	PSUBQ X1, X4
	PSLLQ $8, X4
	MOVO 432(AX), X8
	MOVO 448(AX), X5
	MOVO 464(AX), X14
	MOVO 480(AX), X15
	MOVO X8, X3
	MOVO X5, X9
	MOVO X14, X7
	MOVO X15, X6
	PSUBQ X2, X8
	PSLLQ $28, X8
	PSUBQ X3, X5
	MOVO X5, X11
	PSLLQ $48, X5
	POR X0, X4
	POR X8, X5
	POR X4, X5
	MOVO X5, 128(BX)
	PSRLQ $16, X11
	PSUBQ X9, X14
	PSLLQ $4, X14
	PSUBQ X7, X15
	PSLLQ $24, X15
	MOVO 496(AX), X12
	MOVO 512(AX), X10
	MOVO 528(AX), X13
	MOVO 544(AX), X1
	MOVO X12, X2
	MOVO X10, X3
	MOVO X13, X0
	MOVO X1, X8
	PSUBQ X6, X12
	PSLLQ $44, X12
	POR X11, X14
	POR X15, X12
	POR X14, X12
	MOVO X12, 144(BX)
	PSUBQ X2, X10
	PSUBQ X3, X13
	PSLLQ $20, X13
	PSUBQ X0, X1
	PSLLQ $40, X1
	MOVO 560(AX), X4
	MOVO 576(AX), X5
	MOVO 592(AX), X9
	MOVO 608(AX), X7
	MOVO X4, X6
	MOVO X5, X11
	MOVO X9, X15
	MOVO X7, X14
	PSUBQ X8, X4
	MOVO X4, X12
	PSLLQ $60, X4
	POR X10, X13
	POR X1, X4
	POR X13, X4
	MOVO X4, 160(BX)
	PSRLQ $4, X12
	PSUBQ X6, X5
	PSLLQ $16, X5
	PSUBQ X11, X9
	PSLLQ $36, X9
	PSUBQ X15, X7
	MOVO X7, X2
	PSLLQ $56, X7
	POR X12, X5
	POR X9, X7
	POR X5, X7
	MOVO X7, 176(BX)
	PSRLQ $8, X2
	MOVO 624(AX), X3
	MOVO 640(AX), X0
	MOVO 656(AX), X8
	MOVO 672(AX), X10
	MOVO X3, X1
	MOVO X0, X13
	MOVO X8, X4
	MOVO X10, X6
	PSUBQ X14, X3
	PSLLQ $12, X3
	PSUBQ X1, X0
	PSLLQ $32, X0
	PSUBQ X13, X8
	MOVO X8, X11
	PSLLQ $52, X8
	POR X2, X3
	POR X0, X8
	POR X3, X8
	MOVO X8, 192(BX)
	PSRLQ $12, X11
	PSUBQ X4, X10
	PSLLQ $8, X10
	MOVO 688(AX), X15
	MOVO 704(AX), X12
	MOVO 720(AX), X9
	MOVO 736(AX), X5
	MOVO X15, X7
	MOVO X12, X14
	MOVO X9, X1
	MOVO X5, X13
	PSUBQ X6, X15
	PSLLQ $28, X15
	PSUBQ X7, X12
	MOVO X12, X2
	PSLLQ $48, X12
	POR X11, X10
	POR X15, X12
	POR X10, X12
	MOVO X12, 208(BX)
	PSRLQ $16, X2
	PSUBQ X14, X9
	PSLLQ $4, X9
	PSUBQ X1, X5
	PSLLQ $24, X5
	MOVO 752(AX), X0
	MOVO 768(AX), X3
	MOVO 784(AX), X8
	MOVO 800(AX), X4
	MOVO X0, X6
	MOVO X3, X7
	MOVO X8, X11
	MOVO X4, X15
	PSUBQ X13, X0
	PSLLQ $44, X0
	POR X2, X9
	POR X5, X0
	POR X9, X0
	MOVO X0, 224(BX)
	PSUBQ X6, X3
	PSUBQ X7, X8
	PSLLQ $20, X8
	PSUBQ X11, X4
	PSLLQ $40, X4
	MOVO 816(AX), X10
	MOVO 832(AX), X12
	MOVO 848(AX), X14
	MOVO 864(AX), X1
	MOVO X10, X13
	MOVO X12, X2
	MOVO X14, X5
	MOVO X1, X9
	PSUBQ X15, X10
	MOVO X10, X0
	PSLLQ $60, X10
	POR X3, X8
	POR X4, X10
	POR X8, X10
	MOVO X10, 240(BX)
	PSRLQ $4, X0
	PSUBQ X13, X12
	PSLLQ $16, X12
	PSUBQ X2, X14
	PSLLQ $36, X14
	PSUBQ X5, X1
	MOVO X1, X6
	PSLLQ $56, X1
	POR X0, X12
	POR X14, X1
	POR X12, X1
	MOVO X1, 256(BX)
	PSRLQ $8, X6
	MOVO 880(AX), X7
	MOVO 896(AX), X11
	MOVO 912(AX), X15
	MOVO 928(AX), X3
	MOVO X7, X4
	MOVO X11, X8
	MOVO X15, X10
	MOVO X3, X13
	PSUBQ X9, X7
	PSLLQ $12, X7
	PSUBQ X4, X11
	PSLLQ $32, X11
	PSUBQ X8, X15
	MOVO X15, X2
	PSLLQ $52, X15
	POR X6, X7
	POR X11, X15
	POR X7, X15
	MOVO X15, 272(BX)
	PSRLQ $12, X2
	PSUBQ X10, X3
	PSLLQ $8, X3
	MOVO 944(AX), X5
	MOVO 960(AX), X0
	MOVO 976(AX), X14
	MOVO 992(AX), X12
	MOVO X5, X1
	MOVO X0, X9
	MOVO X14, X4
	MOVO X12, X8
	PSUBQ X13, X5
	PSLLQ $28, X5
	PSUBQ X1, X0
	MOVO X0, X6
	PSLLQ $48, X0
	POR X2, X3
	POR X5, X0
	POR X3, X0
	MOVO X0, 288(BX)
	PSRLQ $16, X6
	PSUBQ X9, X14
	PSLLQ $4, X14
	PSUBQ X4, X12
	PSLLQ $24, X12
	MOVO 1008(AX), X11
	MOVO X11, X7
	PSUBQ X8, X11
	PSLLQ $44, X11
	POR X6, X14
	POR X12, X11
	POR X14, X11
	MOVO X11, 304(BX)
	MOVO X7, 0(DX)
	RET

// func dpack64_21(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_21(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $21, X2
	PSUBQ X5, X3
	PSLLQ $42, X3
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	PSUBQ X6, X7
	MOVO X7, X15
	PSLLQ $63, X7
	POR X1, X2
	POR X3, X7
	POR X2, X7
	MOVO X7, 0(BX)
	PSRLQ $1, X15
	PSUBQ X11, X8
	PSLLQ $20, X8
	PSUBQ X12, X9
	PSLLQ $41, X9
	PSUBQ X13, X10
	MOVO X10, X0
	PSLLQ $62, X10
	POR X15, X8
	POR X9, X10
	POR X8, X10
	MOVO X10, 16(BX)
	PSRLQ $2, X0
	MOVO 112(AX), X4
	MOVO 128(AX), X5
	MOVO 144(AX), X6
	MOVO 160(AX), X1
	MOVO X4, X3
	MOVO X5, X2
	MOVO X6, X7
	MOVO X1, X11
	PSUBQ X14, X4
	PSLLQ $19, X4
	PSUBQ X3, X5
	PSLLQ $40, X5
	PSUBQ X2, X6
	MOVO X6, X12
	PSLLQ $61, X6
	POR X0, X4
	POR X5, X6
	POR X4, X6
	MOVO X6, 32(BX)
	PSRLQ $3, X12
	PSUBQ X7, X1
	PSLLQ $18, X1
	MOVO 176(AX), X13
	MOVO 192(AX), X15
	MOVO 208(AX), X9
	MOVO 224(AX), X8
	MOVO X13, X10
	MOVO X15, X14
	MOVO X9, X3
	MOVO X8, X2
	PSUBQ X11, X13
	PSLLQ $39, X13
	PSUBQ X10, X15
	MOVO X15, X0
	PSLLQ $60, X15
	POR X12, X1
	POR X13, X15
	POR X1, X15
	MOVO X15, 48(BX)
	PSRLQ $4, X0
	PSUBQ X14, X9
	PSLLQ $17, X9
	PSUBQ X3, X8
	PSLLQ $38, X8
	MOVO 240(AX), X5
	MOVO 256(AX), X4
	MOVO 272(AX), X6
	MOVO 288(AX), X7
	MOVO X5, X11
	MOVO X4, X10
	MOVO X6, X12
	MOVO X7, X13
	PSUBQ X2, X5
	MOVO X5, X1
	PSLLQ $59, X5
	POR X0, X9
	POR X8, X5
	POR X9, X5
	MOVO X5, 64(BX)
	PSRLQ $5, X1
	PSUBQ X11, X4
	PSLLQ $16, X4
	PSUBQ X10, X6
	PSLLQ $37, X6
	PSUBQ X12, X7
	MOVO X7, X15
	PSLLQ $58, X7
	POR X1, X4
	POR X6, X7
	POR X4, X7
	MOVO X7, 80(BX)
	PSRLQ $6, X15
	MOVO 304(AX), X14
	MOVO 320(AX), X3
	MOVO 336(AX), X2
	MOVO 352(AX), X0
	MOVO X14, X8
	MOVO X3, X9
	MOVO X2, X5
	MOVO X0, X11
	PSUBQ X13, X14
	PSLLQ $15, X14
	PSUBQ X8, X3
	PSLLQ $36, X3
	PSUBQ X9, X2
	MOVO X2, X10
	PSLLQ $57, X2
	POR X15, X14
	POR X3, X2
	POR X14, X2
	MOVO X2, 96(BX)
	PSRLQ $7, X10
	PSUBQ X5, X0
	PSLLQ $14, X0
	MOVO 368(AX), X12
	MOVO 384(AX), X1
	MOVO 400(AX), X6
	MOVO 416(AX), X4
	MOVO X12, X7
	MOVO X1, X13
	MOVO X6, X8
	MOVO X4, X9
	PSUBQ X11, X12
	PSLLQ $35, X12
	PSUBQ X7, X1
	MOVO X1, X15
	PSLLQ $56, X1
	POR X10, X0
	POR X12, X1
	POR X0, X1
	MOVO X1, 112(BX)
	PSRLQ $8, X15
	PSUBQ X13, X6
	PSLLQ $13, X6
	PSUBQ X8, X4
	PSLLQ $34, X4
	MOVO 432(AX), X3
	MOVO 448(AX), X14
	MOVO 464(AX), X2
	MOVO 480(AX), X5
	MOVO X3, X11
	MOVO X14, X7
	MOVO X2, X10
	MOVO X5, X12
	PSUBQ X9, X3
	MOVO X3, X0
	PSLLQ $55, X3
	POR X15, X6
	POR X4, X3
	POR X6, X3
	MOVO X3, 128(BX)
	PSRLQ $9, X0
	PSUBQ X11, X14
	PSLLQ $12, X14
	PSUBQ X7, X2
	PSLLQ $33, X2
	PSUBQ X10, X5
	MOVO X5, X1
	PSLLQ $54, X5
	POR X0, X14
	POR X2, X5
	POR X14, X5
	MOVO X5, 144(BX)
	PSRLQ $10, X1
	MOVO 496(AX), X13
	MOVO 512(AX), X8
	MOVO 528(AX), X9
	MOVO 544(AX), X15
	MOVO X13, X4
	MOVO X8, X6
	MOVO X9, X3
	MOVO X15, X11
	PSUBQ X12, X13
	PSLLQ $11, X13
	PSUBQ X4, X8
	PSLLQ $32, X8
	PSUBQ X6, X9
	MOVO X9, X7
	PSLLQ $53, X9
	POR X1, X13
	POR X8, X9
	POR X13, X9
	MOVO X9, 160(BX)
	PSRLQ $11, X7
	PSUBQ X3, X15
	PSLLQ $10, X15
	MOVO 560(AX), X10
	MOVO 576(AX), X0
	MOVO 592(AX), X2
	MOVO 608(AX), X14
	MOVO X10, X5
	MOVO X0, X12
	MOVO X2, X4
	MOVO X14, X6
	PSUBQ X11, X10
	PSLLQ $31, X10
	PSUBQ X5, X0
	MOVO X0, X1
	PSLLQ $52, X0
	POR X7, X15
	POR X10, X0
	POR X15, X0
	MOVO X0, 176(BX)
	PSRLQ $12, X1
	PSUBQ X12, X2
	PSLLQ $9, X2
	PSUBQ X4, X14
	PSLLQ $30, X14
	MOVO 624(AX), X8
	MOVO 640(AX), X13
	MOVO 656(AX), X9
	MOVO 672(AX), X3
	MOVO X8, X11
	MOVO X13, X5
	MOVO X9, X7
	MOVO X3, X10
	PSUBQ X6, X8
	MOVO X8, X15
	PSLLQ $51, X8
	POR X1, X2
	POR X14, X8
	POR X2, X8
	MOVO X8, 192(BX)
	PSRLQ $13, X15
	PSUBQ X11, X13
	PSLLQ $8, X13
	PSUBQ X5, X9
	PSLLQ $29, X9
	PSUBQ X7, X3
	MOVO X3, X0
	PSLLQ $50, X3
	POR X15, X13
	POR X9, X3
	POR X13, X3
	MOVO X3, 208(BX)
	PSRLQ $14, X0
	MOVO 688(AX), X12
	MOVO 704(AX), X4
	MOVO 720(AX), X6
	MOVO 736(AX), X1
	MOVO X12, X14
	MOVO X4, X2
	MOVO X6, X8
	MOVO X1, X11
	PSUBQ X10, X12
	PSLLQ $7, X12
	PSUBQ X14, X4
	PSLLQ $28, X4
	PSUBQ X2, X6
	MOVO X6, X5
	PSLLQ $49, X6
	POR X0, X12
	POR X4, X6
	POR X12, X6
	MOVO X6, 224(BX)
	PSRLQ $15, X5
	PSUBQ X8, X1
	PSLLQ $6, X1
	MOVO 752(AX), X7
	MOVO 768(AX), X15
	MOVO 784(AX), X9
	MOVO 800(AX), X13
	MOVO X7, X3
	MOVO X15, X10
	MOVO X9, X14
	MOVO X13, X2
	PSUBQ X11, X7
	PSLLQ $27, X7
	PSUBQ X3, X15
	MOVO X15, X0
	PSLLQ $48, X15
	POR X5, X1
	POR X7, X15
	POR X1, X15
	MOVO X15, 240(BX)
	PSRLQ $16, X0
	PSUBQ X10, X9
	PSLLQ $5, X9
	PSUBQ X14, X13
	PSLLQ $26, X13
	MOVO 816(AX), X4
	MOVO 832(AX), X12
	MOVO 848(AX), X6
	MOVO 864(AX), X8
	MOVO X4, X11
	MOVO X12, X3
	MOVO X6, X5
	MOVO X8, X7
	PSUBQ X2, X4
	MOVO X4, X1
	PSLLQ $47, X4
	POR X0, X9
	POR X13, X4
	POR X9, X4
	MOVO X4, 256(BX)
	PSRLQ $17, X1
	PSUBQ X11, X12
	PSLLQ $4, X12
	PSUBQ X3, X6
	PSLLQ $25, X6
	PSUBQ X5, X8
	MOVO X8, X15
	PSLLQ $46, X8
	POR X1, X12
	POR X6, X8
	POR X12, X8
	MOVO X8, 272(BX)
	PSRLQ $18, X15
	MOVO 880(AX), X10
	MOVO 896(AX), X14
	MOVO 912(AX), X2
	MOVO 928(AX), X0
	MOVO X10, X13
	MOVO X14, X9
	MOVO X2, X4
	MOVO X0, X11
	PSUBQ X7, X10
	PSLLQ $3, X10
	PSUBQ X13, X14
	PSLLQ $24, X14
	PSUBQ X9, X2
	MOVO X2, X3
	PSLLQ $45, X2
	POR X15, X10
	POR X14, X2
	POR X10, X2
	MOVO X2, 288(BX)
	PSRLQ $19, X3
	PSUBQ X4, X0
	PSLLQ $2, X0
	MOVO 944(AX), X5
	MOVO 960(AX), X1
	MOVO 976(AX), X6
	MOVO 992(AX), X12
	MOVO X5, X8
	MOVO X1, X7
	MOVO X6, X13
	MOVO X12, X9
	PSUBQ X11, X5
	PSLLQ $23, X5
	PSUBQ X8, X1
	MOVO X1, X15
	PSLLQ $44, X1
	POR X3, X0
	POR X5, X1
	POR X0, X1
	MOVO X1, 304(BX)
	PSRLQ $20, X15
	PSUBQ X7, X6
	PSLLQ $1, X6
	PSUBQ X13, X12
	PSLLQ $22, X12
	MOVO 1008(AX), X14
	MOVO X14, X10
	PSUBQ X9, X14
	PSLLQ $43, X14
	POR X15, X6
	POR X12, X14
	POR X6, X14
	MOVO X14, 320(BX)
	MOVO X10, 0(DX)
	RET

// func dpack64_22(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_22(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $22, X2
	PSUBQ X5, X3
	MOVO X3, X7
	PSLLQ $44, X3
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	PSRLQ $20, X7
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	PSUBQ X6, X8
	PSLLQ $2, X8
	PSUBQ X12, X9
	PSLLQ $24, X9
	PSUBQ X13, X10
	MOVO X10, X0
	PSLLQ $46, X10
	POR X7, X8
	POR X9, X10
	POR X8, X10
	MOVO X10, 16(BX)
	PSRLQ $18, X0
	PSUBQ X14, X11
	PSLLQ $4, X11
	MOVO 112(AX), X4
	MOVO 128(AX), X5
	MOVO 144(AX), X1
	MOVO 160(AX), X3
	MOVO X4, X2
	MOVO X5, X6
	MOVO X1, X12
	MOVO X3, X13
	PSUBQ X15, X4
	PSLLQ $26, X4
	PSUBQ X2, X5
	MOVO X5, X7
	PSLLQ $48, X5
	POR X0, X11
	POR X4, X5
	POR X11, X5
	MOVO X5, 32(BX)
	PSRLQ $16, X7
	PSUBQ X6, X1
	PSLLQ $6, X1
	PSUBQ X12, X3
	PSLLQ $28, X3
	MOVO 176(AX), X9
	MOVO 192(AX), X8
	MOVO 208(AX), X10
	MOVO 224(AX), X14
	MOVO X9, X15
	MOVO X8, X2
	MOVO X10, X0
	MOVO X14, X4
	PSUBQ X13, X9
	MOVO X9, X11
	PSLLQ $50, X9
	POR X7, X1
	POR X3, X9
	POR X1, X9
	MOVO X9, 48(BX)
	PSRLQ $14, X11
	PSUBQ X15, X8
	PSLLQ $8, X8
	PSUBQ X2, X10
	PSLLQ $30, X10
	PSUBQ X0, X14
	MOVO X14, X5
	PSLLQ $52, X14
	POR X11, X8
	POR X10, X14
	POR X8, X14
	MOVO X14, 64(BX)
	PSRLQ $12, X5
	MOVO 240(AX), X6
	MOVO 256(AX), X12
	MOVO 272(AX), X13
	MOVO 288(AX), X7
	MOVO X6, X3
	MOVO X12, X1
	MOVO X13, X9
	MOVO X7, X15
	PSUBQ X4, X6
	PSLLQ $10, X6
	PSUBQ X3, X12
	PSLLQ $32, X12
	PSUBQ X1, X13
	MOVO X13, X2
	PSLLQ $54, X13
	POR X5, X6
	POR X12, X13
	POR X6, X13
	MOVO X13, 80(BX)
	PSRLQ $10, X2
	PSUBQ X9, X7
	PSLLQ $12, X7
	MOVO 304(AX), X0
	MOVO 320(AX), X11
	MOVO 336(AX), X10
	MOVO 352(AX), X8
	MOVO X0, X14
	MOVO X11, X4
	MOVO X10, X3
	MOVO X8, X1
	PSUBQ X15, X0
	PSLLQ $34, X0
	PSUBQ X14, X11
	MOVO X11, X5
	PSLLQ $56, X11
	POR X2, X7
	POR X0, X11
	POR X7, X11
	MOVO X11, 96(BX)
	PSRLQ $8, X5
	PSUBQ X4, X10
	PSLLQ $14, X10
	PSUBQ X3, X8
	PSLLQ $36, X8
	MOVO 368(AX), X12
	MOVO 384(AX), X6
	MOVO 400(AX), X13
	MOVO 416(AX), X9
	MOVO X12, X15
	MOVO X6, X14
	MOVO X13, X2
	MOVO X9, X0
	PSUBQ X1, X12
	MOVO X12, X7
	PSLLQ $58, X12
	POR X5, X10
	POR X8, X12
	POR X10, X12
	MOVO X12, 112(BX)
	PSRLQ $6, X7
	PSUBQ X15, X6
	PSLLQ $16, X6
	PSUBQ X14, X13
	PSLLQ $38, X13
	PSUBQ X2, X9
	MOVO X9, X11
	PSLLQ $60, X9
	POR X7, X6
	POR X13, X9
	POR X6, X9
	MOVO X9, 128(BX)
	PSRLQ $4, X11
	MOVO 432(AX), X4
	MOVO 448(AX), X3
	MOVO 464(AX), X1
	MOVO 480(AX), X5
	MOVO X4, X8
	MOVO X3, X10
	MOVO X1, X12
	MOVO X5, X15
	PSUBQ X0, X4
	PSLLQ $18, X4
	PSUBQ X8, X3
	PSLLQ $40, X3
	PSUBQ X10, X1
	MOVO X1, X14
	PSLLQ $62, X1
	POR X11, X4
	POR X3, X1
	POR X4, X1
	MOVO X1, 144(BX)
	PSRLQ $2, X14
	PSUBQ X12, X5
	PSLLQ $20, X5
	MOVO 496(AX), X2
	MOVO 512(AX), X7
	MOVO 528(AX), X13
	MOVO 544(AX), X6
	MOVO X2, X9
	MOVO X7, X0
	MOVO X13, X8
	MOVO X6, X10
	PSUBQ X15, X2
	PSLLQ $42, X2
	POR X14, X5
	POR X2, X5
	MOVO X5, 160(BX)
	PSUBQ X9, X7
	PSUBQ X0, X13
	PSLLQ $22, X13
	PSUBQ X8, X6
	MOVO X6, X11
	PSLLQ $44, X6
	POR X7, X13
	POR X6, X13
	MOVO X13, 176(BX)
	PSRLQ $20, X11
	MOVO 560(AX), X3
	MOVO 576(AX), X4
	MOVO 592(AX), X1
	MOVO 608(AX), X12
	MOVO X3, X15
	MOVO X4, X14
	MOVO X1, X2
	MOVO X12, X5
	PSUBQ X10, X3
	PSLLQ $2, X3
	PSUBQ X15, X4
	PSLLQ $24, X4
	PSUBQ X14, X1
	MOVO X1, X9
	PSLLQ $46, X1
	POR X11, X3
	POR X4, X1
	POR X3, X1
	MOVO X1, 192(BX)
	PSRLQ $18, X9
	PSUBQ X2, X12
	PSLLQ $4, X12
	MOVO 624(AX), X0
	MOVO 640(AX), X8
	MOVO 656(AX), X7
	MOVO 672(AX), X6
	MOVO X0, X13
	MOVO X8, X10
	MOVO X7, X15
	MOVO X6, X14
	PSUBQ X5, X0
	PSLLQ $26, X0
	PSUBQ X13, X8
	MOVO X8, X11
	PSLLQ $48, X8
	POR X9, X12
	POR X0, X8
	POR X12, X8
	MOVO X8, 208(BX)
	PSRLQ $16, X11
	PSUBQ X10, X7
	PSLLQ $6, X7
	PSUBQ X15, X6
	PSLLQ $28, X6
	MOVO 688(AX), X4
	MOVO 704(AX), X3
	MOVO 720(AX), X1
	MOVO 736(AX), X2
	MOVO X4, X5
	MOVO X3, X13
	MOVO X1, X9
	MOVO X2, X0
	PSUBQ X14, X4
	MOVO X4, X12
	PSLLQ $50, X4
	POR X11, X7
	POR X6, X4
	POR X7, X4
	MOVO X4, 224(BX)
	PSRLQ $14, X12
	PSUBQ X5, X3
	PSLLQ $8, X3
	PSUBQ X13, X1
	PSLLQ $30, X1
	PSUBQ X9, X2
	MOVO X2, X8
	PSLLQ $52, X2
	POR X12, X3
	POR X1, X2
	POR X3, X2
	MOVO X2, 240(BX)
	PSRLQ $12, X8
	MOVO 752(AX), X10
	MOVO 768(AX), X15
	MOVO 784(AX), X14
	MOVO 800(AX), X11
	MOVO X10, X6
	MOVO X15, X7
	MOVO X14, X4
	MOVO X11, X5
	PSUBQ X0, X10
	PSLLQ $10, X10
	PSUBQ X6, X15
	PSLLQ $32, X15
	PSUBQ X7, X14
	MOVO X14, X13
	PSLLQ $54, X14
	POR X8, X10
	POR X15, X14
	POR X10, X14
	MOVO X14, 256(BX)
	PSRLQ $10, X13
	PSUBQ X4, X11
	PSLLQ $12, X11
	MOVO 816(AX), X9
	MOVO 832(AX), X12
	MOVO 848(AX), X1
	MOVO 864(AX), X3
	MOVO X9, X2
	MOVO X12, X0
	MOVO X1, X6
	MOVO X3, X7
	PSUBQ X5, X9
	PSLLQ $34, X9
	PSUBQ X2, X12
	MOVO X12, X8
	PSLLQ $56, X12
	POR X13, X11
	POR X9, X12
	POR X11, X12
	MOVO X12, 272(BX)
	PSRLQ $8, X8
	PSUBQ X0, X1
	PSLLQ $14, X1
	PSUBQ X6, X3
	PSLLQ $36, X3
	MOVO 880(AX), X15
	MOVO 896(AX), X10
	MOVO 912(AX), X14
	MOVO 928(AX), X4
	MOVO X15, X5
	MOVO X10, X2
	MOVO X14, X13
	MOVO X4, X9
	PSUBQ X7, X15
	MOVO X15, X11
	PSLLQ $58, X15
	POR X8, X1
	POR X3, X15
	POR X1, X15
	MOVO X15, 288(BX)
	PSRLQ $6, X11
	PSUBQ X5, X10
	PSLLQ $16, X10
	PSUBQ X2, X14
	PSLLQ $38, X14
	PSUBQ X13, X4
	MOVO X4, X12
	PSLLQ $60, X4
	POR X11, X10
	POR X14, X4
	POR X10, X4
	MOVO X4, 304(BX)
	PSRLQ $4, X12
	MOVO 944(AX), X0
	MOVO 960(AX), X6
	MOVO 976(AX), X7
	MOVO 992(AX), X8
	MOVO X0, X3
	MOVO X6, X1
	MOVO X7, X15
	MOVO X8, X5
	PSUBQ X9, X0
	PSLLQ $18, X0
	PSUBQ X3, X6
	PSLLQ $40, X6
	PSUBQ X1, X7
	MOVO X7, X2
	PSLLQ $62, X7
	POR X12, X0
	POR X6, X7
	POR X0, X7
	MOVO X7, 320(BX)
	PSRLQ $2, X2
	PSUBQ X15, X8
	PSLLQ $20, X8
	MOVO 1008(AX), X13
	MOVO X13, X11
	PSUBQ X5, X13
	PSLLQ $42, X13
	POR X2, X8
	POR X13, X8
	MOVO X8, 336(BX)
	MOVO X11, 0(DX)
	RET

// func dpack64_23(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_23(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $23, X2
	PSUBQ X5, X3
	MOVO X3, X7
	PSLLQ $46, X3
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	PSRLQ $18, X7
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	PSUBQ X6, X8
	PSLLQ $5, X8
	PSUBQ X12, X9
	PSLLQ $28, X9
	PSUBQ X13, X10
	MOVO X10, X0
	PSLLQ $51, X10
	POR X7, X8
	POR X9, X10
	POR X8, X10
	MOVO X10, 16(BX)
	PSRLQ $13, X0
	PSUBQ X14, X11
	PSLLQ $10, X11
	MOVO 112(AX), X4
	MOVO 128(AX), X5
	MOVO 144(AX), X1
	MOVO 160(AX), X3
	MOVO X4, X2
	MOVO X5, X6
	MOVO X1, X12
	MOVO X3, X13
	PSUBQ X15, X4
	PSLLQ $33, X4
	PSUBQ X2, X5
	MOVO X5, X7
	PSLLQ $56, X5
	POR X0, X11
	POR X4, X5
	POR X11, X5
	MOVO X5, 32(BX)
	PSRLQ $8, X7
	PSUBQ X6, X1
	PSLLQ $15, X1
	PSUBQ X12, X3
	PSLLQ $38, X3
	MOVO 176(AX), X9
	MOVO 192(AX), X8
	MOVO 208(AX), X10
	MOVO 224(AX), X14
	MOVO X9, X15
	MOVO X8, X2
	MOVO X10, X0
	MOVO X14, X4
	PSUBQ X13, X9
	MOVO X9, X11
	PSLLQ $61, X9
	POR X7, X1
	POR X3, X9
	POR X1, X9
	MOVO X9, 48(BX)
	PSRLQ $3, X11
	PSUBQ X15, X8
	PSLLQ $20, X8
	PSUBQ X2, X10
	MOVO X10, X5
	PSLLQ $43, X10
	POR X11, X8
	POR X10, X8
	MOVO X8, 64(BX)
	PSRLQ $21, X5
	PSUBQ X0, X14
	PSLLQ $2, X14
	MOVO 240(AX), X6
	MOVO 256(AX), X12
	MOVO 272(AX), X13
	MOVO 288(AX), X7
	MOVO X6, X3
	MOVO X12, X1
	MOVO X13, X9
	MOVO X7, X15
	PSUBQ X4, X6
	PSLLQ $25, X6
	PSUBQ X3, X12
	MOVO X12, X2
	PSLLQ $48, X12
	POR X5, X14
	POR X6, X12
	POR X14, X12
	MOVO X12, 80(BX)
	PSRLQ $16, X2
	PSUBQ X1, X13
	PSLLQ $7, X13
	PSUBQ X9, X7
	PSLLQ $30, X7
	MOVO 304(AX), X11
	MOVO 320(AX), X10
	MOVO 336(AX), X8
	MOVO 352(AX), X0
	MOVO X11, X4
	MOVO X10, X3
	MOVO X8, X5
	MOVO X0, X6
	PSUBQ X15, X11
	MOVO X11, X14
	PSLLQ $53, X11
	POR X2, X13
	POR X7, X11
	POR X13, X11
	MOVO X11, 96(BX)
	PSRLQ $11, X14
	PSUBQ X4, X10
	PSLLQ $12, X10
	PSUBQ X3, X8
	PSLLQ $35, X8
	PSUBQ X5, X0
	MOVO X0, X12
	PSLLQ $58, X0
	POR X14, X10
	POR X8, X0
	POR X10, X0
	MOVO X0, 112(BX)
	PSRLQ $6, X12
	MOVO 368(AX), X1
	MOVO 384(AX), X9
	MOVO 400(AX), X15
	MOVO 416(AX), X2
	MOVO X1, X7
	MOVO X9, X13
	MOVO X15, X11
	MOVO X2, X4
	PSUBQ X6, X1
	PSLLQ $17, X1
	PSUBQ X7, X9
	PSLLQ $40, X9
	PSUBQ X13, X15
	MOVO X15, X3
	PSLLQ $63, X15
	POR X12, X1
	POR X9, X15
	POR X1, X15
	MOVO X15, 128(BX)
	PSRLQ $1, X3
	PSUBQ X11, X2
	PSLLQ $22, X2
	MOVO 432(AX), X5
	MOVO 448(AX), X14
	MOVO 464(AX), X8
	MOVO 480(AX), X10
	MOVO X5, X0
	MOVO X14, X6
	MOVO X8, X7
	MOVO X10, X13
	PSUBQ X4, X5
	MOVO X5, X12
	PSLLQ $45, X5
	POR X3, X2
	POR X5, X2
	MOVO X2, 144(BX)
	PSRLQ $19, X12
	PSUBQ X0, X14
	PSLLQ $4, X14
	PSUBQ X6, X8
	PSLLQ $27, X8
	PSUBQ X7, X10
	MOVO X10, X9
	PSLLQ $50, X10
	POR X12, X14
	POR X8, X10
	POR X14, X10
	MOVO X10, 160(BX)
	PSRLQ $14, X9
	MOVO 496(AX), X1
	MOVO 512(AX), X15
	MOVO 528(AX), X11
	MOVO 544(AX), X4
	MOVO X1, X3
	MOVO X15, X5
	MOVO X11, X2
	MOVO X4, X0
	PSUBQ X13, X1
	PSLLQ $9, X1
	PSUBQ X3, X15
	PSLLQ $32, X15
	PSUBQ X5, X11
	MOVO X11, X6
	PSLLQ $55, X11
	POR X9, X1
	POR X15, X11
	POR X1, X11
	MOVO X11, 176(BX)
	PSRLQ $9, X6
	PSUBQ X2, X4
	PSLLQ $14, X4
	MOVO 560(AX), X7
	MOVO 576(AX), X12
	MOVO 592(AX), X8
	MOVO 608(AX), X14
	MOVO X7, X10
	MOVO X12, X13
	MOVO X8, X3
	MOVO X14, X5
	PSUBQ X0, X7
	PSLLQ $37, X7
	PSUBQ X10, X12
	MOVO X12, X9
	PSLLQ $60, X12
	POR X6, X4
	POR X7, X12
	POR X4, X12
	MOVO X12, 192(BX)
	PSRLQ $4, X9
	PSUBQ X13, X8
	PSLLQ $19, X8
	PSUBQ X3, X14
	MOVO X14, X15
	PSLLQ $42, X14
	POR X9, X8
	POR X14, X8
	MOVO X8, 208(BX)
	PSRLQ $22, X15
	MOVO 624(AX), X1
	MOVO 640(AX), X11
	MOVO 656(AX), X2
	MOVO 672(AX), X0
	MOVO X1, X10
	MOVO X11, X6
	MOVO X2, X7
	MOVO X0, X4
	PSUBQ X5, X1
	PSLLQ $1, X1
	PSUBQ X10, X11
	PSLLQ $24, X11
	PSUBQ X6, X2
	MOVO X2, X12
	PSLLQ $47, X2
	POR X15, X1
	POR X11, X2
	POR X1, X2
	MOVO X2, 224(BX)
	PSRLQ $17, X12
	PSUBQ X7, X0
	PSLLQ $6, X0
	MOVO 688(AX), X13
	MOVO 704(AX), X3
	MOVO 720(AX), X9
	MOVO 736(AX), X14
	MOVO X13, X8
	MOVO X3, X5
	MOVO X9, X10
	MOVO X14, X6
	PSUBQ X4, X13
	PSLLQ $29, X13
	PSUBQ X8, X3
	MOVO X3, X15
	PSLLQ $52, X3
	POR X12, X0
	POR X13, X3
	POR X0, X3
	MOVO X3, 240(BX)
	PSRLQ $12, X15
	PSUBQ X5, X9
	PSLLQ $11, X9
	PSUBQ X10, X14
	PSLLQ $34, X14
	MOVO 752(AX), X11
	MOVO 768(AX), X1
	MOVO 784(AX), X2
	MOVO 800(AX), X7
	MOVO X11, X4
	MOVO X1, X8
	MOVO X2, X12
	MOVO X7, X13
	PSUBQ X6, X11
	MOVO X11, X0
	PSLLQ $57, X11
	POR X15, X9
	POR X14, X11
	POR X9, X11
	MOVO X11, 256(BX)
	PSRLQ $7, X0
	PSUBQ X4, X1
	PSLLQ $16, X1
	PSUBQ X8, X2
	PSLLQ $39, X2
	PSUBQ X12, X7
	MOVO X7, X3
	PSLLQ $62, X7
	POR X0, X1
	POR X2, X7
	POR X1, X7
	MOVO X7, 272(BX)
	PSRLQ $2, X3
	MOVO 816(AX), X5
	MOVO 832(AX), X10
	MOVO 848(AX), X6
	MOVO 864(AX), X15
	MOVO X5, X14
	MOVO X10, X9
	MOVO X6, X11
	MOVO X15, X4
	PSUBQ X13, X5
	PSLLQ $21, X5
	PSUBQ X14, X10
	MOVO X10, X8
	PSLLQ $44, X10
	POR X3, X5
	POR X10, X5
	MOVO X5, 288(BX)
	PSRLQ $20, X8
	PSUBQ X9, X6
	PSLLQ $3, X6
	PSUBQ X11, X15
	PSLLQ $26, X15
	MOVO 880(AX), X12
	MOVO 896(AX), X0
	MOVO 912(AX), X2
	MOVO 928(AX), X1
	MOVO X12, X7
	MOVO X0, X13
	MOVO X2, X14
	MOVO X1, X3
	PSUBQ X4, X12
	MOVO X12, X10
	PSLLQ $49, X12
	POR X8, X6
	POR X15, X12
	POR X6, X12
	MOVO X12, 304(BX)
	PSRLQ $15, X10
	PSUBQ X7, X0
	PSLLQ $8, X0
	PSUBQ X13, X2
	PSLLQ $31, X2
	PSUBQ X14, X1
	MOVO X1, X5
	PSLLQ $54, X1
	POR X10, X0
	POR X2, X1
	POR X0, X1
	MOVO X1, 320(BX)
	PSRLQ $10, X5
	MOVO 944(AX), X9
	MOVO 960(AX), X11
	MOVO 976(AX), X4
	MOVO 992(AX), X8
	MOVO X9, X15
	MOVO X11, X6
	MOVO X4, X12
	MOVO X8, X7
	PSUBQ X3, X9
	PSLLQ $13, X9
	PSUBQ X15, X11
	PSLLQ $36, X11
	PSUBQ X6, X4
	MOVO X4, X13
	PSLLQ $59, X4
	POR X5, X9
	POR X11, X4
	POR X9, X4
	MOVO X4, 336(BX)
	PSRLQ $5, X13
	PSUBQ X12, X8
	PSLLQ $18, X8
	MOVO 1008(AX), X14
	MOVO X14, X10
	PSUBQ X7, X14
	PSLLQ $41, X14
	POR X13, X8
	POR X14, X8
	MOVO X8, 352(BX)
	MOVO X10, 0(DX)
	RET

// func dpack64_24(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_24(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $24, X2
	PSUBQ X5, X3
	MOVO X3, X7
	PSLLQ $48, X3
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	PSRLQ $16, X7
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	PSUBQ X6, X8
	PSLLQ $8, X8
	PSUBQ X12, X9
	PSLLQ $32, X9
	PSUBQ X13, X10
	MOVO X10, X0
	PSLLQ $56, X10
	POR X7, X8
	POR X9, X10
	POR X8, X10
	MOVO X10, 16(BX)
	PSRLQ $8, X0
	PSUBQ X14, X11
	PSLLQ $16, X11
	MOVO 112(AX), X4
	MOVO 128(AX), X5
	MOVO 144(AX), X1
	MOVO 160(AX), X3
	MOVO X4, X2
	MOVO X5, X6
	MOVO X1, X12
	MOVO X3, X13
	PSUBQ X15, X4
	PSLLQ $40, X4
	POR X0, X11
	POR X4, X11
	MOVO X11, 32(BX)
	PSUBQ X2, X5
	PSUBQ X6, X1
	PSLLQ $24, X1
	PSUBQ X12, X3
	MOVO X3, X7
	PSLLQ $48, X3
	POR X5, X1
	POR X3, X1
	MOVO X1, 48(BX)
	PSRLQ $16, X7
	MOVO 176(AX), X9
	MOVO 192(AX), X8
	MOVO 208(AX), X10
	MOVO 224(AX), X14
	MOVO X9, X15
	MOVO X8, X0
	MOVO X10, X4
	MOVO X14, X11
	PSUBQ X13, X9
	PSLLQ $8, X9
	PSUBQ X15, X8
	PSLLQ $32, X8
	PSUBQ X0, X10
	MOVO X10, X2
	PSLLQ $56, X10
	POR X7, X9
	POR X8, X10
	POR X9, X10
	MOVO X10, 64(BX)
	PSRLQ $8, X2
	PSUBQ X4, X14
	PSLLQ $16, X14
	MOVO 240(AX), X6
	MOVO 256(AX), X12
	MOVO 272(AX), X5
	MOVO 288(AX), X3
	MOVO X6, X1
	MOVO X12, X13
	MOVO X5, X15
	MOVO X3, X0
	PSUBQ X11, X6
	PSLLQ $40, X6
	POR X2, X14
	POR X6, X14
	MOVO X14, 80(BX)
	PSUBQ X1, X12
	PSUBQ X13, X5
	PSLLQ $24, X5
	PSUBQ X15, X3
	MOVO X3, X7
	PSLLQ $48, X3
	POR X12, X5
	POR X3, X5
	MOVO X5, 96(BX)
	PSRLQ $16, X7
	MOVO 304(AX), X8
	MOVO 320(AX), X9
	MOVO 336(AX), X10
	MOVO 352(AX), X4
	MOVO X8, X11
	MOVO X9, X2
	MOVO X10, X6
	MOVO X4, X14
	PSUBQ X0, X8
	PSLLQ $8, X8
	PSUBQ X11, X9
	PSLLQ $32, X9
	PSUBQ X2, X10
	MOVO X10, X1
	PSLLQ $56, X10
	POR X7, X8
	POR X9, X10
	POR X8, X10
	MOVO X10, 112(BX)
	PSRLQ $8, X1
	PSUBQ X6, X4
	PSLLQ $16, X4
	MOVO 368(AX), X13
	MOVO 384(AX), X15
	MOVO 400(AX), X12
	MOVO 416(AX), X3
	MOVO X13, X5
	MOVO X15, X0
	MOVO X12, X11
	MOVO X3, X2
	PSUBQ X14, X13
	PSLLQ $40, X13
	POR X1, X4
	POR X13, X4
	MOVO X4, 128(BX)
	PSUBQ X5, X15
	PSUBQ X0, X12
	PSLLQ $24, X12
	PSUBQ X11, X3
	MOVO X3, X7
	PSLLQ $48, X3
	POR X15, X12
	POR X3, X12
	MOVO X12, 144(BX)
	PSRLQ $16, X7
	MOVO 432(AX), X9
	MOVO 448(AX), X8
	MOVO 464(AX), X10
	MOVO 480(AX), X6
	MOVO X9, X14
	MOVO X8, X1
	MOVO X10, X13
	MOVO X6, X4
	PSUBQ X2, X9
	PSLLQ $8, X9
	PSUBQ X14, X8
	PSLLQ $32, X8
	PSUBQ X1, X10
	MOVO X10, X5
	PSLLQ $56, X10
	POR X7, X9
	POR X8, X10
	POR X9, X10
	MOVO X10, 160(BX)
	PSRLQ $8, X5
	PSUBQ X13, X6
	PSLLQ $16, X6
	MOVO 496(AX), X0
	MOVO 512(AX), X11
	MOVO 528(AX), X15
	MOVO 544(AX), X3
	MOVO X0, X12
	MOVO X11, X2
	MOVO X15, X14
	MOVO X3, X1
	PSUBQ X4, X0
	PSLLQ $40, X0
	POR X5, X6
	POR X0, X6
	MOVO X6, 176(BX)
	PSUBQ X12, X11
	PSUBQ X2, X15
	PSLLQ $24, X15
	PSUBQ X14, X3
	MOVO X3, X7
	PSLLQ $48, X3
	POR X11, X15
	POR X3, X15
	MOVO X15, 192(BX)
	PSRLQ $16, X7
	MOVO 560(AX), X8
	MOVO 576(AX), X9
	MOVO 592(AX), X10
	MOVO 608(AX), X13
	MOVO X8, X4
	MOVO X9, X5
	MOVO X10, X0
	MOVO X13, X6
	PSUBQ X1, X8
	PSLLQ $8, X8
	PSUBQ X4, X9
	PSLLQ $32, X9
	PSUBQ X5, X10
	MOVO X10, X12
	PSLLQ $56, X10
	POR X7, X8
	POR X9, X10
	POR X8, X10
	MOVO X10, 208(BX)
	PSRLQ $8, X12
	PSUBQ X0, X13
	PSLLQ $16, X13
	MOVO 624(AX), X2
	MOVO 640(AX), X14
	MOVO 656(AX), X11
	MOVO 672(AX), X3
	MOVO X2, X15
	MOVO X14, X1
	MOVO X11, X4
	MOVO X3, X5
	PSUBQ X6, X2
	PSLLQ $40, X2
	POR X12, X13
	POR X2, X13
	MOVO X13, 224(BX)
	PSUBQ X15, X14
	PSUBQ X1, X11
	PSLLQ $24, X11
	PSUBQ X4, X3
	MOVO X3, X7
	PSLLQ $48, X3
	POR X14, X11
	POR X3, X11
	MOVO X11, 240(BX)
	PSRLQ $16, X7
	MOVO 688(AX), X9
	MOVO 704(AX), X8
	MOVO 720(AX), X10
	MOVO 736(AX), X0
	MOVO X9, X6
	MOVO X8, X12
	MOVO X10, X2
	MOVO X0, X13
	PSUBQ X5, X9
	PSLLQ $8, X9
	PSUBQ X6, X8
	PSLLQ $32, X8
	PSUBQ X12, X10
	MOVO X10, X15
	PSLLQ $56, X10
	POR X7, X9
	POR X8, X10
	POR X9, X10
	MOVO X10, 256(BX)
	PSRLQ $8, X15
	PSUBQ X2, X0
	PSLLQ $16, X0
	MOVO 752(AX), X1
	MOVO 768(AX), X4
	MOVO 784(AX), X14
	MOVO 800(AX), X3
	MOVO X1, X11
	MOVO X4, X5
	MOVO X14, X6
	MOVO X3, X12
	PSUBQ X13, X1
	PSLLQ $40, X1
	POR X15, X0
	POR X1, X0
	MOVO X0, 272(BX)
	PSUBQ X11, X4
	PSUBQ X5, X14
	PSLLQ $24, X14
	PSUBQ X6, X3
	MOVO X3, X7
	PSLLQ $48, X3
	POR X4, X14
	POR X3, X14
	MOVO X14, 288(BX)
	PSRLQ $16, X7
	MOVO 816(AX), X8
	MOVO 832(AX), X9
	MOVO 848(AX), X10
	MOVO 864(AX), X2
	MOVO X8, X13
	MOVO X9, X15
	MOVO X10, X1
	MOVO X2, X0
	PSUBQ X12, X8
	PSLLQ $8, X8
	PSUBQ X13, X9
	PSLLQ $32, X9
	PSUBQ X15, X10
	MOVO X10, X11
	PSLLQ $56, X10
	POR X7, X8
	POR X9, X10
	POR X8, X10
	MOVO X10, 304(BX)
	PSRLQ $8, X11
	PSUBQ X1, X2
	PSLLQ $16, X2
	MOVO 880(AX), X5
	MOVO 896(AX), X6
	MOVO 912(AX), X4
	MOVO 928(AX), X3
	MOVO X5, X14
	MOVO X6, X12
	MOVO X4, X13
	MOVO X3, X15
	PSUBQ X0, X5
	PSLLQ $40, X5
	POR X11, X2
	POR X5, X2
	MOVO X2, 320(BX)
	PSUBQ X14, X6
	PSUBQ X12, X4
	PSLLQ $24, X4
	PSUBQ X13, X3
	MOVO X3, X7
	PSLLQ $48, X3
	POR X6, X4
	POR X3, X4
	MOVO X4, 336(BX)
	PSRLQ $16, X7
	MOVO 944(AX), X9
	MOVO 960(AX), X8
	MOVO 976(AX), X10
	MOVO 992(AX), X1
	MOVO X9, X0
	MOVO X8, X11
	MOVO X10, X5
	MOVO X1, X2
	PSUBQ X15, X9
	PSLLQ $8, X9
	PSUBQ X0, X8
	PSLLQ $32, X8
	PSUBQ X11, X10
	MOVO X10, X14
	PSLLQ $56, X10
	POR X7, X9
	POR X8, X10
	POR X9, X10
	MOVO X10, 352(BX)
	PSRLQ $8, X14
	PSUBQ X5, X1
	PSLLQ $16, X1
	MOVO 1008(AX), X12
	MOVO X12, X13
	PSUBQ X2, X12
	PSLLQ $40, X12
	POR X14, X1
	POR X12, X1
	MOVO X1, 368(BX)
	MOVO X13, 0(DX)
	RET

// func dpack64_25(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_25(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $25, X2
	PSUBQ X5, X3
	MOVO X3, X7
	PSLLQ $50, X3
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	PSRLQ $14, X7
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	PSUBQ X6, X8
	PSLLQ $11, X8
	PSUBQ X12, X9
	PSLLQ $36, X9
	PSUBQ X13, X10
	MOVO X10, X0
	PSLLQ $61, X10
	POR X7, X8
	POR X9, X10
	POR X8, X10
	MOVO X10, 16(BX)
	PSRLQ $3, X0
	PSUBQ X14, X11
	PSLLQ $22, X11
	MOVO 112(AX), X4
	MOVO 128(AX), X5
	MOVO 144(AX), X1
	MOVO 160(AX), X3
	MOVO X4, X2
	MOVO X5, X6
	MOVO X1, X12
	MOVO X3, X13
	PSUBQ X15, X4
	MOVO X4, X7
	PSLLQ $47, X4
	POR X0, X11
	POR X4, X11
	MOVO X11, 32(BX)
	PSRLQ $17, X7
	PSUBQ X2, X5
	PSLLQ $8, X5
	PSUBQ X6, X1
	PSLLQ $33, X1
	PSUBQ X12, X3
	MOVO X3, X9
	PSLLQ $58, X3
	POR X7, X5
	POR X1, X3
	POR X5, X3
	MOVO X3, 48(BX)
	PSRLQ $6, X9
	MOVO 176(AX), X8
	MOVO 192(AX), X10
	MOVO 208(AX), X14
	MOVO 224(AX), X15
	MOVO X8, X0
	MOVO X10, X4
	MOVO X14, X11
	MOVO X15, X2
	PSUBQ X13, X8
	PSLLQ $19, X8
	PSUBQ X0, X10
	MOVO X10, X6
	PSLLQ $44, X10
	POR X9, X8
	POR X10, X8
	MOVO X8, 64(BX)
	PSRLQ $20, X6
	PSUBQ X4, X14
	PSLLQ $5, X14
	PSUBQ X11, X15
	PSLLQ $30, X15
	MOVO 240(AX), X12
	MOVO 256(AX), X7
	MOVO 272(AX), X1
	MOVO 288(AX), X5
	MOVO X12, X3
	MOVO X7, X13
	MOVO X1, X0
	MOVO X5, X9
	PSUBQ X2, X12
	MOVO X12, X10
	PSLLQ $55, X12
	POR X6, X14
	POR X15, X12
	POR X14, X12
	MOVO X12, 80(BX)
	PSRLQ $9, X10
	PSUBQ X3, X7
	PSLLQ $16, X7
	PSUBQ X13, X1
	MOVO X1, X8
	PSLLQ $41, X1
	POR X10, X7
	POR X1, X7
	MOVO X7, 96(BX)
	PSRLQ $23, X8
	PSUBQ X0, X5
	PSLLQ $2, X5
	MOVO 304(AX), X4
	MOVO 320(AX), X11
	MOVO 336(AX), X2
	MOVO 352(AX), X6
	MOVO X4, X15
	MOVO X11, X14
	MOVO X2, X12
	MOVO X6, X3
	PSUBQ X9, X4
	PSLLQ $27, X4
	PSUBQ X15, X11
	MOVO X11, X13
	PSLLQ $52, X11
	POR X8, X5
	POR X4, X11
	POR X5, X11
	MOVO X11, 112(BX)
	PSRLQ $12, X13
	PSUBQ X14, X2
	PSLLQ $13, X2
	PSUBQ X12, X6
	PSLLQ $38, X6
	MOVO 368(AX), X10
	MOVO 384(AX), X1
	MOVO 400(AX), X7
	MOVO 416(AX), X0
	MOVO X10, X9
	MOVO X1, X15
	MOVO X7, X8
	MOVO X0, X4
	PSUBQ X3, X10
	MOVO X10, X5
	PSLLQ $63, X10
	POR X13, X2
	POR X6, X10
	POR X2, X10
	MOVO X10, 128(BX)
	PSRLQ $1, X5
	PSUBQ X9, X1
	PSLLQ $24, X1
	PSUBQ X15, X7
	MOVO X7, X11
	PSLLQ $49, X7
	POR X5, X1
	POR X7, X1
	MOVO X1, 144(BX)
	PSRLQ $15, X11
	PSUBQ X8, X0
	PSLLQ $10, X0
	MOVO 432(AX), X14
	MOVO 448(AX), X12
	MOVO 464(AX), X3
	MOVO 480(AX), X13
	MOVO X14, X6
	MOVO X12, X2
	MOVO X3, X10
	MOVO X13, X9
	PSUBQ X4, X14
	PSLLQ $35, X14
	PSUBQ X6, X12
	MOVO X12, X15
	PSLLQ $60, X12
	POR X11, X0
	POR X14, X12
	POR X0, X12
	MOVO X12, 160(BX)
	PSRLQ $4, X15
	PSUBQ X2, X3
	PSLLQ $21, X3
	PSUBQ X10, X13
	MOVO X13, X5
	PSLLQ $46, X13
	POR X15, X3
	POR X13, X3
	MOVO X3, 176(BX)
	PSRLQ $18, X5
	MOVO 496(AX), X7
	MOVO 512(AX), X1
	MOVO 528(AX), X8
	MOVO 544(AX), X4
	MOVO X7, X6
	MOVO X1, X11
	MOVO X8, X14
	MOVO X4, X0
	PSUBQ X9, X7
	PSLLQ $7, X7
	PSUBQ X6, X1
	PSLLQ $32, X1
	PSUBQ X11, X8
	MOVO X8, X12
	PSLLQ $57, X8
	POR X5, X7
	POR X1, X8
	POR X7, X8
	MOVO X8, 192(BX)
	PSRLQ $7, X12
	PSUBQ X14, X4
	PSLLQ $18, X4
	MOVO 560(AX), X2
	MOVO 576(AX), X10
	MOVO 592(AX), X15
	MOVO 608(AX), X13
	MOVO X2, X3
	MOVO X10, X9
	MOVO X15, X6
	MOVO X13, X11
	PSUBQ X0, X2
	MOVO X2, X5
	PSLLQ $43, X2
	POR X12, X4
	POR X2, X4
	MOVO X4, 208(BX)
	PSRLQ $21, X5
	PSUBQ X3, X10
	PSLLQ $4, X10
	PSUBQ X9, X15
	PSLLQ $29, X15
	PSUBQ X6, X13
	MOVO X13, X1
	PSLLQ $54, X13
	POR X5, X10
	POR X15, X13
	POR X10, X13
	MOVO X13, 224(BX)
	PSRLQ $10, X1
	MOVO 624(AX), X7
	MOVO 640(AX), X8
	MOVO 656(AX), X14
	MOVO 672(AX), X0
	MOVO X7, X12
	MOVO X8, X2
	MOVO X14, X4
	MOVO X0, X3
	PSUBQ X11, X7
	PSLLQ $15, X7
	PSUBQ X12, X8
	MOVO X8, X9
	PSLLQ $40, X8
	POR X1, X7
	POR X8, X7
	MOVO X7, 240(BX)
	PSRLQ $24, X9
	PSUBQ X2, X14
	PSLLQ $1, X14
	PSUBQ X4, X0
	PSLLQ $26, X0
	MOVO 688(AX), X6
	MOVO 704(AX), X5
	MOVO 720(AX), X15
	MOVO 736(AX), X10
	MOVO X6, X13
	MOVO X5, X11
	MOVO X15, X12
	MOVO X10, X1
	PSUBQ X3, X6
	MOVO X6, X8
	PSLLQ $51, X6
	POR X9, X14
	POR X0, X6
	POR X14, X6
	MOVO X6, 256(BX)
	PSRLQ $13, X8
	PSUBQ X13, X5
	PSLLQ $12, X5
	PSUBQ X11, X15
	PSLLQ $37, X15
	PSUBQ X12, X10
	MOVO X10, X7
	PSLLQ $62, X10
	POR X8, X5
	POR X15, X10
	POR X5, X10
	MOVO X10, 272(BX)
	PSRLQ $2, X7
	MOVO 752(AX), X2
	MOVO 768(AX), X4
	MOVO 784(AX), X3
	MOVO 800(AX), X9
	MOVO X2, X0
	MOVO X4, X14
	MOVO X3, X6
	MOVO X9, X13
	PSUBQ X1, X2
	PSLLQ $23, X2
	PSUBQ X0, X4
	MOVO X4, X11
	PSLLQ $48, X4
	POR X7, X2
	POR X4, X2
	MOVO X2, 288(BX)
	PSRLQ $16, X11
	PSUBQ X14, X3
	PSLLQ $9, X3
	PSUBQ X6, X9
	PSLLQ $34, X9
	MOVO 816(AX), X12
	MOVO 832(AX), X8
	MOVO 848(AX), X15
	MOVO 864(AX), X5
	MOVO X12, X10
	MOVO X8, X1
	MOVO X15, X0
	MOVO X5, X7
	PSUBQ X13, X12
	MOVO X12, X4
	PSLLQ $59, X12
	POR X11, X3
	POR X9, X12
	POR X3, X12
	MOVO X12, 304(BX)
	PSRLQ $5, X4
	PSUBQ X10, X8
	PSLLQ $20, X8
	PSUBQ X1, X15
	MOVO X15, X2
	PSLLQ $45, X15
	POR X4, X8
	POR X15, X8
	MOVO X8, 320(BX)
	PSRLQ $19, X2
	PSUBQ X0, X5
	PSLLQ $6, X5
	MOVO 880(AX), X14
	MOVO 896(AX), X6
	MOVO 912(AX), X13
	MOVO 928(AX), X11
	MOVO X14, X9
	MOVO X6, X3
	MOVO X13, X12
	MOVO X11, X10
	PSUBQ X7, X14
	PSLLQ $31, X14
	PSUBQ X9, X6
	MOVO X6, X1
	PSLLQ $56, X6
	POR X2, X5
	POR X14, X6
	POR X5, X6
	MOVO X6, 336(BX)
	PSRLQ $8, X1
	PSUBQ X3, X13
	PSLLQ $17, X13
	PSUBQ X12, X11
	MOVO X11, X4
	PSLLQ $42, X11
	POR X1, X13
	POR X11, X13
	MOVO X13, 352(BX)
	PSRLQ $22, X4
	MOVO 944(AX), X15
	MOVO 960(AX), X8
	MOVO 976(AX), X0
	MOVO 992(AX), X7
	MOVO X15, X9
	MOVO X8, X2
	MOVO X0, X14
	MOVO X7, X5
	PSUBQ X10, X15
	PSLLQ $3, X15
	PSUBQ X9, X8
	PSLLQ $28, X8
	PSUBQ X2, X0
	MOVO X0, X6
	PSLLQ $53, X0
	POR X4, X15
	POR X8, X0
	POR X15, X0
	MOVO X0, 368(BX)
	PSRLQ $11, X6
	PSUBQ X14, X7
	PSLLQ $14, X7
	MOVO 1008(AX), X3
	MOVO X3, X12
	PSUBQ X5, X3
	PSLLQ $39, X3
	POR X6, X7
	POR X3, X7
	MOVO X7, 384(BX)
	MOVO X12, 0(DX)
	RET

// func dpack64_26(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_26(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $26, X2
	PSUBQ X5, X3
	MOVO X3, X7
	PSLLQ $52, X3
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	PSRLQ $12, X7
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	PSUBQ X6, X8
	PSLLQ $14, X8
	PSUBQ X12, X9
	MOVO X9, X0
	PSLLQ $40, X9
	POR X7, X8
	POR X9, X8
	MOVO X8, 16(BX)
	PSRLQ $24, X0
	PSUBQ X13, X10
	PSLLQ $2, X10
	PSUBQ X14, X11
	PSLLQ $28, X11
	MOVO 112(AX), X4
	MOVO 128(AX), X5
	MOVO 144(AX), X1
	MOVO 160(AX), X3
	MOVO X4, X2
	MOVO X5, X6
	MOVO X1, X12
	MOVO X3, X7
	PSUBQ X15, X4
	MOVO X4, X9
	PSLLQ $54, X4
	POR X0, X10
	POR X11, X4
	POR X10, X4
	MOVO X4, 32(BX)
	PSRLQ $10, X9
	PSUBQ X2, X5
	PSLLQ $16, X5
	PSUBQ X6, X1
	MOVO X1, X8
	PSLLQ $42, X1
	POR X9, X5
	POR X1, X5
	MOVO X5, 48(BX)
	PSRLQ $22, X8
	PSUBQ X12, X3
	PSLLQ $4, X3
	MOVO 176(AX), X13
	MOVO 192(AX), X14
	MOVO 208(AX), X15
	MOVO 224(AX), X0
	MOVO X13, X11
	MOVO X14, X10
	MOVO X15, X4
	MOVO X0, X2
	PSUBQ X7, X13
	PSLLQ $30, X13
	PSUBQ X11, X14
	MOVO X14, X6
	PSLLQ $56, X14
	POR X8, X3
	POR X13, X14
	POR X3, X14
	MOVO X14, 64(BX)
	PSRLQ $8, X6
	PSUBQ X10, X15
	PSLLQ $18, X15
	PSUBQ X4, X0
	MOVO X0, X9
	PSLLQ $44, X0
	POR X6, X15
	POR X0, X15
	MOVO X15, 80(BX)
	PSRLQ $20, X9
	MOVO 240(AX), X1
	MOVO 256(AX), X5
	MOVO 272(AX), X12
	MOVO 288(AX), X7
	MOVO X1, X11
	MOVO X5, X8
	MOVO X12, X13
	MOVO X7, X3
	PSUBQ X2, X1
	PSLLQ $6, X1
	PSUBQ X11, X5
	PSLLQ $32, X5
	PSUBQ X8, X12
	MOVO X12, X14
	PSLLQ $58, X12
	POR X9, X1
	POR X5, X12
	POR X1, X12
	MOVO X12, 96(BX)
	PSRLQ $6, X14
	PSUBQ X13, X7
	PSLLQ $20, X7
	MOVO 304(AX), X10
	MOVO 320(AX), X4
	MOVO 336(AX), X6
	MOVO 352(AX), X0
	MOVO X10, X15
	MOVO X4, X2
	MOVO X6, X11
	MOVO X0, X8
	PSUBQ X3, X10
	MOVO X10, X9
	PSLLQ $46, X10
	POR X14, X7
	POR X10, X7
	MOVO X7, 112(BX)
	PSRLQ $18, X9
	PSUBQ X15, X4
	PSLLQ $8, X4
	PSUBQ X2, X6
	PSLLQ $34, X6
	PSUBQ X11, X0
	MOVO X0, X5
	PSLLQ $60, X0
	POR X9, X4
	POR X6, X0
	POR X4, X0
	MOVO X0, 128(BX)
	PSRLQ $4, X5
	MOVO 368(AX), X1
	MOVO 384(AX), X12
	MOVO 400(AX), X13
	MOVO 416(AX), X3
	MOVO X1, X14
	MOVO X12, X10
	MOVO X13, X7
	MOVO X3, X15
	PSUBQ X8, X1
	PSLLQ $22, X1
	PSUBQ X14, X12
	MOVO X12, X2
	PSLLQ $48, X12
	POR X5, X1
	POR X12, X1
	MOVO X1, 144(BX)
	PSRLQ $16, X2
	PSUBQ X10, X13
	PSLLQ $10, X13
	PSUBQ X7, X3
	PSLLQ $36, X3
	MOVO 432(AX), X11
	MOVO 448(AX), X9
	MOVO 464(AX), X6
	MOVO 480(AX), X4
	MOVO X11, X0
	MOVO X9, X8
	MOVO X6, X14
	MOVO X4, X5
	PSUBQ X15, X11
	MOVO X11, X12
	PSLLQ $62, X11
	POR X2, X13
	POR X3, X11
	POR X13, X11
	MOVO X11, 160(BX)
	PSRLQ $2, X12
	PSUBQ X0, X9
	PSLLQ $24, X9
	PSUBQ X8, X6
	MOVO X6, X1
	PSLLQ $50, X6
	POR X12, X9
	POR X6, X9
	MOVO X9, 176(BX)
	PSRLQ $14, X1
	PSUBQ X14, X4
	PSLLQ $12, X4
	MOVO 496(AX), X10
	MOVO 512(AX), X7
	MOVO 528(AX), X15
	MOVO 544(AX), X2
	MOVO X10, X3
	MOVO X7, X13
	MOVO X15, X11
	MOVO X2, X0
	PSUBQ X5, X10
	PSLLQ $38, X10
	POR X1, X4
	POR X10, X4
	MOVO X4, 192(BX)
	PSUBQ X3, X7
	PSUBQ X13, X15
	PSLLQ $26, X15
	PSUBQ X11, X2
	MOVO X2, X8
	PSLLQ $52, X2
	POR X7, X15
	POR X2, X15
	MOVO X15, 208(BX)
	PSRLQ $12, X8
	MOVO 560(AX), X12
	MOVO 576(AX), X6
	MOVO 592(AX), X9
	MOVO 608(AX), X14
	MOVO X12, X5
	MOVO X6, X1
	MOVO X9, X10
	MOVO X14, X4
	PSUBQ X0, X12
	PSLLQ $14, X12
	PSUBQ X5, X6
	MOVO X6, X3
	PSLLQ $40, X6
	POR X8, X12
	POR X6, X12
	MOVO X12, 224(BX)
	PSRLQ $24, X3
	PSUBQ X1, X9
	PSLLQ $2, X9
	PSUBQ X10, X14
	PSLLQ $28, X14
	MOVO 624(AX), X13
	MOVO 640(AX), X11
	MOVO 656(AX), X7
	MOVO 672(AX), X2
	MOVO X13, X15
	MOVO X11, X0
	MOVO X7, X5
	MOVO X2, X8
	PSUBQ X4, X13
	MOVO X13, X6
	PSLLQ $54, X13
	POR X3, X9
	POR X14, X13
	POR X9, X13
	MOVO X13, 240(BX)
	PSRLQ $10, X6
	PSUBQ X15, X11
	PSLLQ $16, X11
	PSUBQ X0, X7
	MOVO X7, X12
	PSLLQ $42, X7
	POR X6, X11
	POR X7, X11
	MOVO X11, 256(BX)
	PSRLQ $22, X12
	PSUBQ X5, X2
	PSLLQ $4, X2
	MOVO 688(AX), X1
	MOVO 704(AX), X10
	MOVO 720(AX), X4
	MOVO 736(AX), X3
	MOVO X1, X14
	MOVO X10, X9
	MOVO X4, X13
	MOVO X3, X15
	PSUBQ X8, X1
	PSLLQ $30, X1
	PSUBQ X14, X10
	MOVO X10, X0
	PSLLQ $56, X10
	POR X12, X2
	POR X1, X10
	POR X2, X10
	MOVO X10, 272(BX)
	PSRLQ $8, X0
	PSUBQ X9, X4
	PSLLQ $18, X4
	PSUBQ X13, X3
	MOVO X3, X6
	PSLLQ $44, X3
	POR X0, X4
	POR X3, X4
	MOVO X4, 288(BX)
	PSRLQ $20, X6
	MOVO 752(AX), X7
	MOVO 768(AX), X11
	MOVO 784(AX), X5
	MOVO 800(AX), X8
	MOVO X7, X14
	MOVO X11, X12
	MOVO X5, X1
	MOVO X8, X2
	PSUBQ X15, X7
	PSLLQ $6, X7
	PSUBQ X14, X11
	PSLLQ $32, X11
	PSUBQ X12, X5
	MOVO X5, X10
	PSLLQ $58, X5
	POR X6, X7
	POR X11, X5
	POR X7, X5
	MOVO X5, 304(BX)
	PSRLQ $6, X10
	PSUBQ X1, X8
	PSLLQ $20, X8
	MOVO 816(AX), X9
	MOVO 832(AX), X13
	MOVO 848(AX), X0
	MOVO 864(AX), X3
	MOVO X9, X4
	MOVO X13, X15
	MOVO X0, X14
	MOVO X3, X12
	PSUBQ X2, X9
	MOVO X9, X6
	PSLLQ $46, X9
	POR X10, X8
	POR X9, X8
	MOVO X8, 320(BX)
	PSRLQ $18, X6
	PSUBQ X4, X13
	PSLLQ $8, X13
	PSUBQ X15, X0
	PSLLQ $34, X0
	PSUBQ X14, X3
	MOVO X3, X11
	PSLLQ $60, X3
	POR X6, X13
	POR X0, X3
	POR X13, X3
	MOVO X3, 336(BX)
	PSRLQ $4, X11
	MOVO 880(AX), X7
	MOVO 896(AX), X5
	MOVO 912(AX), X1
	MOVO 928(AX), X2
	MOVO X7, X10
	MOVO X5, X9
	MOVO X1, X8
	MOVO X2, X4
	PSUBQ X12, X7
	PSLLQ $22, X7
	PSUBQ X10, X5
	MOVO X5, X15
	PSLLQ $48, X5
	POR X11, X7
	POR X5, X7
	MOVO X7, 352(BX)
	PSRLQ $16, X15
	PSUBQ X9, X1
	PSLLQ $10, X1
	PSUBQ X8, X2
	PSLLQ $36, X2
	MOVO 944(AX), X14
	MOVO 960(AX), X6
	MOVO 976(AX), X0
	MOVO 992(AX), X13
	MOVO X14, X3
	MOVO X6, X12
	MOVO X0, X10
	MOVO X13, X11
	PSUBQ X4, X14
	MOVO X14, X5
	PSLLQ $62, X14
	POR X15, X1
	POR X2, X14
	POR X1, X14
	MOVO X14, 368(BX)
	PSRLQ $2, X5
	PSUBQ X3, X6
	PSLLQ $24, X6
	PSUBQ X12, X0
	MOVO X0, X7
	PSLLQ $50, X0
	POR X5, X6
	POR X0, X6
	MOVO X6, 384(BX)
	PSRLQ $14, X7
	PSUBQ X10, X13
	PSLLQ $12, X13
	MOVO 1008(AX), X9
	MOVO X9, X8
	PSUBQ X11, X9
	PSLLQ $38, X9
	POR X7, X13
	POR X9, X13
	MOVO X13, 400(BX)
	MOVO X8, 0(DX)
	RET

// func dpack64_27(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_27(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $27, X2
	PSUBQ X5, X3
	MOVO X3, X7
	PSLLQ $54, X3
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	PSRLQ $10, X7
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	PSUBQ X6, X8
	PSLLQ $17, X8
	PSUBQ X12, X9
	MOVO X9, X0
	PSLLQ $44, X9
	POR X7, X8
	POR X9, X8
	MOVO X8, 16(BX)
	PSRLQ $20, X0
	PSUBQ X13, X10
	PSLLQ $7, X10
	PSUBQ X14, X11
	PSLLQ $34, X11
	MOVO 112(AX), X4
	MOVO 128(AX), X5
	MOVO 144(AX), X1
	MOVO 160(AX), X3
	MOVO X4, X2
	MOVO X5, X6
	MOVO X1, X12
	MOVO X3, X7
	PSUBQ X15, X4
	MOVO X4, X9
	PSLLQ $61, X4
	POR X0, X10
	POR X11, X4
	POR X10, X4
	MOVO X4, 32(BX)
	PSRLQ $3, X9
	PSUBQ X2, X5
	PSLLQ $24, X5
	PSUBQ X6, X1
	MOVO X1, X8
	PSLLQ $51, X1
	POR X9, X5
	POR X1, X5
	MOVO X5, 48(BX)
	PSRLQ $13, X8
	PSUBQ X12, X3
	PSLLQ $14, X3
	MOVO 176(AX), X13
	MOVO 192(AX), X14
	MOVO 208(AX), X15
	MOVO 224(AX), X0
	MOVO X13, X11
	MOVO X14, X10
	MOVO X15, X4
	MOVO X0, X2
	PSUBQ X7, X13
	MOVO X13, X6
	PSLLQ $41, X13
	POR X8, X3
	POR X13, X3
	MOVO X3, 64(BX)
	PSRLQ $23, X6
	PSUBQ X11, X14
	PSLLQ $4, X14
	PSUBQ X10, X15
	PSLLQ $31, X15
	PSUBQ X4, X0
	MOVO X0, X9
	PSLLQ $58, X0
	POR X6, X14
	POR X15, X0
	POR X14, X0
	MOVO X0, 80(BX)
	PSRLQ $6, X9
	MOVO 240(AX), X1
	MOVO 256(AX), X5
	MOVO 272(AX), X12
	MOVO 288(AX), X7
	MOVO X1, X8
	MOVO X5, X13
	MOVO X12, X3
	MOVO X7, X11
	PSUBQ X2, X1
	PSLLQ $21, X1
	PSUBQ X8, X5
	MOVO X5, X10
	PSLLQ $48, X5
	POR X9, X1
	POR X5, X1
	MOVO X1, 96(BX)
	PSRLQ $16, X10
	PSUBQ X13, X12
	PSLLQ $11, X12
	PSUBQ X3, X7
	MOVO X7, X4
	PSLLQ $38, X7
	POR X10, X12
	POR X7, X12
	MOVO X12, 112(BX)
	PSRLQ $26, X4
	MOVO 304(AX), X6
	MOVO 320(AX), X15
	MOVO 336(AX), X14
	MOVO 352(AX), X0
	MOVO X6, X2
	MOVO X15, X8
	MOVO X14, X9
	MOVO X0, X5
	PSUBQ X11, X6
	PSLLQ $1, X6
	PSUBQ X2, X15
	PSLLQ $28, X15
	PSUBQ X8, X14
	MOVO X14, X1
	PSLLQ $55, X14
	POR X4, X6
	POR X15, X14
	POR X6, X14
	MOVO X14, 128(BX)
	PSRLQ $9, X1
	PSUBQ X9, X0
	PSLLQ $18, X0
	MOVO 368(AX), X13
	MOVO 384(AX), X3
	MOVO 400(AX), X10
	MOVO 416(AX), X7
	MOVO X13, X12
	MOVO X3, X11
	MOVO X10, X2
	MOVO X7, X8
	PSUBQ X5, X13
	MOVO X13, X4
	PSLLQ $45, X13
	POR X1, X0
	POR X13, X0
	MOVO X0, 144(BX)
	PSRLQ $19, X4
	PSUBQ X12, X3
	PSLLQ $8, X3
	PSUBQ X11, X10
	PSLLQ $35, X10
	PSUBQ X2, X7
	MOVO X7, X15
	PSLLQ $62, X7
	POR X4, X3
	POR X10, X7
	POR X3, X7
	MOVO X7, 160(BX)
	PSRLQ $2, X15
	MOVO 432(AX), X6
	MOVO 448(AX), X14
	MOVO 464(AX), X9
	MOVO 480(AX), X5
	MOVO X6, X1
	MOVO X14, X13
	MOVO X9, X0
	MOVO X5, X12
	PSUBQ X8, X6
	PSLLQ $25, X6
	PSUBQ X1, X14
	MOVO X14, X11
	PSLLQ $52, X14
	POR X15, X6
	POR X14, X6
	MOVO X6, 176(BX)
	PSRLQ $12, X11
	PSUBQ X13, X9
	PSLLQ $15, X9
	PSUBQ X0, X5
	MOVO X5, X2
	PSLLQ $42, X5
	POR X11, X9
	POR X5, X9
	MOVO X9, 192(BX)
	PSRLQ $22, X2
	MOVO 496(AX), X4
	MOVO 512(AX), X10
	MOVO 528(AX), X3
	MOVO 544(AX), X7
	MOVO X4, X8
	MOVO X10, X1
	MOVO X3, X15
	MOVO X7, X14
	PSUBQ X12, X4
	PSLLQ $5, X4
	PSUBQ X8, X10
	PSLLQ $32, X10
	PSUBQ X1, X3
	MOVO X3, X6
	PSLLQ $59, X3
	POR X2, X4
	POR X10, X3
	POR X4, X3
	MOVO X3, 208(BX)
	PSRLQ $5, X6
	PSUBQ X15, X7
	PSLLQ $22, X7
	MOVO 560(AX), X13
	MOVO 576(AX), X0
	MOVO 592(AX), X11
	MOVO 608(AX), X5
	MOVO X13, X9
	MOVO X0, X12
	MOVO X11, X8
	MOVO X5, X1
	PSUBQ X14, X13
	MOVO X13, X2
	PSLLQ $49, X13
	POR X6, X7
	POR X13, X7
	MOVO X7, 224(BX)
	PSRLQ $15, X2
	PSUBQ X9, X0
	PSLLQ $12, X0
	PSUBQ X12, X11
	MOVO X11, X10
	PSLLQ $39, X11
	POR X2, X0
	POR X11, X0
	MOVO X0, 240(BX)
	PSRLQ $25, X10
	PSUBQ X8, X5
	PSLLQ $2, X5
	MOVO 624(AX), X4
	MOVO 640(AX), X3
	MOVO 656(AX), X15
	MOVO 672(AX), X14
	MOVO X4, X6
	MOVO X3, X13
	MOVO X15, X7
	MOVO X14, X9
	PSUBQ X1, X4
	PSLLQ $29, X4
	PSUBQ X6, X3
	MOVO X3, X12
	PSLLQ $56, X3
	POR X10, X5
	POR X4, X3
	POR X5, X3
	MOVO X3, 256(BX)
	PSRLQ $8, X12
	PSUBQ X13, X15
	PSLLQ $19, X15
	PSUBQ X7, X14
	MOVO X14, X2
	PSLLQ $46, X14
	POR X12, X15
	POR X14, X15
	MOVO X15, 272(BX)
	PSRLQ $18, X2
	MOVO 688(AX), X11
	MOVO 704(AX), X0
	MOVO 720(AX), X8
	MOVO 736(AX), X1
	MOVO X11, X6
	MOVO X0, X10
	MOVO X8, X4
	MOVO X1, X5
	PSUBQ X9, X11
	PSLLQ $9, X11
	PSUBQ X6, X0
	PSLLQ $36, X0
	PSUBQ X10, X8
	MOVO X8, X3
	PSLLQ $63, X8
	POR X2, X11
	POR X0, X8
	POR X11, X8
	MOVO X8, 288(BX)
	PSRLQ $1, X3
	PSUBQ X4, X1
	PSLLQ $26, X1
	MOVO 752(AX), X13
	MOVO 768(AX), X7
	MOVO 784(AX), X12
	MOVO 800(AX), X14
	MOVO X13, X15
	MOVO X7, X9
	MOVO X12, X6
	MOVO X14, X10
	PSUBQ X5, X13
	MOVO X13, X2
	PSLLQ $53, X13
	POR X3, X1
	POR X13, X1
	MOVO X1, 304(BX)
	PSRLQ $11, X2
	PSUBQ X15, X7
	PSLLQ $16, X7
	PSUBQ X9, X12
	MOVO X12, X0
	PSLLQ $43, X12
	POR X2, X7
	POR X12, X7
	MOVO X7, 320(BX)
	PSRLQ $21, X0
	PSUBQ X6, X14
	PSLLQ $6, X14
	MOVO 816(AX), X11
	MOVO 832(AX), X8
	MOVO 848(AX), X4
	MOVO 864(AX), X5
	MOVO X11, X3
	MOVO X8, X13
	MOVO X4, X1
	MOVO X5, X15
	PSUBQ X10, X11
	PSLLQ $33, X11
	PSUBQ X3, X8
	MOVO X8, X9
	PSLLQ $60, X8
	POR X0, X14
	POR X11, X8
	POR X14, X8
	MOVO X8, 336(BX)
	PSRLQ $4, X9
	PSUBQ X13, X4
	PSLLQ $23, X4
	PSUBQ X1, X5
	MOVO X5, X2
	PSLLQ $50, X5
	POR X9, X4
	POR X5, X4
	MOVO X4, 352(BX)
	PSRLQ $14, X2
	MOVO 880(AX), X12
	MOVO 896(AX), X7
	MOVO 912(AX), X6
	MOVO 928(AX), X10
	MOVO X12, X3
	MOVO X7, X0
	MOVO X6, X11
	MOVO X10, X14
	PSUBQ X15, X12
	PSLLQ $13, X12
	PSUBQ X3, X7
	MOVO X7, X8
	PSLLQ $40, X7
	POR X2, X12
	POR X7, X12
	MOVO X12, 368(BX)
	PSRLQ $24, X8
	PSUBQ X0, X6
	PSLLQ $3, X6
	PSUBQ X11, X10
	PSLLQ $30, X10
	MOVO 944(AX), X13
	MOVO 960(AX), X1
	MOVO 976(AX), X9
	MOVO 992(AX), X5
	MOVO X13, X4
	MOVO X1, X15
	MOVO X9, X3
	MOVO X5, X2
	PSUBQ X14, X13
	MOVO X13, X7
	PSLLQ $57, X13
	POR X8, X6
	POR X10, X13
	POR X6, X13
	MOVO X13, 384(BX)
	PSRLQ $7, X7
	PSUBQ X4, X1
	PSLLQ $20, X1
	PSUBQ X15, X9
	MOVO X9, X12
	PSLLQ $47, X9
	POR X7, X1
	POR X9, X1
	MOVO X1, 400(BX)
	PSRLQ $17, X12
	PSUBQ X3, X5
	PSLLQ $10, X5
	MOVO 1008(AX), X0
	MOVO X0, X11
	PSUBQ X2, X0
	PSLLQ $37, X0
	POR X12, X5
	POR X0, X5
	MOVO X5, 416(BX)
	MOVO X11, 0(DX)
	RET

// func dpack64_28(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_28(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $28, X2
	PSUBQ X5, X3
	MOVO X3, X7
	PSLLQ $56, X3
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	PSRLQ $8, X7
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	PSUBQ X6, X8
	PSLLQ $20, X8
	PSUBQ X12, X9
	MOVO X9, X0
	PSLLQ $48, X9
	POR X7, X8
	POR X9, X8
	MOVO X8, 16(BX)
	PSRLQ $16, X0
	PSUBQ X13, X10
	PSLLQ $12, X10
	PSUBQ X14, X11
	MOVO X11, X4
	PSLLQ $40, X11
	POR X0, X10
	POR X11, X10
	MOVO X10, 32(BX)
	PSRLQ $24, X4
	MOVO 112(AX), X5
	MOVO 128(AX), X1
	MOVO 144(AX), X3
	MOVO 160(AX), X2
	MOVO X5, X6
	MOVO X1, X12
	MOVO X3, X7
	MOVO X2, X9
	PSUBQ X15, X5
	PSLLQ $4, X5
	PSUBQ X6, X1
	PSLLQ $32, X1
	PSUBQ X12, X3
	MOVO X3, X8
	PSLLQ $60, X3
	POR X4, X5
	POR X1, X3
	POR X5, X3
	MOVO X3, 48(BX)
	PSRLQ $4, X8
	PSUBQ X7, X2
	PSLLQ $24, X2
	MOVO 176(AX), X13
	MOVO 192(AX), X14
	MOVO 208(AX), X0
	MOVO 224(AX), X11
	MOVO X13, X10
	MOVO X14, X15
	MOVO X0, X6
	MOVO X11, X12
	PSUBQ X9, X13
	MOVO X13, X4
	PSLLQ $52, X13
	POR X8, X2
	POR X13, X2
	MOVO X2, 64(BX)
	PSRLQ $12, X4
	PSUBQ X10, X14
	PSLLQ $16, X14
	PSUBQ X15, X0
	MOVO X0, X1
	PSLLQ $44, X0
	POR X4, X14
	POR X0, X14
	MOVO X14, 80(BX)
	PSRLQ $20, X1
	PSUBQ X6, X11
	PSLLQ $8, X11
	MOVO 240(AX), X5
	MOVO 256(AX), X3
	MOVO 272(AX), X7
	MOVO 288(AX), X9
	MOVO X5, X8
	MOVO X3, X13
	MOVO X7, X2
	MOVO X9, X10
	PSUBQ X12, X5
	PSLLQ $36, X5
	POR X1, X11
	POR X5, X11
	MOVO X11, 96(BX)
	PSUBQ X8, X3
	PSUBQ X13, X7
	PSLLQ $28, X7
	PSUBQ X2, X9
	MOVO X9, X15
	PSLLQ $56, X9
	POR X3, X7
	POR X9, X7
	MOVO X7, 112(BX)
	PSRLQ $8, X15
	MOVO 304(AX), X4
	MOVO 320(AX), X0
	MOVO 336(AX), X14
	MOVO 352(AX), X6
	MOVO X4, X12
	MOVO X0, X1
	MOVO X14, X5
	MOVO X6, X11
	PSUBQ X10, X4
	PSLLQ $20, X4
	PSUBQ X12, X0
	MOVO X0, X8
	PSLLQ $48, X0
	POR X15, X4
	POR X0, X4
	MOVO X4, 128(BX)
	PSRLQ $16, X8
	PSUBQ X1, X14
	PSLLQ $12, X14
	PSUBQ X5, X6
	MOVO X6, X13
	PSLLQ $40, X6
	POR X8, X14
	POR X6, X14
	MOVO X14, 144(BX)
	PSRLQ $24, X13
	MOVO 368(AX), X2
	MOVO 384(AX), X3
	MOVO 400(AX), X9
	MOVO 416(AX), X7
	MOVO X2, X10
	MOVO X3, X12
	MOVO X9, X15
	MOVO X7, X0
	PSUBQ X11, X2
	PSLLQ $4, X2
	PSUBQ X10, X3
	PSLLQ $32, X3
	PSUBQ X12, X9
	MOVO X9, X4
	PSLLQ $60, X9
	POR X13, X2
	POR X3, X9
	POR X2, X9
	MOVO X9, 160(BX)
	PSRLQ $4, X4
	PSUBQ X15, X7
	PSLLQ $24, X7
	MOVO 432(AX), X1
	MOVO 448(AX), X5
	MOVO 464(AX), X8
	MOVO 480(AX), X6
	MOVO X1, X14
	MOVO X5, X11
	MOVO X8, X10
	MOVO X6, X12
	PSUBQ X0, X1
	MOVO X1, X13
	PSLLQ $52, X1
	POR X4, X7
	POR X1, X7
	MOVO X7, 176(BX)
	PSRLQ $12, X13
	PSUBQ X14, X5
	PSLLQ $16, X5
	PSUBQ X11, X8
	MOVO X8, X3
	PSLLQ $44, X8
	POR X13, X5
	POR X8, X5
	MOVO X5, 192(BX)
	PSRLQ $20, X3
	PSUBQ X10, X6
	PSLLQ $8, X6
	MOVO 496(AX), X2
	MOVO 512(AX), X9
	MOVO 528(AX), X15
	MOVO 544(AX), X0
	MOVO X2, X4
	MOVO X9, X1
	MOVO X15, X7
	MOVO X0, X14
	PSUBQ X12, X2
	PSLLQ $36, X2
	POR X3, X6
	POR X2, X6
	MOVO X6, 208(BX)
	PSUBQ X4, X9
	PSUBQ X1, X15
	PSLLQ $28, X15
	PSUBQ X7, X0
	MOVO X0, X11
	PSLLQ $56, X0
	POR X9, X15
	POR X0, X15
	MOVO X15, 224(BX)
	PSRLQ $8, X11
	MOVO 560(AX), X13
	MOVO 576(AX), X8
	MOVO 592(AX), X5
	MOVO 608(AX), X10
	MOVO X13, X12
	MOVO X8, X3
	MOVO X5, X2
	MOVO X10, X6
	PSUBQ X14, X13
	PSLLQ $20, X13
	PSUBQ X12, X8
	MOVO X8, X4
	PSLLQ $48, X8
	POR X11, X13
	POR X8, X13
	MOVO X13, 240(BX)
	PSRLQ $16, X4
	PSUBQ X3, X5
	PSLLQ $12, X5
	PSUBQ X2, X10
	MOVO X10, X1
	PSLLQ $40, X10
	POR X4, X5
	POR X10, X5
	MOVO X5, 256(BX)
	PSRLQ $24, X1
	MOVO 624(AX), X7
	MOVO 640(AX), X9
	MOVO 656(AX), X0
	MOVO 672(AX), X15
	MOVO X7, X14
	MOVO X9, X12
	MOVO X0, X11
	MOVO X15, X8
	PSUBQ X6, X7
	PSLLQ $4, X7
	PSUBQ X14, X9
	PSLLQ $32, X9
	PSUBQ X12, X0
	MOVO X0, X13
	PSLLQ $60, X0
	POR X1, X7
	POR X9, X0
	POR X7, X0
	MOVO X0, 272(BX)
	PSRLQ $4, X13
	PSUBQ X11, X15
	PSLLQ $24, X15
	MOVO 688(AX), X3
	MOVO 704(AX), X2
	MOVO 720(AX), X4
	MOVO 736(AX), X10
	MOVO X3, X5
	MOVO X2, X6
	MOVO X4, X14
	MOVO X10, X12
	PSUBQ X8, X3
	MOVO X3, X1
	PSLLQ $52, X3
	POR X13, X15
	POR X3, X15
	MOVO X15, 288(BX)
	PSRLQ $12, X1
	PSUBQ X5, X2
	PSLLQ $16, X2
	PSUBQ X6, X4
	MOVO X4, X9
	PSLLQ $44, X4
	POR X1, X2
	POR X4, X2
	MOVO X2, 304(BX)
	PSRLQ $20, X9
	PSUBQ X14, X10
	PSLLQ $8, X10
	MOVO 752(AX), X7
	MOVO 768(AX), X0
	MOVO 784(AX), X11
	MOVO 800(AX), X8
	MOVO X7, X13
	MOVO X0, X3
	MOVO X11, X15
	MOVO X8, X5
	PSUBQ X12, X7
	PSLLQ $36, X7
	POR X9, X10
	POR X7, X10
	MOVO X10, 320(BX)
	PSUBQ X13, X0
	PSUBQ X3, X11
	PSLLQ $28, X11
	PSUBQ X15, X8
	MOVO X8, X6
	PSLLQ $56, X8
	POR X0, X11
	POR X8, X11
	MOVO X11, 336(BX)
	PSRLQ $8, X6
	MOVO 816(AX), X1
	MOVO 832(AX), X4
	MOVO 848(AX), X2
	MOVO 864(AX), X14
	MOVO X1, X12
	MOVO X4, X9
	MOVO X2, X7
	MOVO X14, X10
	PSUBQ X5, X1
	PSLLQ $20, X1
	PSUBQ X12, X4
	MOVO X4, X13
	PSLLQ $48, X4
	POR X6, X1
	POR X4, X1
	MOVO X1, 352(BX)
	PSRLQ $16, X13
	PSUBQ X9, X2
	PSLLQ $12, X2
	PSUBQ X7, X14
	MOVO X14, X3
	PSLLQ $40, X14
	POR X13, X2
	POR X14, X2
	MOVO X2, 368(BX)
	PSRLQ $24, X3
	MOVO 880(AX), X15
	MOVO 896(AX), X0
	MOVO 912(AX), X8
	MOVO 928(AX), X11
	MOVO X15, X5
	MOVO X0, X12
	MOVO X8, X6
	MOVO X11, X4
	PSUBQ X10, X15
	PSLLQ $4, X15
	PSUBQ X5, X0
	PSLLQ $32, X0
	PSUBQ X12, X8
	MOVO X8, X1
	PSLLQ $60, X8
	POR X3, X15
	POR X0, X8
	POR X15, X8
	MOVO X8, 384(BX)
	PSRLQ $4, X1
	PSUBQ X6, X11
	PSLLQ $24, X11
	MOVO 944(AX), X9
	MOVO 960(AX), X7
	MOVO 976(AX), X13
	MOVO 992(AX), X14
	MOVO X9, X2
	MOVO X7, X10
	MOVO X13, X5
	MOVO X14, X12
	PSUBQ X4, X9
	MOVO X9, X3
	PSLLQ $52, X9
	POR X1, X11
	POR X9, X11
	MOVO X11, 400(BX)
	PSRLQ $12, X3
	PSUBQ X2, X7
	PSLLQ $16, X7
	PSUBQ X10, X13
	MOVO X13, X0
	PSLLQ $44, X13
	POR X3, X7
	POR X13, X7
	MOVO X7, 416(BX)
	PSRLQ $20, X0
	PSUBQ X5, X14
	PSLLQ $8, X14
	MOVO 1008(AX), X15
	MOVO X15, X8
	PSUBQ X12, X15
	PSLLQ $36, X15
	POR X0, X14
	POR X15, X14
	MOVO X14, 432(BX)
	MOVO X8, 0(DX)
	RET

// func dpack64_29(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_29(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $29, X2
	PSUBQ X5, X3
	MOVO X3, X7
	PSLLQ $58, X3
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	PSRLQ $6, X7
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	PSUBQ X6, X8
	PSLLQ $23, X8
	PSUBQ X12, X9
	MOVO X9, X0
	PSLLQ $52, X9
	POR X7, X8
	POR X9, X8
	MOVO X8, 16(BX)
	PSRLQ $12, X0
	PSUBQ X13, X10
	PSLLQ $17, X10
	PSUBQ X14, X11
	MOVO X11, X4
	PSLLQ $46, X11
	POR X0, X10
	POR X11, X10
	MOVO X10, 32(BX)
	PSRLQ $18, X4
	MOVO 112(AX), X5
	MOVO 128(AX), X1
	MOVO 144(AX), X3
	MOVO 160(AX), X2
	MOVO X5, X6
	MOVO X1, X12
	MOVO X3, X7
	MOVO X2, X9
	PSUBQ X15, X5
	PSLLQ $11, X5
	PSUBQ X6, X1
	MOVO X1, X8
	PSLLQ $40, X1
	POR X4, X5
	POR X1, X5
	MOVO X5, 48(BX)
	PSRLQ $24, X8
	PSUBQ X12, X3
	PSLLQ $5, X3
	PSUBQ X7, X2
	PSLLQ $34, X2
	MOVO 176(AX), X13
	MOVO 192(AX), X14
	MOVO 208(AX), X0
	MOVO 224(AX), X11
	MOVO X13, X10
	MOVO X14, X15
	MOVO X0, X6
	MOVO X11, X4
	PSUBQ X9, X13
	MOVO X13, X1
	PSLLQ $63, X13
	POR X8, X3
	POR X2, X13
	POR X3, X13
	MOVO X13, 64(BX)
	PSRLQ $1, X1
	PSUBQ X10, X14
	PSLLQ $28, X14
	PSUBQ X15, X0
	MOVO X0, X5
	PSLLQ $57, X0
	POR X1, X14
	POR X0, X14
	MOVO X14, 80(BX)
	PSRLQ $7, X5
	PSUBQ X6, X11
	PSLLQ $22, X11
	MOVO 240(AX), X12
	MOVO 256(AX), X7
	MOVO 272(AX), X9
	MOVO 288(AX), X8
	MOVO X12, X2
	MOVO X7, X3
	MOVO X9, X13
	MOVO X8, X10
	PSUBQ X4, X12
	MOVO X12, X15
	PSLLQ $51, X12
	POR X5, X11
	POR X12, X11
	MOVO X11, 96(BX)
	PSRLQ $13, X15
	PSUBQ X2, X7
	PSLLQ $16, X7
	PSUBQ X3, X9
	MOVO X9, X1
	PSLLQ $45, X9
	POR X15, X7
	POR X9, X7
	MOVO X7, 112(BX)
	PSRLQ $19, X1
	PSUBQ X13, X8
	PSLLQ $10, X8
	MOVO 304(AX), X0
	MOVO 320(AX), X14
	MOVO 336(AX), X6
	MOVO 352(AX), X4
	MOVO X0, X5
	MOVO X14, X12
	MOVO X6, X11
	MOVO X4, X2
	PSUBQ X10, X0
	MOVO X0, X3
	PSLLQ $39, X0
	POR X1, X8
	POR X0, X8
	MOVO X8, 128(BX)
	PSRLQ $25, X3
	PSUBQ X5, X14
	PSLLQ $4, X14
	PSUBQ X12, X6
	PSLLQ $33, X6
	PSUBQ X11, X4
	MOVO X4, X15
	PSLLQ $62, X4
	POR X3, X14
	POR X6, X4
	POR X14, X4
	MOVO X4, 144(BX)
	PSRLQ $2, X15
	MOVO 368(AX), X9
	MOVO 384(AX), X7
	MOVO 400(AX), X13
	MOVO 416(AX), X10
	MOVO X9, X1
	MOVO X7, X0
	MOVO X13, X8
	MOVO X10, X5
	PSUBQ X2, X9
	PSLLQ $27, X9
	PSUBQ X1, X7
	MOVO X7, X12
	PSLLQ $56, X7
	POR X15, X9
	POR X7, X9
	MOVO X9, 160(BX)
	PSRLQ $8, X12
	PSUBQ X0, X13
	PSLLQ $21, X13
	PSUBQ X8, X10
	MOVO X10, X11
	PSLLQ $50, X10
	POR X12, X13
	POR X10, X13
	MOVO X13, 176(BX)
	PSRLQ $14, X11
	MOVO 432(AX), X3
	MOVO 448(AX), X6
	MOVO 464(AX), X14
	MOVO 480(AX), X4
	MOVO X3, X2
	MOVO X6, X1
	MOVO X14, X15
	MOVO X4, X7
	PSUBQ X5, X3
	PSLLQ $15, X3
	PSUBQ X2, X6
	MOVO X6, X9
	PSLLQ $44, X6
	POR X11, X3
	POR X6, X3
	MOVO X3, 192(BX)
	PSRLQ $20, X9
	PSUBQ X1, X14
	PSLLQ $9, X14
	PSUBQ X15, X4
	MOVO X4, X0
	PSLLQ $38, X4
	POR X9, X14
	POR X4, X14
	MOVO X14, 208(BX)
	PSRLQ $26, X0
	MOVO 496(AX), X8
	MOVO 512(AX), X12
	MOVO 528(AX), X10
	MOVO 544(AX), X13
	MOVO X8, X5
	MOVO X12, X2
	MOVO X10, X11
	MOVO X13, X6
	PSUBQ X7, X8
	PSLLQ $3, X8
	PSUBQ X5, X12
	PSLLQ $32, X12
	PSUBQ X2, X10
	MOVO X10, X3
	PSLLQ $61, X10
	POR X0, X8
	POR X12, X10
	POR X8, X10
	MOVO X10, 224(BX)
	PSRLQ $3, X3
	PSUBQ X11, X13
	PSLLQ $26, X13
	MOVO 560(AX), X1
	MOVO 576(AX), X15
	MOVO 592(AX), X9
	MOVO 608(AX), X4
	MOVO X1, X14
	MOVO X15, X7
	MOVO X9, X5
	MOVO X4, X2
	PSUBQ X6, X1
	MOVO X1, X0
	PSLLQ $55, X1
	POR X3, X13
	POR X1, X13
	MOVO X13, 240(BX)
	PSRLQ $9, X0
	PSUBQ X14, X15
	PSLLQ $20, X15
	PSUBQ X7, X9
	MOVO X9, X12
	PSLLQ $49, X9
	POR X0, X15
	POR X9, X15
	MOVO X15, 256(BX)
	PSRLQ $15, X12
	PSUBQ X5, X4
	PSLLQ $14, X4
	MOVO 624(AX), X8
	MOVO 640(AX), X10
	MOVO 656(AX), X11
	MOVO 672(AX), X6
	MOVO X8, X3
	MOVO X10, X1
	MOVO X11, X13
	MOVO X6, X14
	PSUBQ X2, X8
	MOVO X8, X7
	PSLLQ $43, X8
	POR X12, X4
	POR X8, X4
	MOVO X4, 272(BX)
	PSRLQ $21, X7
	PSUBQ X3, X10
	PSLLQ $8, X10
	PSUBQ X1, X11
	MOVO X11, X0
	PSLLQ $37, X11
	POR X7, X10
	POR X11, X10
	MOVO X10, 288(BX)
	PSRLQ $27, X0
	PSUBQ X13, X6
	PSLLQ $2, X6
	MOVO 688(AX), X9
	MOVO 704(AX), X15
	MOVO 720(AX), X5
	MOVO 736(AX), X2
	MOVO X9, X12
	MOVO X15, X8
	MOVO X5, X4
	MOVO X2, X3
	PSUBQ X14, X9
	PSLLQ $31, X9
	PSUBQ X12, X15
	MOVO X15, X1
	PSLLQ $60, X15
	POR X0, X6
	POR X9, X15
	POR X6, X15
	MOVO X15, 304(BX)
	PSRLQ $4, X1
	PSUBQ X8, X5
	PSLLQ $25, X5
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $54, X2
	POR X1, X5
	POR X2, X5
	MOVO X5, 320(BX)
	PSRLQ $10, X7
	MOVO 752(AX), X11
	MOVO 768(AX), X10
	MOVO 784(AX), X13
	MOVO 800(AX), X14
	MOVO X11, X12
	MOVO X10, X0
	MOVO X13, X9
	MOVO X14, X6
	PSUBQ X3, X11
	PSLLQ $19, X11
	PSUBQ X12, X10
	MOVO X10, X15
	PSLLQ $48, X10
	POR X7, X11
	POR X10, X11
	MOVO X11, 336(BX)
	PSRLQ $16, X15
	PSUBQ X0, X13
	PSLLQ $13, X13
	PSUBQ X9, X14
	MOVO X14, X8
	PSLLQ $42, X14
	POR X15, X13
	POR X14, X13
	MOVO X13, 352(BX)
	PSRLQ $22, X8
	MOVO 816(AX), X4
	MOVO 832(AX), X1
	MOVO 848(AX), X2
	MOVO 864(AX), X5
	MOVO X4, X3
	MOVO X1, X12
	MOVO X2, X7
	MOVO X5, X10
	PSUBQ X6, X4
	PSLLQ $7, X4
	PSUBQ X3, X1
	MOVO X1, X11
	PSLLQ $36, X1
	POR X8, X4
	POR X1, X4
	MOVO X4, 368(BX)
	PSRLQ $28, X11
	PSUBQ X12, X2
	PSLLQ $1, X2
	PSUBQ X7, X5
	PSLLQ $30, X5
	MOVO 880(AX), X0
	MOVO 896(AX), X9
	MOVO 912(AX), X15
	MOVO 928(AX), X14
	MOVO X0, X13
	MOVO X9, X6
	MOVO X15, X3
	MOVO X14, X8
	PSUBQ X10, X0
	MOVO X0, X1
	PSLLQ $59, X0
	POR X11, X2
	POR X5, X0
	POR X2, X0
	MOVO X0, 384(BX)
	PSRLQ $5, X1
	PSUBQ X13, X9
	PSLLQ $24, X9
	PSUBQ X6, X15
	MOVO X15, X4
	PSLLQ $53, X15
	POR X1, X9
	POR X15, X9
	MOVO X9, 400(BX)
	PSRLQ $11, X4
	PSUBQ X3, X14
	PSLLQ $18, X14
	MOVO 944(AX), X12
	MOVO 960(AX), X7
	MOVO 976(AX), X10
	MOVO 992(AX), X11
	MOVO X12, X5
	MOVO X7, X2
	MOVO X10, X0
	MOVO X11, X13
	PSUBQ X8, X12
	MOVO X12, X6
	PSLLQ $47, X12
	POR X4, X14
	POR X12, X14
	MOVO X14, 416(BX)
	PSRLQ $17, X6
	PSUBQ X5, X7
	PSLLQ $12, X7
	PSUBQ X2, X10
	MOVO X10, X1
	PSLLQ $41, X10
	POR X6, X7
	POR X10, X7
	MOVO X7, 432(BX)
	PSRLQ $23, X1
	PSUBQ X0, X11
	PSLLQ $6, X11
	MOVO 1008(AX), X15
	MOVO X15, X9
	PSUBQ X13, X15
	PSLLQ $35, X15
	POR X1, X11
	POR X15, X11
	MOVO X11, 448(BX)
	MOVO X9, 0(DX)
	RET

// func dpack64_30(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_30(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $30, X2
	PSUBQ X5, X3
	MOVO X3, X7
	PSLLQ $60, X3
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	PSRLQ $4, X7
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	PSUBQ X6, X8
	PSLLQ $26, X8
	PSUBQ X12, X9
	MOVO X9, X0
	PSLLQ $56, X9
	POR X7, X8
	POR X9, X8
	MOVO X8, 16(BX)
	PSRLQ $8, X0
	PSUBQ X13, X10
	PSLLQ $22, X10
	PSUBQ X14, X11
	MOVO X11, X4
	PSLLQ $52, X11
	POR X0, X10
	POR X11, X10
	MOVO X10, 32(BX)
	PSRLQ $12, X4
	MOVO 112(AX), X5
	MOVO 128(AX), X1
	MOVO 144(AX), X3
	MOVO 160(AX), X2
	MOVO X5, X6
	MOVO X1, X12
	MOVO X3, X7
	MOVO X2, X9
	PSUBQ X15, X5
	PSLLQ $18, X5
	PSUBQ X6, X1
	MOVO X1, X8
	PSLLQ $48, X1
	POR X4, X5
	POR X1, X5
	MOVO X5, 48(BX)
	PSRLQ $16, X8
	PSUBQ X12, X3
	PSLLQ $14, X3
	PSUBQ X7, X2
	MOVO X2, X13
	PSLLQ $44, X2
	POR X8, X3
	POR X2, X3
	MOVO X3, 64(BX)
	PSRLQ $20, X13
	MOVO 176(AX), X14
	MOVO 192(AX), X0
	MOVO 208(AX), X11
	MOVO 224(AX), X10
	MOVO X14, X15
	MOVO X0, X6
	MOVO X11, X4
	MOVO X10, X1
	PSUBQ X9, X14
	PSLLQ $10, X14
	PSUBQ X15, X0
	MOVO X0, X5
	PSLLQ $40, X0
	POR X13, X14
	POR X0, X14
	MOVO X14, 80(BX)
	PSRLQ $24, X5
	PSUBQ X6, X11
	PSLLQ $6, X11
	PSUBQ X4, X10
	MOVO X10, X12
	PSLLQ $36, X10
	POR X5, X11
	POR X10, X11
	MOVO X11, 96(BX)
	PSRLQ $28, X12
	MOVO 240(AX), X7
	MOVO 256(AX), X8
	MOVO 272(AX), X2
	MOVO 288(AX), X3
	MOVO X7, X9
	MOVO X8, X15
	MOVO X2, X13
	MOVO X3, X0
	PSUBQ X1, X7
	PSLLQ $2, X7
	PSUBQ X9, X8
	PSLLQ $32, X8
	PSUBQ X15, X2
	MOVO X2, X14
	PSLLQ $62, X2
	POR X12, X7
	POR X8, X2
	POR X7, X2
	MOVO X2, 112(BX)
	PSRLQ $2, X14
	PSUBQ X13, X3
	PSLLQ $28, X3
	MOVO 304(AX), X6
	MOVO 320(AX), X4
	MOVO 336(AX), X5
	MOVO 352(AX), X10
	MOVO X6, X11
	MOVO X4, X1
	MOVO X5, X9
	MOVO X10, X15
	PSUBQ X0, X6
	MOVO X6, X12
	PSLLQ $58, X6
	POR X14, X3
	POR X6, X3
	MOVO X3, 128(BX)
	PSRLQ $6, X12
	PSUBQ X11, X4
	PSLLQ $24, X4
	PSUBQ X1, X5
	MOVO X5, X8
	PSLLQ $54, X5
	POR X12, X4
	POR X5, X4
	MOVO X4, 144(BX)
	PSRLQ $10, X8
	PSUBQ X9, X10
	PSLLQ $20, X10
	MOVO 368(AX), X7
	MOVO 384(AX), X2
	MOVO 400(AX), X13
	MOVO 416(AX), X0
	MOVO X7, X14
	MOVO X2, X6
	MOVO X13, X3
	MOVO X0, X11
	PSUBQ X15, X7
	MOVO X7, X1
	PSLLQ $50, X7
	POR X8, X10
	POR X7, X10
	MOVO X10, 160(BX)
	PSRLQ $14, X1
	PSUBQ X14, X2
	PSLLQ $16, X2
	PSUBQ X6, X13
	MOVO X13, X12
	PSLLQ $46, X13
	POR X1, X2
	POR X13, X2
	MOVO X2, 176(BX)
	PSRLQ $18, X12
	PSUBQ X3, X0
	PSLLQ $12, X0
	MOVO 432(AX), X5
	MOVO 448(AX), X4
	MOVO 464(AX), X9
	MOVO 480(AX), X15
	MOVO X5, X8
	MOVO X4, X7
	MOVO X9, X10
	MOVO X15, X14
	PSUBQ X11, X5
	MOVO X5, X6
	PSLLQ $42, X5
	POR X12, X0
	POR X5, X0
	MOVO X0, 192(BX)
	PSRLQ $22, X6
	PSUBQ X8, X4
	PSLLQ $8, X4
	PSUBQ X7, X9
	MOVO X9, X1
	PSLLQ $38, X9
	POR X6, X4
	POR X9, X4
	MOVO X4, 208(BX)
	PSRLQ $26, X1
	PSUBQ X10, X15
	PSLLQ $4, X15
	MOVO 496(AX), X13
	MOVO 512(AX), X2
	MOVO 528(AX), X3
	MOVO 544(AX), X11
	MOVO X13, X12
	MOVO X2, X5
	MOVO X3, X0
	MOVO X11, X8
	PSUBQ X14, X13
	PSLLQ $34, X13
	POR X1, X15
	POR X13, X15
	MOVO X15, 224(BX)
	PSUBQ X12, X2
	PSUBQ X5, X3
	PSLLQ $30, X3
	PSUBQ X0, X11
	MOVO X11, X7
	PSLLQ $60, X11
	POR X2, X3
	POR X11, X3
	MOVO X3, 240(BX)
	PSRLQ $4, X7
	MOVO 560(AX), X6
	MOVO 576(AX), X9
	MOVO 592(AX), X4
	MOVO 608(AX), X10
	MOVO X6, X14
	MOVO X9, X1
	MOVO X4, X13
	MOVO X10, X15
	PSUBQ X8, X6
	PSLLQ $26, X6
	PSUBQ X14, X9
	MOVO X9, X12
	PSLLQ $56, X9
	POR X7, X6
	POR X9, X6
	MOVO X6, 256(BX)
	PSRLQ $8, X12
	PSUBQ X1, X4
	PSLLQ $22, X4
	PSUBQ X13, X10
	MOVO X10, X5
	PSLLQ $52, X10
	POR X12, X4
	POR X10, X4
	MOVO X4, 272(BX)
	PSRLQ $12, X5
	MOVO 624(AX), X0
	MOVO 640(AX), X2
	MOVO 656(AX), X11
	MOVO 672(AX), X3
	MOVO X0, X8
	MOVO X2, X14
	MOVO X11, X7
	MOVO X3, X9
	PSUBQ X15, X0
	PSLLQ $18, X0
	PSUBQ X8, X2
	MOVO X2, X6
	PSLLQ $48, X2
	POR X5, X0
	POR X2, X0
	MOVO X0, 288(BX)
	PSRLQ $16, X6
	PSUBQ X14, X11
	PSLLQ $14, X11
	PSUBQ X7, X3
	MOVO X3, X1
	PSLLQ $44, X3
	POR X6, X11
	POR X3, X11
	MOVO X11, 304(BX)
	PSRLQ $20, X1
	MOVO 688(AX), X13
	MOVO 704(AX), X12
	MOVO 720(AX), X10
	MOVO 736(AX), X4
	MOVO X13, X15
	MOVO X12, X8
	MOVO X10, X5
	MOVO X4, X2
	PSUBQ X9, X13
	PSLLQ $10, X13
	PSUBQ X15, X12
	MOVO X12, X0
	PSLLQ $40, X12
	POR X1, X13
	POR X12, X13
	MOVO X13, 320(BX)
	PSRLQ $24, X0
	PSUBQ X8, X10
	PSLLQ $6, X10
	PSUBQ X5, X4
	MOVO X4, X14
	PSLLQ $36, X4
	POR X0, X10
	POR X4, X10
	MOVO X10, 336(BX)
	PSRLQ $28, X14
	MOVO 752(AX), X7
	MOVO 768(AX), X6
	MOVO 784(AX), X3
	MOVO 800(AX), X11
	MOVO X7, X9
	MOVO X6, X15
	MOVO X3, X1
	MOVO X11, X12
	PSUBQ X2, X7
	PSLLQ $2, X7
	PSUBQ X9, X6
	PSLLQ $32, X6
	PSUBQ X15, X3
	MOVO X3, X13
	PSLLQ $62, X3
	POR X14, X7
	POR X6, X3
	POR X7, X3
	MOVO X3, 352(BX)
	PSRLQ $2, X13
	PSUBQ X1, X11
	PSLLQ $28, X11
	MOVO 816(AX), X8
	MOVO 832(AX), X5
	MOVO 848(AX), X0
	MOVO 864(AX), X4
	MOVO X8, X10
	MOVO X5, X2
	MOVO X0, X9
	MOVO X4, X15
	PSUBQ X12, X8
	MOVO X8, X14
	PSLLQ $58, X8
	POR X13, X11
	POR X8, X11
	MOVO X11, 368(BX)
	PSRLQ $6, X14
	PSUBQ X10, X5
	PSLLQ $24, X5
	PSUBQ X2, X0
	MOVO X0, X6
	PSLLQ $54, X0
	POR X14, X5
	POR X0, X5
	MOVO X5, 384(BX)
	PSRLQ $10, X6
	PSUBQ X9, X4
	PSLLQ $20, X4
	MOVO 880(AX), X7
	MOVO 896(AX), X3
	MOVO 912(AX), X1
	MOVO 928(AX), X12
	MOVO X7, X13
	MOVO X3, X8
	MOVO X1, X11
	MOVO X12, X10
	PSUBQ X15, X7
	MOVO X7, X2
	PSLLQ $50, X7
	POR X6, X4
	POR X7, X4
	MOVO X4, 400(BX)
	PSRLQ $14, X2
	PSUBQ X13, X3
	PSLLQ $16, X3
	PSUBQ X8, X1
	MOVO X1, X14
	PSLLQ $46, X1
	POR X2, X3
	POR X1, X3
	MOVO X3, 416(BX)
	PSRLQ $18, X14
	PSUBQ X11, X12
	PSLLQ $12, X12
	MOVO 944(AX), X0
	MOVO 960(AX), X5
	MOVO 976(AX), X9
	MOVO 992(AX), X15
	MOVO X0, X6
	MOVO X5, X7
	MOVO X9, X4
	MOVO X15, X13
	PSUBQ X10, X0
	MOVO X0, X8
	PSLLQ $42, X0
	POR X14, X12
	POR X0, X12
	MOVO X12, 432(BX)
	PSRLQ $22, X8
	PSUBQ X6, X5
	PSLLQ $8, X5
	PSUBQ X7, X9
	MOVO X9, X2
	PSLLQ $38, X9
	POR X8, X5
	POR X9, X5
	MOVO X5, 448(BX)
	PSRLQ $26, X2
	PSUBQ X4, X15
	PSLLQ $4, X15
	MOVO 1008(AX), X1
	MOVO X1, X3
	PSUBQ X13, X1
	PSLLQ $34, X1
	POR X2, X15
	POR X1, X15
	MOVO X15, 464(BX)
	MOVO X3, 0(DX)
	RET

// func dpack64_31(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_31(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $31, X2
	PSUBQ X5, X3
	MOVO X3, X7
	PSLLQ $62, X3
	POR X1, X2
	POR X3, X2
	MOVO X2, 0(BX)
	PSRLQ $2, X7
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	PSUBQ X6, X8
	PSLLQ $29, X8
	PSUBQ X12, X9
	MOVO X9, X0
	PSLLQ $60, X9
	POR X7, X8
	POR X9, X8
	MOVO X8, 16(BX)
	PSRLQ $4, X0
	PSUBQ X13, X10
	PSLLQ $27, X10
	PSUBQ X14, X11
	MOVO X11, X4
	PSLLQ $58, X11
	POR X0, X10
	POR X11, X10
	MOVO X10, 32(BX)
	PSRLQ $6, X4
	MOVO 112(AX), X5
	MOVO 128(AX), X1
	MOVO 144(AX), X3
	MOVO 160(AX), X2
	MOVO X5, X6
	MOVO X1, X12
	MOVO X3, X7
	MOVO X2, X9
	PSUBQ X15, X5
	PSLLQ $25, X5
	PSUBQ X6, X1
	MOVO X1, X8
	PSLLQ $56, X1
	POR X4, X5
	POR X1, X5
	MOVO X5, 48(BX)
	PSRLQ $8, X8
	PSUBQ X12, X3
	PSLLQ $23, X3
	PSUBQ X7, X2
	MOVO X2, X13
	PSLLQ $54, X2
	POR X8, X3
	POR X2, X3
	MOVO X3, 64(BX)
	PSRLQ $10, X13
	MOVO 176(AX), X14
	MOVO 192(AX), X0
	MOVO 208(AX), X11
	MOVO 224(AX), X10
	MOVO X14, X15
	MOVO X0, X6
	MOVO X11, X4
	MOVO X10, X1
	PSUBQ X9, X14
	PSLLQ $21, X14
	PSUBQ X15, X0
	MOVO X0, X5
	PSLLQ $52, X0
	POR X13, X14
	POR X0, X14
	MOVO X14, 80(BX)
	PSRLQ $12, X5
	PSUBQ X6, X11
	PSLLQ $19, X11
	PSUBQ X4, X10
	MOVO X10, X12
	PSLLQ $50, X10
	POR X5, X11
	POR X10, X11
	MOVO X11, 96(BX)
	PSRLQ $14, X12
	MOVO 240(AX), X7
	MOVO 256(AX), X8
	MOVO 272(AX), X2
	MOVO 288(AX), X3
	MOVO X7, X9
	MOVO X8, X15
	MOVO X2, X13
	MOVO X3, X0
	PSUBQ X1, X7
	PSLLQ $17, X7
	PSUBQ X9, X8
	MOVO X8, X14
	PSLLQ $48, X8
	POR X12, X7
	POR X8, X7
	MOVO X7, 112(BX)
	PSRLQ $16, X14
	PSUBQ X15, X2
	PSLLQ $15, X2
	PSUBQ X13, X3
	MOVO X3, X6
	PSLLQ $46, X3
	POR X14, X2
	POR X3, X2
	MOVO X2, 128(BX)
	PSRLQ $18, X6
	MOVO 304(AX), X4
	MOVO 320(AX), X5
	MOVO 336(AX), X10
	MOVO 352(AX), X11
	MOVO X4, X1
	MOVO X5, X9
	MOVO X10, X12
	MOVO X11, X8
	PSUBQ X0, X4
	PSLLQ $13, X4
	PSUBQ X1, X5
	MOVO X5, X7
	PSLLQ $44, X5
	POR X6, X4
	POR X5, X4
	MOVO X4, 144(BX)
	PSRLQ $20, X7
	PSUBQ X9, X10
	PSLLQ $11, X10
	PSUBQ X12, X11
	MOVO X11, X15
	PSLLQ $42, X11
	POR X7, X10
	POR X11, X10
	MOVO X10, 160(BX)
	PSRLQ $22, X15
	MOVO 368(AX), X13
	MOVO 384(AX), X14
	MOVO 400(AX), X3
	MOVO 416(AX), X2
	MOVO X13, X0
	MOVO X14, X1
	MOVO X3, X6
	MOVO X2, X5
	PSUBQ X8, X13
	PSLLQ $9, X13
	PSUBQ X0, X14
	MOVO X14, X4
	PSLLQ $40, X14
	POR X15, X13
	POR X14, X13
	MOVO X13, 176(BX)
	PSRLQ $24, X4
	PSUBQ X1, X3
	PSLLQ $7, X3
	PSUBQ X6, X2
	MOVO X2, X9
	PSLLQ $38, X2
	POR X4, X3
	POR X2, X3
	MOVO X3, 192(BX)
	PSRLQ $26, X9
	MOVO 432(AX), X12
	MOVO 448(AX), X7
	MOVO 464(AX), X11
	MOVO 480(AX), X10
	MOVO X12, X8
	MOVO X7, X0
	MOVO X11, X15
	MOVO X10, X14
	PSUBQ X5, X12
	PSLLQ $5, X12
	PSUBQ X8, X7
	MOVO X7, X13
	PSLLQ $36, X7
	POR X9, X12
	POR X7, X12
	MOVO X12, 208(BX)
	PSRLQ $28, X13
	PSUBQ X0, X11
	PSLLQ $3, X11
	PSUBQ X15, X10
	MOVO X10, X1
	PSLLQ $34, X10
	POR X13, X11
	POR X10, X11
	MOVO X11, 224(BX)
	PSRLQ $30, X1
	MOVO 496(AX), X6
	MOVO 512(AX), X4
	MOVO 528(AX), X2
	MOVO 544(AX), X3
	MOVO X6, X5
	MOVO X4, X8
	MOVO X2, X9
	MOVO X3, X7
	PSUBQ X14, X6
	PSLLQ $1, X6
	PSUBQ X5, X4
	PSLLQ $32, X4
	PSUBQ X8, X2
	MOVO X2, X12
	PSLLQ $63, X2
	POR X1, X6
	POR X4, X2
	POR X6, X2
	MOVO X2, 240(BX)
	PSRLQ $1, X12
	PSUBQ X9, X3
	PSLLQ $30, X3
	MOVO 560(AX), X0
	MOVO 576(AX), X15
	MOVO 592(AX), X13
	MOVO 608(AX), X10
	MOVO X0, X11
	MOVO X15, X14
	MOVO X13, X5
	MOVO X10, X8
	PSUBQ X7, X0
	MOVO X0, X1
	PSLLQ $61, X0
	POR X12, X3
	POR X0, X3
	MOVO X3, 256(BX)
	PSRLQ $3, X1
	PSUBQ X11, X15
	PSLLQ $28, X15
	PSUBQ X14, X13
	MOVO X13, X4
	PSLLQ $59, X13
	POR X1, X15
	POR X13, X15
	MOVO X15, 272(BX)
	PSRLQ $5, X4
	PSUBQ X5, X10
	PSLLQ $26, X10
	MOVO 624(AX), X6
	MOVO 640(AX), X2
	MOVO 656(AX), X9
	MOVO 672(AX), X7
	MOVO X6, X12
	MOVO X2, X0
	MOVO X9, X3
	MOVO X7, X11
	PSUBQ X8, X6
	MOVO X6, X14
	PSLLQ $57, X6
	POR X4, X10
	POR X6, X10
	MOVO X10, 288(BX)
	PSRLQ $7, X14
	PSUBQ X12, X2
	PSLLQ $24, X2
	PSUBQ X0, X9
	MOVO X9, X1
	PSLLQ $55, X9
	POR X14, X2
	POR X9, X2
	MOVO X2, 304(BX)
	PSRLQ $9, X1
	PSUBQ X3, X7
	PSLLQ $22, X7
	MOVO 688(AX), X13
	MOVO 704(AX), X15
	MOVO 720(AX), X5
	MOVO 736(AX), X8
	MOVO X13, X4
	MOVO X15, X6
	MOVO X5, X10
	MOVO X8, X12
	PSUBQ X11, X13
	MOVO X13, X0
	PSLLQ $53, X13
	POR X1, X7
	POR X13, X7
	MOVO X7, 320(BX)
	PSRLQ $11, X0
	PSUBQ X4, X15
	PSLLQ $20, X15
	PSUBQ X6, X5
	MOVO X5, X14
	PSLLQ $51, X5
	POR X0, X15
	POR X5, X15
	MOVO X15, 336(BX)
	PSRLQ $13, X14
	PSUBQ X10, X8
	PSLLQ $18, X8
	MOVO 752(AX), X9
	MOVO 768(AX), X2
	MOVO 784(AX), X3
	MOVO 800(AX), X11
	MOVO X9, X1
	MOVO X2, X13
	MOVO X3, X7
	MOVO X11, X4
	PSUBQ X12, X9
	MOVO X9, X6
	PSLLQ $49, X9
	POR X14, X8
	POR X9, X8
	MOVO X8, 352(BX)
	PSRLQ $15, X6
	PSUBQ X1, X2
	PSLLQ $16, X2
	PSUBQ X13, X3
	MOVO X3, X0
	PSLLQ $47, X3
	POR X6, X2
	POR X3, X2
	MOVO X2, 368(BX)
	PSRLQ $17, X0
	PSUBQ X7, X11
	PSLLQ $14, X11
	MOVO 816(AX), X5
	MOVO 832(AX), X15
	MOVO 848(AX), X10
	MOVO 864(AX), X12
	MOVO X5, X14
	MOVO X15, X9
	MOVO X10, X8
	MOVO X12, X1
	PSUBQ X4, X5
	MOVO X5, X13
	PSLLQ $45, X5
	POR X0, X11
	POR X5, X11
	MOVO X11, 384(BX)
	PSRLQ $19, X13
	PSUBQ X14, X15
	PSLLQ $12, X15
	PSUBQ X9, X10
	MOVO X10, X6
	PSLLQ $43, X10
	POR X13, X15
	POR X10, X15
	MOVO X15, 400(BX)
	PSRLQ $21, X6
	PSUBQ X8, X12
	PSLLQ $10, X12
	MOVO 880(AX), X3
	MOVO 896(AX), X2
	MOVO 912(AX), X7
	MOVO 928(AX), X4
	MOVO X3, X0
	MOVO X2, X5
	MOVO X7, X11
	MOVO X4, X14
	PSUBQ X1, X3
	MOVO X3, X9
	PSLLQ $41, X3
	POR X6, X12
	POR X3, X12
	MOVO X12, 416(BX)
	PSRLQ $23, X9
	PSUBQ X0, X2
	PSLLQ $8, X2
	PSUBQ X5, X7
	MOVO X7, X13
	PSLLQ $39, X7
	POR X9, X2
	POR X7, X2
	MOVO X2, 432(BX)
	PSRLQ $25, X13
	PSUBQ X11, X4
	PSLLQ $6, X4
	MOVO 944(AX), X10
	MOVO 960(AX), X15
	MOVO 976(AX), X8
	MOVO 992(AX), X1
	MOVO X10, X6
	MOVO X15, X3
	MOVO X8, X12
	MOVO X1, X0
	PSUBQ X14, X10
	MOVO X10, X5
	PSLLQ $37, X10
	POR X13, X4
	POR X10, X4
	MOVO X4, 448(BX)
	PSRLQ $27, X5
	PSUBQ X6, X15
	PSLLQ $4, X15
	PSUBQ X3, X8
	MOVO X8, X9
	PSLLQ $35, X8
	POR X5, X15
	POR X8, X15
	MOVO X15, 464(BX)
	PSRLQ $29, X9
	PSUBQ X12, X1
	PSLLQ $2, X1
	MOVO 1008(AX), X7
	MOVO X7, X2
	PSUBQ X0, X7
	PSLLQ $33, X7
	POR X9, X1
	POR X7, X1
	MOVO X1, 480(BX)
	MOVO X2, 0(DX)
	RET

// func dpack64_32(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_32(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $32, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSUBQ X5, X3
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	PSUBQ X6, X7
	PSLLQ $32, X7
	POR X3, X7
	MOVO X7, 16(BX)
	PSUBQ X11, X8
	PSUBQ X12, X9
	PSLLQ $32, X9
	POR X8, X9
	MOVO X9, 32(BX)
	PSUBQ X13, X10
	MOVO 112(AX), X15
	MOVO 128(AX), X0
	MOVO 144(AX), X4
	MOVO 160(AX), X1
	MOVO X15, X2
	MOVO X0, X5
	MOVO X4, X6
	MOVO X1, X3
	PSUBQ X14, X15
	PSLLQ $32, X15
	POR X10, X15
	MOVO X15, 48(BX)
	PSUBQ X2, X0
	PSUBQ X5, X4
	PSLLQ $32, X4
	POR X0, X4
	MOVO X4, 64(BX)
	PSUBQ X6, X1
	MOVO 176(AX), X7
	MOVO 192(AX), X11
	MOVO 208(AX), X12
	MOVO 224(AX), X8
	MOVO X7, X9
	MOVO X11, X13
	MOVO X12, X14
	MOVO X8, X10
	PSUBQ X3, X7
	PSLLQ $32, X7
	POR X1, X7
	MOVO X7, 80(BX)
	PSUBQ X9, X11
	PSUBQ X13, X12
	PSLLQ $32, X12
	POR X11, X12
	MOVO X12, 96(BX)
	PSUBQ X14, X8
	MOVO 240(AX), X15
	MOVO 256(AX), X2
	MOVO 272(AX), X5
	MOVO 288(AX), X0
	MOVO X15, X4
	MOVO X2, X6
	MOVO X5, X3
	MOVO X0, X1
	PSUBQ X10, X15
	PSLLQ $32, X15
	POR X8, X15
	MOVO X15, 112(BX)
	PSUBQ X4, X2
	PSUBQ X6, X5
	PSLLQ $32, X5
	POR X2, X5
	MOVO X5, 128(BX)
	PSUBQ X3, X0
	MOVO 304(AX), X7
	MOVO 320(AX), X9
	MOVO 336(AX), X13
	MOVO 352(AX), X11
	MOVO X7, X12
	MOVO X9, X14
	MOVO X13, X10
	MOVO X11, X8
	PSUBQ X1, X7
	PSLLQ $32, X7
	POR X0, X7
	MOVO X7, 144(BX)
	PSUBQ X12, X9
	PSUBQ X14, X13
	PSLLQ $32, X13
	POR X9, X13
	MOVO X13, 160(BX)
	PSUBQ X10, X11
	MOVO 368(AX), X15
	MOVO 384(AX), X4
	MOVO 400(AX), X6
	MOVO 416(AX), X2
	MOVO X15, X5
	MOVO X4, X3
	MOVO X6, X1
	MOVO X2, X0
	PSUBQ X8, X15
	PSLLQ $32, X15
	POR X11, X15
	MOVO X15, 176(BX)
	PSUBQ X5, X4
	PSUBQ X3, X6
	PSLLQ $32, X6
	POR X4, X6
	MOVO X6, 192(BX)
	PSUBQ X1, X2
	MOVO 432(AX), X7
	MOVO 448(AX), X12
	MOVO 464(AX), X14
	MOVO 480(AX), X9
	MOVO X7, X13
	MOVO X12, X10
	MOVO X14, X8
	MOVO X9, X11
	PSUBQ X0, X7
	PSLLQ $32, X7
	POR X2, X7
	MOVO X7, 208(BX)
	PSUBQ X13, X12
	PSUBQ X10, X14
	PSLLQ $32, X14
	POR X12, X14
	MOVO X14, 224(BX)
	PSUBQ X8, X9
	MOVO 496(AX), X15
	MOVO 512(AX), X5
	MOVO 528(AX), X3
	MOVO 544(AX), X4
	MOVO X15, X6
	MOVO X5, X1
	MOVO X3, X0
	MOVO X4, X2
	PSUBQ X11, X15
	PSLLQ $32, X15
	POR X9, X15
	MOVO X15, 240(BX)
	PSUBQ X6, X5
	PSUBQ X1, X3
	PSLLQ $32, X3
	POR X5, X3
	MOVO X3, 256(BX)
	PSUBQ X0, X4
	MOVO 560(AX), X7
	MOVO 576(AX), X13
	MOVO 592(AX), X10
	MOVO 608(AX), X12
	MOVO X7, X14
	MOVO X13, X8
	MOVO X10, X11
	MOVO X12, X9
	PSUBQ X2, X7
	PSLLQ $32, X7
	POR X4, X7
	MOVO X7, 272(BX)
	PSUBQ X14, X13
	PSUBQ X8, X10
	PSLLQ $32, X10
	POR X13, X10
	MOVO X10, 288(BX)
	PSUBQ X11, X12
	MOVO 624(AX), X15
	MOVO 640(AX), X6
	MOVO 656(AX), X1
	MOVO 672(AX), X5
	MOVO X15, X3
	MOVO X6, X0
	MOVO X1, X2
	MOVO X5, X4
	PSUBQ X9, X15
	PSLLQ $32, X15
	POR X12, X15
	MOVO X15, 304(BX)
	PSUBQ X3, X6
	PSUBQ X0, X1
	PSLLQ $32, X1
	POR X6, X1
	MOVO X1, 320(BX)
	PSUBQ X2, X5
	MOVO 688(AX), X7
	MOVO 704(AX), X14
	MOVO 720(AX), X8
	MOVO 736(AX), X13
	MOVO X7, X10
	MOVO X14, X11
	MOVO X8, X9
	MOVO X13, X12
	PSUBQ X4, X7
	PSLLQ $32, X7
	POR X5, X7
	MOVO X7, 336(BX)
	PSUBQ X10, X14
	PSUBQ X11, X8
	PSLLQ $32, X8
	POR X14, X8
	MOVO X8, 352(BX)
	PSUBQ X9, X13
	MOVO 752(AX), X15
	MOVO 768(AX), X3
	MOVO 784(AX), X0
	MOVO 800(AX), X6
	MOVO X15, X1
	MOVO X3, X2
	MOVO X0, X4
	MOVO X6, X5
	PSUBQ X12, X15
	PSLLQ $32, X15
	POR X13, X15
	MOVO X15, 368(BX)
	PSUBQ X1, X3
	PSUBQ X2, X0
	PSLLQ $32, X0
	POR X3, X0
	MOVO X0, 384(BX)
	PSUBQ X4, X6
	MOVO 816(AX), X7
	MOVO 832(AX), X10
	MOVO 848(AX), X11
	MOVO 864(AX), X14
	MOVO X7, X8
	MOVO X10, X9
	MOVO X11, X12
	MOVO X14, X13
	PSUBQ X5, X7
	PSLLQ $32, X7
	POR X6, X7
	MOVO X7, 400(BX)
	PSUBQ X8, X10
	PSUBQ X9, X11
	PSLLQ $32, X11
	POR X10, X11
	MOVO X11, 416(BX)
	PSUBQ X12, X14
	MOVO 880(AX), X15
	MOVO 896(AX), X1
	MOVO 912(AX), X2
	MOVO 928(AX), X3
	MOVO X15, X0
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X13, X15
	PSLLQ $32, X15
	POR X14, X15
	MOVO X15, 432(BX)
	PSUBQ X0, X1
	PSUBQ X4, X2
	PSLLQ $32, X2
	POR X1, X2
	MOVO X2, 448(BX)
	PSUBQ X5, X3
	MOVO 944(AX), X7
	MOVO 960(AX), X8
	MOVO 976(AX), X9
	MOVO 992(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	PSUBQ X6, X7
	PSLLQ $32, X7
	POR X3, X7
	MOVO X7, 464(BX)
	PSUBQ X11, X8
	PSUBQ X12, X9
	PSLLQ $32, X9
	POR X8, X9
	MOVO X9, 480(BX)
	PSUBQ X13, X10
	MOVO 1008(AX), X15
	MOVO X15, X0
	PSUBQ X14, X15
	PSLLQ $32, X15
	POR X10, X15
	MOVO X15, 496(BX)
	MOVO X0, 0(DX)
	RET

// func dpack64_33(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_33(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $33, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $31, X7
	PSUBQ X5, X3
	PSLLQ $2, X3
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	PSUBQ X6, X8
	MOVO X8, X0
	PSLLQ $35, X8
	POR X7, X3
	POR X8, X3
	MOVO X3, 16(BX)
	PSRLQ $29, X0
	PSUBQ X12, X9
	PSLLQ $4, X9
	PSUBQ X13, X10
	MOVO X10, X4
	PSLLQ $37, X10
	POR X0, X9
	POR X10, X9
	MOVO X9, 32(BX)
	PSRLQ $27, X4
	PSUBQ X14, X11
	PSLLQ $6, X11
	MOVO 112(AX), X1
	MOVO 128(AX), X2
	MOVO 144(AX), X5
	MOVO 160(AX), X6
	MOVO X1, X7
	MOVO X2, X8
	MOVO X5, X3
	MOVO X6, X12
	PSUBQ X15, X1
	MOVO X1, X13
	PSLLQ $39, X1
	POR X4, X11
	POR X1, X11
	MOVO X11, 48(BX)
	PSRLQ $25, X13
	PSUBQ X7, X2
	PSLLQ $8, X2
	PSUBQ X8, X5
	MOVO X5, X0
	PSLLQ $41, X5
	POR X13, X2
	POR X5, X2
	MOVO X2, 64(BX)
	PSRLQ $23, X0
	PSUBQ X3, X6
	PSLLQ $10, X6
	MOVO 176(AX), X10
	MOVO 192(AX), X9
	MOVO 208(AX), X14
	MOVO 224(AX), X15
	MOVO X10, X4
	MOVO X9, X1
	MOVO X14, X11
	MOVO X15, X7
	PSUBQ X12, X10
	MOVO X10, X8
	PSLLQ $43, X10
	POR X0, X6
	POR X10, X6
	MOVO X6, 80(BX)
	PSRLQ $21, X8
	PSUBQ X4, X9
	PSLLQ $12, X9
	PSUBQ X1, X14
	MOVO X14, X13
	PSLLQ $45, X14
	POR X8, X9
	POR X14, X9
	MOVO X9, 96(BX)
	PSRLQ $19, X13
	PSUBQ X11, X15
	PSLLQ $14, X15
	MOVO 240(AX), X5
	MOVO 256(AX), X2
	MOVO 272(AX), X3
	MOVO 288(AX), X12
	MOVO X5, X0
	MOVO X2, X10
	MOVO X3, X6
	MOVO X12, X4
	PSUBQ X7, X5
	MOVO X5, X1
	PSLLQ $47, X5
	POR X13, X15
	POR X5, X15
	MOVO X15, 112(BX)
	PSRLQ $17, X1
	PSUBQ X0, X2
	PSLLQ $16, X2
	PSUBQ X10, X3
	MOVO X3, X8
	PSLLQ $49, X3
	POR X1, X2
	POR X3, X2
	MOVO X2, 128(BX)
	PSRLQ $15, X8
	PSUBQ X6, X12
	PSLLQ $18, X12
	MOVO 304(AX), X14
	MOVO 320(AX), X9
	MOVO 336(AX), X11
	MOVO 352(AX), X7
	MOVO X14, X13
	MOVO X9, X5
	MOVO X11, X15
	MOVO X7, X0
	PSUBQ X4, X14
	MOVO X14, X10
	PSLLQ $51, X14
	POR X8, X12
	POR X14, X12
	MOVO X12, 144(BX)
	PSRLQ $13, X10
	PSUBQ X13, X9
	PSLLQ $20, X9
	PSUBQ X5, X11
	MOVO X11, X1
	PSLLQ $53, X11
	POR X10, X9
	POR X11, X9
	MOVO X9, 160(BX)
	PSRLQ $11, X1
	PSUBQ X15, X7
	PSLLQ $22, X7
	MOVO 368(AX), X3
	MOVO 384(AX), X2
	MOVO 400(AX), X6
	MOVO 416(AX), X4
	MOVO X3, X8
	MOVO X2, X14
	MOVO X6, X12
	MOVO X4, X13
	PSUBQ X0, X3
	MOVO X3, X5
	PSLLQ $55, X3
	POR X1, X7
	POR X3, X7
	MOVO X7, 176(BX)
	PSRLQ $9, X5
	PSUBQ X8, X2
	PSLLQ $24, X2
	PSUBQ X14, X6
	MOVO X6, X10
	PSLLQ $57, X6
	POR X5, X2
	POR X6, X2
	MOVO X2, 192(BX)
	PSRLQ $7, X10
	PSUBQ X12, X4
	PSLLQ $26, X4
	MOVO 432(AX), X11
	MOVO 448(AX), X9
	MOVO 464(AX), X15
	MOVO 480(AX), X0
	MOVO X11, X1
	MOVO X9, X3
	MOVO X15, X7
	MOVO X0, X8
	PSUBQ X13, X11
	MOVO X11, X14
	PSLLQ $59, X11
	POR X10, X4
	POR X11, X4
	MOVO X4, 208(BX)
	PSRLQ $5, X14
	PSUBQ X1, X9
	PSLLQ $28, X9
	PSUBQ X3, X15
	MOVO X15, X5
	PSLLQ $61, X15
	POR X14, X9
	POR X15, X9
	MOVO X9, 224(BX)
	PSRLQ $3, X5
	PSUBQ X7, X0
	PSLLQ $30, X0
	MOVO 496(AX), X6
	MOVO 512(AX), X2
	MOVO 528(AX), X12
	MOVO 544(AX), X13
	MOVO X6, X10
	MOVO X2, X11
	MOVO X12, X4
	MOVO X13, X1
	PSUBQ X8, X6
	MOVO X6, X3
	PSLLQ $63, X6
	POR X5, X0
	POR X6, X0
	MOVO X0, 240(BX)
	PSRLQ $1, X3
	PSUBQ X10, X2
	MOVO X2, X14
	PSLLQ $32, X2
	POR X3, X2
	MOVO X2, 256(BX)
	PSRLQ $32, X14
	PSUBQ X11, X12
	PSLLQ $1, X12
	PSUBQ X4, X13
	MOVO X13, X15
	PSLLQ $34, X13
	POR X14, X12
	POR X13, X12
	MOVO X12, 272(BX)
	PSRLQ $30, X15
	MOVO 560(AX), X9
	MOVO 576(AX), X7
	MOVO 592(AX), X8
	MOVO 608(AX), X5
	MOVO X9, X6
	MOVO X7, X0
	MOVO X8, X10
	MOVO X5, X3
	PSUBQ X1, X9
	PSLLQ $3, X9
	PSUBQ X6, X7
	MOVO X7, X2
	PSLLQ $36, X7
	POR X15, X9
	POR X7, X9
	MOVO X9, 288(BX)
	PSRLQ $28, X2
	PSUBQ X0, X8
	PSLLQ $5, X8
	PSUBQ X10, X5
	MOVO X5, X11
	PSLLQ $38, X5
	POR X2, X8
	POR X5, X8
	MOVO X8, 304(BX)
	PSRLQ $26, X11
	MOVO 624(AX), X4
	MOVO 640(AX), X14
	MOVO 656(AX), X13
	MOVO 672(AX), X12
	MOVO X4, X1
	MOVO X14, X6
	MOVO X13, X15
	MOVO X12, X7
	PSUBQ X3, X4
	PSLLQ $7, X4
	PSUBQ X1, X14
	MOVO X14, X9
	PSLLQ $40, X14
	POR X11, X4
	POR X14, X4
	MOVO X4, 320(BX)
	PSRLQ $24, X9
	PSUBQ X6, X13
	PSLLQ $9, X13
	PSUBQ X15, X12
	MOVO X12, X0
	PSLLQ $42, X12
	POR X9, X13
	POR X12, X13
	MOVO X13, 336(BX)
	PSRLQ $22, X0
	MOVO 688(AX), X10
	MOVO 704(AX), X2
	MOVO 720(AX), X5
	MOVO 736(AX), X8
	MOVO X10, X3
	MOVO X2, X1
	MOVO X5, X11
	MOVO X8, X14
	PSUBQ X7, X10
	PSLLQ $11, X10
	PSUBQ X3, X2
	MOVO X2, X4
	PSLLQ $44, X2
	POR X0, X10
	POR X2, X10
	MOVO X10, 352(BX)
	PSRLQ $20, X4
	PSUBQ X1, X5
	PSLLQ $13, X5
	PSUBQ X11, X8
	MOVO X8, X6
	PSLLQ $46, X8
	POR X4, X5
	POR X8, X5
	MOVO X5, 368(BX)
	PSRLQ $18, X6
	MOVO 752(AX), X15
	MOVO 768(AX), X9
	MOVO 784(AX), X12
	MOVO 800(AX), X13
	MOVO X15, X7
	MOVO X9, X3
	MOVO X12, X0
	MOVO X13, X2
	PSUBQ X14, X15
	PSLLQ $15, X15
	PSUBQ X7, X9
	MOVO X9, X10
	PSLLQ $48, X9
	POR X6, X15
	POR X9, X15
	MOVO X15, 384(BX)
	PSRLQ $16, X10
	PSUBQ X3, X12
	PSLLQ $17, X12
	PSUBQ X0, X13
	MOVO X13, X1
	PSLLQ $50, X13
	POR X10, X12
	POR X13, X12
	MOVO X12, 400(BX)
	PSRLQ $14, X1
	MOVO 816(AX), X11
	MOVO 832(AX), X4
	MOVO 848(AX), X8
	MOVO 864(AX), X5
	MOVO X11, X14
	MOVO X4, X7
	MOVO X8, X6
	MOVO X5, X9
	PSUBQ X2, X11
	PSLLQ $19, X11
	PSUBQ X14, X4
	MOVO X4, X15
	PSLLQ $52, X4
	POR X1, X11
	POR X4, X11
	MOVO X11, 416(BX)
	PSRLQ $12, X15
	PSUBQ X7, X8
	PSLLQ $21, X8
	PSUBQ X6, X5
	MOVO X5, X3
	PSLLQ $54, X5
	POR X15, X8
	POR X5, X8
	MOVO X8, 432(BX)
	PSRLQ $10, X3
	MOVO 880(AX), X0
	MOVO 896(AX), X10
	MOVO 912(AX), X13
	MOVO 928(AX), X12
	MOVO X0, X2
	MOVO X10, X14
	MOVO X13, X1
	MOVO X12, X4
	PSUBQ X9, X0
	PSLLQ $23, X0
	PSUBQ X2, X10
	MOVO X10, X11
	PSLLQ $56, X10
	POR X3, X0
	POR X10, X0
	MOVO X0, 448(BX)
	PSRLQ $8, X11
	PSUBQ X14, X13
	PSLLQ $25, X13
	PSUBQ X1, X12
	MOVO X12, X7
	PSLLQ $58, X12
	POR X11, X13
	POR X12, X13
	MOVO X13, 464(BX)
	PSRLQ $6, X7
	MOVO 944(AX), X6
	MOVO 960(AX), X15
	MOVO 976(AX), X5
	MOVO 992(AX), X8
	MOVO X6, X9
	MOVO X15, X2
	MOVO X5, X3
	MOVO X8, X10
	PSUBQ X4, X6
	PSLLQ $27, X6
	PSUBQ X9, X15
	MOVO X15, X0
	PSLLQ $60, X15
	POR X7, X6
	POR X15, X6
	MOVO X6, 480(BX)
	PSRLQ $4, X0
	PSUBQ X2, X5
	PSLLQ $29, X5
	PSUBQ X3, X8
	MOVO X8, X14
	PSLLQ $62, X8
	POR X0, X5
	POR X8, X5
	MOVO X5, 496(BX)
	PSRLQ $2, X14
	MOVO 1008(AX), X1
	MOVO X1, X11
	PSUBQ X10, X1
	PSLLQ $31, X1
	POR X14, X1
	MOVO X1, 512(BX)
	MOVO X11, 0(DX)
	RET

// func dpack64_34(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_34(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $34, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $30, X7
	PSUBQ X5, X3
	PSLLQ $4, X3
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	PSUBQ X6, X8
	MOVO X8, X0
	PSLLQ $38, X8
	POR X7, X3
	POR X8, X3
	MOVO X3, 16(BX)
	PSRLQ $26, X0
	PSUBQ X12, X9
	PSLLQ $8, X9
	PSUBQ X13, X10
	MOVO X10, X4
	PSLLQ $42, X10
	POR X0, X9
	POR X10, X9
	MOVO X9, 32(BX)
	PSRLQ $22, X4
	PSUBQ X14, X11
	PSLLQ $12, X11
	MOVO 112(AX), X1
	MOVO 128(AX), X2
	MOVO 144(AX), X5
	MOVO 160(AX), X6
	MOVO X1, X7
	MOVO X2, X8
	MOVO X5, X3
	MOVO X6, X12
	PSUBQ X15, X1
	MOVO X1, X13
	PSLLQ $46, X1
	POR X4, X11
	POR X1, X11
	MOVO X11, 48(BX)
	PSRLQ $18, X13
	PSUBQ X7, X2
	PSLLQ $16, X2
	PSUBQ X8, X5
	MOVO X5, X0
	PSLLQ $50, X5
	POR X13, X2
	POR X5, X2
	MOVO X2, 64(BX)
	PSRLQ $14, X0
	PSUBQ X3, X6
	PSLLQ $20, X6
	MOVO 176(AX), X10
	MOVO 192(AX), X9
	MOVO 208(AX), X14
	MOVO 224(AX), X15
	MOVO X10, X4
	MOVO X9, X1
	MOVO X14, X11
	MOVO X15, X7
	PSUBQ X12, X10
	MOVO X10, X8
	PSLLQ $54, X10
	POR X0, X6
	POR X10, X6
	MOVO X6, 80(BX)
	PSRLQ $10, X8
	PSUBQ X4, X9
	PSLLQ $24, X9
	PSUBQ X1, X14
	MOVO X14, X13
	PSLLQ $58, X14
	POR X8, X9
	POR X14, X9
	MOVO X9, 96(BX)
	PSRLQ $6, X13
	PSUBQ X11, X15
	PSLLQ $28, X15
	MOVO 240(AX), X5
	MOVO 256(AX), X2
	MOVO 272(AX), X3
	MOVO 288(AX), X12
	MOVO X5, X0
	MOVO X2, X10
	MOVO X3, X6
	MOVO X12, X4
	PSUBQ X7, X5
	MOVO X5, X1
	PSLLQ $62, X5
	POR X13, X15
	POR X5, X15
	MOVO X15, 112(BX)
	PSRLQ $2, X1
	PSUBQ X0, X2
	MOVO X2, X8
	PSLLQ $32, X2
	POR X1, X2
	MOVO X2, 128(BX)
	PSRLQ $32, X8
	PSUBQ X10, X3
	PSLLQ $2, X3
	PSUBQ X6, X12
	MOVO X12, X14
	PSLLQ $36, X12
	POR X8, X3
	POR X12, X3
	MOVO X3, 144(BX)
	PSRLQ $28, X14
	MOVO 304(AX), X9
	MOVO 320(AX), X11
	MOVO 336(AX), X7
	MOVO 352(AX), X13
	MOVO X9, X5
	MOVO X11, X15
	MOVO X7, X0
	MOVO X13, X1
	PSUBQ X4, X9
	PSLLQ $6, X9
	PSUBQ X5, X11
	MOVO X11, X2
	PSLLQ $40, X11
	POR X14, X9
	POR X11, X9
	MOVO X9, 160(BX)
	PSRLQ $24, X2
	PSUBQ X15, X7
	PSLLQ $10, X7
	PSUBQ X0, X13
	MOVO X13, X10
	PSLLQ $44, X13
	POR X2, X7
	POR X13, X7
	MOVO X7, 176(BX)
	PSRLQ $20, X10
	MOVO 368(AX), X6
	MOVO 384(AX), X8
	MOVO 400(AX), X12
	MOVO 416(AX), X3
	MOVO X6, X4
	MOVO X8, X5
	MOVO X12, X14
	MOVO X3, X11
	PSUBQ X1, X6
	PSLLQ $14, X6
	PSUBQ X4, X8
	MOVO X8, X9
	PSLLQ $48, X8
	POR X10, X6
	POR X8, X6
	MOVO X6, 192(BX)
	PSRLQ $16, X9
	PSUBQ X5, X12
	PSLLQ $18, X12
	PSUBQ X14, X3
	MOVO X3, X15
	PSLLQ $52, X3
	POR X9, X12
	POR X3, X12
	MOVO X12, 208(BX)
	PSRLQ $12, X15
	MOVO 432(AX), X0
	MOVO 448(AX), X2
	MOVO 464(AX), X13
	MOVO 480(AX), X7
	MOVO X0, X1
	MOVO X2, X4
	MOVO X13, X10
	MOVO X7, X8
	PSUBQ X11, X0
	PSLLQ $22, X0
	PSUBQ X1, X2
	MOVO X2, X6
	PSLLQ $56, X2
	POR X15, X0
	POR X2, X0
	MOVO X0, 224(BX)
	PSRLQ $8, X6
	PSUBQ X4, X13
	PSLLQ $26, X13
	PSUBQ X10, X7
	MOVO X7, X5
	PSLLQ $60, X7
	POR X6, X13
	POR X7, X13
	MOVO X13, 240(BX)
	PSRLQ $4, X5
	MOVO 496(AX), X14
	MOVO 512(AX), X9
	MOVO 528(AX), X3
	MOVO 544(AX), X12
	MOVO X14, X11
	MOVO X9, X1
	MOVO X3, X15
	MOVO X12, X2
	PSUBQ X8, X14
	PSLLQ $30, X14
	POR X5, X14
	MOVO X14, 256(BX)
	PSUBQ X11, X9
	PSUBQ X1, X3
	MOVO X3, X0
	PSLLQ $34, X3
	POR X9, X3
	MOVO X3, 272(BX)
	PSRLQ $30, X0
	PSUBQ X15, X12
	PSLLQ $4, X12
	MOVO 560(AX), X4
	MOVO 576(AX), X10
	MOVO 592(AX), X6
	MOVO 608(AX), X7
	MOVO X4, X13
	MOVO X10, X8
	MOVO X6, X5
	MOVO X7, X14
	PSUBQ X2, X4
	MOVO X4, X11
	PSLLQ $38, X4
	POR X0, X12
	POR X4, X12
	MOVO X12, 288(BX)
	PSRLQ $26, X11
	PSUBQ X13, X10
	PSLLQ $8, X10
	PSUBQ X8, X6
	MOVO X6, X1
	PSLLQ $42, X6
	POR X11, X10
	POR X6, X10
	MOVO X10, 304(BX)
	PSRLQ $22, X1
	PSUBQ X5, X7
	PSLLQ $12, X7
	MOVO 624(AX), X9
	MOVO 640(AX), X3
	MOVO 656(AX), X15
	MOVO 672(AX), X2
	MOVO X9, X0
	MOVO X3, X4
	MOVO X15, X12
	MOVO X2, X13
	PSUBQ X14, X9
	MOVO X9, X8
	PSLLQ $46, X9
	POR X1, X7
	POR X9, X7
	MOVO X7, 320(BX)
	PSRLQ $18, X8
	PSUBQ X0, X3
	PSLLQ $16, X3
	PSUBQ X4, X15
	MOVO X15, X11
	PSLLQ $50, X15
	POR X8, X3
	POR X15, X3
	MOVO X3, 336(BX)
	PSRLQ $14, X11
	PSUBQ X12, X2
	PSLLQ $20, X2
	MOVO 688(AX), X6
	MOVO 704(AX), X10
	MOVO 720(AX), X5
	MOVO 736(AX), X14
	MOVO X6, X1
	MOVO X10, X9
	MOVO X5, X7
	MOVO X14, X0
	PSUBQ X13, X6
	MOVO X6, X4
	PSLLQ $54, X6
	POR X11, X2
	POR X6, X2
	MOVO X2, 352(BX)
	PSRLQ $10, X4
	PSUBQ X1, X10
	PSLLQ $24, X10
	PSUBQ X9, X5
	MOVO X5, X8
	PSLLQ $58, X5
	POR X4, X10
	POR X5, X10
	MOVO X10, 368(BX)
	PSRLQ $6, X8
	PSUBQ X7, X14
	PSLLQ $28, X14
	MOVO 752(AX), X15
	MOVO 768(AX), X3
	MOVO 784(AX), X12
	MOVO 800(AX), X13
	MOVO X15, X11
	MOVO X3, X6
	MOVO X12, X2
	MOVO X13, X1
	PSUBQ X0, X15
	MOVO X15, X9
	PSLLQ $62, X15
	POR X8, X14
	POR X15, X14
	MOVO X14, 384(BX)
	PSRLQ $2, X9
	PSUBQ X11, X3
	MOVO X3, X4
	PSLLQ $32, X3
	POR X9, X3
	MOVO X3, 400(BX)
	PSRLQ $32, X4
	PSUBQ X6, X12
	PSLLQ $2, X12
	PSUBQ X2, X13
	MOVO X13, X5
	PSLLQ $36, X13
	POR X4, X12
	POR X13, X12
	MOVO X12, 416(BX)
	PSRLQ $28, X5
	MOVO 816(AX), X10
	MOVO 832(AX), X7
	MOVO 848(AX), X0
	MOVO 864(AX), X8
	MOVO X10, X15
	MOVO X7, X14
	MOVO X0, X11
	MOVO X8, X9
	PSUBQ X1, X10
	PSLLQ $6, X10
	PSUBQ X15, X7
	MOVO X7, X3
	PSLLQ $40, X7
	POR X5, X10
	POR X7, X10
	MOVO X10, 432(BX)
	PSRLQ $24, X3
	PSUBQ X14, X0
	PSLLQ $10, X0
	PSUBQ X11, X8
	MOVO X8, X6
	PSLLQ $44, X8
	POR X3, X0
	POR X8, X0
	MOVO X0, 448(BX)
	PSRLQ $20, X6
	MOVO 880(AX), X2
	MOVO 896(AX), X4
	MOVO 912(AX), X13
	MOVO 928(AX), X12
	MOVO X2, X1
	MOVO X4, X15
	MOVO X13, X5
	MOVO X12, X7
	PSUBQ X9, X2
	PSLLQ $14, X2
	PSUBQ X1, X4
	MOVO X4, X10
	PSLLQ $48, X4
	POR X6, X2
	POR X4, X2
	MOVO X2, 464(BX)
	PSRLQ $16, X10
	PSUBQ X15, X13
	PSLLQ $18, X13
	PSUBQ X5, X12
	MOVO X12, X14
	PSLLQ $52, X12
	POR X10, X13
	POR X12, X13
	MOVO X13, 480(BX)
	PSRLQ $12, X14
	MOVO 944(AX), X11
	MOVO 960(AX), X3
	MOVO 976(AX), X8
	MOVO 992(AX), X0
	MOVO X11, X9
	MOVO X3, X1
	MOVO X8, X6
	MOVO X0, X4
	PSUBQ X7, X11
	PSLLQ $22, X11
	PSUBQ X9, X3
	MOVO X3, X2
	PSLLQ $56, X3
	POR X14, X11
	POR X3, X11
	MOVO X11, 496(BX)
	PSRLQ $8, X2
	PSUBQ X1, X8
	PSLLQ $26, X8
	PSUBQ X6, X0
	MOVO X0, X15
	PSLLQ $60, X0
	POR X2, X8
	POR X0, X8
	MOVO X8, 512(BX)
	PSRLQ $4, X15
	MOVO 1008(AX), X5
	MOVO X5, X10
	PSUBQ X4, X5
	PSLLQ $30, X5
	POR X15, X5
	MOVO X5, 528(BX)
	MOVO X10, 0(DX)
	RET

// func dpack64_35(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_35(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $35, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $29, X7
	PSUBQ X5, X3
	PSLLQ $6, X3
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	PSUBQ X6, X8
	MOVO X8, X0
	PSLLQ $41, X8
	POR X7, X3
	POR X8, X3
	MOVO X3, 16(BX)
	PSRLQ $23, X0
	PSUBQ X12, X9
	PSLLQ $12, X9
	PSUBQ X13, X10
	MOVO X10, X4
	PSLLQ $47, X10
	POR X0, X9
	POR X10, X9
	MOVO X9, 32(BX)
	PSRLQ $17, X4
	PSUBQ X14, X11
	PSLLQ $18, X11
	MOVO 112(AX), X1
	MOVO 128(AX), X2
	MOVO 144(AX), X5
	MOVO 160(AX), X6
	MOVO X1, X7
	MOVO X2, X8
	MOVO X5, X3
	MOVO X6, X12
	PSUBQ X15, X1
	MOVO X1, X13
	PSLLQ $53, X1
	POR X4, X11
	POR X1, X11
	MOVO X11, 48(BX)
	PSRLQ $11, X13
	PSUBQ X7, X2
	PSLLQ $24, X2
	PSUBQ X8, X5
	MOVO X5, X0
	PSLLQ $59, X5
	POR X13, X2
	POR X5, X2
	MOVO X2, 64(BX)
	PSRLQ $5, X0
	PSUBQ X3, X6
	MOVO X6, X10
	PSLLQ $30, X6
	POR X0, X6
	MOVO X6, 80(BX)
	PSRLQ $34, X10
	MOVO 176(AX), X9
	MOVO 192(AX), X14
	MOVO 208(AX), X15
	MOVO 224(AX), X4
	MOVO X9, X1
	MOVO X14, X11
	MOVO X15, X7
	MOVO X4, X8
	PSUBQ X12, X9
	PSLLQ $1, X9
	PSUBQ X1, X14
	MOVO X14, X13
	PSLLQ $36, X14
	POR X10, X9
	POR X14, X9
	MOVO X9, 96(BX)
	PSRLQ $28, X13
	PSUBQ X11, X15
	PSLLQ $7, X15
	PSUBQ X7, X4
	MOVO X4, X5
	PSLLQ $42, X4
	POR X13, X15
	POR X4, X15
	MOVO X15, 112(BX)
	PSRLQ $22, X5
	MOVO 240(AX), X2
	MOVO 256(AX), X3
	MOVO 272(AX), X0
	MOVO 288(AX), X6
	MOVO X2, X12
	MOVO X3, X1
	MOVO X0, X10
	MOVO X6, X14
	PSUBQ X8, X2
	PSLLQ $13, X2
	PSUBQ X12, X3
	MOVO X3, X9
	PSLLQ $48, X3
	POR X5, X2
	POR X3, X2
	MOVO X2, 128(BX)
	PSRLQ $16, X9
	PSUBQ X1, X0
	PSLLQ $19, X0
	PSUBQ X10, X6
	MOVO X6, X11
	PSLLQ $54, X6
	POR X9, X0
	POR X6, X0
	MOVO X0, 144(BX)
	PSRLQ $10, X11
	MOVO 304(AX), X7
	MOVO 320(AX), X13
	MOVO 336(AX), X4
	MOVO 352(AX), X15
	MOVO X7, X8
	MOVO X13, X12
	MOVO X4, X5
	MOVO X15, X3
	PSUBQ X14, X7
	PSLLQ $25, X7
	PSUBQ X8, X13
	MOVO X13, X2
	PSLLQ $60, X13
	POR X11, X7
	POR X13, X7
	MOVO X7, 160(BX)
	PSRLQ $4, X2
	PSUBQ X12, X4
	MOVO X4, X1
	PSLLQ $31, X4
	POR X2, X4
	MOVO X4, 176(BX)
	PSRLQ $33, X1
	PSUBQ X5, X15
	PSLLQ $2, X15
	MOVO 368(AX), X10
	MOVO 384(AX), X9
	MOVO 400(AX), X6
	MOVO 416(AX), X0
	MOVO X10, X14
	MOVO X9, X8
	MOVO X6, X11
	MOVO X0, X13
	PSUBQ X3, X10
	MOVO X10, X7
	PSLLQ $37, X10
	POR X1, X15
	POR X10, X15
	MOVO X15, 192(BX)
	PSRLQ $27, X7
	PSUBQ X14, X9
	PSLLQ $8, X9
	PSUBQ X8, X6
	MOVO X6, X12
	PSLLQ $43, X6
	POR X7, X9
	POR X6, X9
	MOVO X9, 208(BX)
	PSRLQ $21, X12
	PSUBQ X11, X0
	PSLLQ $14, X0
	MOVO 432(AX), X2
	MOVO 448(AX), X4
	MOVO 464(AX), X5
	MOVO 480(AX), X3
	MOVO X2, X1
	MOVO X4, X10
	MOVO X5, X15
	MOVO X3, X14
	PSUBQ X13, X2
	MOVO X2, X8
	PSLLQ $49, X2
	POR X12, X0
	POR X2, X0
	MOVO X0, 224(BX)
	PSRLQ $15, X8
	PSUBQ X1, X4
	PSLLQ $20, X4
	PSUBQ X10, X5
	MOVO X5, X7
	PSLLQ $55, X5
	POR X8, X4
	POR X5, X4
	MOVO X4, 240(BX)
	PSRLQ $9, X7
	PSUBQ X15, X3
	PSLLQ $26, X3
	MOVO 496(AX), X6
	MOVO 512(AX), X9
	MOVO 528(AX), X11
	MOVO 544(AX), X13
	MOVO X6, X12
	MOVO X9, X2
	MOVO X11, X0
	MOVO X13, X1
	PSUBQ X14, X6
	MOVO X6, X10
	PSLLQ $61, X6
	POR X7, X3
	POR X6, X3
	MOVO X3, 256(BX)
	PSRLQ $3, X10
	PSUBQ X12, X9
	MOVO X9, X8
	PSLLQ $32, X9
	POR X10, X9
	MOVO X9, 272(BX)
	PSRLQ $32, X8
	PSUBQ X2, X11
	PSLLQ $3, X11
	PSUBQ X0, X13
	MOVO X13, X5
	PSLLQ $38, X13
	POR X8, X11
	POR X13, X11
	MOVO X11, 288(BX)
	PSRLQ $26, X5
	MOVO 560(AX), X4
	MOVO 576(AX), X15
	MOVO 592(AX), X14
	MOVO 608(AX), X7
	MOVO X4, X6
	MOVO X15, X3
	MOVO X14, X12
	MOVO X7, X10
	PSUBQ X1, X4
	PSLLQ $9, X4
	PSUBQ X6, X15
	MOVO X15, X9
	PSLLQ $44, X15
	POR X5, X4
	POR X15, X4
	MOVO X4, 304(BX)
	PSRLQ $20, X9
	PSUBQ X3, X14
	PSLLQ $15, X14
	PSUBQ X12, X7
	MOVO X7, X2
	PSLLQ $50, X7
	POR X9, X14
	POR X7, X14
	MOVO X14, 320(BX)
	PSRLQ $14, X2
	MOVO 624(AX), X0
	MOVO 640(AX), X8
	MOVO 656(AX), X13
	MOVO 672(AX), X11
	MOVO X0, X1
	MOVO X8, X6
	MOVO X13, X5
	MOVO X11, X15
	PSUBQ X10, X0
	PSLLQ $21, X0
	PSUBQ X1, X8
	MOVO X8, X4
	PSLLQ $56, X8
	POR X2, X0
	POR X8, X0
	MOVO X0, 336(BX)
	PSRLQ $8, X4
	PSUBQ X6, X13
	PSLLQ $27, X13
	PSUBQ X5, X11
	MOVO X11, X3
	PSLLQ $62, X11
	POR X4, X13
	POR X11, X13
	MOVO X13, 352(BX)
	PSRLQ $2, X3
	MOVO 688(AX), X12
	MOVO 704(AX), X9
	MOVO 720(AX), X7
	MOVO 736(AX), X14
	MOVO X12, X10
	MOVO X9, X1
	MOVO X7, X2
	MOVO X14, X8
	PSUBQ X15, X12
	MOVO X12, X0
	PSLLQ $33, X12
	POR X3, X12
	MOVO X12, 368(BX)
	PSRLQ $31, X0
	PSUBQ X10, X9
	PSLLQ $4, X9
	PSUBQ X1, X7
	MOVO X7, X6
	PSLLQ $39, X7
	POR X0, X9
	POR X7, X9
	MOVO X9, 384(BX)
	PSRLQ $25, X6
	PSUBQ X2, X14
	PSLLQ $10, X14
	MOVO 752(AX), X5
	MOVO 768(AX), X4
	MOVO 784(AX), X11
	MOVO 800(AX), X13
	MOVO X5, X15
	MOVO X4, X3
	MOVO X11, X12
	MOVO X13, X10
	PSUBQ X8, X5
	MOVO X5, X1
	PSLLQ $45, X5
	POR X6, X14
	POR X5, X14
	MOVO X14, 400(BX)
	PSRLQ $19, X1
	PSUBQ X15, X4
	PSLLQ $16, X4
	PSUBQ X3, X11
	MOVO X11, X0
	PSLLQ $51, X11
	POR X1, X4
	POR X11, X4
	MOVO X4, 416(BX)
	PSRLQ $13, X0
	PSUBQ X12, X13
	PSLLQ $22, X13
	MOVO 816(AX), X7
	MOVO 832(AX), X9
	MOVO 848(AX), X2
	MOVO 864(AX), X8
	MOVO X7, X6
	MOVO X9, X5
	MOVO X2, X14
	MOVO X8, X15
	PSUBQ X10, X7
	MOVO X7, X3
	PSLLQ $57, X7
	POR X0, X13
	POR X7, X13
	MOVO X13, 432(BX)
	PSRLQ $7, X3
	PSUBQ X6, X9
	PSLLQ $28, X9
	PSUBQ X5, X2
	MOVO X2, X1
	PSLLQ $63, X2
	POR X3, X9
	POR X2, X9
	MOVO X9, 448(BX)
	PSRLQ $1, X1
	PSUBQ X14, X8
	MOVO X8, X11
	PSLLQ $34, X8
	POR X1, X8
	MOVO X8, 464(BX)
	PSRLQ $30, X11
	MOVO 880(AX), X4
	MOVO 896(AX), X12
	MOVO 912(AX), X10
	MOVO 928(AX), X0
	MOVO X4, X7
	MOVO X12, X13
	MOVO X10, X6
	MOVO X0, X5
	PSUBQ X15, X4
	PSLLQ $5, X4
	PSUBQ X7, X12
	MOVO X12, X3
	PSLLQ $40, X12
	POR X11, X4
	POR X12, X4
	MOVO X4, 480(BX)
	PSRLQ $24, X3
	PSUBQ X13, X10
	PSLLQ $11, X10
	PSUBQ X6, X0
	MOVO X0, X2
	PSLLQ $46, X0
	POR X3, X10
	POR X0, X10
	MOVO X10, 496(BX)
	PSRLQ $18, X2
	MOVO 944(AX), X9
	MOVO 960(AX), X14
	MOVO 976(AX), X1
	MOVO 992(AX), X8
	MOVO X9, X15
	MOVO X14, X7
	MOVO X1, X11
	MOVO X8, X12
	PSUBQ X5, X9
	PSLLQ $17, X9
	PSUBQ X15, X14
	MOVO X14, X4
	PSLLQ $52, X14
	POR X2, X9
	POR X14, X9
	MOVO X9, 512(BX)
	PSRLQ $12, X4
	PSUBQ X7, X1
	PSLLQ $23, X1
	PSUBQ X11, X8
	MOVO X8, X13
	PSLLQ $58, X8
	POR X4, X1
	POR X8, X1
	MOVO X1, 528(BX)
	PSRLQ $6, X13
	MOVO 1008(AX), X6
	MOVO X6, X3
	PSUBQ X12, X6
	PSLLQ $29, X6
	POR X13, X6
	MOVO X6, 544(BX)
	MOVO X3, 0(DX)
	RET

// func dpack64_36(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_36(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $36, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $28, X7
	PSUBQ X5, X3
	PSLLQ $8, X3
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	PSUBQ X6, X8
	MOVO X8, X0
	PSLLQ $44, X8
	POR X7, X3
	POR X8, X3
	MOVO X3, 16(BX)
	PSRLQ $20, X0
	PSUBQ X12, X9
	PSLLQ $16, X9
	PSUBQ X13, X10
	MOVO X10, X4
	PSLLQ $52, X10
	POR X0, X9
	POR X10, X9
	MOVO X9, 32(BX)
	PSRLQ $12, X4
	PSUBQ X14, X11
	PSLLQ $24, X11
	MOVO 112(AX), X1
	MOVO 128(AX), X2
	MOVO 144(AX), X5
	MOVO 160(AX), X6
	MOVO X1, X7
	MOVO X2, X8
	MOVO X5, X3
	MOVO X6, X12
	PSUBQ X15, X1
	MOVO X1, X13
	PSLLQ $60, X1
	POR X4, X11
	POR X1, X11
	MOVO X11, 48(BX)
	PSRLQ $4, X13
	PSUBQ X7, X2
	MOVO X2, X0
	PSLLQ $32, X2
	POR X13, X2
	MOVO X2, 64(BX)
	PSRLQ $32, X0
	PSUBQ X8, X5
	PSLLQ $4, X5
	PSUBQ X3, X6
	MOVO X6, X10
	PSLLQ $40, X6
	POR X0, X5
	POR X6, X5
	MOVO X5, 80(BX)
	PSRLQ $24, X10
	MOVO 176(AX), X9
	MOVO 192(AX), X14
	MOVO 208(AX), X15
	MOVO 224(AX), X4
	MOVO X9, X1
	MOVO X14, X11
	MOVO X15, X7
	MOVO X4, X13
	PSUBQ X12, X9
	PSLLQ $12, X9
	PSUBQ X1, X14
	MOVO X14, X2
	PSLLQ $48, X14
	POR X10, X9
	POR X14, X9
	MOVO X9, 96(BX)
	PSRLQ $16, X2
	PSUBQ X11, X15
	PSLLQ $20, X15
	PSUBQ X7, X4
	MOVO X4, X8
	PSLLQ $56, X4
	POR X2, X15
	POR X4, X15
	MOVO X15, 112(BX)
	PSRLQ $8, X8
	MOVO 240(AX), X3
	MOVO 256(AX), X0
	MOVO 272(AX), X6
	MOVO 288(AX), X5
	MOVO X3, X12
	MOVO X0, X1
	MOVO X6, X10
	MOVO X5, X14
	PSUBQ X13, X3
	PSLLQ $28, X3
	POR X8, X3
	MOVO X3, 128(BX)
	PSUBQ X12, X0
	PSUBQ X1, X6
	MOVO X6, X9
	PSLLQ $36, X6
	POR X0, X6
	MOVO X6, 144(BX)
	PSRLQ $28, X9
	PSUBQ X10, X5
	PSLLQ $8, X5
	MOVO 304(AX), X11
	MOVO 320(AX), X7
	MOVO 336(AX), X2
	MOVO 352(AX), X4
	MOVO X11, X15
	MOVO X7, X13
	MOVO X2, X8
	MOVO X4, X3
	PSUBQ X14, X11
	MOVO X11, X12
	PSLLQ $44, X11
	POR X9, X5
	POR X11, X5
	MOVO X5, 160(BX)
	PSRLQ $20, X12
	PSUBQ X15, X7
	PSLLQ $16, X7
	PSUBQ X13, X2
	MOVO X2, X1
	PSLLQ $52, X2
	POR X12, X7
	POR X2, X7
	MOVO X7, 176(BX)
	PSRLQ $12, X1
	PSUBQ X8, X4
	PSLLQ $24, X4
	MOVO 368(AX), X0
	MOVO 384(AX), X6
	MOVO 400(AX), X10
	MOVO 416(AX), X14
	MOVO X0, X9
	MOVO X6, X11
	MOVO X10, X5
	MOVO X14, X15
	PSUBQ X3, X0
	MOVO X0, X13
	PSLLQ $60, X0
	POR X1, X4
	POR X0, X4
	MOVO X4, 192(BX)
	PSRLQ $4, X13
	PSUBQ X9, X6
	MOVO X6, X12
	PSLLQ $32, X6
	POR X13, X6
	MOVO X6, 208(BX)
	PSRLQ $32, X12
	PSUBQ X11, X10
	PSLLQ $4, X10
	PSUBQ X5, X14
	MOVO X14, X2
	PSLLQ $40, X14
	POR X12, X10
	POR X14, X10
	MOVO X10, 224(BX)
	PSRLQ $24, X2
	MOVO 432(AX), X7
	MOVO 448(AX), X8
	MOVO 464(AX), X3
	MOVO 480(AX), X1
	MOVO X7, X0
	MOVO X8, X4
	MOVO X3, X9
	MOVO X1, X13
	PSUBQ X15, X7
	PSLLQ $12, X7
	PSUBQ X0, X8
	MOVO X8, X6
	PSLLQ $48, X8
	POR X2, X7
	POR X8, X7
	MOVO X7, 240(BX)
	PSRLQ $16, X6
	PSUBQ X4, X3
	PSLLQ $20, X3
	PSUBQ X9, X1
	MOVO X1, X11
	PSLLQ $56, X1
	POR X6, X3
	POR X1, X3
	MOVO X3, 256(BX)
	PSRLQ $8, X11
	MOVO 496(AX), X5
	MOVO 512(AX), X12
	MOVO 528(AX), X14
	MOVO 544(AX), X10
	MOVO X5, X15
	MOVO X12, X0
	MOVO X14, X2
	MOVO X10, X8
	PSUBQ X13, X5
	PSLLQ $28, X5
	POR X11, X5
	MOVO X5, 272(BX)
	PSUBQ X15, X12
	PSUBQ X0, X14
	MOVO X14, X7
	PSLLQ $36, X14
	POR X12, X14
	MOVO X14, 288(BX)
	PSRLQ $28, X7
	PSUBQ X2, X10
	PSLLQ $8, X10
	MOVO 560(AX), X4
	MOVO 576(AX), X9
	MOVO 592(AX), X6
	MOVO 608(AX), X1
	MOVO X4, X3
	MOVO X9, X13
	MOVO X6, X11
	MOVO X1, X5
	PSUBQ X8, X4
	MOVO X4, X15
	PSLLQ $44, X4
	POR X7, X10
	POR X4, X10
	MOVO X10, 304(BX)
	PSRLQ $20, X15
	PSUBQ X3, X9
	PSLLQ $16, X9
	PSUBQ X13, X6
	MOVO X6, X0
	PSLLQ $52, X6
	POR X15, X9
	POR X6, X9
	MOVO X9, 320(BX)
	PSRLQ $12, X0
	PSUBQ X11, X1
	PSLLQ $24, X1
	MOVO 624(AX), X12
	MOVO 640(AX), X14
	MOVO 656(AX), X2
	MOVO 672(AX), X8
	MOVO X12, X7
	MOVO X14, X4
	MOVO X2, X10
	MOVO X8, X3
	PSUBQ X5, X12
	MOVO X12, X13
	PSLLQ $60, X12
	POR X0, X1
	POR X12, X1
	MOVO X1, 336(BX)
	PSRLQ $4, X13
	PSUBQ X7, X14
	MOVO X14, X15
	PSLLQ $32, X14
	POR X13, X14
	MOVO X14, 352(BX)
	PSRLQ $32, X15
	PSUBQ X4, X2
	PSLLQ $4, X2
	PSUBQ X10, X8
	MOVO X8, X6
	PSLLQ $40, X8
	POR X15, X2
	POR X8, X2
	MOVO X2, 368(BX)
	PSRLQ $24, X6
	MOVO 688(AX), X9
	MOVO 704(AX), X11
	MOVO 720(AX), X5
	MOVO 736(AX), X0
	MOVO X9, X12
	MOVO X11, X1
	MOVO X5, X7
	MOVO X0, X13
	PSUBQ X3, X9
	PSLLQ $12, X9
	PSUBQ X12, X11
	MOVO X11, X14
	PSLLQ $48, X11
	POR X6, X9
	POR X11, X9
	MOVO X9, 384(BX)
	PSRLQ $16, X14
	PSUBQ X1, X5
	PSLLQ $20, X5
	PSUBQ X7, X0
	MOVO X0, X4
	PSLLQ $56, X0
	POR X14, X5
	POR X0, X5
	MOVO X5, 400(BX)
	PSRLQ $8, X4
	MOVO 752(AX), X10
	MOVO 768(AX), X15
	MOVO 784(AX), X8
	MOVO 800(AX), X2
	MOVO X10, X3
	MOVO X15, X12
	MOVO X8, X6
	MOVO X2, X11
	PSUBQ X13, X10
	PSLLQ $28, X10
	POR X4, X10
	MOVO X10, 416(BX)
	PSUBQ X3, X15
	PSUBQ X12, X8
	MOVO X8, X9
	PSLLQ $36, X8
	POR X15, X8
	MOVO X8, 432(BX)
	PSRLQ $28, X9
	PSUBQ X6, X2
	PSLLQ $8, X2
	MOVO 816(AX), X1
	MOVO 832(AX), X7
	MOVO 848(AX), X14
	MOVO 864(AX), X0
	MOVO X1, X5
	MOVO X7, X13
	MOVO X14, X4
	MOVO X0, X10
	PSUBQ X11, X1
	MOVO X1, X3
	PSLLQ $44, X1
	POR X9, X2
	POR X1, X2
	MOVO X2, 448(BX)
	PSRLQ $20, X3
	PSUBQ X5, X7
	PSLLQ $16, X7
	PSUBQ X13, X14
	MOVO X14, X12
	PSLLQ $52, X14
	POR X3, X7
	POR X14, X7
	MOVO X7, 464(BX)
	PSRLQ $12, X12
	PSUBQ X4, X0
	PSLLQ $24, X0
	MOVO 880(AX), X15
	MOVO 896(AX), X8
	MOVO 912(AX), X6
	MOVO 928(AX), X11
	MOVO X15, X9
	MOVO X8, X1
	MOVO X6, X2
	MOVO X11, X5
	PSUBQ X10, X15
	MOVO X15, X13
	PSLLQ $60, X15
	POR X12, X0
	POR X15, X0
	MOVO X0, 480(BX)
	PSRLQ $4, X13
	PSUBQ X9, X8
	MOVO X8, X3
	PSLLQ $32, X8
	POR X13, X8
	MOVO X8, 496(BX)
	PSRLQ $32, X3
	PSUBQ X1, X6
	PSLLQ $4, X6
	PSUBQ X2, X11
	MOVO X11, X14
	PSLLQ $40, X11
	POR X3, X6
	POR X11, X6
	MOVO X6, 512(BX)
	PSRLQ $24, X14
	MOVO 944(AX), X7
	MOVO 960(AX), X4
	MOVO 976(AX), X10
	MOVO 992(AX), X12
	MOVO X7, X15
	MOVO X4, X0
	MOVO X10, X9
	MOVO X12, X13
	PSUBQ X5, X7
	PSLLQ $12, X7
	PSUBQ X15, X4
	MOVO X4, X8
	PSLLQ $48, X4
	POR X14, X7
	POR X4, X7
	MOVO X7, 528(BX)
	PSRLQ $16, X8
	PSUBQ X0, X10
	PSLLQ $20, X10
	PSUBQ X9, X12
	MOVO X12, X1
	PSLLQ $56, X12
	POR X8, X10
	POR X12, X10
	MOVO X10, 544(BX)
	PSRLQ $8, X1
	MOVO 1008(AX), X2
	MOVO X2, X3
	PSUBQ X13, X2
	PSLLQ $28, X2
	POR X1, X2
	MOVO X2, 560(BX)
	MOVO X3, 0(DX)
	RET

// func dpack64_37(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_37(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $37, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $27, X7
	PSUBQ X5, X3
	PSLLQ $10, X3
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	PSUBQ X6, X8
	MOVO X8, X0
	PSLLQ $47, X8
	POR X7, X3
	POR X8, X3
	MOVO X3, 16(BX)
	PSRLQ $17, X0
	PSUBQ X12, X9
	PSLLQ $20, X9
	PSUBQ X13, X10
	MOVO X10, X4
	PSLLQ $57, X10
	POR X0, X9
	POR X10, X9
	MOVO X9, 32(BX)
	PSRLQ $7, X4
	PSUBQ X14, X11
	MOVO X11, X1
	PSLLQ $30, X11
	POR X4, X11
	MOVO X11, 48(BX)
	PSRLQ $34, X1
	MOVO 112(AX), X2
	MOVO 128(AX), X5
	MOVO 144(AX), X6
	MOVO 160(AX), X7
	MOVO X2, X8
	MOVO X5, X3
	MOVO X6, X12
	MOVO X7, X13
	PSUBQ X15, X2
	PSLLQ $3, X2
	PSUBQ X8, X5
	MOVO X5, X0
	PSLLQ $40, X5
	POR X1, X2
	POR X5, X2
	MOVO X2, 64(BX)
	PSRLQ $24, X0
	PSUBQ X3, X6
	PSLLQ $13, X6
	PSUBQ X12, X7
	MOVO X7, X10
	PSLLQ $50, X7
	POR X0, X6
	POR X7, X6
	MOVO X6, 80(BX)
	PSRLQ $14, X10
	MOVO 176(AX), X9
	MOVO 192(AX), X14
	MOVO 208(AX), X4
	MOVO 224(AX), X11
	MOVO X9, X15
	MOVO X14, X8
	MOVO X4, X1
	MOVO X11, X5
	PSUBQ X13, X9
	PSLLQ $23, X9
	PSUBQ X15, X14
	MOVO X14, X2
	PSLLQ $60, X14
	POR X10, X9
	POR X14, X9
	MOVO X9, 96(BX)
	PSRLQ $4, X2
	PSUBQ X8, X4
	MOVO X4, X3
	PSLLQ $33, X4
	POR X2, X4
	MOVO X4, 112(BX)
	PSRLQ $31, X3
	PSUBQ X1, X11
	PSLLQ $6, X11
	MOVO 240(AX), X12
	MOVO 256(AX), X0
	MOVO 272(AX), X7
	MOVO 288(AX), X6
	MOVO X12, X13
	MOVO X0, X15
	MOVO X7, X10
	MOVO X6, X14
	PSUBQ X5, X12
	MOVO X12, X9
	PSLLQ $43, X12
	POR X3, X11
	POR X12, X11
	MOVO X11, 128(BX)
	PSRLQ $21, X9
	PSUBQ X13, X0
	PSLLQ $16, X0
	PSUBQ X15, X7
	MOVO X7, X8
	PSLLQ $53, X7
	POR X9, X0
	POR X7, X0
	MOVO X0, 144(BX)
	PSRLQ $11, X8
	PSUBQ X10, X6
	PSLLQ $26, X6
	MOVO 304(AX), X2
	MOVO 320(AX), X4
	MOVO 336(AX), X1
	MOVO 352(AX), X5
	MOVO X2, X3
	MOVO X4, X12
	MOVO X1, X11
	MOVO X5, X13
	PSUBQ X14, X2
	MOVO X2, X15
	PSLLQ $63, X2
	POR X8, X6
	POR X2, X6
	MOVO X6, 160(BX)
	PSRLQ $1, X15
	PSUBQ X3, X4
	MOVO X4, X9
	PSLLQ $36, X4
	POR X15, X4
	MOVO X4, 176(BX)
	PSRLQ $28, X9
	PSUBQ X12, X1
	PSLLQ $9, X1
	PSUBQ X11, X5
	MOVO X5, X7
	PSLLQ $46, X5
	POR X9, X1
	POR X5, X1
	MOVO X1, 192(BX)
	PSRLQ $18, X7
	MOVO 368(AX), X0
	MOVO 384(AX), X10
	MOVO 400(AX), X14
	MOVO 416(AX), X8
	MOVO X0, X2
	MOVO X10, X6
	MOVO X14, X3
	MOVO X8, X15
	PSUBQ X13, X0
	PSLLQ $19, X0
	PSUBQ X2, X10
	MOVO X10, X4
	PSLLQ $56, X10
	POR X7, X0
	POR X10, X0
	MOVO X0, 208(BX)
	PSRLQ $8, X4
	PSUBQ X6, X14
	MOVO X14, X12
	PSLLQ $29, X14
	POR X4, X14
	MOVO X14, 224(BX)
	PSRLQ $35, X12
	PSUBQ X3, X8
	PSLLQ $2, X8
	MOVO 432(AX), X11
	MOVO 448(AX), X9
	MOVO 464(AX), X5
	MOVO 480(AX), X1
	MOVO X11, X13
	MOVO X9, X2
	MOVO X5, X7
	MOVO X1, X10
	PSUBQ X15, X11
	MOVO X11, X0
	PSLLQ $39, X11
	POR X12, X8
	POR X11, X8
	MOVO X8, 240(BX)
	PSRLQ $25, X0
	PSUBQ X13, X9
	PSLLQ $12, X9
	PSUBQ X2, X5
	MOVO X5, X6
	PSLLQ $49, X5
	POR X0, X9
	POR X5, X9
	MOVO X9, 256(BX)
	PSRLQ $15, X6
	PSUBQ X7, X1
	PSLLQ $22, X1
	MOVO 496(AX), X4
	MOVO 512(AX), X14
	MOVO 528(AX), X3
	MOVO 544(AX), X15
	MOVO X4, X12
	MOVO X14, X11
	MOVO X3, X8
	MOVO X15, X13
	PSUBQ X10, X4
	MOVO X4, X2
	PSLLQ $59, X4
	POR X6, X1
	POR X4, X1
	MOVO X1, 272(BX)
	PSRLQ $5, X2
	PSUBQ X12, X14
	MOVO X14, X0
	PSLLQ $32, X14
	POR X2, X14
	MOVO X14, 288(BX)
	PSRLQ $32, X0
	PSUBQ X11, X3
	PSLLQ $5, X3
	PSUBQ X8, X15
	MOVO X15, X5
	PSLLQ $42, X15
	POR X0, X3
	POR X15, X3
	MOVO X3, 304(BX)
	PSRLQ $22, X5
	MOVO 560(AX), X9
	MOVO 576(AX), X7
	MOVO 592(AX), X10
	MOVO 608(AX), X6
	MOVO X9, X4
	MOVO X7, X1
	MOVO X10, X12
	MOVO X6, X2
	PSUBQ X13, X9
	PSLLQ $15, X9
	PSUBQ X4, X7
	MOVO X7, X14
	PSLLQ $52, X7
	POR X5, X9
	POR X7, X9
	MOVO X9, 320(BX)
	PSRLQ $12, X14
	PSUBQ X1, X10
	PSLLQ $25, X10
	PSUBQ X12, X6
	MOVO X6, X11
	PSLLQ $62, X6
	POR X14, X10
	POR X6, X10
	MOVO X10, 336(BX)
	PSRLQ $2, X11
	MOVO 624(AX), X8
	MOVO 640(AX), X0
	MOVO 656(AX), X15
	MOVO 672(AX), X3
	MOVO X8, X13
	MOVO X0, X4
	MOVO X15, X5
	MOVO X3, X7
	PSUBQ X2, X8
	MOVO X8, X9
	PSLLQ $35, X8
	POR X11, X8
	MOVO X8, 352(BX)
	PSRLQ $29, X9
	PSUBQ X13, X0
	PSLLQ $8, X0
	PSUBQ X4, X15
	MOVO X15, X1
	PSLLQ $45, X15
	POR X9, X0
	POR X15, X0
	MOVO X0, 368(BX)
	PSRLQ $19, X1
	PSUBQ X5, X3
	PSLLQ $18, X3
	MOVO 688(AX), X12
	MOVO 704(AX), X14
	MOVO 720(AX), X6
	MOVO 736(AX), X10
	MOVO X12, X2
	MOVO X14, X11
	MOVO X6, X8
	MOVO X10, X13
	PSUBQ X7, X12
	MOVO X12, X4
	PSLLQ $55, X12
	POR X1, X3
	POR X12, X3
	MOVO X3, 384(BX)
	PSRLQ $9, X4
	PSUBQ X2, X14
	MOVO X14, X9
	PSLLQ $28, X14
	POR X4, X14
	MOVO X14, 400(BX)
	PSRLQ $36, X9
	PSUBQ X11, X6
	PSLLQ $1, X6
	PSUBQ X8, X10
	MOVO X10, X15
	PSLLQ $38, X10
	POR X9, X6
	POR X10, X6
	MOVO X6, 416(BX)
	PSRLQ $26, X15
	MOVO 752(AX), X0
	MOVO 768(AX), X5
	MOVO 784(AX), X7
	MOVO 800(AX), X1
	MOVO X0, X12
	MOVO X5, X3
	MOVO X7, X2
	MOVO X1, X4
	PSUBQ X13, X0
	PSLLQ $11, X0
	PSUBQ X12, X5
	MOVO X5, X14
	PSLLQ $48, X5
	POR X15, X0
	POR X5, X0
	MOVO X0, 432(BX)
	PSRLQ $16, X14
	PSUBQ X3, X7
	PSLLQ $21, X7
	PSUBQ X2, X1
	MOVO X1, X11
	PSLLQ $58, X1
	POR X14, X7
	POR X1, X7
	MOVO X7, 448(BX)
	PSRLQ $6, X11
	MOVO 816(AX), X8
	MOVO 832(AX), X9
	MOVO 848(AX), X10
	MOVO 864(AX), X6
	MOVO X8, X13
	MOVO X9, X12
	MOVO X10, X15
	MOVO X6, X5
	PSUBQ X4, X8
	MOVO X8, X0
	PSLLQ $31, X8
	POR X11, X8
	MOVO X8, 464(BX)
	PSRLQ $33, X0
	PSUBQ X13, X9
	PSLLQ $4, X9
	PSUBQ X12, X10
	MOVO X10, X3
	PSLLQ $41, X10
	POR X0, X9
	POR X10, X9
	MOVO X9, 480(BX)
	PSRLQ $23, X3
	PSUBQ X15, X6
	PSLLQ $14, X6
	MOVO 880(AX), X2
	MOVO 896(AX), X14
	MOVO 912(AX), X1
	MOVO 928(AX), X7
	MOVO X2, X4
	MOVO X14, X11
	MOVO X1, X8
	MOVO X7, X13
	PSUBQ X5, X2
	MOVO X2, X12
	PSLLQ $51, X2
	POR X3, X6
	POR X2, X6
	MOVO X6, 496(BX)
	PSRLQ $13, X12
	PSUBQ X4, X14
	PSLLQ $24, X14
	PSUBQ X11, X1
	MOVO X1, X0
	PSLLQ $61, X1
	POR X12, X14
	POR X1, X14
	MOVO X14, 512(BX)
	PSRLQ $3, X0
	PSUBQ X8, X7
	MOVO X7, X10
	PSLLQ $34, X7
	POR X0, X7
	MOVO X7, 528(BX)
	PSRLQ $30, X10
	MOVO 944(AX), X9
	MOVO 960(AX), X15
	MOVO 976(AX), X5
	MOVO 992(AX), X3
	MOVO X9, X2
	MOVO X15, X6
	MOVO X5, X4
	MOVO X3, X11
	PSUBQ X13, X9
	PSLLQ $7, X9
	PSUBQ X2, X15
	MOVO X15, X12
	PSLLQ $44, X15
	POR X10, X9
	POR X15, X9
	MOVO X9, 544(BX)
	PSRLQ $20, X12
	PSUBQ X6, X5
	PSLLQ $17, X5
	PSUBQ X4, X3
	MOVO X3, X1
	PSLLQ $54, X3
	POR X12, X5
	POR X3, X5
	MOVO X5, 560(BX)
	PSRLQ $10, X1
	MOVO 1008(AX), X14
	MOVO X14, X8
	PSUBQ X11, X14
	PSLLQ $27, X14
	POR X1, X14
	MOVO X14, 576(BX)
	MOVO X8, 0(DX)
	RET

// func dpack64_38(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_38(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $38, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $26, X7
	PSUBQ X5, X3
	PSLLQ $12, X3
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	PSUBQ X6, X8
	MOVO X8, X0
	PSLLQ $50, X8
	POR X7, X3
	POR X8, X3
	MOVO X3, 16(BX)
	PSRLQ $14, X0
	PSUBQ X12, X9
	PSLLQ $24, X9
	PSUBQ X13, X10
	MOVO X10, X4
	PSLLQ $62, X10
	POR X0, X9
	POR X10, X9
	MOVO X9, 32(BX)
	PSRLQ $2, X4
	PSUBQ X14, X11
	MOVO X11, X1
	PSLLQ $36, X11
	POR X4, X11
	MOVO X11, 48(BX)
	PSRLQ $28, X1
	MOVO 112(AX), X2
	MOVO 128(AX), X5
	MOVO 144(AX), X6
	MOVO 160(AX), X7
	MOVO X2, X8
	MOVO X5, X3
	MOVO X6, X12
	MOVO X7, X13
	PSUBQ X15, X2
	PSLLQ $10, X2
	PSUBQ X8, X5
	MOVO X5, X0
	PSLLQ $48, X5
	POR X1, X2
	POR X5, X2
	MOVO X2, 64(BX)
	PSRLQ $16, X0
	PSUBQ X3, X6
	PSLLQ $22, X6
	PSUBQ X12, X7
	MOVO X7, X10
	PSLLQ $60, X7
	POR X0, X6
	POR X7, X6
	MOVO X6, 80(BX)
	PSRLQ $4, X10
	MOVO 176(AX), X9
	MOVO 192(AX), X14
	MOVO 208(AX), X4
	MOVO 224(AX), X11
	MOVO X9, X15
	MOVO X14, X8
	MOVO X4, X1
	MOVO X11, X5
	PSUBQ X13, X9
	MOVO X9, X2
	PSLLQ $34, X9
	POR X10, X9
	MOVO X9, 96(BX)
	PSRLQ $30, X2
	PSUBQ X15, X14
	PSLLQ $8, X14
	PSUBQ X8, X4
	MOVO X4, X3
	PSLLQ $46, X4
	POR X2, X14
	POR X4, X14
	MOVO X14, 112(BX)
	PSRLQ $18, X3
	PSUBQ X1, X11
	PSLLQ $20, X11
	MOVO 240(AX), X12
	MOVO 256(AX), X0
	MOVO 272(AX), X7
	MOVO 288(AX), X6
	MOVO X12, X13
	MOVO X0, X10
	MOVO X7, X9
	MOVO X6, X15
	PSUBQ X5, X12
	MOVO X12, X8
	PSLLQ $58, X12
	POR X3, X11
	POR X12, X11
	MOVO X11, 128(BX)
	PSRLQ $6, X8
	PSUBQ X13, X0
	MOVO X0, X2
	PSLLQ $32, X0
	POR X8, X0
	MOVO X0, 144(BX)
	PSRLQ $32, X2
	PSUBQ X10, X7
	PSLLQ $6, X7
	PSUBQ X9, X6
	MOVO X6, X4
	PSLLQ $44, X6
	POR X2, X7
	POR X6, X7
	MOVO X7, 160(BX)
	PSRLQ $20, X4
	MOVO 304(AX), X14
	MOVO 320(AX), X1
	MOVO 336(AX), X5
	MOVO 352(AX), X3
	MOVO X14, X12
	MOVO X1, X11
	MOVO X5, X13
	MOVO X3, X8
	PSUBQ X15, X14
	PSLLQ $18, X14
	PSUBQ X12, X1
	MOVO X1, X0
	PSLLQ $56, X1
	POR X4, X14
	POR X1, X14
	MOVO X14, 176(BX)
	PSRLQ $8, X0
	PSUBQ X11, X5
	MOVO X5, X10
	PSLLQ $30, X5
	POR X0, X5
	MOVO X5, 192(BX)
	PSRLQ $34, X10
	PSUBQ X13, X3
	PSLLQ $4, X3
	MOVO 368(AX), X9
	MOVO 384(AX), X2
	MOVO 400(AX), X6
	MOVO 416(AX), X7
	MOVO X9, X15
	MOVO X2, X12
	MOVO X6, X4
	MOVO X7, X1
	PSUBQ X8, X9
	MOVO X9, X14
	PSLLQ $42, X9
	POR X10, X3
	POR X9, X3
	MOVO X3, 208(BX)
	PSRLQ $22, X14
	PSUBQ X15, X2
	PSLLQ $16, X2
	PSUBQ X12, X6
	MOVO X6, X11
	PSLLQ $54, X6
	POR X14, X2
	POR X6, X2
	MOVO X2, 224(BX)
	PSRLQ $10, X11
	PSUBQ X4, X7
	MOVO X7, X0
	PSLLQ $28, X7
	POR X11, X7
	MOVO X7, 240(BX)
	PSRLQ $36, X0
	MOVO 432(AX), X5
	MOVO 448(AX), X13
	MOVO 464(AX), X8
	MOVO 480(AX), X10
	MOVO X5, X9
	MOVO X13, X3
	MOVO X8, X15
	MOVO X10, X12
	PSUBQ X1, X5
	PSLLQ $2, X5
	PSUBQ X9, X13
	MOVO X13, X14
	PSLLQ $40, X13
	POR X0, X5
	POR X13, X5
	MOVO X5, 256(BX)
	PSRLQ $24, X14
	PSUBQ X3, X8
	PSLLQ $14, X8
	PSUBQ X15, X10
	MOVO X10, X6
	PSLLQ $52, X10
	POR X14, X8
	POR X10, X8
	MOVO X8, 272(BX)
	PSRLQ $12, X6
	MOVO 496(AX), X2
	MOVO 512(AX), X4
	MOVO 528(AX), X11
	MOVO 544(AX), X7
	MOVO X2, X1
	MOVO X4, X9
	MOVO X11, X0
	MOVO X7, X13
	PSUBQ X12, X2
	PSLLQ $26, X2
	POR X6, X2
	MOVO X2, 288(BX)
	PSUBQ X1, X4
	PSUBQ X9, X11
	MOVO X11, X5
	PSLLQ $38, X11
	POR X4, X11
	MOVO X11, 304(BX)
	PSRLQ $26, X5
	PSUBQ X0, X7
	PSLLQ $12, X7
	MOVO 560(AX), X3
	MOVO 576(AX), X15
	MOVO 592(AX), X14
	MOVO 608(AX), X10
	MOVO X3, X8
	MOVO X15, X12
	MOVO X14, X6
	MOVO X10, X2
	PSUBQ X13, X3
	MOVO X3, X1
	PSLLQ $50, X3
	POR X5, X7
	POR X3, X7
	MOVO X7, 320(BX)
	PSRLQ $14, X1
	PSUBQ X8, X15
	PSLLQ $24, X15
	PSUBQ X12, X14
	MOVO X14, X9
	PSLLQ $62, X14
	POR X1, X15
	POR X14, X15
	MOVO X15, 336(BX)
	PSRLQ $2, X9
	PSUBQ X6, X10
	MOVO X10, X4
	PSLLQ $36, X10
	POR X9, X10
	MOVO X10, 352(BX)
	PSRLQ $28, X4
	MOVO 624(AX), X11
	MOVO 640(AX), X0
	MOVO 656(AX), X13
	MOVO 672(AX), X5
	MOVO X11, X3
	MOVO X0, X7
	MOVO X13, X8
	MOVO X5, X12
	PSUBQ X2, X11
	PSLLQ $10, X11
	PSUBQ X3, X0
	MOVO X0, X1
	PSLLQ $48, X0
	POR X4, X11
	POR X0, X11
	MOVO X11, 368(BX)
	PSRLQ $16, X1
	PSUBQ X7, X13
	PSLLQ $22, X13
	PSUBQ X8, X5
	MOVO X5, X14
	PSLLQ $60, X5
	POR X1, X13
	POR X5, X13
	MOVO X13, 384(BX)
	PSRLQ $4, X14
	MOVO 688(AX), X15
	MOVO 704(AX), X6
	MOVO 720(AX), X9
	MOVO 736(AX), X10
	MOVO X15, X2
	MOVO X6, X3
	MOVO X9, X4
	MOVO X10, X0
	PSUBQ X12, X15
	MOVO X15, X11
	PSLLQ $34, X15
	POR X14, X15
	MOVO X15, 400(BX)
	PSRLQ $30, X11
	PSUBQ X2, X6
	PSLLQ $8, X6
	PSUBQ X3, X9
	MOVO X9, X7
	PSLLQ $46, X9
	POR X11, X6
	POR X9, X6
	MOVO X6, 416(BX)
	PSRLQ $18, X7
	PSUBQ X4, X10
	PSLLQ $20, X10
	MOVO 752(AX), X8
	MOVO 768(AX), X1
	MOVO 784(AX), X5
	MOVO 800(AX), X13
	MOVO X8, X12
	MOVO X1, X14
	MOVO X5, X15
	MOVO X13, X2
	PSUBQ X0, X8
	MOVO X8, X3
	PSLLQ $58, X8
	POR X7, X10
	POR X8, X10
	MOVO X10, 432(BX)
	PSRLQ $6, X3
	PSUBQ X12, X1
	MOVO X1, X11
	PSLLQ $32, X1
	POR X3, X1
	MOVO X1, 448(BX)
	PSRLQ $32, X11
	PSUBQ X14, X5
	PSLLQ $6, X5
	PSUBQ X15, X13
	MOVO X13, X9
	PSLLQ $44, X13
	POR X11, X5
	POR X13, X5
	MOVO X5, 464(BX)
	PSRLQ $20, X9
	MOVO 816(AX), X6
	MOVO 832(AX), X4
	MOVO 848(AX), X0
	MOVO 864(AX), X7
	MOVO X6, X8
	MOVO X4, X10
	MOVO X0, X12
	MOVO X7, X3
	PSUBQ X2, X6
	PSLLQ $18, X6
	PSUBQ X8, X4
	MOVO X4, X1
	PSLLQ $56, X4
	POR X9, X6
	POR X4, X6
	MOVO X6, 480(BX)
	PSRLQ $8, X1
	PSUBQ X10, X0
	MOVO X0, X14
	PSLLQ $30, X0
	POR X1, X0
	MOVO X0, 496(BX)
	PSRLQ $34, X14
	PSUBQ X12, X7
	PSLLQ $4, X7
	MOVO 880(AX), X15
	MOVO 896(AX), X11
	MOVO 912(AX), X13
	MOVO 928(AX), X5
	MOVO X15, X2
	MOVO X11, X8
	MOVO X13, X9
	MOVO X5, X4
	PSUBQ X3, X15
	MOVO X15, X6
	PSLLQ $42, X15
	POR X14, X7
	POR X15, X7
	MOVO X7, 512(BX)
	PSRLQ $22, X6
	PSUBQ X2, X11
	PSLLQ $16, X11
	PSUBQ X8, X13
	MOVO X13, X10
	PSLLQ $54, X13
	POR X6, X11
	POR X13, X11
	MOVO X11, 528(BX)
	PSRLQ $10, X10
	PSUBQ X9, X5
	MOVO X5, X1
	PSLLQ $28, X5
	POR X10, X5
	MOVO X5, 544(BX)
	PSRLQ $36, X1
	MOVO 944(AX), X0
	MOVO 960(AX), X12
	MOVO 976(AX), X3
	MOVO 992(AX), X14
	MOVO X0, X15
	MOVO X12, X7
	MOVO X3, X2
	MOVO X14, X8
	PSUBQ X4, X0
	PSLLQ $2, X0
	PSUBQ X15, X12
	MOVO X12, X6
	PSLLQ $40, X12
	POR X1, X0
	POR X12, X0
	MOVO X0, 560(BX)
	PSRLQ $24, X6
	PSUBQ X7, X3
	PSLLQ $14, X3
	PSUBQ X2, X14
	MOVO X14, X13
	PSLLQ $52, X14
	POR X6, X3
	POR X14, X3
	MOVO X3, 576(BX)
	PSRLQ $12, X13
	MOVO 1008(AX), X11
	MOVO X11, X9
	PSUBQ X8, X11
	PSLLQ $26, X11
	POR X13, X11
	MOVO X11, 592(BX)
	MOVO X9, 0(DX)
	RET

// func dpack64_39(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_39(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $39, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $25, X7
	PSUBQ X5, X3
	PSLLQ $14, X3
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	PSUBQ X6, X8
	MOVO X8, X0
	PSLLQ $53, X8
	POR X7, X3
	POR X8, X3
	MOVO X3, 16(BX)
	PSRLQ $11, X0
	PSUBQ X12, X9
	MOVO X9, X4
	PSLLQ $28, X9
	POR X0, X9
	MOVO X9, 32(BX)
	PSRLQ $36, X4
	PSUBQ X13, X10
	PSLLQ $3, X10
	PSUBQ X14, X11
	MOVO X11, X1
	PSLLQ $42, X11
	POR X4, X10
	POR X11, X10
	MOVO X10, 48(BX)
	PSRLQ $22, X1
	MOVO 112(AX), X2
	MOVO 128(AX), X5
	MOVO 144(AX), X6
	MOVO 160(AX), X7
	MOVO X2, X8
	MOVO X5, X3
	MOVO X6, X12
	MOVO X7, X0
	PSUBQ X15, X2
	PSLLQ $17, X2
	PSUBQ X8, X5
	MOVO X5, X9
	PSLLQ $56, X5
	POR X1, X2
	POR X5, X2
	MOVO X2, 64(BX)
	PSRLQ $8, X9
	PSUBQ X3, X6
	MOVO X6, X13
	PSLLQ $31, X6
	POR X9, X6
	MOVO X6, 80(BX)
	PSRLQ $33, X13
	PSUBQ X12, X7
	PSLLQ $6, X7
	MOVO 176(AX), X14
	MOVO 192(AX), X4
	MOVO 208(AX), X11
	MOVO 224(AX), X10
	MOVO X14, X15
	MOVO X4, X8
	MOVO X11, X1
	MOVO X10, X5
	PSUBQ X0, X14
	MOVO X14, X2
	PSLLQ $45, X14
	POR X13, X7
	POR X14, X7
	MOVO X7, 96(BX)
	PSRLQ $19, X2
	PSUBQ X15, X4
	PSLLQ $20, X4
	PSUBQ X8, X11
	MOVO X11, X3
	PSLLQ $59, X11
	POR X2, X4
	POR X11, X4
	MOVO X4, 112(BX)
	PSRLQ $5, X3
	PSUBQ X1, X10
	MOVO X10, X9
	PSLLQ $34, X10
	POR X3, X10
	MOVO X10, 128(BX)
	PSRLQ $30, X9
	MOVO 240(AX), X6
	MOVO 256(AX), X12
	MOVO 272(AX), X0
	MOVO 288(AX), X13
	MOVO X6, X14
	MOVO X12, X7
	MOVO X0, X15
	MOVO X13, X8
	PSUBQ X5, X6
	PSLLQ $9, X6
	PSUBQ X14, X12
	MOVO X12, X2
	PSLLQ $48, X12
	POR X9, X6
	POR X12, X6
	MOVO X6, 144(BX)
	PSRLQ $16, X2
	PSUBQ X7, X0
	PSLLQ $23, X0
	PSUBQ X15, X13
	MOVO X13, X11
	PSLLQ $62, X13
	POR X2, X0
	POR X13, X0
	MOVO X0, 160(BX)
	PSRLQ $2, X11
	MOVO 304(AX), X4
	MOVO 320(AX), X1
	MOVO 336(AX), X3
	MOVO 352(AX), X10
	MOVO X4, X5
	MOVO X1, X14
	MOVO X3, X9
	MOVO X10, X12
	PSUBQ X8, X4
	MOVO X4, X6
	PSLLQ $37, X4
	POR X11, X4
	MOVO X4, 176(BX)
	PSRLQ $27, X6
	PSUBQ X5, X1
	PSLLQ $12, X1
	PSUBQ X14, X3
	MOVO X3, X7
	PSLLQ $51, X3
	POR X6, X1
	POR X3, X1
	MOVO X1, 192(BX)
	PSRLQ $13, X7
	PSUBQ X9, X10
	MOVO X10, X15
	PSLLQ $26, X10
	POR X7, X10
	MOVO X10, 208(BX)
	PSRLQ $38, X15
	MOVO 368(AX), X2
	MOVO 384(AX), X13
	MOVO 400(AX), X0
	MOVO 416(AX), X8
	MOVO X2, X11
	MOVO X13, X4
	MOVO X0, X5
	MOVO X8, X14
	PSUBQ X12, X2
	PSLLQ $1, X2
	PSUBQ X11, X13
	MOVO X13, X6
	PSLLQ $40, X13
	POR X15, X2
	POR X13, X2
	MOVO X2, 224(BX)
	PSRLQ $24, X6
	PSUBQ X4, X0
	PSLLQ $15, X0
	PSUBQ X5, X8
	MOVO X8, X3
	PSLLQ $54, X8
	POR X6, X0
	POR X8, X0
	MOVO X0, 240(BX)
	PSRLQ $10, X3
	MOVO 432(AX), X1
	MOVO 448(AX), X9
	MOVO 464(AX), X7
	MOVO 480(AX), X10
	MOVO X1, X12
	MOVO X9, X11
	MOVO X7, X15
	MOVO X10, X13
	PSUBQ X14, X1
	MOVO X1, X2
	PSLLQ $29, X1
	POR X3, X1
	MOVO X1, 256(BX)
	PSRLQ $35, X2
	PSUBQ X12, X9
	PSLLQ $4, X9
	PSUBQ X11, X7
	MOVO X7, X4
	PSLLQ $43, X7
	POR X2, X9
	POR X7, X9
	MOVO X9, 272(BX)
	PSRLQ $21, X4
	PSUBQ X15, X10
	PSLLQ $18, X10
	MOVO 496(AX), X5
	MOVO 512(AX), X6
	MOVO 528(AX), X8
	MOVO 544(AX), X0
	MOVO X5, X14
	MOVO X6, X3
	MOVO X8, X1
	MOVO X0, X12
	PSUBQ X13, X5
	MOVO X5, X11
	PSLLQ $57, X5
	POR X4, X10
	POR X5, X10
	MOVO X10, 288(BX)
	PSRLQ $7, X11
	PSUBQ X14, X6
	MOVO X6, X2
	PSLLQ $32, X6
	POR X11, X6
	MOVO X6, 304(BX)
	PSRLQ $32, X2
	PSUBQ X3, X8
	PSLLQ $7, X8
	PSUBQ X1, X0
	MOVO X0, X7
	PSLLQ $46, X0
	POR X2, X8
	POR X0, X8
	MOVO X8, 320(BX)
	PSRLQ $18, X7
	MOVO 560(AX), X9
	MOVO 576(AX), X15
	MOVO 592(AX), X13
	MOVO 608(AX), X4
	MOVO X9, X5
	MOVO X15, X10
	MOVO X13, X14
	MOVO X4, X11
	PSUBQ X12, X9
	PSLLQ $21, X9
	PSUBQ X5, X15
	MOVO X15, X6
	PSLLQ $60, X15
	POR X7, X9
	POR X15, X9
	MOVO X9, 336(BX)
	PSRLQ $4, X6
	PSUBQ X10, X13
	MOVO X13, X3
	PSLLQ $35, X13
	POR X6, X13
	MOVO X13, 352(BX)
	PSRLQ $29, X3
	PSUBQ X14, X4
	PSLLQ $10, X4
	MOVO 624(AX), X1
	MOVO 640(AX), X2
	MOVO 656(AX), X0
	MOVO 672(AX), X8
	MOVO X1, X12
	MOVO X2, X5
	MOVO X0, X7
	MOVO X8, X15
	PSUBQ X11, X1
	MOVO X1, X9
	PSLLQ $49, X1
	POR X3, X4
	POR X1, X4
	MOVO X4, 368(BX)
	PSRLQ $15, X9
	PSUBQ X12, X2
	PSLLQ $24, X2
	PSUBQ X5, X0
	MOVO X0, X10
	PSLLQ $63, X0
	POR X9, X2
	POR X0, X2
	MOVO X2, 384(BX)
	PSRLQ $1, X10
	PSUBQ X7, X8
	MOVO X8, X6
	PSLLQ $38, X8
	POR X10, X8
	MOVO X8, 400(BX)
	PSRLQ $26, X6
	MOVO 688(AX), X13
	MOVO 704(AX), X14
	MOVO 720(AX), X11
	MOVO 736(AX), X3
	MOVO X13, X1
	MOVO X14, X4
	MOVO X11, X12
	MOVO X3, X5
	PSUBQ X15, X13
	PSLLQ $13, X13
	PSUBQ X1, X14
	MOVO X14, X9
	PSLLQ $52, X14
	POR X6, X13
	POR X14, X13
	MOVO X13, 416(BX)
	PSRLQ $12, X9
	PSUBQ X4, X11
	MOVO X11, X0
	PSLLQ $27, X11
	POR X9, X11
	MOVO X11, 432(BX)
	PSRLQ $37, X0
	PSUBQ X12, X3
	PSLLQ $2, X3
	MOVO 752(AX), X2
	MOVO 768(AX), X7
	MOVO 784(AX), X10
	MOVO 800(AX), X8
	MOVO X2, X15
	MOVO X7, X1
	MOVO X10, X6
	MOVO X8, X14
	PSUBQ X5, X2
	MOVO X2, X13
	PSLLQ $41, X2
	POR X0, X3
	POR X2, X3
	MOVO X3, 448(BX)
	PSRLQ $23, X13
	PSUBQ X15, X7
	PSLLQ $16, X7
	PSUBQ X1, X10
	MOVO X10, X4
	PSLLQ $55, X10
	POR X13, X7
	POR X10, X7
	MOVO X7, 464(BX)
	PSRLQ $9, X4
	PSUBQ X6, X8
	MOVO X8, X9
	PSLLQ $30, X8
	POR X4, X8
	MOVO X8, 480(BX)
	PSRLQ $34, X9
	MOVO 816(AX), X11
	MOVO 832(AX), X12
	MOVO 848(AX), X5
	MOVO 864(AX), X0
	MOVO X11, X2
	MOVO X12, X3
	MOVO X5, X15
	MOVO X0, X1
	PSUBQ X14, X11
	PSLLQ $5, X11
	PSUBQ X2, X12
	MOVO X12, X13
	PSLLQ $44, X12
	POR X9, X11
	POR X12, X11
	MOVO X11, 496(BX)
	PSRLQ $20, X13
	PSUBQ X3, X5
	PSLLQ $19, X5
	PSUBQ X15, X0
	MOVO X0, X10
	PSLLQ $58, X0
	POR X13, X5
	POR X0, X5
	MOVO X5, 512(BX)
	PSRLQ $6, X10
	MOVO 880(AX), X7
	MOVO 896(AX), X6
	MOVO 912(AX), X4
	MOVO 928(AX), X8
	MOVO X7, X14
	MOVO X6, X2
	MOVO X4, X9
	MOVO X8, X12
	PSUBQ X1, X7
	MOVO X7, X11
	PSLLQ $33, X7
	POR X10, X7
	MOVO X7, 528(BX)
	PSRLQ $31, X11
	PSUBQ X14, X6
	PSLLQ $8, X6
	PSUBQ X2, X4
	MOVO X4, X3
	PSLLQ $47, X4
	POR X11, X6
	POR X4, X6
	MOVO X6, 544(BX)
	PSRLQ $17, X3
	PSUBQ X9, X8
	PSLLQ $22, X8
	MOVO 944(AX), X15
	MOVO 960(AX), X13
	MOVO 976(AX), X0
	MOVO 992(AX), X5
	MOVO X15, X1
	MOVO X13, X10
	MOVO X0, X7
	MOVO X5, X14
	PSUBQ X12, X15
	MOVO X15, X2
	PSLLQ $61, X15
	POR X3, X8
	POR X15, X8
	MOVO X8, 560(BX)
	PSRLQ $3, X2
	PSUBQ X1, X13
	MOVO X13, X11
	PSLLQ $36, X13
	POR X2, X13
	MOVO X13, 576(BX)
	PSRLQ $28, X11
	PSUBQ X10, X0
	PSLLQ $11, X0
	PSUBQ X7, X5
	MOVO X5, X4
	PSLLQ $50, X5
	POR X11, X0
	POR X5, X0
	MOVO X0, 592(BX)
	PSRLQ $14, X4
	MOVO 1008(AX), X6
	MOVO X6, X9
	PSUBQ X14, X6
	PSLLQ $25, X6
	POR X4, X6
	MOVO X6, 608(BX)
	MOVO X9, 0(DX)
	RET

// func dpack64_40(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_40(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $40, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $24, X7
	PSUBQ X5, X3
	PSLLQ $16, X3
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	PSUBQ X6, X8
	MOVO X8, X0
	PSLLQ $56, X8
	POR X7, X3
	POR X8, X3
	MOVO X3, 16(BX)
	PSRLQ $8, X0
	PSUBQ X12, X9
	MOVO X9, X4
	PSLLQ $32, X9
	POR X0, X9
	MOVO X9, 32(BX)
	PSRLQ $32, X4
	PSUBQ X13, X10
	PSLLQ $8, X10
	PSUBQ X14, X11
	MOVO X11, X1
	PSLLQ $48, X11
	POR X4, X10
	POR X11, X10
	MOVO X10, 48(BX)
	PSRLQ $16, X1
	MOVO 112(AX), X2
	MOVO 128(AX), X5
	MOVO 144(AX), X6
	MOVO 160(AX), X7
	MOVO X2, X8
	MOVO X5, X3
	MOVO X6, X12
	MOVO X7, X0
	PSUBQ X15, X2
	PSLLQ $24, X2
	POR X1, X2
	MOVO X2, 64(BX)
	PSUBQ X8, X5
	PSUBQ X3, X6
	MOVO X6, X9
	PSLLQ $40, X6
	POR X5, X6
	MOVO X6, 80(BX)
	PSRLQ $24, X9
	PSUBQ X12, X7
	PSLLQ $16, X7
	MOVO 176(AX), X13
	MOVO 192(AX), X14
	MOVO 208(AX), X4
	MOVO 224(AX), X11
	MOVO X13, X10
	MOVO X14, X15
	MOVO X4, X1
	MOVO X11, X2
	PSUBQ X0, X13
	MOVO X13, X8
	PSLLQ $56, X13
	POR X9, X7
	POR X13, X7
	MOVO X7, 96(BX)
	PSRLQ $8, X8
	PSUBQ X10, X14
	MOVO X14, X3
	PSLLQ $32, X14
	POR X8, X14
	MOVO X14, 112(BX)
	PSRLQ $32, X3
	PSUBQ X15, X4
	PSLLQ $8, X4
	PSUBQ X1, X11
	MOVO X11, X5
	PSLLQ $48, X11
	POR X3, X4
	POR X11, X4
	MOVO X4, 128(BX)
	PSRLQ $16, X5
	MOVO 240(AX), X6
	MOVO 256(AX), X12
	MOVO 272(AX), X0
	MOVO 288(AX), X9
	MOVO X6, X13
	MOVO X12, X7
	MOVO X0, X10
	MOVO X9, X8
	PSUBQ X2, X6
	PSLLQ $24, X6
	POR X5, X6
	MOVO X6, 144(BX)
	PSUBQ X13, X12
	PSUBQ X7, X0
	MOVO X0, X14
	PSLLQ $40, X0
	POR X12, X0
	MOVO X0, 160(BX)
	PSRLQ $24, X14
	PSUBQ X10, X9
	PSLLQ $16, X9
	MOVO 304(AX), X15
	MOVO 320(AX), X1
	MOVO 336(AX), X3
	MOVO 352(AX), X11
	MOVO X15, X4
	MOVO X1, X2
	MOVO X3, X5
	MOVO X11, X6
	PSUBQ X8, X15
	MOVO X15, X13
	PSLLQ $56, X15
	POR X14, X9
	POR X15, X9
	MOVO X9, 176(BX)
	PSRLQ $8, X13
	PSUBQ X4, X1
	MOVO X1, X7
	PSLLQ $32, X1
	POR X13, X1
	MOVO X1, 192(BX)
	PSRLQ $32, X7
	PSUBQ X2, X3
	PSLLQ $8, X3
	PSUBQ X5, X11
	MOVO X11, X12
	PSLLQ $48, X11
	POR X7, X3
	POR X11, X3
	MOVO X3, 208(BX)
	PSRLQ $16, X12
	MOVO 368(AX), X0
	MOVO 384(AX), X10
	MOVO 400(AX), X8
	MOVO 416(AX), X14
	MOVO X0, X15
	MOVO X10, X9
	MOVO X8, X4
	MOVO X14, X13
	PSUBQ X6, X0
	PSLLQ $24, X0
	POR X12, X0
	MOVO X0, 224(BX)
	PSUBQ X15, X10
	PSUBQ X9, X8
	MOVO X8, X1
	PSLLQ $40, X8
	POR X10, X8
	MOVO X8, 240(BX)
	PSRLQ $24, X1
	PSUBQ X4, X14
	PSLLQ $16, X14
	MOVO 432(AX), X2
	MOVO 448(AX), X5
	MOVO 464(AX), X7
	MOVO 480(AX), X11
	MOVO X2, X3
	MOVO X5, X6
	MOVO X7, X12
	MOVO X11, X0
	PSUBQ X13, X2
	MOVO X2, X15
	PSLLQ $56, X2
	POR X1, X14
	POR X2, X14
	MOVO X14, 256(BX)
	PSRLQ $8, X15
	PSUBQ X3, X5
	MOVO X5, X9
	PSLLQ $32, X5
	POR X15, X5
	MOVO X5, 272(BX)
	PSRLQ $32, X9
	PSUBQ X6, X7
	PSLLQ $8, X7
	PSUBQ X12, X11
	MOVO X11, X10
	PSLLQ $48, X11
	POR X9, X7
	POR X11, X7
	MOVO X7, 288(BX)
	PSRLQ $16, X10
	MOVO 496(AX), X8
	MOVO 512(AX), X4
	MOVO 528(AX), X13
	MOVO 544(AX), X1
	MOVO X8, X2
	MOVO X4, X14
	MOVO X13, X3
	MOVO X1, X15
	PSUBQ X0, X8
	PSLLQ $24, X8
	POR X10, X8
	MOVO X8, 304(BX)
	PSUBQ X2, X4
	PSUBQ X14, X13
	MOVO X13, X5
	PSLLQ $40, X13
	POR X4, X13
	MOVO X13, 320(BX)
	PSRLQ $24, X5
	PSUBQ X3, X1
	PSLLQ $16, X1
	MOVO 560(AX), X6
	MOVO 576(AX), X12
	MOVO 592(AX), X9
	MOVO 608(AX), X11
	MOVO X6, X7
	MOVO X12, X0
	MOVO X9, X10
	MOVO X11, X8
	PSUBQ X15, X6
	MOVO X6, X2
	PSLLQ $56, X6
	POR X5, X1
	POR X6, X1
	MOVO X1, 336(BX)
	PSRLQ $8, X2
	PSUBQ X7, X12
	MOVO X12, X14
	PSLLQ $32, X12
	POR X2, X12
	MOVO X12, 352(BX)
	PSRLQ $32, X14
	PSUBQ X0, X9
	PSLLQ $8, X9
	PSUBQ X10, X11
	MOVO X11, X4
	PSLLQ $48, X11
	POR X14, X9
	POR X11, X9
	MOVO X9, 368(BX)
	PSRLQ $16, X4
	MOVO 624(AX), X13
	MOVO 640(AX), X3
	MOVO 656(AX), X15
	MOVO 672(AX), X5
	MOVO X13, X6
	MOVO X3, X1
	MOVO X15, X7
	MOVO X5, X2
	PSUBQ X8, X13
	PSLLQ $24, X13
	POR X4, X13
	MOVO X13, 384(BX)
	PSUBQ X6, X3
	PSUBQ X1, X15
	MOVO X15, X12
	PSLLQ $40, X15
	POR X3, X15
	MOVO X15, 400(BX)
	PSRLQ $24, X12
	PSUBQ X7, X5
	PSLLQ $16, X5
	MOVO 688(AX), X0
	MOVO 704(AX), X10
	MOVO 720(AX), X14
	MOVO 736(AX), X11
	MOVO X0, X9
	MOVO X10, X8
	MOVO X14, X4
	MOVO X11, X13
	PSUBQ X2, X0
	MOVO X0, X6
	PSLLQ $56, X0
	POR X12, X5
	POR X0, X5
	MOVO X5, 416(BX)
	PSRLQ $8, X6
	PSUBQ X9, X10
	MOVO X10, X1
	PSLLQ $32, X10
	POR X6, X10
	MOVO X10, 432(BX)
	PSRLQ $32, X1
	PSUBQ X8, X14
	PSLLQ $8, X14
	PSUBQ X4, X11
	MOVO X11, X3
	PSLLQ $48, X11
	POR X1, X14
	POR X11, X14
	MOVO X14, 448(BX)
	PSRLQ $16, X3
	MOVO 752(AX), X15
	MOVO 768(AX), X7
	MOVO 784(AX), X2
	MOVO 800(AX), X12
	MOVO X15, X0
	MOVO X7, X5
	MOVO X2, X9
	MOVO X12, X6
	PSUBQ X13, X15
	PSLLQ $24, X15
	POR X3, X15
	MOVO X15, 464(BX)
	PSUBQ X0, X7
	PSUBQ X5, X2
	MOVO X2, X10
	PSLLQ $40, X2
	POR X7, X2
	MOVO X2, 480(BX)
	PSRLQ $24, X10
	PSUBQ X9, X12
	PSLLQ $16, X12
	MOVO 816(AX), X8
	MOVO 832(AX), X4
	MOVO 848(AX), X1
	MOVO 864(AX), X11
	MOVO X8, X14
	MOVO X4, X13
	MOVO X1, X3
	MOVO X11, X15
	PSUBQ X6, X8
	MOVO X8, X0
	PSLLQ $56, X8
	POR X10, X12
	POR X8, X12
	MOVO X12, 496(BX)
	PSRLQ $8, X0
	PSUBQ X14, X4
	MOVO X4, X5
	PSLLQ $32, X4
	POR X0, X4
	MOVO X4, 512(BX)
	PSRLQ $32, X5
	PSUBQ X13, X1
	PSLLQ $8, X1
	PSUBQ X3, X11
	MOVO X11, X7
	PSLLQ $48, X11
	POR X5, X1
	POR X11, X1
	MOVO X1, 528(BX)
	PSRLQ $16, X7
	MOVO 880(AX), X2
	MOVO 896(AX), X9
	MOVO 912(AX), X6
	MOVO 928(AX), X10
	MOVO X2, X8
	MOVO X9, X12
	MOVO X6, X14
	MOVO X10, X0
	PSUBQ X15, X2
	PSLLQ $24, X2
	POR X7, X2
	MOVO X2, 544(BX)
	PSUBQ X8, X9
	PSUBQ X12, X6
	MOVO X6, X4
	PSLLQ $40, X6
	POR X9, X6
	MOVO X6, 560(BX)
	PSRLQ $24, X4
	PSUBQ X14, X10
	PSLLQ $16, X10
	MOVO 944(AX), X13
	MOVO 960(AX), X3
	MOVO 976(AX), X5
	MOVO 992(AX), X11
	MOVO X13, X1
	MOVO X3, X15
	MOVO X5, X7
	MOVO X11, X2
	PSUBQ X0, X13
	MOVO X13, X8
	PSLLQ $56, X13
	POR X4, X10
	POR X13, X10
	MOVO X10, 576(BX)
	PSRLQ $8, X8
	PSUBQ X1, X3
	MOVO X3, X12
	PSLLQ $32, X3
	POR X8, X3
	MOVO X3, 592(BX)
	PSRLQ $32, X12
	PSUBQ X15, X5
	PSLLQ $8, X5
	PSUBQ X7, X11
	MOVO X11, X9
	PSLLQ $48, X11
	POR X12, X5
	POR X11, X5
	MOVO X5, 608(BX)
	PSRLQ $16, X9
	MOVO 1008(AX), X6
	MOVO X6, X14
	PSUBQ X2, X6
	PSLLQ $24, X6
	POR X9, X6
	MOVO X6, 624(BX)
	MOVO X14, 0(DX)
	RET

// func dpack64_41(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_41(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $41, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $23, X7
	PSUBQ X5, X3
	PSLLQ $18, X3
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	PSUBQ X6, X8
	MOVO X8, X0
	PSLLQ $59, X8
	POR X7, X3
	POR X8, X3
	MOVO X3, 16(BX)
	PSRLQ $5, X0
	PSUBQ X12, X9
	MOVO X9, X4
	PSLLQ $36, X9
	POR X0, X9
	MOVO X9, 32(BX)
	PSRLQ $28, X4
	PSUBQ X13, X10
	PSLLQ $13, X10
	PSUBQ X14, X11
	MOVO X11, X1
	PSLLQ $54, X11
	POR X4, X10
	POR X11, X10
	MOVO X10, 48(BX)
	PSRLQ $10, X1
	MOVO 112(AX), X2
	MOVO 128(AX), X5
	MOVO 144(AX), X6
	MOVO 160(AX), X7
	MOVO X2, X8
	MOVO X5, X3
	MOVO X6, X12
	MOVO X7, X0
	PSUBQ X15, X2
	MOVO X2, X9
	PSLLQ $31, X2
	POR X1, X2
	MOVO X2, 64(BX)
	PSRLQ $33, X9
	PSUBQ X8, X5
	PSLLQ $8, X5
	PSUBQ X3, X6
	MOVO X6, X13
	PSLLQ $49, X6
	POR X9, X5
	POR X6, X5
	MOVO X5, 80(BX)
	PSRLQ $15, X13
	PSUBQ X12, X7
	MOVO X7, X14
	PSLLQ $26, X7
	POR X13, X7
	MOVO X7, 96(BX)
	PSRLQ $38, X14
	MOVO 176(AX), X4
	MOVO 192(AX), X11
	MOVO 208(AX), X10
	MOVO 224(AX), X15
	MOVO X4, X1
	MOVO X11, X2
	MOVO X10, X8
	MOVO X15, X3
	PSUBQ X0, X4
	PSLLQ $3, X4
	PSUBQ X1, X11
	MOVO X11, X9
	PSLLQ $44, X11
	POR X14, X4
	POR X11, X4
	MOVO X4, 112(BX)
	PSRLQ $20, X9
	PSUBQ X2, X10
	PSLLQ $21, X10
	PSUBQ X8, X15
	MOVO X15, X6
	PSLLQ $62, X15
	POR X9, X10
	POR X15, X10
	MOVO X10, 128(BX)
	PSRLQ $2, X6
	MOVO 240(AX), X5
	MOVO 256(AX), X12
	MOVO 272(AX), X13
	MOVO 288(AX), X7
	MOVO X5, X0
	MOVO X12, X1
	MOVO X13, X14
	MOVO X7, X11
	PSUBQ X3, X5
	MOVO X5, X4
	PSLLQ $39, X5
	POR X6, X5
	MOVO X5, 144(BX)
	PSRLQ $25, X4
	PSUBQ X0, X12
	PSLLQ $16, X12
	PSUBQ X1, X13
	MOVO X13, X2
	PSLLQ $57, X13
	POR X4, X12
	POR X13, X12
	MOVO X12, 160(BX)
	PSRLQ $7, X2
	PSUBQ X14, X7
	MOVO X7, X8
	PSLLQ $34, X7
	POR X2, X7
	MOVO X7, 176(BX)
	PSRLQ $30, X8
	MOVO 304(AX), X9
	MOVO 320(AX), X15
	MOVO 336(AX), X10
	MOVO 352(AX), X3
	MOVO X9, X6
	MOVO X15, X5
	MOVO X10, X0
	MOVO X3, X1
	PSUBQ X11, X9
	PSLLQ $11, X9
	PSUBQ X6, X15
	MOVO X15, X4
	PSLLQ $52, X15
	POR X8, X9
	POR X15, X9
	MOVO X9, 192(BX)
	PSRLQ $12, X4
	PSUBQ X5, X10
	MOVO X10, X13
	PSLLQ $29, X10
	POR X4, X10
	MOVO X10, 208(BX)
	PSRLQ $35, X13
	PSUBQ X0, X3
	PSLLQ $6, X3
	MOVO 368(AX), X12
	MOVO 384(AX), X14
	MOVO 400(AX), X2
	MOVO 416(AX), X7
	MOVO X12, X11
	MOVO X14, X6
	MOVO X2, X8
	MOVO X7, X15
	PSUBQ X1, X12
	MOVO X12, X9
	PSLLQ $47, X12
	POR X13, X3
	POR X12, X3
	MOVO X3, 224(BX)
	PSRLQ $17, X9
	PSUBQ X11, X14
	MOVO X14, X5
	PSLLQ $24, X14
	POR X9, X14
	MOVO X14, 240(BX)
	PSRLQ $40, X5
	PSUBQ X6, X2
	PSLLQ $1, X2
	PSUBQ X8, X7
	MOVO X7, X4
	PSLLQ $42, X7
	POR X5, X2
	POR X7, X2
	MOVO X2, 256(BX)
	PSRLQ $22, X4
	MOVO 432(AX), X10
	MOVO 448(AX), X0
	MOVO 464(AX), X1
	MOVO 480(AX), X13
	MOVO X10, X12
	MOVO X0, X3
	MOVO X1, X11
	MOVO X13, X9
	PSUBQ X15, X10
	PSLLQ $19, X10
	PSUBQ X12, X0
	MOVO X0, X14
	PSLLQ $60, X0
	POR X4, X10
	POR X0, X10
	MOVO X10, 272(BX)
	PSRLQ $4, X14
	PSUBQ X3, X1
	MOVO X1, X6
	PSLLQ $37, X1
	POR X14, X1
	MOVO X1, 288(BX)
	PSRLQ $27, X6
	PSUBQ X11, X13
	PSLLQ $14, X13
	MOVO 496(AX), X8
	MOVO 512(AX), X5
	MOVO 528(AX), X7
	MOVO 544(AX), X2
	MOVO X8, X15
	MOVO X5, X12
	MOVO X7, X4
	MOVO X2, X0
	PSUBQ X9, X8
	MOVO X8, X10
	PSLLQ $55, X8
	POR X6, X13
	POR X8, X13
	MOVO X13, 304(BX)
	PSRLQ $9, X10
	PSUBQ X15, X5
	MOVO X5, X3
	PSLLQ $32, X5
	POR X10, X5
	MOVO X5, 320(BX)
	PSRLQ $32, X3
	PSUBQ X12, X7
	PSLLQ $9, X7
	PSUBQ X4, X2
	MOVO X2, X14
	PSLLQ $50, X2
	POR X3, X7
	POR X2, X7
	MOVO X7, 336(BX)
	PSRLQ $14, X14
	MOVO 560(AX), X1
	MOVO 576(AX), X11
	MOVO 592(AX), X9
	MOVO 608(AX), X6
	MOVO X1, X8
	MOVO X11, X13
	MOVO X9, X15
	MOVO X6, X10
	PSUBQ X0, X1
	MOVO X1, X5
	PSLLQ $27, X1
	POR X14, X1
	MOVO X1, 352(BX)
	PSRLQ $37, X5
	PSUBQ X8, X11
	PSLLQ $4, X11
	PSUBQ X13, X9
	MOVO X9, X12
	PSLLQ $45, X9
	POR X5, X11
	POR X9, X11
	MOVO X11, 368(BX)
	PSRLQ $19, X12
	PSUBQ X15, X6
	PSLLQ $22, X6
	MOVO 624(AX), X4
	MOVO 640(AX), X3
	MOVO 656(AX), X2
	MOVO 672(AX), X7
	MOVO X4, X0
	MOVO X3, X14
	MOVO X2, X1
	MOVO X7, X8
	PSUBQ X10, X4
	MOVO X4, X13
	PSLLQ $63, X4
	POR X12, X6
	POR X4, X6
	MOVO X6, 384(BX)
	PSRLQ $1, X13
	PSUBQ X0, X3
	MOVO X3, X5
	PSLLQ $40, X3
	POR X13, X3
	MOVO X3, 400(BX)
	PSRLQ $24, X5
	PSUBQ X14, X2
	PSLLQ $17, X2
	PSUBQ X1, X7
	MOVO X7, X9
	PSLLQ $58, X7
	POR X5, X2
	POR X7, X2
	MOVO X2, 416(BX)
	PSRLQ $6, X9
	MOVO 688(AX), X11
	MOVO 704(AX), X15
	MOVO 720(AX), X10
	MOVO 736(AX), X12
	MOVO X11, X4
	MOVO X15, X6
	MOVO X10, X0
	MOVO X12, X13
	PSUBQ X8, X11
	MOVO X11, X3
	PSLLQ $35, X11
	POR X9, X11
	MOVO X11, 432(BX)
	PSRLQ $29, X3
	PSUBQ X4, X15
	PSLLQ $12, X15
	PSUBQ X6, X10
	MOVO X10, X14
	PSLLQ $53, X10
	POR X3, X15
	POR X10, X15
	MOVO X15, 448(BX)
	PSRLQ $11, X14
	PSUBQ X0, X12
	MOVO X12, X1
	PSLLQ $30, X12
	POR X14, X12
	MOVO X12, 464(BX)
	PSRLQ $34, X1
	MOVO 752(AX), X5
	MOVO 768(AX), X7
	MOVO 784(AX), X2
	MOVO 800(AX), X8
	MOVO X5, X9
	MOVO X7, X11
	MOVO X2, X4
	MOVO X8, X6
	PSUBQ X13, X5
	PSLLQ $7, X5
	PSUBQ X9, X7
	MOVO X7, X3
	PSLLQ $48, X7
	POR X1, X5
	POR X7, X5
	MOVO X5, 480(BX)
	PSRLQ $16, X3
	PSUBQ X11, X2
	MOVO X2, X10
	PSLLQ $25, X2
	POR X3, X2
	MOVO X2, 496(BX)
	PSRLQ $39, X10
	PSUBQ X4, X8
	PSLLQ $2, X8
	MOVO 816(AX), X15
	MOVO 832(AX), X0
	MOVO 848(AX), X14
	MOVO 864(AX), X12
	MOVO X15, X13
	MOVO X0, X9
	MOVO X14, X1
	MOVO X12, X7
	PSUBQ X6, X15
	MOVO X15, X5
	PSLLQ $43, X15
	POR X10, X8
	POR X15, X8
	MOVO X8, 512(BX)
	PSRLQ $21, X5
	PSUBQ X13, X0
	PSLLQ $20, X0
	PSUBQ X9, X14
	MOVO X14, X11
	PSLLQ $61, X14
	POR X5, X0
	POR X14, X0
	MOVO X0, 528(BX)
	PSRLQ $3, X11
	PSUBQ X1, X12
	MOVO X12, X3
	PSLLQ $38, X12
	POR X11, X12
	MOVO X12, 544(BX)
	PSRLQ $26, X3
	MOVO 880(AX), X2
	MOVO 896(AX), X4
	MOVO 912(AX), X6
	MOVO 928(AX), X10
	MOVO X2, X15
	MOVO X4, X8
	MOVO X6, X13
	MOVO X10, X9
	PSUBQ X7, X2
	PSLLQ $15, X2
	PSUBQ X15, X4
	MOVO X4, X5
	PSLLQ $56, X4
	POR X3, X2
	POR X4, X2
	MOVO X2, 560(BX)
	PSRLQ $8, X5
	PSUBQ X8, X6
	MOVO X6, X14
	PSLLQ $33, X6
	POR X5, X6
	MOVO X6, 576(BX)
	PSRLQ $31, X14
	PSUBQ X13, X10
	PSLLQ $10, X10
	MOVO 944(AX), X0
	MOVO 960(AX), X1
	MOVO 976(AX), X11
	MOVO 992(AX), X12
	MOVO X0, X7
	MOVO X1, X15
	MOVO X11, X3
	MOVO X12, X4
	PSUBQ X9, X0
	MOVO X0, X2
	PSLLQ $51, X0
	POR X14, X10
	POR X0, X10
	MOVO X10, 592(BX)
	PSRLQ $13, X2
	PSUBQ X7, X1
	MOVO X1, X8
	PSLLQ $28, X1
	POR X2, X1
	MOVO X1, 608(BX)
	PSRLQ $36, X8
	PSUBQ X15, X11
	PSLLQ $5, X11
	PSUBQ X3, X12
	MOVO X12, X5
	PSLLQ $46, X12
	POR X8, X11
	POR X12, X11
	MOVO X11, 624(BX)
	PSRLQ $18, X5
	MOVO 1008(AX), X6
	MOVO X6, X13
	PSUBQ X4, X6
	PSLLQ $23, X6
	POR X5, X6
	MOVO X6, 640(BX)
	MOVO X13, 0(DX)
	RET

// func dpack64_42(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_42(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $42, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $22, X7
	PSUBQ X5, X3
	PSLLQ $20, X3
	MOVO 48(AX), X8
	MOVO 64(AX), X9
	MOVO 80(AX), X10
	MOVO 96(AX), X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	PSUBQ X6, X8
	MOVO X8, X0
	PSLLQ $62, X8
	POR X7, X3
	POR X8, X3
	MOVO X3, 16(BX)
	PSRLQ $2, X0
	PSUBQ X12, X9
	MOVO X9, X4
	PSLLQ $40, X9
	POR X0, X9
	MOVO X9, 32(BX)
	PSRLQ $24, X4
	PSUBQ X13, X10
	PSLLQ $18, X10
	PSUBQ X14, X11
	MOVO X11, X1
	PSLLQ $60, X11
	POR X4, X10
	POR X11, X10
	MOVO X10, 48(BX)
	PSRLQ $4, X1
	MOVO 112(AX), X2
	MOVO 128(AX), X5
	MOVO 144(AX), X6
	MOVO 160(AX), X7
	MOVO X2, X8
	MOVO X5, X3
	MOVO X6, X12
	MOVO X7, X0
	PSUBQ X15, X2
	MOVO X2, X9
	PSLLQ $38, X2
	POR X1, X2
	MOVO X2, 64(BX)
	PSRLQ $26, X9
	PSUBQ X8, X5
	PSLLQ $16, X5
	PSUBQ X3, X6
	MOVO X6, X13
	PSLLQ $58, X6
	POR X9, X5
	POR X6, X5
	MOVO X5, 80(BX)
	PSRLQ $6, X13
	PSUBQ X12, X7
	MOVO X7, X14
	PSLLQ $36, X7
	POR X13, X7
	MOVO X7, 96(BX)
	PSRLQ $28, X14
	MOVO 176(AX), X4
	MOVO 192(AX), X11
	MOVO 208(AX), X10
	MOVO 224(AX), X15
	MOVO X4, X1
	MOVO X11, X2
	MOVO X10, X8
	MOVO X15, X3
	PSUBQ X0, X4
	PSLLQ $14, X4
	PSUBQ X1, X11
	MOVO X11, X9
	PSLLQ $56, X11
	POR X14, X4
	POR X11, X4
	MOVO X4, 112(BX)
	PSRLQ $8, X9
	PSUBQ X2, X10
	MOVO X10, X6
	PSLLQ $34, X10
	POR X9, X10
	MOVO X10, 128(BX)
	PSRLQ $30, X6
	PSUBQ X8, X15
	PSLLQ $12, X15
	MOVO 240(AX), X5
	MOVO 256(AX), X12
	MOVO 272(AX), X13
	MOVO 288(AX), X7
	MOVO X5, X0
	MOVO X12, X1
	MOVO X13, X14
	MOVO X7, X11
	PSUBQ X3, X5
	MOVO X5, X4
	PSLLQ $54, X5
	POR X6, X15
	POR X5, X15
	MOVO X15, 144(BX)
	PSRLQ $10, X4
	PSUBQ X0, X12
	MOVO X12, X2
	PSLLQ $32, X12
	POR X4, X12
	MOVO X12, 160(BX)
	PSRLQ $32, X2
	PSUBQ X1, X13
	PSLLQ $10, X13
	PSUBQ X14, X7
	MOVO X7, X9
	PSLLQ $52, X7
	POR X2, X13
	POR X7, X13
	MOVO X13, 176(BX)
	PSRLQ $12, X9
	MOVO 304(AX), X10
	MOVO 320(AX), X8
	MOVO 336(AX), X3
	MOVO 352(AX), X6
	MOVO X10, X5
	MOVO X8, X15
	MOVO X3, X0
	MOVO X6, X4
	PSUBQ X11, X10
	MOVO X10, X12
	PSLLQ $30, X10
	POR X9, X10
	MOVO X10, 192(BX)
	PSRLQ $34, X12
	PSUBQ X5, X8
	PSLLQ $8, X8
	PSUBQ X15, X3
	MOVO X3, X1
	PSLLQ $50, X3
	POR X12, X8
	POR X3, X8
	MOVO X8, 208(BX)
	PSRLQ $14, X1
	PSUBQ X0, X6
	MOVO X6, X14
	PSLLQ $28, X6
	POR X1, X6
	MOVO X6, 224(BX)
	PSRLQ $36, X14
	MOVO 368(AX), X2
	MOVO 384(AX), X7
	MOVO 400(AX), X13
	MOVO 416(AX), X11
	MOVO X2, X9
	MOVO X7, X10
	MOVO X13, X5
	MOVO X11, X15
	PSUBQ X4, X2
	PSLLQ $6, X2
	PSUBQ X9, X7
	MOVO X7, X12
	PSLLQ $48, X7
	POR X14, X2
	POR X7, X2
	MOVO X2, 240(BX)
	PSRLQ $16, X12
	PSUBQ X10, X13
	MOVO X13, X3
	PSLLQ $26, X13
	POR X12, X13
	MOVO X13, 256(BX)
	PSRLQ $38, X3
	PSUBQ X5, X11
	PSLLQ $4, X11
	MOVO 432(AX), X8
	MOVO 448(AX), X0
	MOVO 464(AX), X1
	MOVO 480(AX), X6
	MOVO X8, X4
	MOVO X0, X9
	MOVO X1, X14
	MOVO X6, X7
	PSUBQ X15, X8
	MOVO X8, X2
	PSLLQ $46, X8
	POR X3, X11
	POR X8, X11
	MOVO X11, 272(BX)
	PSRLQ $18, X2
	PSUBQ X4, X0
	MOVO X0, X10
	PSLLQ $24, X0
	POR X2, X0
	MOVO X0, 288(BX)
	PSRLQ $40, X10
	PSUBQ X9, X1
	PSLLQ $2, X1
	PSUBQ X14, X6
	MOVO X6, X12
	PSLLQ $44, X6
	POR X10, X1
	POR X6, X1
	MOVO X1, 304(BX)
	PSRLQ $20, X12
	MOVO 496(AX), X13
	MOVO 512(AX), X5
	MOVO 528(AX), X15
	MOVO 544(AX), X3
	MOVO X13, X8
	MOVO X5, X11
	MOVO X15, X4
	MOVO X3, X2
	PSUBQ X7, X13
	PSLLQ $22, X13
	POR X12, X13
	MOVO X13, 320(BX)
	PSUBQ X8, X5
	PSUBQ X11, X15
	MOVO X15, X0
	PSLLQ $42, X15
	POR X5, X15
	MOVO X15, 336(BX)
	PSRLQ $22, X0
	PSUBQ X4, X3
	PSLLQ $20, X3
	MOVO 560(AX), X9
	MOVO 576(AX), X14
	MOVO 592(AX), X10
	MOVO 608(AX), X6
	MOVO X9, X1
	MOVO X14, X7
	MOVO X10, X12
	MOVO X6, X13
	PSUBQ X2, X9
	MOVO X9, X8
	PSLLQ $62, X9
	POR X0, X3
	POR X9, X3
	MOVO X3, 352(BX)
	PSRLQ $2, X8
	PSUBQ X1, X14
	MOVO X14, X11
	PSLLQ $40, X14
	POR X8, X14
	MOVO X14, 368(BX)
	PSRLQ $24, X11
	PSUBQ X7, X10
	PSLLQ $18, X10
	PSUBQ X12, X6
	MOVO X6, X5
	PSLLQ $60, X6
	POR X11, X10
	POR X6, X10
	MOVO X10, 384(BX)
	PSRLQ $4, X5
	MOVO 624(AX), X15
	MOVO 640(AX), X4
	MOVO 656(AX), X2
	MOVO 672(AX), X0
	MOVO X15, X9
	MOVO X4, X3
	MOVO X2, X1
	MOVO X0, X8
	PSUBQ X13, X15
	MOVO X15, X14
	PSLLQ $38, X15
	POR X5, X15
	MOVO X15, 400(BX)
	PSRLQ $26, X14
	PSUBQ X9, X4
	PSLLQ $16, X4
	PSUBQ X3, X2
	MOVO X2, X7
	PSLLQ $58, X2
	POR X14, X4
	POR X2, X4
	MOVO X4, 416(BX)
	PSRLQ $6, X7
	PSUBQ X1, X0
	MOVO X0, X12
	PSLLQ $36, X0
	POR X7, X0
	MOVO X0, 432(BX)
	PSRLQ $28, X12
	MOVO 688(AX), X11
	MOVO 704(AX), X6
	MOVO 720(AX), X10
	MOVO 736(AX), X13
	MOVO X11, X5
	MOVO X6, X15
	MOVO X10, X9
	MOVO X13, X3
	PSUBQ X8, X11
	PSLLQ $14, X11
	PSUBQ X5, X6
	MOVO X6, X14
	PSLLQ $56, X6
	POR X12, X11
	POR X6, X11
	MOVO X11, 448(BX)
	PSRLQ $8, X14
	PSUBQ X15, X10
	MOVO X10, X2
	PSLLQ $34, X10
	POR X14, X10
	MOVO X10, 464(BX)
	PSRLQ $30, X2
	PSUBQ X9, X13
	PSLLQ $12, X13
	MOVO 752(AX), X4
	MOVO 768(AX), X1
	MOVO 784(AX), X7
	MOVO 800(AX), X0
	MOVO X4, X8
	MOVO X1, X5
	MOVO X7, X12
	MOVO X0, X6
	PSUBQ X3, X4
	MOVO X4, X11
	PSLLQ $54, X4
	POR X2, X13
	POR X4, X13
	MOVO X13, 480(BX)
	PSRLQ $10, X11
	PSUBQ X8, X1
	MOVO X1, X15
	PSLLQ $32, X1
	POR X11, X1
	MOVO X1, 496(BX)
	PSRLQ $32, X15
	PSUBQ X5, X7
	PSLLQ $10, X7
	PSUBQ X12, X0
	MOVO X0, X14
	PSLLQ $52, X0
	POR X15, X7
	POR X0, X7
	MOVO X7, 512(BX)
	PSRLQ $12, X14
	MOVO 816(AX), X10
	MOVO 832(AX), X9
	MOVO 848(AX), X3
	MOVO 864(AX), X2
	MOVO X10, X4
	MOVO X9, X13
	MOVO X3, X8
	MOVO X2, X11
	PSUBQ X6, X10
	MOVO X10, X1
	PSLLQ $30, X10
	POR X14, X10
	MOVO X10, 528(BX)
	PSRLQ $34, X1
	PSUBQ X4, X9
	PSLLQ $8, X9
	PSUBQ X13, X3
	MOVO X3, X5
	PSLLQ $50, X3
	POR X1, X9
	POR X3, X9
	MOVO X9, 544(BX)
	PSRLQ $14, X5
	PSUBQ X8, X2
	MOVO X2, X12
	PSLLQ $28, X2
	POR X5, X2
	MOVO X2, 560(BX)
	PSRLQ $36, X12
	MOVO 880(AX), X15
	MOVO 896(AX), X0
	MOVO 912(AX), X7
	MOVO 928(AX), X6
	MOVO X15, X14
	MOVO X0, X10
	MOVO X7, X4
	MOVO X6, X13
	PSUBQ X11, X15
	PSLLQ $6, X15
	PSUBQ X14, X0
	MOVO X0, X1
	PSLLQ $48, X0
	POR X12, X15
	POR X0, X15
	MOVO X15, 576(BX)
	PSRLQ $16, X1
	PSUBQ X10, X7
	MOVO X7, X3
	PSLLQ $26, X7
	POR X1, X7
	MOVO X7, 592(BX)
	PSRLQ $38, X3
	PSUBQ X4, X6
	PSLLQ $4, X6
	MOVO 944(AX), X9
	MOVO 960(AX), X8
	MOVO 976(AX), X5
	MOVO 992(AX), X2
	MOVO X9, X11
	MOVO X8, X14
	MOVO X5, X12
	MOVO X2, X0
	PSUBQ X13, X9
	MOVO X9, X15
	PSLLQ $46, X9
	POR X3, X6
	POR X9, X6
	MOVO X6, 608(BX)
	PSRLQ $18, X15
	PSUBQ X11, X8
	MOVO X8, X10
	PSLLQ $24, X8
	POR X15, X8
	MOVO X8, 624(BX)
	PSRLQ $40, X10
	PSUBQ X14, X5
	PSLLQ $2, X5
	PSUBQ X12, X2
	MOVO X2, X1
	PSLLQ $44, X2
	POR X10, X5
	POR X2, X5
	MOVO X5, 640(BX)
	PSRLQ $20, X1
	MOVO 1008(AX), X7
	MOVO X7, X4
	PSUBQ X0, X7
	PSLLQ $22, X7
	POR X1, X7
	MOVO X7, 656(BX)
	MOVO X4, 0(DX)
	RET

// func dpack64_43(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_43(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $43, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $21, X7
	PSUBQ X5, X3
	MOVO X3, X8
	PSLLQ $22, X3
	POR X7, X3
	MOVO X3, 16(BX)
	PSRLQ $42, X8
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	PSUBQ X6, X9
	PSLLQ $1, X9
	PSUBQ X13, X10
	MOVO X10, X4
	PSLLQ $44, X10
	POR X8, X9
	POR X10, X9
	MOVO X9, 32(BX)
	PSRLQ $20, X4
	PSUBQ X14, X11
	MOVO X11, X1
	PSLLQ $23, X11
	POR X4, X11
	MOVO X11, 48(BX)
	PSRLQ $41, X1
	PSUBQ X15, X12
	PSLLQ $2, X12
	MOVO 112(AX), X2
	MOVO 128(AX), X5
	MOVO 144(AX), X7
	MOVO 160(AX), X3
	MOVO X2, X6
	MOVO X5, X13
	MOVO X7, X8
	MOVO X3, X10
	PSUBQ X0, X2
	MOVO X2, X9
	PSLLQ $45, X2
	POR X1, X12
	POR X2, X12
	MOVO X12, 64(BX)
	PSRLQ $19, X9
	PSUBQ X6, X5
	MOVO X5, X14
	PSLLQ $24, X5
	POR X9, X5
	MOVO X5, 80(BX)
	PSRLQ $40, X14
	PSUBQ X13, X7
	PSLLQ $3, X7
	PSUBQ X8, X3
	MOVO X3, X4
	PSLLQ $46, X3
	POR X14, X7
	POR X3, X7
	MOVO X7, 96(BX)
	PSRLQ $18, X4
	MOVO 176(AX), X11
	MOVO 192(AX), X15
	MOVO 208(AX), X0
	MOVO 224(AX), X1
	MOVO X11, X2
	MOVO X15, X12
	MOVO X0, X6
	MOVO X1, X9
	PSUBQ X10, X11
	MOVO X11, X5
	PSLLQ $25, X11
	POR X4, X11
	MOVO X11, 112(BX)
	PSRLQ $39, X5
	PSUBQ X2, X15
	PSLLQ $4, X15
	PSUBQ X12, X0
	MOVO X0, X13
	PSLLQ $47, X0
	POR X5, X15
	POR X0, X15
	MOVO X15, 128(BX)
	PSRLQ $17, X13
	PSUBQ X6, X1
	MOVO X1, X8
	PSLLQ $26, X1
	POR X13, X1
	MOVO X1, 144(BX)
	PSRLQ $38, X8
	MOVO 240(AX), X14
	MOVO 256(AX), X3
	MOVO 272(AX), X7
	MOVO 288(AX), X10
	MOVO X14, X4
	MOVO X3, X11
	MOVO X7, X2
	MOVO X10, X12
	PSUBQ X9, X14
	PSLLQ $5, X14
	PSUBQ X4, X3
	MOVO X3, X5
	PSLLQ $48, X3
	POR X8, X14
	POR X3, X14
	MOVO X14, 160(BX)
	PSRLQ $16, X5
	PSUBQ X11, X7
	MOVO X7, X0
	PSLLQ $27, X7
	POR X5, X7
	MOVO X7, 176(BX)
	PSRLQ $37, X0
	PSUBQ X2, X10
	PSLLQ $6, X10
	MOVO 304(AX), X15
	MOVO 320(AX), X6
	MOVO 336(AX), X13
	MOVO 352(AX), X1
	MOVO X15, X9
	MOVO X6, X4
	MOVO X13, X8
	MOVO X1, X3
	PSUBQ X12, X15
	MOVO X15, X14
	PSLLQ $49, X15
	POR X0, X10
	POR X15, X10
	MOVO X10, 192(BX)
	PSRLQ $15, X14
	PSUBQ X9, X6
	MOVO X6, X11
	PSLLQ $28, X6
	POR X14, X6
	MOVO X6, 208(BX)
	PSRLQ $36, X11
	PSUBQ X4, X13
	PSLLQ $7, X13
	PSUBQ X8, X1
	MOVO X1, X5
	PSLLQ $50, X1
	POR X11, X13
	POR X1, X13
	MOVO X13, 224(BX)
	PSRLQ $14, X5
	MOVO 368(AX), X7
	MOVO 384(AX), X2
	MOVO 400(AX), X12
	MOVO 416(AX), X0
	MOVO X7, X15
	MOVO X2, X10
	MOVO X12, X9
	MOVO X0, X14
	PSUBQ X3, X7
	MOVO X7, X6
	PSLLQ $29, X7
	POR X5, X7
	MOVO X7, 240(BX)
	PSRLQ $35, X6
	PSUBQ X15, X2
	PSLLQ $8, X2
	PSUBQ X10, X12
	MOVO X12, X4
	PSLLQ $51, X12
	POR X6, X2
	POR X12, X2
	MOVO X2, 256(BX)
	PSRLQ $13, X4
	PSUBQ X9, X0
	MOVO X0, X8
	PSLLQ $30, X0
	POR X4, X0
	MOVO X0, 272(BX)
	PSRLQ $34, X8
	MOVO 432(AX), X11
	MOVO 448(AX), X1
	MOVO 464(AX), X13
	MOVO 480(AX), X3
	MOVO X11, X5
	MOVO X1, X7
	MOVO X13, X15
	MOVO X3, X10
	PSUBQ X14, X11
	PSLLQ $9, X11
	PSUBQ X5, X1
	MOVO X1, X6
	PSLLQ $52, X1
	POR X8, X11
	POR X1, X11
	MOVO X11, 288(BX)
	PSRLQ $12, X6
	PSUBQ X7, X13
	MOVO X13, X12
	PSLLQ $31, X13
	POR X6, X13
	MOVO X13, 304(BX)
	PSRLQ $33, X12
	PSUBQ X15, X3
	PSLLQ $10, X3
	MOVO 496(AX), X2
	MOVO 512(AX), X9
	MOVO 528(AX), X4
	MOVO 544(AX), X0
	MOVO X2, X14
	MOVO X9, X5
	MOVO X4, X8
	MOVO X0, X1
	PSUBQ X10, X2
	MOVO X2, X11
	PSLLQ $53, X2
	POR X12, X3
	POR X2, X3
	MOVO X3, 320(BX)
	PSRLQ $11, X11
	PSUBQ X14, X9
	MOVO X9, X7
	PSLLQ $32, X9
	POR X11, X9
	MOVO X9, 336(BX)
	PSRLQ $32, X7
	PSUBQ X5, X4
	PSLLQ $11, X4
	PSUBQ X8, X0
	MOVO X0, X6
	PSLLQ $54, X0
	POR X7, X4
	POR X0, X4
	MOVO X4, 352(BX)
	PSRLQ $10, X6
	MOVO 560(AX), X13
	MOVO 576(AX), X15
	MOVO 592(AX), X10
	MOVO 608(AX), X12
	MOVO X13, X2
	MOVO X15, X3
	MOVO X10, X14
	MOVO X12, X11
	PSUBQ X1, X13
	MOVO X13, X9
	PSLLQ $33, X13
	POR X6, X13
	MOVO X13, 368(BX)
	PSRLQ $31, X9
	PSUBQ X2, X15
	PSLLQ $12, X15
	PSUBQ X3, X10
	MOVO X10, X5
	PSLLQ $55, X10
	POR X9, X15
	POR X10, X15
	MOVO X15, 384(BX)
	PSRLQ $9, X5
	PSUBQ X14, X12
	MOVO X12, X8
	PSLLQ $34, X12
	POR X5, X12
	MOVO X12, 400(BX)
	PSRLQ $30, X8
	MOVO 624(AX), X7
	MOVO 640(AX), X0
	MOVO 656(AX), X4
	MOVO 672(AX), X1
	MOVO X7, X6
	MOVO X0, X13
	MOVO X4, X2
	MOVO X1, X3
	PSUBQ X11, X7
	PSLLQ $13, X7
	PSUBQ X6, X0
	MOVO X0, X9
	PSLLQ $56, X0
	POR X8, X7
	POR X0, X7
	MOVO X7, 416(BX)
	PSRLQ $8, X9
	PSUBQ X13, X4
	MOVO X4, X10
	PSLLQ $35, X4
	POR X9, X4
	MOVO X4, 432(BX)
	PSRLQ $29, X10
	PSUBQ X2, X1
	PSLLQ $14, X1
	MOVO 688(AX), X15
	MOVO 704(AX), X14
	MOVO 720(AX), X5
	MOVO 736(AX), X12
	MOVO X15, X11
	MOVO X14, X6
	MOVO X5, X8
	MOVO X12, X0
	PSUBQ X3, X15
	MOVO X15, X7
	PSLLQ $57, X15
	POR X10, X1
	POR X15, X1
	MOVO X1, 448(BX)
	PSRLQ $7, X7
	PSUBQ X11, X14
	MOVO X14, X13
	PSLLQ $36, X14
	POR X7, X14
	MOVO X14, 464(BX)
	PSRLQ $28, X13
	PSUBQ X6, X5
	PSLLQ $15, X5
	PSUBQ X8, X12
	MOVO X12, X9
	PSLLQ $58, X12
	POR X13, X5
	POR X12, X5
	MOVO X5, 480(BX)
	PSRLQ $6, X9
	MOVO 752(AX), X4
	MOVO 768(AX), X2
	MOVO 784(AX), X3
	MOVO 800(AX), X10
	MOVO X4, X15
	MOVO X2, X1
	MOVO X3, X11
	MOVO X10, X7
	PSUBQ X0, X4
	MOVO X4, X14
	PSLLQ $37, X4
	POR X9, X4
	MOVO X4, 496(BX)
	PSRLQ $27, X14
	PSUBQ X15, X2
	PSLLQ $16, X2
	PSUBQ X1, X3
	MOVO X3, X6
	PSLLQ $59, X3
	POR X14, X2
	POR X3, X2
	MOVO X2, 512(BX)
	PSRLQ $5, X6
	PSUBQ X11, X10
	MOVO X10, X8
	PSLLQ $38, X10
	POR X6, X10
	MOVO X10, 528(BX)
	PSRLQ $26, X8
	MOVO 816(AX), X13
	MOVO 832(AX), X12
	MOVO 848(AX), X5
	MOVO 864(AX), X0
	MOVO X13, X9
	MOVO X12, X4
	MOVO X5, X15
	MOVO X0, X1
	PSUBQ X7, X13
	PSLLQ $17, X13
	PSUBQ X9, X12
	MOVO X12, X14
	PSLLQ $60, X12
	POR X8, X13
	POR X12, X13
	MOVO X13, 544(BX)
	PSRLQ $4, X14
	PSUBQ X4, X5
	MOVO X5, X3
	PSLLQ $39, X5
	POR X14, X5
	MOVO X5, 560(BX)
	PSRLQ $25, X3
	PSUBQ X15, X0
	PSLLQ $18, X0
	MOVO 880(AX), X2
	MOVO 896(AX), X11
	MOVO 912(AX), X6
	MOVO 928(AX), X10
	MOVO X2, X7
	MOVO X11, X9
	MOVO X6, X8
	MOVO X10, X12
	PSUBQ X1, X2
	MOVO X2, X13
	PSLLQ $61, X2
	POR X3, X0
	POR X2, X0
	MOVO X0, 576(BX)
	PSRLQ $3, X13
	PSUBQ X7, X11
	MOVO X11, X4
	PSLLQ $40, X11
	POR X13, X11
	MOVO X11, 592(BX)
	PSRLQ $24, X4
	PSUBQ X9, X6
	PSLLQ $19, X6
	PSUBQ X8, X10
	MOVO X10, X14
	PSLLQ $62, X10
	POR X4, X6
	POR X10, X6
	MOVO X6, 608(BX)
	PSRLQ $2, X14
	MOVO 944(AX), X5
	MOVO 960(AX), X15
	MOVO 976(AX), X1
	MOVO 992(AX), X3
	MOVO X5, X2
	MOVO X15, X0
	MOVO X1, X7
	MOVO X3, X13
	PSUBQ X12, X5
	MOVO X5, X11
	PSLLQ $41, X5
	POR X14, X5
	MOVO X5, 624(BX)
	PSRLQ $23, X11
	PSUBQ X2, X15
	PSLLQ $20, X15
	PSUBQ X0, X1
	MOVO X1, X9
	PSLLQ $63, X1
	POR X11, X15
	POR X1, X15
	MOVO X15, 640(BX)
	PSRLQ $1, X9
	PSUBQ X7, X3
	MOVO X3, X8
	PSLLQ $42, X3
	POR X9, X3
	MOVO X3, 656(BX)
	PSRLQ $22, X8
	MOVO 1008(AX), X4
	MOVO X4, X10
	PSUBQ X13, X4
	PSLLQ $21, X4
	POR X8, X4
	MOVO X4, 672(BX)
	MOVO X10, 0(DX)
	RET

// func dpack64_44(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_44(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $44, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $20, X7
	PSUBQ X5, X3
	MOVO X3, X8
	PSLLQ $24, X3
	POR X7, X3
	MOVO X3, 16(BX)
	PSRLQ $40, X8
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	PSUBQ X6, X9
	PSLLQ $4, X9
	PSUBQ X13, X10
	MOVO X10, X4
	PSLLQ $48, X10
	POR X8, X9
	POR X10, X9
	MOVO X9, 32(BX)
	PSRLQ $16, X4
	PSUBQ X14, X11
	MOVO X11, X1
	PSLLQ $28, X11
	POR X4, X11
	MOVO X11, 48(BX)
	PSRLQ $36, X1
	PSUBQ X15, X12
	PSLLQ $8, X12
	MOVO 112(AX), X2
	MOVO 128(AX), X5
	MOVO 144(AX), X7
	MOVO 160(AX), X3
	MOVO X2, X6
	MOVO X5, X13
	MOVO X7, X8
	MOVO X3, X10
	PSUBQ X0, X2
	MOVO X2, X9
	PSLLQ $52, X2
	POR X1, X12
	POR X2, X12
	MOVO X12, 64(BX)
	PSRLQ $12, X9
	PSUBQ X6, X5
	MOVO X5, X14
	PSLLQ $32, X5
	POR X9, X5
	MOVO X5, 80(BX)
	PSRLQ $32, X14
	PSUBQ X13, X7
	PSLLQ $12, X7
	PSUBQ X8, X3
	MOVO X3, X4
	PSLLQ $56, X3
	POR X14, X7
	POR X3, X7
	MOVO X7, 96(BX)
	PSRLQ $8, X4
	MOVO 176(AX), X11
	MOVO 192(AX), X15
	MOVO 208(AX), X0
	MOVO 224(AX), X1
	MOVO X11, X2
	MOVO X15, X12
	MOVO X0, X6
	MOVO X1, X9
	PSUBQ X10, X11
	MOVO X11, X5
	PSLLQ $36, X11
	POR X4, X11
	MOVO X11, 112(BX)
	PSRLQ $28, X5
	PSUBQ X2, X15
	PSLLQ $16, X15
	PSUBQ X12, X0
	MOVO X0, X13
	PSLLQ $60, X0
	POR X5, X15
	POR X0, X15
	MOVO X15, 128(BX)
	PSRLQ $4, X13
	PSUBQ X6, X1
	MOVO X1, X8
	PSLLQ $40, X1
	POR X13, X1
	MOVO X1, 144(BX)
	PSRLQ $24, X8
	MOVO 240(AX), X14
	MOVO 256(AX), X3
	MOVO 272(AX), X7
	MOVO 288(AX), X10
	MOVO X14, X4
	MOVO X3, X11
	MOVO X7, X2
	MOVO X10, X12
	PSUBQ X9, X14
	PSLLQ $20, X14
	POR X8, X14
	MOVO X14, 160(BX)
	PSUBQ X4, X3
	PSUBQ X11, X7
	MOVO X7, X5
	PSLLQ $44, X7
	POR X3, X7
	MOVO X7, 176(BX)
	PSRLQ $20, X5
	PSUBQ X2, X10
	MOVO X10, X0
	PSLLQ $24, X10
	POR X5, X10
	MOVO X10, 192(BX)
	PSRLQ $40, X0
	MOVO 304(AX), X15
	MOVO 320(AX), X6
	MOVO 336(AX), X13
	MOVO 352(AX), X1
	MOVO X15, X9
	MOVO X6, X8
	MOVO X13, X14
	MOVO X1, X4
	PSUBQ X12, X15
	PSLLQ $4, X15
	PSUBQ X9, X6
	MOVO X6, X11
	PSLLQ $48, X6
	POR X0, X15
	POR X6, X15
	MOVO X15, 208(BX)
	PSRLQ $16, X11
	PSUBQ X8, X13
	MOVO X13, X3
	PSLLQ $28, X13
	POR X11, X13
	MOVO X13, 224(BX)
	PSRLQ $36, X3
	PSUBQ X14, X1
	PSLLQ $8, X1
	MOVO 368(AX), X7
	MOVO 384(AX), X2
	MOVO 400(AX), X5
	MOVO 416(AX), X10
	MOVO X7, X12
	MOVO X2, X9
	MOVO X5, X0
	MOVO X10, X6
	PSUBQ X4, X7
	MOVO X7, X15
	PSLLQ $52, X7
	POR X3, X1
	POR X7, X1
	MOVO X1, 240(BX)
	PSRLQ $12, X15
	PSUBQ X12, X2
	MOVO X2, X8
	PSLLQ $32, X2
	POR X15, X2
	MOVO X2, 256(BX)
	PSRLQ $32, X8
	PSUBQ X9, X5
	PSLLQ $12, X5
	PSUBQ X0, X10
	MOVO X10, X11
	PSLLQ $56, X10
	POR X8, X5
	POR X10, X5
	MOVO X5, 272(BX)
	PSRLQ $8, X11
	MOVO 432(AX), X13
	MOVO 448(AX), X14
	MOVO 464(AX), X4
	MOVO 480(AX), X3
	MOVO X13, X7
	MOVO X14, X1
	MOVO X4, X12
	MOVO X3, X15
	PSUBQ X6, X13
	MOVO X13, X2
	PSLLQ $36, X13
	POR X11, X13
	MOVO X13, 288(BX)
	PSRLQ $28, X2
	PSUBQ X7, X14
	PSLLQ $16, X14
	PSUBQ X1, X4
	MOVO X4, X9
	PSLLQ $60, X4
	POR X2, X14
	POR X4, X14
	MOVO X14, 304(BX)
	PSRLQ $4, X9
	PSUBQ X12, X3
	MOVO X3, X0
	PSLLQ $40, X3
	POR X9, X3
	MOVO X3, 320(BX)
	PSRLQ $24, X0
	MOVO 496(AX), X8
	MOVO 512(AX), X10
	MOVO 528(AX), X5
	MOVO 544(AX), X6
	MOVO X8, X11
	MOVO X10, X13
	MOVO X5, X7
	MOVO X6, X1
	PSUBQ X15, X8
	PSLLQ $20, X8
	POR X0, X8
	MOVO X8, 336(BX)
	PSUBQ X11, X10
	PSUBQ X13, X5
	MOVO X5, X2
	PSLLQ $44, X5
	POR X10, X5
	MOVO X5, 352(BX)
	PSRLQ $20, X2
	PSUBQ X7, X6
	MOVO X6, X4
	PSLLQ $24, X6
	POR X2, X6
	MOVO X6, 368(BX)
	PSRLQ $40, X4
	MOVO 560(AX), X14
	MOVO 576(AX), X12
	MOVO 592(AX), X9
	MOVO 608(AX), X3
	MOVO X14, X15
	MOVO X12, X0
	MOVO X9, X8
	MOVO X3, X11
	PSUBQ X1, X14
	PSLLQ $4, X14
	PSUBQ X15, X12
	MOVO X12, X13
	PSLLQ $48, X12
	POR X4, X14
	POR X12, X14
	MOVO X14, 384(BX)
	PSRLQ $16, X13
	PSUBQ X0, X9
	MOVO X9, X10
	PSLLQ $28, X9
	POR X13, X9
	MOVO X9, 400(BX)
	PSRLQ $36, X10
	PSUBQ X8, X3
	PSLLQ $8, X3
	MOVO 624(AX), X5
	MOVO 640(AX), X7
	MOVO 656(AX), X2
	MOVO 672(AX), X6
	MOVO X5, X1
	MOVO X7, X15
	MOVO X2, X4
	MOVO X6, X12
	PSUBQ X11, X5
	MOVO X5, X14
	PSLLQ $52, X5
	POR X10, X3
	POR X5, X3
	MOVO X3, 416(BX)
	PSRLQ $12, X14
	PSUBQ X1, X7
	MOVO X7, X0
	PSLLQ $32, X7
	POR X14, X7
	MOVO X7, 432(BX)
	PSRLQ $32, X0
	PSUBQ X15, X2
	PSLLQ $12, X2
	PSUBQ X4, X6
	MOVO X6, X13
	PSLLQ $56, X6
	POR X0, X2
	POR X6, X2
	MOVO X2, 448(BX)
	PSRLQ $8, X13
	MOVO 688(AX), X9
	MOVO 704(AX), X8
	MOVO 720(AX), X11
	MOVO 736(AX), X10
	MOVO X9, X5
	MOVO X8, X3
	MOVO X11, X1
	MOVO X10, X14
	PSUBQ X12, X9
	MOVO X9, X7
	PSLLQ $36, X9
	POR X13, X9
	MOVO X9, 464(BX)
	PSRLQ $28, X7
	PSUBQ X5, X8
	PSLLQ $16, X8
	PSUBQ X3, X11
	MOVO X11, X15
	PSLLQ $60, X11
	POR X7, X8
	POR X11, X8
	MOVO X8, 480(BX)
	PSRLQ $4, X15
	PSUBQ X1, X10
	MOVO X10, X4
	PSLLQ $40, X10
	POR X15, X10
	MOVO X10, 496(BX)
	PSRLQ $24, X4
	MOVO 752(AX), X0
	MOVO 768(AX), X6
	MOVO 784(AX), X2
	MOVO 800(AX), X12
	MOVO X0, X13
	MOVO X6, X9
	MOVO X2, X5
	MOVO X12, X3
	PSUBQ X14, X0
	PSLLQ $20, X0
	POR X4, X0
	MOVO X0, 512(BX)
	PSUBQ X13, X6
	PSUBQ X9, X2
	MOVO X2, X7
	PSLLQ $44, X2
	POR X6, X2
	MOVO X2, 528(BX)
	PSRLQ $20, X7
	PSUBQ X5, X12
	MOVO X12, X11
	PSLLQ $24, X12
	POR X7, X12
	MOVO X12, 544(BX)
	PSRLQ $40, X11
	MOVO 816(AX), X8
	MOVO 832(AX), X1
	MOVO 848(AX), X15
	MOVO 864(AX), X10
	MOVO X8, X14
	MOVO X1, X4
	MOVO X15, X0
	MOVO X10, X13
	PSUBQ X3, X8
	PSLLQ $4, X8
	PSUBQ X14, X1
	MOVO X1, X9
	PSLLQ $48, X1
	POR X11, X8
	POR X1, X8
	MOVO X8, 560(BX)
	PSRLQ $16, X9
	PSUBQ X4, X15
	MOVO X15, X6
	PSLLQ $28, X15
	POR X9, X15
	MOVO X15, 576(BX)
	PSRLQ $36, X6
	PSUBQ X0, X10
	PSLLQ $8, X10
	MOVO 880(AX), X2
	MOVO 896(AX), X5
	MOVO 912(AX), X7
	MOVO 928(AX), X12
	MOVO X2, X3
	MOVO X5, X14
	MOVO X7, X11
	MOVO X12, X1
	PSUBQ X13, X2
	MOVO X2, X8
	PSLLQ $52, X2
	POR X6, X10
	POR X2, X10
	MOVO X10, 592(BX)
	PSRLQ $12, X8
	PSUBQ X3, X5
	MOVO X5, X4
	PSLLQ $32, X5
	POR X8, X5
	MOVO X5, 608(BX)
	PSRLQ $32, X4
	PSUBQ X14, X7
	PSLLQ $12, X7
	PSUBQ X11, X12
	MOVO X12, X9
	PSLLQ $56, X12
	POR X4, X7
	POR X12, X7
	MOVO X7, 624(BX)
	PSRLQ $8, X9
	MOVO 944(AX), X15
	MOVO 960(AX), X0
	MOVO 976(AX), X13
	MOVO 992(AX), X6
	MOVO X15, X2
	MOVO X0, X10
	MOVO X13, X3
	MOVO X6, X8
	PSUBQ X1, X15
	MOVO X15, X5
	PSLLQ $36, X15
	POR X9, X15
	MOVO X15, 640(BX)
	PSRLQ $28, X5
	PSUBQ X2, X0
	PSLLQ $16, X0
	PSUBQ X10, X13
	MOVO X13, X14
	PSLLQ $60, X13
	POR X5, X0
	POR X13, X0
	MOVO X0, 656(BX)
	PSRLQ $4, X14
	PSUBQ X3, X6
	MOVO X6, X11
	PSLLQ $40, X6
	POR X14, X6
	MOVO X6, 672(BX)
	PSRLQ $24, X11
	MOVO 1008(AX), X4
	MOVO X4, X12
	PSUBQ X8, X4
	PSLLQ $20, X4
	POR X11, X4
	MOVO X4, 688(BX)
	MOVO X12, 0(DX)
	RET

// func dpack64_45(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_45(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $45, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $19, X7
	PSUBQ X5, X3
	MOVO X3, X8
	PSLLQ $26, X3
	POR X7, X3
	MOVO X3, 16(BX)
	PSRLQ $38, X8
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	PSUBQ X6, X9
	PSLLQ $7, X9
	PSUBQ X13, X10
	MOVO X10, X4
	PSLLQ $52, X10
	POR X8, X9
	POR X10, X9
	MOVO X9, 32(BX)
	PSRLQ $12, X4
	PSUBQ X14, X11
	MOVO X11, X1
	PSLLQ $33, X11
	POR X4, X11
	MOVO X11, 48(BX)
	PSRLQ $31, X1
	PSUBQ X15, X12
	PSLLQ $14, X12
	MOVO 112(AX), X2
	MOVO 128(AX), X5
	MOVO 144(AX), X7
	MOVO 160(AX), X3
	MOVO X2, X6
	MOVO X5, X13
	MOVO X7, X8
	MOVO X3, X10
	PSUBQ X0, X2
	MOVO X2, X9
	PSLLQ $59, X2
	POR X1, X12
	POR X2, X12
	MOVO X12, 64(BX)
	PSRLQ $5, X9
	PSUBQ X6, X5
	MOVO X5, X14
	PSLLQ $40, X5
	POR X9, X5
	MOVO X5, 80(BX)
	PSRLQ $24, X14
	PSUBQ X13, X7
	MOVO X7, X4
	PSLLQ $21, X7
	POR X14, X7
	MOVO X7, 96(BX)
	PSRLQ $43, X4
	PSUBQ X8, X3
	PSLLQ $2, X3
	MOVO 176(AX), X11
	MOVO 192(AX), X15
	MOVO 208(AX), X0
	MOVO 224(AX), X1
	MOVO X11, X2
	MOVO X15, X12
	MOVO X0, X6
	MOVO X1, X9
	PSUBQ X10, X11
	MOVO X11, X5
	PSLLQ $47, X11
	POR X4, X3
	POR X11, X3
	MOVO X3, 112(BX)
	PSRLQ $17, X5
	PSUBQ X2, X15
	MOVO X15, X13
	PSLLQ $28, X15
	POR X5, X15
	MOVO X15, 128(BX)
	PSRLQ $36, X13
	PSUBQ X12, X0
	PSLLQ $9, X0
	PSUBQ X6, X1
	MOVO X1, X14
	PSLLQ $54, X1
	POR X13, X0
	POR X1, X0
	MOVO X0, 144(BX)
	PSRLQ $10, X14
	MOVO 240(AX), X7
	MOVO 256(AX), X8
	MOVO 272(AX), X10
	MOVO 288(AX), X4
	MOVO X7, X11
	MOVO X8, X3
	MOVO X10, X2
	MOVO X4, X5
	PSUBQ X9, X7
	MOVO X7, X15
	PSLLQ $35, X7
	POR X14, X7
	MOVO X7, 160(BX)
	PSRLQ $29, X15
	PSUBQ X11, X8
	PSLLQ $16, X8
	PSUBQ X3, X10
	MOVO X10, X12
	PSLLQ $61, X10
	POR X15, X8
	POR X10, X8
	MOVO X8, 176(BX)
	PSRLQ $3, X12
	PSUBQ X2, X4
	MOVO X4, X6
	PSLLQ $42, X4
	POR X12, X4
	MOVO X4, 192(BX)
	PSRLQ $22, X6
	MOVO 304(AX), X13
	MOVO 320(AX), X1
	MOVO 336(AX), X0
	MOVO 352(AX), X9
	MOVO X13, X14
	MOVO X1, X7
	MOVO X0, X11
	MOVO X9, X3
	PSUBQ X5, X13
	MOVO X13, X15
	PSLLQ $23, X13
	POR X6, X13
	MOVO X13, 208(BX)
	PSRLQ $41, X15
	PSUBQ X14, X1
	PSLLQ $4, X1
	PSUBQ X7, X0
	MOVO X0, X10
	PSLLQ $49, X0
	POR X15, X1
	POR X0, X1
	MOVO X1, 224(BX)
	PSRLQ $15, X10
	PSUBQ X11, X9
	MOVO X9, X8
	PSLLQ $30, X9
	POR X10, X9
	MOVO X9, 240(BX)
	PSRLQ $34, X8
	MOVO 368(AX), X2
	MOVO 384(AX), X12
	MOVO 400(AX), X4
	MOVO 416(AX), X5
	MOVO X2, X6
	MOVO X12, X13
	MOVO X4, X14
	MOVO X5, X7
	PSUBQ X3, X2
	PSLLQ $11, X2
	PSUBQ X6, X12
	MOVO X12, X15
	PSLLQ $56, X12
	POR X8, X2
	POR X12, X2
	MOVO X2, 256(BX)
	PSRLQ $8, X15
	PSUBQ X13, X4
	MOVO X4, X0
	PSLLQ $37, X4
	POR X15, X4
	MOVO X4, 272(BX)
	PSRLQ $27, X0
	PSUBQ X14, X5
	PSLLQ $18, X5
	MOVO 432(AX), X1
	MOVO 448(AX), X11
	MOVO 464(AX), X10
	MOVO 480(AX), X9
	MOVO X1, X3
	MOVO X11, X6
	MOVO X10, X8
	MOVO X9, X12
	PSUBQ X7, X1
	MOVO X1, X2
	PSLLQ $63, X1
	POR X0, X5
	POR X1, X5
	MOVO X5, 288(BX)
	PSRLQ $1, X2
	PSUBQ X3, X11
	MOVO X11, X13
	PSLLQ $44, X11
	POR X2, X11
	MOVO X11, 304(BX)
	PSRLQ $20, X13
	PSUBQ X6, X10
	MOVO X10, X15
	PSLLQ $25, X10
	POR X13, X10
	MOVO X10, 320(BX)
	PSRLQ $39, X15
	PSUBQ X8, X9
	PSLLQ $6, X9
	MOVO 496(AX), X4
	MOVO 512(AX), X14
	MOVO 528(AX), X7
	MOVO 544(AX), X0
	MOVO X4, X1
	MOVO X14, X5
	MOVO X7, X3
	MOVO X0, X2
	PSUBQ X12, X4
	MOVO X4, X11
	PSLLQ $51, X4
	POR X15, X9
	POR X4, X9
	MOVO X9, 336(BX)
	PSRLQ $13, X11
	PSUBQ X1, X14
	MOVO X14, X6
	PSLLQ $32, X14
	POR X11, X14
	MOVO X14, 352(BX)
	PSRLQ $32, X6
	PSUBQ X5, X7
	PSLLQ $13, X7
	PSUBQ X3, X0
	MOVO X0, X13
	PSLLQ $58, X0
	POR X6, X7
	POR X0, X7
	MOVO X7, 368(BX)
	PSRLQ $6, X13
	MOVO 560(AX), X10
	MOVO 576(AX), X8
	MOVO 592(AX), X12
	MOVO 608(AX), X15
	MOVO X10, X4
	MOVO X8, X9
	MOVO X12, X1
	MOVO X15, X11
	PSUBQ X2, X10
	MOVO X10, X14
	PSLLQ $39, X10
	POR X13, X10
	MOVO X10, 384(BX)
	PSRLQ $25, X14
	PSUBQ X4, X8
	MOVO X8, X5
	PSLLQ $20, X8
	POR X14, X8
	MOVO X8, 400(BX)
	PSRLQ $44, X5
	PSUBQ X9, X12
	PSLLQ $1, X12
	PSUBQ X1, X15
	MOVO X15, X3
	PSLLQ $46, X15
	POR X5, X12
	POR X15, X12
	MOVO X12, 416(BX)
	PSRLQ $18, X3
	MOVO 624(AX), X6
	MOVO 640(AX), X0
	MOVO 656(AX), X7
	MOVO 672(AX), X2
	MOVO X6, X13
	MOVO X0, X10
	MOVO X7, X4
	MOVO X2, X14
	PSUBQ X11, X6
	MOVO X6, X8
	PSLLQ $27, X6
	POR X3, X6
	MOVO X6, 432(BX)
	PSRLQ $37, X8
	PSUBQ X13, X0
	PSLLQ $8, X0
	PSUBQ X10, X7
	MOVO X7, X9
	PSLLQ $53, X7
	POR X8, X0
	POR X7, X0
	MOVO X0, 448(BX)
	PSRLQ $11, X9
	PSUBQ X4, X2
	MOVO X2, X1
	PSLLQ $34, X2
	POR X9, X2
	MOVO X2, 464(BX)
	PSRLQ $30, X1
	MOVO 688(AX), X5
	MOVO 704(AX), X15
	MOVO 720(AX), X12
	MOVO 736(AX), X11
	MOVO X5, X3
	MOVO X15, X6
	MOVO X12, X13
	MOVO X11, X10
	PSUBQ X14, X5
	PSLLQ $15, X5
	PSUBQ X3, X15
	MOVO X15, X8
	PSLLQ $60, X15
	POR X1, X5
	POR X15, X5
	MOVO X5, 480(BX)
	PSRLQ $4, X8
	PSUBQ X6, X12
	MOVO X12, X7
	PSLLQ $41, X12
	POR X8, X12
	MOVO X12, 496(BX)
	PSRLQ $23, X7
	PSUBQ X13, X11
	MOVO X11, X0
	PSLLQ $22, X11
	POR X7, X11
	MOVO X11, 512(BX)
	PSRLQ $42, X0
	MOVO 752(AX), X4
	MOVO 768(AX), X9
	MOVO 784(AX), X2
	MOVO 800(AX), X14
	MOVO X4, X3
	MOVO X9, X1
	MOVO X2, X15
	MOVO X14, X5
	PSUBQ X10, X4
	PSLLQ $3, X4
	PSUBQ X3, X9
	MOVO X9, X6
	PSLLQ $48, X9
	POR X0, X4
	POR X9, X4
	MOVO X4, 528(BX)
	PSRLQ $16, X6
	PSUBQ X1, X2
	MOVO X2, X8
	PSLLQ $29, X2
	POR X6, X2
	MOVO X2, 544(BX)
	PSRLQ $35, X8
	PSUBQ X15, X14
	PSLLQ $10, X14
	MOVO 816(AX), X12
	MOVO 832(AX), X13
	MOVO 848(AX), X7
	MOVO 864(AX), X11
	MOVO X12, X10
	MOVO X13, X3
	MOVO X7, X0
	MOVO X11, X9
	PSUBQ X5, X12
	MOVO X12, X4
	PSLLQ $55, X12
	POR X8, X14
	POR X12, X14
	MOVO X14, 560(BX)
	PSRLQ $9, X4
	PSUBQ X10, X13
	MOVO X13, X1
	PSLLQ $36, X13
	POR X4, X13
	MOVO X13, 576(BX)
	PSRLQ $28, X1
	PSUBQ X3, X7
	PSLLQ $17, X7
	PSUBQ X0, X11
	MOVO X11, X6
	PSLLQ $62, X11
	POR X1, X7
	POR X11, X7
	MOVO X7, 592(BX)
	PSRLQ $2, X6
	MOVO 880(AX), X2
	MOVO 896(AX), X15
	MOVO 912(AX), X5
	MOVO 928(AX), X8
	MOVO X2, X12
	MOVO X15, X14
	MOVO X5, X10
	MOVO X8, X4
	PSUBQ X9, X2
	MOVO X2, X13
	PSLLQ $43, X2
	POR X6, X2
	MOVO X2, 608(BX)
	PSRLQ $21, X13
	PSUBQ X12, X15
	MOVO X15, X3
	PSLLQ $24, X15
	POR X13, X15
	MOVO X15, 624(BX)
	PSRLQ $40, X3
	PSUBQ X14, X5
	PSLLQ $5, X5
	PSUBQ X10, X8
	MOVO X8, X0
	PSLLQ $50, X8
	POR X3, X5
	POR X8, X5
	MOVO X5, 640(BX)
	PSRLQ $14, X0
	MOVO 944(AX), X1
	MOVO 960(AX), X11
	MOVO 976(AX), X7
	MOVO 992(AX), X9
	MOVO X1, X6
	MOVO X11, X2
	MOVO X7, X12
	MOVO X9, X13
	PSUBQ X4, X1
	MOVO X1, X15
	PSLLQ $31, X1
	POR X0, X1
	MOVO X1, 656(BX)
	PSRLQ $33, X15
	PSUBQ X6, X11
	PSLLQ $12, X11
	PSUBQ X2, X7
	MOVO X7, X14
	PSLLQ $57, X7
	POR X15, X11
	POR X7, X11
	MOVO X11, 672(BX)
	PSRLQ $7, X14
	PSUBQ X12, X9
	MOVO X9, X10
	PSLLQ $38, X9
	POR X14, X9
	MOVO X9, 688(BX)
	PSRLQ $26, X10
	MOVO 1008(AX), X3
	MOVO X3, X8
	PSUBQ X13, X3
	PSLLQ $19, X3
	POR X10, X3
	MOVO X3, 704(BX)
	MOVO X8, 0(DX)
	RET

// func dpack64_46(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_46(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $46, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $18, X7
	PSUBQ X5, X3
	MOVO X3, X8
	PSLLQ $28, X3
	POR X7, X3
	MOVO X3, 16(BX)
	PSRLQ $36, X8
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	PSUBQ X6, X9
	PSLLQ $10, X9
	PSUBQ X13, X10
	MOVO X10, X4
	PSLLQ $56, X10
	POR X8, X9
	POR X10, X9
	MOVO X9, 32(BX)
	PSRLQ $8, X4
	PSUBQ X14, X11
	MOVO X11, X1
	PSLLQ $38, X11
	POR X4, X11
	MOVO X11, 48(BX)
	PSRLQ $26, X1
	PSUBQ X15, X12
	MOVO X12, X2
	PSLLQ $20, X12
	POR X1, X12
	MOVO X12, 64(BX)
	PSRLQ $44, X2
	MOVO 112(AX), X5
	MOVO 128(AX), X7
	MOVO 144(AX), X3
	MOVO 160(AX), X6
	MOVO X5, X13
	MOVO X7, X8
	MOVO X3, X10
	MOVO X6, X9
	PSUBQ X0, X5
	PSLLQ $2, X5
	PSUBQ X13, X7
	MOVO X7, X14
	PSLLQ $48, X7
	POR X2, X5
	POR X7, X5
	MOVO X5, 80(BX)
	PSRLQ $16, X14
	PSUBQ X8, X3
	MOVO X3, X4
	PSLLQ $30, X3
	POR X14, X3
	MOVO X3, 96(BX)
	PSRLQ $34, X4
	PSUBQ X10, X6
	PSLLQ $12, X6
	MOVO 176(AX), X11
	MOVO 192(AX), X15
	MOVO 208(AX), X1
	MOVO 224(AX), X12
	MOVO X11, X0
	MOVO X15, X13
	MOVO X1, X2
	MOVO X12, X7
	PSUBQ X9, X11
	MOVO X11, X5
	PSLLQ $58, X11
	POR X4, X6
	POR X11, X6
	MOVO X6, 112(BX)
	PSRLQ $6, X5
	PSUBQ X0, X15
	MOVO X15, X8
	PSLLQ $40, X15
	POR X5, X15
	MOVO X15, 128(BX)
	PSRLQ $24, X8
	PSUBQ X13, X1
	MOVO X1, X14
	PSLLQ $22, X1
	POR X8, X1
	MOVO X1, 144(BX)
	PSRLQ $42, X14
	PSUBQ X2, X12
	PSLLQ $4, X12
	MOVO 240(AX), X3
	MOVO 256(AX), X10
	MOVO 272(AX), X9
	MOVO 288(AX), X4
	MOVO X3, X11
	MOVO X10, X6
	MOVO X9, X0
	MOVO X4, X5
	PSUBQ X7, X3
	MOVO X3, X15
	PSLLQ $50, X3
	POR X14, X12
	POR X3, X12
	MOVO X12, 160(BX)
	PSRLQ $14, X15
	PSUBQ X11, X10
	MOVO X10, X13
	PSLLQ $32, X10
	POR X15, X10
	MOVO X10, 176(BX)
	PSRLQ $32, X13
	PSUBQ X6, X9
	PSLLQ $14, X9
	PSUBQ X0, X4
	MOVO X4, X8
	PSLLQ $60, X4
	POR X13, X9
	POR X4, X9
	MOVO X9, 192(BX)
	PSRLQ $4, X8
	MOVO 304(AX), X1
	MOVO 320(AX), X2
	MOVO 336(AX), X7
	MOVO 352(AX), X14
	MOVO X1, X3
	MOVO X2, X12
	MOVO X7, X11
	MOVO X14, X15
	PSUBQ X5, X1
	MOVO X1, X10
	PSLLQ $42, X1
	POR X8, X1
	MOVO X1, 208(BX)
	PSRLQ $22, X10
	PSUBQ X3, X2
	MOVO X2, X6
	PSLLQ $24, X2
	POR X10, X2
	MOVO X2, 224(BX)
	PSRLQ $40, X6
	PSUBQ X12, X7
	PSLLQ $6, X7
	PSUBQ X11, X14
	MOVO X14, X0
	PSLLQ $52, X14
	POR X6, X7
	POR X14, X7
	MOVO X7, 240(BX)
	PSRLQ $12, X0
	MOVO 368(AX), X13
	MOVO 384(AX), X4
	MOVO 400(AX), X9
	MOVO 416(AX), X5
	MOVO X13, X8
	MOVO X4, X1
	MOVO X9, X3
	MOVO X5, X10
	PSUBQ X15, X13
	MOVO X13, X2
	PSLLQ $34, X13
	POR X0, X13
	MOVO X13, 256(BX)
	PSRLQ $30, X2
	PSUBQ X8, X4
	PSLLQ $16, X4
	PSUBQ X1, X9
	MOVO X9, X12
	PSLLQ $62, X9
	POR X2, X4
	POR X9, X4
	MOVO X4, 272(BX)
	PSRLQ $2, X12
	PSUBQ X3, X5
	MOVO X5, X11
	PSLLQ $44, X5
	POR X12, X5
	MOVO X5, 288(BX)
	PSRLQ $20, X11
	MOVO 432(AX), X6
	MOVO 448(AX), X14
	MOVO 464(AX), X7
	MOVO 480(AX), X15
	MOVO X6, X0
	MOVO X14, X13
	MOVO X7, X8
	MOVO X15, X1
	PSUBQ X10, X6
	MOVO X6, X2
	PSLLQ $26, X6
	POR X11, X6
	MOVO X6, 304(BX)
	PSRLQ $38, X2
	PSUBQ X0, X14
	PSLLQ $8, X14
	PSUBQ X13, X7
	MOVO X7, X9
	PSLLQ $54, X7
	POR X2, X14
	POR X7, X14
	MOVO X14, 320(BX)
	PSRLQ $10, X9
	PSUBQ X8, X15
	MOVO X15, X4
	PSLLQ $36, X15
	POR X9, X15
	MOVO X15, 336(BX)
	PSRLQ $28, X4
	MOVO 496(AX), X3
	MOVO 512(AX), X12
	MOVO 528(AX), X5
	MOVO 544(AX), X10
	MOVO X3, X11
	MOVO X12, X6
	MOVO X5, X0
	MOVO X10, X13
	PSUBQ X1, X3
	PSLLQ $18, X3
	POR X4, X3
	MOVO X3, 352(BX)
	PSUBQ X11, X12
	PSUBQ X6, X5
	MOVO X5, X2
	PSLLQ $46, X5
	POR X12, X5
	MOVO X5, 368(BX)
	PSRLQ $18, X2
	PSUBQ X0, X10
	MOVO X10, X7
	PSLLQ $28, X10
	POR X2, X10
	MOVO X10, 384(BX)
	PSRLQ $36, X7
	MOVO 560(AX), X14
	MOVO 576(AX), X8
	MOVO 592(AX), X9
	MOVO 608(AX), X15
	MOVO X14, X1
	MOVO X8, X4
	MOVO X9, X3
	MOVO X15, X11
	PSUBQ X13, X14
	PSLLQ $10, X14
	PSUBQ X1, X8
	MOVO X8, X6
	PSLLQ $56, X8
	POR X7, X14
	POR X8, X14
	MOVO X14, 400(BX)
	PSRLQ $8, X6
	PSUBQ X4, X9
	MOVO X9, X12
	PSLLQ $38, X9
	POR X6, X9
	MOVO X9, 416(BX)
	PSRLQ $26, X12
	PSUBQ X3, X15
	MOVO X15, X5
	PSLLQ $20, X15
	POR X12, X15
	MOVO X15, 432(BX)
	PSRLQ $44, X5
	MOVO 624(AX), X0
	MOVO 640(AX), X2
	MOVO 656(AX), X10
	MOVO 672(AX), X13
	MOVO X0, X1
	MOVO X2, X7
	MOVO X10, X8
	MOVO X13, X14
	PSUBQ X11, X0
	PSLLQ $2, X0
	PSUBQ X1, X2
	MOVO X2, X4
	PSLLQ $48, X2
	POR X5, X0
	POR X2, X0
	MOVO X0, 448(BX)
	PSRLQ $16, X4
	PSUBQ X7, X10
	MOVO X10, X6
	PSLLQ $30, X10
	POR X4, X10
	MOVO X10, 464(BX)
	PSRLQ $34, X6
	PSUBQ X8, X13
	PSLLQ $12, X13
	MOVO 688(AX), X9
	MOVO 704(AX), X3
	MOVO 720(AX), X12
	MOVO 736(AX), X15
	MOVO X9, X11
	MOVO X3, X1
	MOVO X12, X5
	MOVO X15, X2
	PSUBQ X14, X9
	MOVO X9, X0
	PSLLQ $58, X9
	POR X6, X13
	POR X9, X13
	MOVO X13, 480(BX)
	PSRLQ $6, X0
	PSUBQ X11, X3
	MOVO X3, X7
	PSLLQ $40, X3
	POR X0, X3
	MOVO X3, 496(BX)
	PSRLQ $24, X7
	PSUBQ X1, X12
	MOVO X12, X4
	PSLLQ $22, X12
	POR X7, X12
	MOVO X12, 512(BX)
	PSRLQ $42, X4
	PSUBQ X5, X15
	PSLLQ $4, X15
	MOVO 752(AX), X10
	MOVO 768(AX), X8
	MOVO 784(AX), X14
	MOVO 800(AX), X6
	MOVO X10, X9
	MOVO X8, X13
	MOVO X14, X11
	MOVO X6, X0
	PSUBQ X2, X10
	MOVO X10, X3
	PSLLQ $50, X10
	POR X4, X15
	POR X10, X15
	MOVO X15, 528(BX)
	PSRLQ $14, X3
	PSUBQ X9, X8
	MOVO X8, X1
	PSLLQ $32, X8
	POR X3, X8
	MOVO X8, 544(BX)
	PSRLQ $32, X1
	PSUBQ X13, X14
	PSLLQ $14, X14
	PSUBQ X11, X6
	MOVO X6, X7
	PSLLQ $60, X6
	POR X1, X14
	POR X6, X14
	MOVO X14, 560(BX)
	PSRLQ $4, X7
	MOVO 816(AX), X12
	MOVO 832(AX), X5
	MOVO 848(AX), X2
	MOVO 864(AX), X4
	MOVO X12, X10
	MOVO X5, X15
	MOVO X2, X9
	MOVO X4, X3
	PSUBQ X0, X12
	MOVO X12, X8
	PSLLQ $42, X12
	POR X7, X12
	MOVO X12, 576(BX)
	PSRLQ $22, X8
	PSUBQ X10, X5
	MOVO X5, X13
	PSLLQ $24, X5
	POR X8, X5
	MOVO X5, 592(BX)
	PSRLQ $40, X13
	PSUBQ X15, X2
	PSLLQ $6, X2
	PSUBQ X9, X4
	MOVO X4, X11
	PSLLQ $52, X4
	POR X13, X2
	POR X4, X2
	MOVO X2, 608(BX)
	PSRLQ $12, X11
	MOVO 880(AX), X1
	MOVO 896(AX), X6
	MOVO 912(AX), X14
	MOVO 928(AX), X0
	MOVO X1, X7
	MOVO X6, X12
	MOVO X14, X10
	MOVO X0, X8
	PSUBQ X3, X1
	MOVO X1, X5
	PSLLQ $34, X1
	POR X11, X1
	MOVO X1, 624(BX)
	PSRLQ $30, X5
	PSUBQ X7, X6
	PSLLQ $16, X6
	PSUBQ X12, X14
	MOVO X14, X15
	PSLLQ $62, X14
	POR X5, X6
	POR X14, X6
	MOVO X6, 640(BX)
	PSRLQ $2, X15
	PSUBQ X10, X0
	MOVO X0, X9
	PSLLQ $44, X0
	POR X15, X0
	MOVO X0, 656(BX)
	PSRLQ $20, X9
	MOVO 944(AX), X13
	MOVO 960(AX), X4
	MOVO 976(AX), X2
	MOVO 992(AX), X3
	MOVO X13, X11
	MOVO X4, X1
	MOVO X2, X7
	MOVO X3, X12
	PSUBQ X8, X13
	MOVO X13, X5
	PSLLQ $26, X13
	POR X9, X13
	MOVO X13, 672(BX)
	PSRLQ $38, X5
	PSUBQ X11, X4
	PSLLQ $8, X4
	PSUBQ X1, X2
	MOVO X2, X14
	PSLLQ $54, X2
	POR X5, X4
	POR X2, X4
	MOVO X4, 688(BX)
	PSRLQ $10, X14
	PSUBQ X7, X3
	MOVO X3, X6
	PSLLQ $36, X3
	POR X14, X3
	MOVO X3, 704(BX)
	PSRLQ $28, X6
	MOVO 1008(AX), X10
	MOVO X10, X15
	PSUBQ X12, X10
	PSLLQ $18, X10
	POR X6, X10
	MOVO X10, 720(BX)
	MOVO X15, 0(DX)
	RET

// func dpack64_47(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_47(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $47, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $17, X7
	PSUBQ X5, X3
	MOVO X3, X8
	PSLLQ $30, X3
	POR X7, X3
	MOVO X3, 16(BX)
	PSRLQ $34, X8
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	PSUBQ X6, X9
	PSLLQ $13, X9
	PSUBQ X13, X10
	MOVO X10, X4
	PSLLQ $60, X10
	POR X8, X9
	POR X10, X9
	MOVO X9, 32(BX)
	PSRLQ $4, X4
	PSUBQ X14, X11
	MOVO X11, X1
	PSLLQ $43, X11
	POR X4, X11
	MOVO X11, 48(BX)
	PSRLQ $21, X1
	PSUBQ X15, X12
	MOVO X12, X2
	PSLLQ $26, X12
	POR X1, X12
	MOVO X12, 64(BX)
	PSRLQ $38, X2
	MOVO 112(AX), X5
	MOVO 128(AX), X7
	MOVO 144(AX), X3
	MOVO 160(AX), X6
	MOVO X5, X13
	MOVO X7, X8
	MOVO X3, X10
	MOVO X6, X9
	PSUBQ X0, X5
	PSLLQ $9, X5
	PSUBQ X13, X7
	MOVO X7, X14
	PSLLQ $56, X7
	POR X2, X5
	POR X7, X5
	MOVO X5, 80(BX)
	PSRLQ $8, X14
	PSUBQ X8, X3
	MOVO X3, X4
	PSLLQ $39, X3
	POR X14, X3
	MOVO X3, 96(BX)
	PSRLQ $25, X4
	PSUBQ X10, X6
	MOVO X6, X11
	PSLLQ $22, X6
	POR X4, X6
	MOVO X6, 112(BX)
	PSRLQ $42, X11
	MOVO 176(AX), X15
	MOVO 192(AX), X1
	MOVO 208(AX), X12
	MOVO 224(AX), X0
	MOVO X15, X13
	MOVO X1, X2
	MOVO X12, X7
	MOVO X0, X5
	PSUBQ X9, X15
	PSLLQ $5, X15
	PSUBQ X13, X1
	MOVO X1, X8
	PSLLQ $52, X1
	POR X11, X15
	POR X1, X15
	MOVO X15, 128(BX)
	PSRLQ $12, X8
	PSUBQ X2, X12
	MOVO X12, X14
	PSLLQ $35, X12
	POR X8, X12
	MOVO X12, 144(BX)
	PSRLQ $29, X14
	PSUBQ X7, X0
	MOVO X0, X3
	PSLLQ $18, X0
	POR X14, X0
	MOVO X0, 160(BX)
	PSRLQ $46, X3
	MOVO 240(AX), X10
	MOVO 256(AX), X4
	MOVO 272(AX), X6
	MOVO 288(AX), X9
	MOVO X10, X13
	MOVO X4, X11
	MOVO X6, X1
	MOVO X9, X15
	PSUBQ X5, X10
	PSLLQ $1, X10
	PSUBQ X13, X4
	MOVO X4, X2
	PSLLQ $48, X4
	POR X3, X10
	POR X4, X10
	MOVO X10, 176(BX)
	PSRLQ $16, X2
	PSUBQ X11, X6
	MOVO X6, X8
	PSLLQ $31, X6
	POR X2, X6
	MOVO X6, 192(BX)
	PSRLQ $33, X8
	PSUBQ X1, X9
	PSLLQ $14, X9
	MOVO 304(AX), X12
	MOVO 320(AX), X7
	MOVO 336(AX), X14
	MOVO 352(AX), X0
	MOVO X12, X5
	MOVO X7, X13
	MOVO X14, X3
	MOVO X0, X4
	PSUBQ X15, X12
	MOVO X12, X10
	PSLLQ $61, X12
	POR X8, X9
	POR X12, X9
	MOVO X9, 208(BX)
	PSRLQ $3, X10
	PSUBQ X5, X7
	MOVO X7, X11
	PSLLQ $44, X7
	POR X10, X7
	MOVO X7, 224(BX)
	PSRLQ $20, X11
	PSUBQ X13, X14
	MOVO X14, X2
	PSLLQ $27, X14
	POR X11, X14
	MOVO X14, 240(BX)
	PSRLQ $37, X2
	PSUBQ X3, X0
	PSLLQ $10, X0
	MOVO 368(AX), X6
	MOVO 384(AX), X1
	MOVO 400(AX), X15
	MOVO 416(AX), X8
	MOVO X6, X12
	MOVO X1, X9
	MOVO X15, X5
	MOVO X8, X10
	PSUBQ X4, X6
	MOVO X6, X7
	PSLLQ $57, X6
	POR X2, X0
	POR X6, X0
	MOVO X0, 256(BX)
	PSRLQ $7, X7
	PSUBQ X12, X1
	MOVO X1, X13
	PSLLQ $40, X1
	POR X7, X1
	MOVO X1, 272(BX)
	PSRLQ $24, X13
	PSUBQ X9, X15
	MOVO X15, X11
	PSLLQ $23, X15
	POR X13, X15
	MOVO X15, 288(BX)
	PSRLQ $41, X11
	PSUBQ X5, X8
	PSLLQ $6, X8
	MOVO 432(AX), X14
	MOVO 448(AX), X3
	MOVO 464(AX), X4
	MOVO 480(AX), X2
	MOVO X14, X6
	MOVO X3, X0
	MOVO X4, X12
	MOVO X2, X7
	PSUBQ X10, X14
	MOVO X14, X1
	PSLLQ $53, X14
	POR X11, X8
	POR X14, X8
	MOVO X8, 304(BX)
	PSRLQ $11, X1
	PSUBQ X6, X3
	MOVO X3, X9
	PSLLQ $36, X3
	POR X1, X3
	MOVO X3, 320(BX)
	PSRLQ $28, X9
	PSUBQ X0, X4
	MOVO X4, X13
	PSLLQ $19, X4
	POR X9, X4
	MOVO X4, 336(BX)
	PSRLQ $45, X13
	PSUBQ X12, X2
	PSLLQ $2, X2
	MOVO 496(AX), X15
	MOVO 512(AX), X5
	MOVO 528(AX), X10
	MOVO 544(AX), X11
	MOVO X15, X14
	MOVO X5, X8
	MOVO X10, X6
	MOVO X11, X1
	PSUBQ X7, X15
	MOVO X15, X3
	PSLLQ $49, X15
	POR X13, X2
	POR X15, X2
	MOVO X2, 352(BX)
	PSRLQ $15, X3
	PSUBQ X14, X5
	MOVO X5, X0
	PSLLQ $32, X5
	POR X3, X5
	MOVO X5, 368(BX)
	PSRLQ $32, X0
	PSUBQ X8, X10
	PSLLQ $15, X10
	PSUBQ X6, X11
	MOVO X11, X9
	PSLLQ $62, X11
	POR X0, X10
	POR X11, X10
	MOVO X10, 384(BX)
	PSRLQ $2, X9
	MOVO 560(AX), X4
	MOVO 576(AX), X12
	MOVO 592(AX), X7
	MOVO 608(AX), X13
	MOVO X4, X15
	MOVO X12, X2
	MOVO X7, X14
	MOVO X13, X3
	PSUBQ X1, X4
	MOVO X4, X5
	PSLLQ $45, X4
	POR X9, X4
	MOVO X4, 400(BX)
	PSRLQ $19, X5
	PSUBQ X15, X12
	MOVO X12, X8
	PSLLQ $28, X12
	POR X5, X12
	MOVO X12, 416(BX)
	PSRLQ $36, X8
	PSUBQ X2, X7
	PSLLQ $11, X7
	PSUBQ X14, X13
	MOVO X13, X6
	PSLLQ $58, X13
	POR X8, X7
	POR X13, X7
	MOVO X7, 432(BX)
	PSRLQ $6, X6
	MOVO 624(AX), X0
	MOVO 640(AX), X11
	MOVO 656(AX), X10
	MOVO 672(AX), X1
	MOVO X0, X9
	MOVO X11, X4
	MOVO X10, X15
	MOVO X1, X5
	PSUBQ X3, X0
	MOVO X0, X12
	PSLLQ $41, X0
	POR X6, X0
	MOVO X0, 448(BX)
	PSRLQ $23, X12
	PSUBQ X9, X11
	MOVO X11, X2
	PSLLQ $24, X11
	POR X12, X11
	MOVO X11, 464(BX)
	PSRLQ $40, X2
	PSUBQ X4, X10
	PSLLQ $7, X10
	PSUBQ X15, X1
	MOVO X1, X14
	PSLLQ $54, X1
	POR X2, X10
	POR X1, X10
	MOVO X10, 480(BX)
	PSRLQ $10, X14
	MOVO 688(AX), X8
	MOVO 704(AX), X13
	MOVO 720(AX), X7
	MOVO 736(AX), X3
	MOVO X8, X6
	MOVO X13, X0
	MOVO X7, X9
	MOVO X3, X12
	PSUBQ X5, X8
	MOVO X8, X11
	PSLLQ $37, X8
	POR X14, X8
	MOVO X8, 496(BX)
	PSRLQ $27, X11
	PSUBQ X6, X13
	MOVO X13, X4
	PSLLQ $20, X13
	POR X11, X13
	MOVO X13, 512(BX)
	PSRLQ $44, X4
	PSUBQ X0, X7
	PSLLQ $3, X7
	PSUBQ X9, X3
	MOVO X3, X15
	PSLLQ $50, X3
	POR X4, X7
	POR X3, X7
	MOVO X7, 528(BX)
	PSRLQ $14, X15
	MOVO 752(AX), X2
	MOVO 768(AX), X1
	MOVO 784(AX), X10
	MOVO 800(AX), X5
	MOVO X2, X14
	MOVO X1, X8
	MOVO X10, X6
	MOVO X5, X11
	PSUBQ X12, X2
	MOVO X2, X13
	PSLLQ $33, X2
	POR X15, X2
	MOVO X2, 544(BX)
	PSRLQ $31, X13
	PSUBQ X14, X1
	PSLLQ $16, X1
	PSUBQ X8, X10
	MOVO X10, X0
	PSLLQ $63, X10
	POR X13, X1
	POR X10, X1
	MOVO X1, 560(BX)
	PSRLQ $1, X0
	PSUBQ X6, X5
	MOVO X5, X9
	PSLLQ $46, X5
	POR X0, X5
	MOVO X5, 576(BX)
	PSRLQ $18, X9
	MOVO 816(AX), X4
	MOVO 832(AX), X3
	MOVO 848(AX), X7
	MOVO 864(AX), X12
	MOVO X4, X15
	MOVO X3, X2
	MOVO X7, X14
	MOVO X12, X8
	PSUBQ X11, X4
	MOVO X4, X13
	PSLLQ $29, X4
	POR X9, X4
	MOVO X4, 592(BX)
	PSRLQ $35, X13
	PSUBQ X15, X3
	PSLLQ $12, X3
	PSUBQ X2, X7
	MOVO X7, X10
	PSLLQ $59, X7
	POR X13, X3
	POR X7, X3
	MOVO X3, 608(BX)
	PSRLQ $5, X10
	PSUBQ X14, X12
	MOVO X12, X1
	PSLLQ $42, X12
	POR X10, X12
	MOVO X12, 624(BX)
	PSRLQ $22, X1
	MOVO 880(AX), X6
	MOVO 896(AX), X0
	MOVO 912(AX), X5
	MOVO 928(AX), X11
	MOVO X6, X9
	MOVO X0, X4
	MOVO X5, X15
	MOVO X11, X2
	PSUBQ X8, X6
	MOVO X6, X13
	PSLLQ $25, X6
	POR X1, X6
	MOVO X6, 640(BX)
	PSRLQ $39, X13
	PSUBQ X9, X0
	PSLLQ $8, X0
	PSUBQ X4, X5
	MOVO X5, X7
	PSLLQ $55, X5
	POR X13, X0
	POR X5, X0
	MOVO X0, 656(BX)
	PSRLQ $9, X7
	PSUBQ X15, X11
	MOVO X11, X3
	PSLLQ $38, X11
	POR X7, X11
	MOVO X11, 672(BX)
	PSRLQ $26, X3
	MOVO 944(AX), X14
	MOVO 960(AX), X10
	MOVO 976(AX), X12
	MOVO 992(AX), X8
	MOVO X14, X1
	MOVO X10, X6
	MOVO X12, X9
	MOVO X8, X4
	PSUBQ X2, X14
	MOVO X14, X13
	PSLLQ $21, X14
	POR X3, X14
	MOVO X14, 688(BX)
	PSRLQ $43, X13
	PSUBQ X1, X10
	PSLLQ $4, X10
	PSUBQ X6, X12
	MOVO X12, X5
	PSLLQ $51, X12
	POR X13, X10
	POR X12, X10
	MOVO X10, 704(BX)
	PSRLQ $13, X5
	PSUBQ X9, X8
	MOVO X8, X0
	PSLLQ $34, X8
	POR X5, X8
	MOVO X8, 720(BX)
	PSRLQ $30, X0
	MOVO 1008(AX), X15
	MOVO X15, X7
	PSUBQ X4, X15
	PSLLQ $17, X15
	POR X0, X15
	MOVO X15, 736(BX)
	MOVO X7, 0(DX)
	RET

// func dpack64_48(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_48(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $48, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $16, X7
	PSUBQ X5, X3
	MOVO X3, X8
	PSLLQ $32, X3
	POR X7, X3
	MOVO X3, 16(BX)
	PSRLQ $32, X8
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	PSUBQ X6, X9
	PSLLQ $16, X9
	POR X8, X9
	MOVO X9, 32(BX)
	PSUBQ X13, X10
	PSUBQ X14, X11
	MOVO X11, X4
	PSLLQ $48, X11
	POR X10, X11
	MOVO X11, 48(BX)
	PSRLQ $16, X4
	PSUBQ X15, X12
	MOVO X12, X1
	PSLLQ $32, X12
	POR X4, X12
	MOVO X12, 64(BX)
	PSRLQ $32, X1
	MOVO 112(AX), X2
	MOVO 128(AX), X5
	MOVO 144(AX), X7
	MOVO 160(AX), X3
	MOVO X2, X6
	MOVO X5, X8
	MOVO X7, X9
	MOVO X3, X13
	PSUBQ X0, X2
	PSLLQ $16, X2
	POR X1, X2
	MOVO X2, 80(BX)
	PSUBQ X6, X5
	PSUBQ X8, X7
	MOVO X7, X14
	PSLLQ $48, X7
	POR X5, X7
	MOVO X7, 96(BX)
	PSRLQ $16, X14
	PSUBQ X9, X3
	MOVO X3, X10
	PSLLQ $32, X3
	POR X14, X3
	MOVO X3, 112(BX)
	PSRLQ $32, X10
	MOVO 176(AX), X11
	MOVO 192(AX), X15
	MOVO 208(AX), X4
	MOVO 224(AX), X12
	MOVO X11, X0
	MOVO X15, X1
	MOVO X4, X2
	MOVO X12, X6
	PSUBQ X13, X11
	PSLLQ $16, X11
	POR X10, X11
	MOVO X11, 128(BX)
	PSUBQ X0, X15
	PSUBQ X1, X4
	MOVO X4, X8
	PSLLQ $48, X4
	POR X15, X4
	MOVO X4, 144(BX)
	PSRLQ $16, X8
	PSUBQ X2, X12
	MOVO X12, X5
	PSLLQ $32, X12
	POR X8, X12
	MOVO X12, 160(BX)
	PSRLQ $32, X5
	MOVO 240(AX), X7
	MOVO 256(AX), X9
	MOVO 272(AX), X14
	MOVO 288(AX), X3
	MOVO X7, X13
	MOVO X9, X10
	MOVO X14, X11
	MOVO X3, X0
	PSUBQ X6, X7
	PSLLQ $16, X7
	POR X5, X7
	MOVO X7, 176(BX)
	PSUBQ X13, X9
	PSUBQ X10, X14
	MOVO X14, X1
	PSLLQ $48, X14
	POR X9, X14
	MOVO X14, 192(BX)
	PSRLQ $16, X1
	PSUBQ X11, X3
	MOVO X3, X15
	PSLLQ $32, X3
	POR X1, X3
	MOVO X3, 208(BX)
	PSRLQ $32, X15
	MOVO 304(AX), X4
	MOVO 320(AX), X2
	MOVO 336(AX), X8
	MOVO 352(AX), X12
	MOVO X4, X6
	MOVO X2, X5
	MOVO X8, X7
	MOVO X12, X13
	PSUBQ X0, X4
	PSLLQ $16, X4
	POR X15, X4
	MOVO X4, 224(BX)
	PSUBQ X6, X2
	PSUBQ X5, X8
	MOVO X8, X10
	PSLLQ $48, X8
	POR X2, X8
	MOVO X8, 240(BX)
	PSRLQ $16, X10
	PSUBQ X7, X12
	MOVO X12, X9
	PSLLQ $32, X12
	POR X10, X12
	MOVO X12, 256(BX)
	PSRLQ $32, X9
	MOVO 368(AX), X14
	MOVO 384(AX), X11
	MOVO 400(AX), X1
	MOVO 416(AX), X3
	MOVO X14, X0
	MOVO X11, X15
	MOVO X1, X4
	MOVO X3, X6
	PSUBQ X13, X14
	PSLLQ $16, X14
	POR X9, X14
	MOVO X14, 272(BX)
	PSUBQ X0, X11
	PSUBQ X15, X1
	MOVO X1, X5
	PSLLQ $48, X1
	POR X11, X1
	MOVO X1, 288(BX)
	PSRLQ $16, X5
	PSUBQ X4, X3
	MOVO X3, X2
	PSLLQ $32, X3
	POR X5, X3
	MOVO X3, 304(BX)
	PSRLQ $32, X2
	MOVO 432(AX), X8
	MOVO 448(AX), X7
	MOVO 464(AX), X10
	MOVO 480(AX), X12
	MOVO X8, X13
	MOVO X7, X9
	MOVO X10, X14
	MOVO X12, X0
	PSUBQ X6, X8
	PSLLQ $16, X8
	POR X2, X8
	MOVO X8, 320(BX)
	PSUBQ X13, X7
	PSUBQ X9, X10
	MOVO X10, X15
	PSLLQ $48, X10
	POR X7, X10
	MOVO X10, 336(BX)
	PSRLQ $16, X15
	PSUBQ X14, X12
	MOVO X12, X11
	PSLLQ $32, X12
	POR X15, X12
	MOVO X12, 352(BX)
	PSRLQ $32, X11
	MOVO 496(AX), X1
	MOVO 512(AX), X4
	MOVO 528(AX), X5
	MOVO 544(AX), X3
	MOVO X1, X6
	MOVO X4, X2
	MOVO X5, X8
	MOVO X3, X13
	PSUBQ X0, X1
	PSLLQ $16, X1
	POR X11, X1
	MOVO X1, 368(BX)
	PSUBQ X6, X4
	PSUBQ X2, X5
	MOVO X5, X9
	PSLLQ $48, X5
	POR X4, X5
	MOVO X5, 384(BX)
	PSRLQ $16, X9
	PSUBQ X8, X3
	MOVO X3, X7
	PSLLQ $32, X3
	POR X9, X3
	MOVO X3, 400(BX)
	PSRLQ $32, X7
	MOVO 560(AX), X10
	MOVO 576(AX), X14
	MOVO 592(AX), X15
	MOVO 608(AX), X12
	MOVO X10, X0
	MOVO X14, X11
	MOVO X15, X1
	MOVO X12, X6
	PSUBQ X13, X10
	PSLLQ $16, X10
	POR X7, X10
	MOVO X10, 416(BX)
	PSUBQ X0, X14
	PSUBQ X11, X15
	MOVO X15, X2
	PSLLQ $48, X15
	POR X14, X15
	MOVO X15, 432(BX)
	PSRLQ $16, X2
	PSUBQ X1, X12
	MOVO X12, X4
	PSLLQ $32, X12
	POR X2, X12
	MOVO X12, 448(BX)
	PSRLQ $32, X4
	MOVO 624(AX), X5
	MOVO 640(AX), X8
	MOVO 656(AX), X9
	MOVO 672(AX), X3
	MOVO X5, X13
	MOVO X8, X7
	MOVO X9, X10
	MOVO X3, X0
	PSUBQ X6, X5
	PSLLQ $16, X5
	POR X4, X5
	MOVO X5, 464(BX)
	PSUBQ X13, X8
	PSUBQ X7, X9
	MOVO X9, X11
	PSLLQ $48, X9
	POR X8, X9
	MOVO X9, 480(BX)
	PSRLQ $16, X11
	PSUBQ X10, X3
	MOVO X3, X14
	PSLLQ $32, X3
	POR X11, X3
	MOVO X3, 496(BX)
	PSRLQ $32, X14
	MOVO 688(AX), X15
	MOVO 704(AX), X1
	MOVO 720(AX), X2
	MOVO 736(AX), X12
	MOVO X15, X6
	MOVO X1, X4
	MOVO X2, X5
	MOVO X12, X13
	PSUBQ X0, X15
	PSLLQ $16, X15
	POR X14, X15
	MOVO X15, 512(BX)
	PSUBQ X6, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $48, X2
	POR X1, X2
	MOVO X2, 528(BX)
	PSRLQ $16, X7
	PSUBQ X5, X12
	MOVO X12, X8
	PSLLQ $32, X12
	POR X7, X12
	MOVO X12, 544(BX)
	PSRLQ $32, X8
	MOVO 752(AX), X9
	MOVO 768(AX), X10
	MOVO 784(AX), X11
	MOVO 800(AX), X3
	MOVO X9, X0
	MOVO X10, X14
	MOVO X11, X15
	MOVO X3, X6
	PSUBQ X13, X9
	PSLLQ $16, X9
	POR X8, X9
	MOVO X9, 560(BX)
	PSUBQ X0, X10
	PSUBQ X14, X11
	MOVO X11, X4
	PSLLQ $48, X11
	POR X10, X11
	MOVO X11, 576(BX)
	PSRLQ $16, X4
	PSUBQ X15, X3
	MOVO X3, X1
	PSLLQ $32, X3
	POR X4, X3
	MOVO X3, 592(BX)
	PSRLQ $32, X1
	MOVO 816(AX), X2
	MOVO 832(AX), X5
	MOVO 848(AX), X7
	MOVO 864(AX), X12
	MOVO X2, X13
	MOVO X5, X8
	MOVO X7, X9
	MOVO X12, X0
	PSUBQ X6, X2
	PSLLQ $16, X2
	POR X1, X2
	MOVO X2, 608(BX)
	PSUBQ X13, X5
	PSUBQ X8, X7
	MOVO X7, X14
	PSLLQ $48, X7
	POR X5, X7
	MOVO X7, 624(BX)
	PSRLQ $16, X14
	PSUBQ X9, X12
	MOVO X12, X10
	PSLLQ $32, X12
	POR X14, X12
	MOVO X12, 640(BX)
	PSRLQ $32, X10
	MOVO 880(AX), X11
	MOVO 896(AX), X15
	MOVO 912(AX), X4
	MOVO 928(AX), X3
	MOVO X11, X6
	MOVO X15, X1
	MOVO X4, X2
	MOVO X3, X13
	PSUBQ X0, X11
	PSLLQ $16, X11
	POR X10, X11
	MOVO X11, 656(BX)
	PSUBQ X6, X15
	PSUBQ X1, X4
	MOVO X4, X8
	PSLLQ $48, X4
	POR X15, X4
	MOVO X4, 672(BX)
	PSRLQ $16, X8
	PSUBQ X2, X3
	MOVO X3, X5
	PSLLQ $32, X3
	POR X8, X3
	MOVO X3, 688(BX)
	PSRLQ $32, X5
	MOVO 944(AX), X7
	MOVO 960(AX), X9
	MOVO 976(AX), X14
	MOVO 992(AX), X12
	MOVO X7, X0
	MOVO X9, X10
	MOVO X14, X11
	MOVO X12, X6
	PSUBQ X13, X7
	PSLLQ $16, X7
	POR X5, X7
	MOVO X7, 704(BX)
	PSUBQ X0, X9
	PSUBQ X10, X14
	MOVO X14, X1
	PSLLQ $48, X14
	POR X9, X14
	MOVO X14, 720(BX)
	PSRLQ $16, X1
	PSUBQ X11, X12
	MOVO X12, X15
	PSLLQ $32, X12
	POR X1, X12
	MOVO X12, 736(BX)
	PSRLQ $32, X15
	MOVO 1008(AX), X4
	MOVO X4, X2
	PSUBQ X6, X4
	PSLLQ $16, X4
	POR X15, X4
	MOVO X4, 752(BX)
	MOVO X2, 0(DX)
	RET

// func dpack64_49(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_49(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $49, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $15, X7
	PSUBQ X5, X3
	MOVO X3, X8
	PSLLQ $34, X3
	POR X7, X3
	MOVO X3, 16(BX)
	PSRLQ $30, X8
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	PSUBQ X6, X9
	MOVO X9, X4
	PSLLQ $19, X9
	POR X8, X9
	MOVO X9, 32(BX)
	PSRLQ $45, X4
	PSUBQ X13, X10
	PSLLQ $4, X10
	PSUBQ X14, X11
	MOVO X11, X1
	PSLLQ $53, X11
	POR X4, X10
	POR X11, X10
	MOVO X10, 48(BX)
	PSRLQ $11, X1
	PSUBQ X15, X12
	MOVO X12, X2
	PSLLQ $38, X12
	POR X1, X12
	MOVO X12, 64(BX)
	PSRLQ $26, X2
	MOVO 112(AX), X5
	MOVO 128(AX), X7
	MOVO 144(AX), X3
	MOVO 160(AX), X6
	MOVO X5, X8
	MOVO X7, X9
	MOVO X3, X13
	MOVO X6, X14
	PSUBQ X0, X5
	MOVO X5, X4
	PSLLQ $23, X5
	POR X2, X5
	MOVO X5, 80(BX)
	PSRLQ $41, X4
	PSUBQ X8, X7
	PSLLQ $8, X7
	PSUBQ X9, X3
	MOVO X3, X11
	PSLLQ $57, X3
	POR X4, X7
	POR X3, X7
	MOVO X7, 96(BX)
	PSRLQ $7, X11
	PSUBQ X13, X6
	MOVO X6, X10
	PSLLQ $42, X6
	POR X11, X6
	MOVO X6, 112(BX)
	PSRLQ $22, X10
	MOVO 176(AX), X15
	MOVO 192(AX), X1
	MOVO 208(AX), X12
	MOVO 224(AX), X0
	MOVO X15, X2
	MOVO X1, X5
	MOVO X12, X8
	MOVO X0, X9
	PSUBQ X14, X15
	MOVO X15, X4
	PSLLQ $27, X15
	POR X10, X15
	MOVO X15, 128(BX)
	PSRLQ $37, X4
	PSUBQ X2, X1
	PSLLQ $12, X1
	PSUBQ X5, X12
	MOVO X12, X3
	PSLLQ $61, X12
	POR X4, X1
	POR X12, X1
	MOVO X1, 144(BX)
	PSRLQ $3, X3
	PSUBQ X8, X0
	MOVO X0, X7
	PSLLQ $46, X0
	POR X3, X0
	MOVO X0, 160(BX)
	PSRLQ $18, X7
	MOVO 240(AX), X13
	MOVO 256(AX), X11
	MOVO 272(AX), X6
	MOVO 288(AX), X14
	MOVO X13, X10
	MOVO X11, X15
	MOVO X6, X2
	MOVO X14, X5
	PSUBQ X9, X13
	MOVO X13, X4
	PSLLQ $31, X13
	POR X7, X13
	MOVO X13, 176(BX)
	PSRLQ $33, X4
	PSUBQ X10, X11
	MOVO X11, X12
	PSLLQ $16, X11
	POR X4, X11
	MOVO X11, 192(BX)
	PSRLQ $48, X12
	PSUBQ X15, X6
	PSLLQ $1, X6
	PSUBQ X2, X14
	MOVO X14, X1
	PSLLQ $50, X14
	POR X12, X6
	POR X14, X6
	MOVO X6, 208(BX)
	PSRLQ $14, X1
	MOVO 304(AX), X8
	MOVO 320(AX), X3
	MOVO 336(AX), X0
	MOVO 352(AX), X9
	MOVO X8, X7
	MOVO X3, X13
	MOVO X0, X10
	MOVO X9, X4
	PSUBQ X5, X8
	MOVO X8, X11
	PSLLQ $35, X8
	POR X1, X8
	MOVO X8, 224(BX)
	PSRLQ $29, X11
	PSUBQ X7, X3
	MOVO X3, X15
	PSLLQ $20, X3
	POR X11, X3
	MOVO X3, 240(BX)
	PSRLQ $44, X15
	PSUBQ X13, X0
	PSLLQ $5, X0
	PSUBQ X10, X9
	MOVO X9, X2
	PSLLQ $54, X9
	POR X15, X0
	POR X9, X0
	MOVO X0, 256(BX)
	PSRLQ $10, X2
	MOVO 368(AX), X12
	MOVO 384(AX), X14
	MOVO 400(AX), X6
	MOVO 416(AX), X5
	MOVO X12, X1
	MOVO X14, X8
	MOVO X6, X7
	MOVO X5, X11
	PSUBQ X4, X12
	MOVO X12, X3
	PSLLQ $39, X12
	POR X2, X12
	MOVO X12, 272(BX)
	PSRLQ $25, X3
	PSUBQ X1, X14
	MOVO X14, X13
	PSLLQ $24, X14
	POR X3, X14
	MOVO X14, 288(BX)
	PSRLQ $40, X13
	PSUBQ X8, X6
	PSLLQ $9, X6
	PSUBQ X7, X5
	MOVO X5, X10
	PSLLQ $58, X5
	POR X13, X6
	POR X5, X6
	MOVO X6, 304(BX)
	PSRLQ $6, X10
	MOVO 432(AX), X15
	MOVO 448(AX), X9
	MOVO 464(AX), X0
	MOVO 480(AX), X4
	MOVO X15, X2
	MOVO X9, X12
	MOVO X0, X1
	MOVO X4, X3
	PSUBQ X11, X15
	MOVO X15, X14
	PSLLQ $43, X15
	POR X10, X15
	MOVO X15, 320(BX)
	PSRLQ $21, X14
	PSUBQ X2, X9
	MOVO X9, X8
	PSLLQ $28, X9
	POR X14, X9
	MOVO X9, 336(BX)
	PSRLQ $36, X8
	PSUBQ X12, X0
	PSLLQ $13, X0
	PSUBQ X1, X4
	MOVO X4, X7
	PSLLQ $62, X4
	POR X8, X0
	POR X4, X0
	MOVO X0, 352(BX)
	PSRLQ $2, X7
	MOVO 496(AX), X13
	MOVO 512(AX), X5
	MOVO 528(AX), X6
	MOVO 544(AX), X11
	MOVO X13, X10
	MOVO X5, X15
	MOVO X6, X2
	MOVO X11, X14
	PSUBQ X3, X13
	MOVO X13, X9
	PSLLQ $47, X13
	POR X7, X13
	MOVO X13, 368(BX)
	PSRLQ $17, X9
	PSUBQ X10, X5
	MOVO X5, X12
	PSLLQ $32, X5
	POR X9, X5
	MOVO X5, 384(BX)
	PSRLQ $32, X12
	PSUBQ X15, X6
	MOVO X6, X1
	PSLLQ $17, X6
	POR X12, X6
	MOVO X6, 400(BX)
	PSRLQ $47, X1
	PSUBQ X2, X11
	PSLLQ $2, X11
	MOVO 560(AX), X8
	MOVO 576(AX), X4
	MOVO 592(AX), X0
	MOVO 608(AX), X3
	MOVO X8, X7
	MOVO X4, X13
	MOVO X0, X10
	MOVO X3, X9
	PSUBQ X14, X8
	MOVO X8, X5
	PSLLQ $51, X8
	POR X1, X11
	POR X8, X11
	MOVO X11, 416(BX)
	PSRLQ $13, X5
	PSUBQ X7, X4
	MOVO X4, X15
	PSLLQ $36, X4
	POR X5, X4
	MOVO X4, 432(BX)
	PSRLQ $28, X15
	PSUBQ X13, X0
	MOVO X0, X12
	PSLLQ $21, X0
	POR X15, X0
	MOVO X0, 448(BX)
	PSRLQ $43, X12
	PSUBQ X10, X3
	PSLLQ $6, X3
	MOVO 624(AX), X6
	MOVO 640(AX), X2
	MOVO 656(AX), X14
	MOVO 672(AX), X1
	MOVO X6, X8
	MOVO X2, X11
	MOVO X14, X7
	MOVO X1, X5
	PSUBQ X9, X6
	MOVO X6, X4
	PSLLQ $55, X6
	POR X12, X3
	POR X6, X3
	MOVO X3, 464(BX)
	PSRLQ $9, X4
	PSUBQ X8, X2
	MOVO X2, X13
	PSLLQ $40, X2
	POR X4, X2
	MOVO X2, 480(BX)
	PSRLQ $24, X13
	PSUBQ X11, X14
	MOVO X14, X15
	PSLLQ $25, X14
	POR X13, X14
	MOVO X14, 496(BX)
	PSRLQ $39, X15
	PSUBQ X7, X1
	PSLLQ $10, X1
	MOVO 688(AX), X0
	MOVO 704(AX), X10
	MOVO 720(AX), X9
	MOVO 736(AX), X12
	MOVO X0, X6
	MOVO X10, X3
	MOVO X9, X8
	MOVO X12, X4
	PSUBQ X5, X0
	MOVO X0, X2
	PSLLQ $59, X0
	POR X15, X1
	POR X0, X1
	MOVO X1, 512(BX)
	PSRLQ $5, X2
	PSUBQ X6, X10
	MOVO X10, X11
	PSLLQ $44, X10
	POR X2, X10
	MOVO X10, 528(BX)
	PSRLQ $20, X11
	PSUBQ X3, X9
	MOVO X9, X13
	PSLLQ $29, X9
	POR X11, X9
	MOVO X9, 544(BX)
	PSRLQ $35, X13
	PSUBQ X8, X12
	PSLLQ $14, X12
	MOVO 752(AX), X14
	MOVO 768(AX), X7
	MOVO 784(AX), X5
	MOVO 800(AX), X15
	MOVO X14, X0
	MOVO X7, X1
	MOVO X5, X6
	MOVO X15, X2
	PSUBQ X4, X14
	MOVO X14, X10
	PSLLQ $63, X14
	POR X13, X12
	POR X14, X12
	MOVO X12, 560(BX)
	PSRLQ $1, X10
	PSUBQ X0, X7
	MOVO X7, X3
	PSLLQ $48, X7
	POR X10, X7
	MOVO X7, 576(BX)
	PSRLQ $16, X3
	PSUBQ X1, X5
	MOVO X5, X11
	PSLLQ $33, X5
	POR X3, X5
	MOVO X5, 592(BX)
	PSRLQ $31, X11
	PSUBQ X6, X15
	MOVO X15, X9
	PSLLQ $18, X15
	POR X11, X15
	MOVO X15, 608(BX)
	PSRLQ $46, X9
	MOVO 816(AX), X8
	MOVO 832(AX), X4
	MOVO 848(AX), X13
	MOVO 864(AX), X14
	MOVO X8, X12
	MOVO X4, X0
	MOVO X13, X10
	MOVO X14, X7
	PSUBQ X2, X8
	PSLLQ $3, X8
	PSUBQ X12, X4
	MOVO X4, X1
	PSLLQ $52, X4
	POR X9, X8
	POR X4, X8
	MOVO X8, 624(BX)
	PSRLQ $12, X1
	PSUBQ X0, X13
	MOVO X13, X3
	PSLLQ $37, X13
	POR X1, X13
	MOVO X13, 640(BX)
	PSRLQ $27, X3
	PSUBQ X10, X14
	MOVO X14, X5
	PSLLQ $22, X14
	POR X3, X14
	MOVO X14, 656(BX)
	PSRLQ $42, X5
	MOVO 880(AX), X6
	MOVO 896(AX), X11
	MOVO 912(AX), X15
	MOVO 928(AX), X2
	MOVO X6, X12
	MOVO X11, X9
	MOVO X15, X4
	MOVO X2, X8
	PSUBQ X7, X6
	PSLLQ $7, X6
	PSUBQ X12, X11
	MOVO X11, X0
	PSLLQ $56, X11
	POR X5, X6
	POR X11, X6
	MOVO X6, 672(BX)
	PSRLQ $8, X0
	PSUBQ X9, X15
	MOVO X15, X1
	PSLLQ $41, X15
	POR X0, X15
	MOVO X15, 688(BX)
	PSRLQ $23, X1
	PSUBQ X4, X2
	MOVO X2, X13
	PSLLQ $26, X2
	POR X1, X2
	MOVO X2, 704(BX)
	PSRLQ $38, X13
	MOVO 944(AX), X10
	MOVO 960(AX), X3
	MOVO 976(AX), X14
	MOVO 992(AX), X7
	MOVO X10, X12
	MOVO X3, X5
	MOVO X14, X11
	MOVO X7, X6
	PSUBQ X8, X10
	PSLLQ $11, X10
	PSUBQ X12, X3
	MOVO X3, X9
	PSLLQ $60, X3
	POR X13, X10
	POR X3, X10
	MOVO X10, 720(BX)
	PSRLQ $4, X9
	PSUBQ X5, X14
	MOVO X14, X0
	PSLLQ $45, X14
	POR X9, X14
	MOVO X14, 736(BX)
	PSRLQ $19, X0
	PSUBQ X11, X7
	MOVO X7, X15
	PSLLQ $30, X7
	POR X0, X7
	MOVO X7, 752(BX)
	PSRLQ $34, X15
	MOVO 1008(AX), X4
	MOVO X4, X1
	PSUBQ X6, X4
	PSLLQ $15, X4
	POR X15, X4
	MOVO X4, 768(BX)
	MOVO X1, 0(DX)
	RET

// func dpack64_50(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_50(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $50, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $14, X7
	PSUBQ X5, X3
	MOVO X3, X8
	PSLLQ $36, X3
	POR X7, X3
	MOVO X3, 16(BX)
	PSRLQ $28, X8
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	PSUBQ X6, X9
	MOVO X9, X4
	PSLLQ $22, X9
	POR X8, X9
	MOVO X9, 32(BX)
	PSRLQ $42, X4
	PSUBQ X13, X10
	PSLLQ $8, X10
	PSUBQ X14, X11
	MOVO X11, X1
	PSLLQ $58, X11
	POR X4, X10
	POR X11, X10
	MOVO X10, 48(BX)
	PSRLQ $6, X1
	PSUBQ X15, X12
	MOVO X12, X2
	PSLLQ $44, X12
	POR X1, X12
	MOVO X12, 64(BX)
	PSRLQ $20, X2
	MOVO 112(AX), X5
	MOVO 128(AX), X7
	MOVO 144(AX), X3
	MOVO 160(AX), X6
	MOVO X5, X8
	MOVO X7, X9
	MOVO X3, X13
	MOVO X6, X14
	PSUBQ X0, X5
	MOVO X5, X4
	PSLLQ $30, X5
	POR X2, X5
	MOVO X5, 80(BX)
	PSRLQ $34, X4
	PSUBQ X8, X7
	MOVO X7, X11
	PSLLQ $16, X7
	POR X4, X7
	MOVO X7, 96(BX)
	PSRLQ $48, X11
	PSUBQ X9, X3
	PSLLQ $2, X3
	PSUBQ X13, X6
	MOVO X6, X10
	PSLLQ $52, X6
	POR X11, X3
	POR X6, X3
	MOVO X3, 112(BX)
	PSRLQ $12, X10
	MOVO 176(AX), X15
	MOVO 192(AX), X1
	MOVO 208(AX), X12
	MOVO 224(AX), X0
	MOVO X15, X2
	MOVO X1, X5
	MOVO X12, X8
	MOVO X0, X4
	PSUBQ X14, X15
	MOVO X15, X7
	PSLLQ $38, X15
	POR X10, X15
	MOVO X15, 128(BX)
	PSRLQ $26, X7
	PSUBQ X2, X1
	MOVO X1, X9
	PSLLQ $24, X1
	POR X7, X1
	MOVO X1, 144(BX)
	PSRLQ $40, X9
	PSUBQ X5, X12
	PSLLQ $10, X12
	PSUBQ X8, X0
	MOVO X0, X13
	PSLLQ $60, X0
	POR X9, X12
	POR X0, X12
	MOVO X12, 160(BX)
	PSRLQ $4, X13
	MOVO 240(AX), X11
	MOVO 256(AX), X6
	MOVO 272(AX), X3
	MOVO 288(AX), X14
	MOVO X11, X10
	MOVO X6, X15
	MOVO X3, X2
	MOVO X14, X7
	PSUBQ X4, X11
	MOVO X11, X1
	PSLLQ $46, X11
	POR X13, X11
	MOVO X11, 176(BX)
	PSRLQ $18, X1
	PSUBQ X10, X6
	MOVO X6, X5
	PSLLQ $32, X6
	POR X1, X6
	MOVO X6, 192(BX)
	PSRLQ $32, X5
	PSUBQ X15, X3
	MOVO X3, X8
	PSLLQ $18, X3
	POR X5, X3
	MOVO X3, 208(BX)
	PSRLQ $46, X8
	PSUBQ X2, X14
	PSLLQ $4, X14
	MOVO 304(AX), X9
	MOVO 320(AX), X0
	MOVO 336(AX), X12
	MOVO 352(AX), X4
	MOVO X9, X13
	MOVO X0, X11
	MOVO X12, X10
	MOVO X4, X1
	PSUBQ X7, X9
	MOVO X9, X6
	PSLLQ $54, X9
	POR X8, X14
	POR X9, X14
	MOVO X14, 224(BX)
	PSRLQ $10, X6
	PSUBQ X13, X0
	MOVO X0, X15
	PSLLQ $40, X0
	POR X6, X0
	MOVO X0, 240(BX)
	PSRLQ $24, X15
	PSUBQ X11, X12
	MOVO X12, X5
	PSLLQ $26, X12
	POR X15, X12
	MOVO X12, 256(BX)
	PSRLQ $38, X5
	PSUBQ X10, X4
	PSLLQ $12, X4
	MOVO 368(AX), X3
	MOVO 384(AX), X2
	MOVO 400(AX), X7
	MOVO 416(AX), X8
	MOVO X3, X9
	MOVO X2, X14
	MOVO X7, X13
	MOVO X8, X6
	PSUBQ X1, X3
	MOVO X3, X0
	PSLLQ $62, X3
	POR X5, X4
	POR X3, X4
	MOVO X4, 272(BX)
	PSRLQ $2, X0
	PSUBQ X9, X2
	MOVO X2, X11
	PSLLQ $48, X2
	POR X0, X2
	MOVO X2, 288(BX)
	PSRLQ $16, X11
	PSUBQ X14, X7
	MOVO X7, X15
	PSLLQ $34, X7
	POR X11, X7
	MOVO X7, 304(BX)
	PSRLQ $30, X15
	PSUBQ X13, X8
	MOVO X8, X12
	PSLLQ $20, X8
	POR X15, X8
	MOVO X8, 320(BX)
	PSRLQ $44, X12
	MOVO 432(AX), X10
	MOVO 448(AX), X1
	MOVO 464(AX), X5
	MOVO 480(AX), X3
	MOVO X10, X4
	MOVO X1, X9
	MOVO X5, X0
	MOVO X3, X2
	PSUBQ X6, X10
	PSLLQ $6, X10
	PSUBQ X4, X1
	MOVO X1, X14
	PSLLQ $56, X1
	POR X12, X10
	POR X1, X10
	MOVO X10, 336(BX)
	PSRLQ $8, X14
	PSUBQ X9, X5
	MOVO X5, X11
	PSLLQ $42, X5
	POR X14, X5
	MOVO X5, 352(BX)
	PSRLQ $22, X11
	PSUBQ X0, X3
	MOVO X3, X7
	PSLLQ $28, X3
	POR X11, X3
	MOVO X3, 368(BX)
	PSRLQ $36, X7
	MOVO 496(AX), X13
	MOVO 512(AX), X15
	MOVO 528(AX), X8
	MOVO 544(AX), X6
	MOVO X13, X4
	MOVO X15, X12
	MOVO X8, X1
	MOVO X6, X10
	PSUBQ X2, X13
	PSLLQ $14, X13
	POR X7, X13
	MOVO X13, 384(BX)
	PSUBQ X4, X15
	PSUBQ X12, X8
	MOVO X8, X9
	PSLLQ $50, X8
	POR X15, X8
	MOVO X8, 400(BX)
	PSRLQ $14, X9
	PSUBQ X1, X6
	MOVO X6, X14
	PSLLQ $36, X6
	POR X9, X6
	MOVO X6, 416(BX)
	PSRLQ $28, X14
	MOVO 560(AX), X5
	MOVO 576(AX), X0
	MOVO 592(AX), X11
	MOVO 608(AX), X3
	MOVO X5, X2
	MOVO X0, X7
	MOVO X11, X13
	MOVO X3, X4
	PSUBQ X10, X5
	MOVO X5, X12
	PSLLQ $22, X5
	POR X14, X5
	MOVO X5, 432(BX)
	PSRLQ $42, X12
	PSUBQ X2, X0
	PSLLQ $8, X0
	PSUBQ X7, X11
	MOVO X11, X15
	PSLLQ $58, X11
	POR X12, X0
	POR X11, X0
	MOVO X0, 448(BX)
	PSRLQ $6, X15
	PSUBQ X13, X3
	MOVO X3, X8
	PSLLQ $44, X3
	POR X15, X3
	MOVO X3, 464(BX)
	PSRLQ $20, X8
	MOVO 624(AX), X1
	MOVO 640(AX), X9
	MOVO 656(AX), X6
	MOVO 672(AX), X10
	MOVO X1, X14
	MOVO X9, X5
	MOVO X6, X2
	MOVO X10, X7
	PSUBQ X4, X1
	MOVO X1, X12
	PSLLQ $30, X1
	POR X8, X1
	MOVO X1, 480(BX)
	PSRLQ $34, X12
	PSUBQ X14, X9
	MOVO X9, X11
	PSLLQ $16, X9
	POR X12, X9
	MOVO X9, 496(BX)
	PSRLQ $48, X11
	PSUBQ X5, X6
	PSLLQ $2, X6
	PSUBQ X2, X10
	MOVO X10, X0
	PSLLQ $52, X10
	POR X11, X6
	POR X10, X6
	MOVO X6, 512(BX)
	PSRLQ $12, X0
	MOVO 688(AX), X13
	MOVO 704(AX), X15
	MOVO 720(AX), X3
	MOVO 736(AX), X4
	MOVO X13, X8
	MOVO X15, X1
	MOVO X3, X14
	MOVO X4, X12
	PSUBQ X7, X13
	MOVO X13, X9
	PSLLQ $38, X13
	POR X0, X13
	MOVO X13, 528(BX)
	PSRLQ $26, X9
	PSUBQ X8, X15
	MOVO X15, X5
	PSLLQ $24, X15
	POR X9, X15
	MOVO X15, 544(BX)
	PSRLQ $40, X5
	PSUBQ X1, X3
	PSLLQ $10, X3
	PSUBQ X14, X4
	MOVO X4, X2
	PSLLQ $60, X4
	POR X5, X3
	POR X4, X3
	MOVO X3, 560(BX)
	PSRLQ $4, X2
	MOVO 752(AX), X11
	MOVO 768(AX), X10
	MOVO 784(AX), X6
	MOVO 800(AX), X7
	MOVO X11, X0
	MOVO X10, X13
	MOVO X6, X8
	MOVO X7, X9
	PSUBQ X12, X11
	MOVO X11, X15
	PSLLQ $46, X11
	POR X2, X11
	MOVO X11, 576(BX)
	PSRLQ $18, X15
	PSUBQ X0, X10
	MOVO X10, X1
	PSLLQ $32, X10
	POR X15, X10
	MOVO X10, 592(BX)
	PSRLQ $32, X1
	PSUBQ X13, X6
	MOVO X6, X14
	PSLLQ $18, X6
	POR X1, X6
	MOVO X6, 608(BX)
	PSRLQ $46, X14
	PSUBQ X8, X7
	PSLLQ $4, X7
	MOVO 816(AX), X5
	MOVO 832(AX), X4
	MOVO 848(AX), X3
	MOVO 864(AX), X12
	MOVO X5, X2
	MOVO X4, X11
	MOVO X3, X0
	MOVO X12, X15
	PSUBQ X9, X5
	MOVO X5, X10
	PSLLQ $54, X5
	POR X14, X7
	POR X5, X7
	MOVO X7, 624(BX)
	PSRLQ $10, X10
	PSUBQ X2, X4
	MOVO X4, X13
	PSLLQ $40, X4
	POR X10, X4
	MOVO X4, 640(BX)
	PSRLQ $24, X13
	PSUBQ X11, X3
	MOVO X3, X1
	PSLLQ $26, X3
	POR X13, X3
	MOVO X3, 656(BX)
	PSRLQ $38, X1
	PSUBQ X0, X12
	PSLLQ $12, X12
	MOVO 880(AX), X6
	MOVO 896(AX), X8
	MOVO 912(AX), X9
	MOVO 928(AX), X14
	MOVO X6, X5
	MOVO X8, X7
	MOVO X9, X2
	MOVO X14, X10
	PSUBQ X15, X6
	MOVO X6, X4
	PSLLQ $62, X6
	POR X1, X12
	POR X6, X12
	MOVO X12, 672(BX)
	PSRLQ $2, X4
	PSUBQ X5, X8
	MOVO X8, X11
	PSLLQ $48, X8
	POR X4, X8
	MOVO X8, 688(BX)
	PSRLQ $16, X11
	PSUBQ X7, X9
	MOVO X9, X13
	PSLLQ $34, X9
	POR X11, X9
	MOVO X9, 704(BX)
	PSRLQ $30, X13
	PSUBQ X2, X14
	MOVO X14, X3
	PSLLQ $20, X14
	POR X13, X14
	MOVO X14, 720(BX)
	PSRLQ $44, X3
	MOVO 944(AX), X0
	MOVO 960(AX), X15
	MOVO 976(AX), X1
	MOVO 992(AX), X6
	MOVO X0, X12
	MOVO X15, X5
	MOVO X1, X4
	MOVO X6, X8
	PSUBQ X10, X0
	PSLLQ $6, X0
	PSUBQ X12, X15
	MOVO X15, X7
	PSLLQ $56, X15
	POR X3, X0
	POR X15, X0
	MOVO X0, 736(BX)
	PSRLQ $8, X7
	PSUBQ X5, X1
	MOVO X1, X11
	PSLLQ $42, X1
	POR X7, X1
	MOVO X1, 752(BX)
	PSRLQ $22, X11
	PSUBQ X4, X6
	MOVO X6, X9
	PSLLQ $28, X6
	POR X11, X6
	MOVO X6, 768(BX)
	PSRLQ $36, X9
	MOVO 1008(AX), X2
	MOVO X2, X13
	PSUBQ X8, X2
	PSLLQ $14, X2
	POR X9, X2
	MOVO X2, 784(BX)
	MOVO X13, 0(DX)
	RET

// func dpack64_51(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_51(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $51, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $13, X7
	PSUBQ X5, X3
	MOVO X3, X8
	PSLLQ $38, X3
	POR X7, X3
	MOVO X3, 16(BX)
	PSRLQ $26, X8
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	PSUBQ X6, X9
	MOVO X9, X4
	PSLLQ $25, X9
	POR X8, X9
	MOVO X9, 32(BX)
	PSRLQ $39, X4
	PSUBQ X13, X10
	PSLLQ $12, X10
	PSUBQ X14, X11
	MOVO X11, X1
	PSLLQ $63, X11
	POR X4, X10
	POR X11, X10
	MOVO X10, 48(BX)
	PSRLQ $1, X1
	PSUBQ X15, X12
	MOVO X12, X2
	PSLLQ $50, X12
	POR X1, X12
	MOVO X12, 64(BX)
	PSRLQ $14, X2
	MOVO 112(AX), X5
	MOVO 128(AX), X7
	MOVO 144(AX), X3
	MOVO 160(AX), X6
	MOVO X5, X8
	MOVO X7, X9
	MOVO X3, X13
	MOVO X6, X14
	PSUBQ X0, X5
	MOVO X5, X4
	PSLLQ $37, X5
	POR X2, X5
	MOVO X5, 80(BX)
	PSRLQ $27, X4
	PSUBQ X8, X7
	MOVO X7, X11
	PSLLQ $24, X7
	POR X4, X7
	MOVO X7, 96(BX)
	PSRLQ $40, X11
	PSUBQ X9, X3
	PSLLQ $11, X3
	PSUBQ X13, X6
	MOVO X6, X10
	PSLLQ $62, X6
	POR X11, X3
	POR X6, X3
	MOVO X3, 112(BX)
	PSRLQ $2, X10
	MOVO 176(AX), X15
	MOVO 192(AX), X1
	MOVO 208(AX), X12
	MOVO 224(AX), X0
	MOVO X15, X2
	MOVO X1, X5
	MOVO X12, X8
	MOVO X0, X4
	PSUBQ X14, X15
	MOVO X15, X7
	PSLLQ $49, X15
	POR X10, X15
	MOVO X15, 128(BX)
	PSRLQ $15, X7
	PSUBQ X2, X1
	MOVO X1, X9
	PSLLQ $36, X1
	POR X7, X1
	MOVO X1, 144(BX)
	PSRLQ $28, X9
	PSUBQ X5, X12
	MOVO X12, X13
	PSLLQ $23, X12
	POR X9, X12
	MOVO X12, 160(BX)
	PSRLQ $41, X13
	PSUBQ X8, X0
	PSLLQ $10, X0
	MOVO 240(AX), X11
	MOVO 256(AX), X6
	MOVO 272(AX), X3
	MOVO 288(AX), X14
	MOVO X11, X10
	MOVO X6, X15
	MOVO X3, X2
	MOVO X14, X7
	PSUBQ X4, X11
	MOVO X11, X1
	PSLLQ $61, X11
	POR X13, X0
	POR X11, X0
	MOVO X0, 176(BX)
	PSRLQ $3, X1
	PSUBQ X10, X6
	MOVO X6, X5
	PSLLQ $48, X6
	POR X1, X6
	MOVO X6, 192(BX)
	PSRLQ $16, X5
	PSUBQ X15, X3
	MOVO X3, X9
	PSLLQ $35, X3
	POR X5, X3
	MOVO X3, 208(BX)
	PSRLQ $29, X9
	PSUBQ X2, X14
	MOVO X14, X12
	PSLLQ $22, X14
	POR X9, X14
	MOVO X14, 224(BX)
	PSRLQ $42, X12
	MOVO 304(AX), X8
	MOVO 320(AX), X4
	MOVO 336(AX), X13
	MOVO 352(AX), X11
	MOVO X8, X0
	MOVO X4, X10
	MOVO X13, X1
	MOVO X11, X6
	PSUBQ X7, X8
	PSLLQ $9, X8
	PSUBQ X0, X4
	MOVO X4, X15
	PSLLQ $60, X4
	POR X12, X8
	POR X4, X8
	MOVO X8, 240(BX)
	PSRLQ $4, X15
	PSUBQ X10, X13
	MOVO X13, X5
	PSLLQ $47, X13
	POR X15, X13
	MOVO X13, 256(BX)
	PSRLQ $17, X5
	PSUBQ X1, X11
	MOVO X11, X3
	PSLLQ $34, X11
	POR X5, X11
	MOVO X11, 272(BX)
	PSRLQ $30, X3
	MOVO 368(AX), X2
	MOVO 384(AX), X9
	MOVO 400(AX), X14
	MOVO 416(AX), X7
	MOVO X2, X0
	MOVO X9, X12
	MOVO X14, X4
	MOVO X7, X8
	PSUBQ X6, X2
	MOVO X2, X10
	PSLLQ $21, X2
	POR X3, X2
	MOVO X2, 288(BX)
	PSRLQ $43, X10
	PSUBQ X0, X9
	PSLLQ $8, X9
	PSUBQ X12, X14
	MOVO X14, X15
	PSLLQ $59, X14
	POR X10, X9
	POR X14, X9
	MOVO X9, 304(BX)
	PSRLQ $5, X15
	PSUBQ X4, X7
	MOVO X7, X13
	PSLLQ $46, X7
	POR X15, X7
	MOVO X7, 320(BX)
	PSRLQ $18, X13
	MOVO 432(AX), X1
	MOVO 448(AX), X5
	MOVO 464(AX), X11
	MOVO 480(AX), X6
	MOVO X1, X3
	MOVO X5, X2
	MOVO X11, X0
	MOVO X6, X12
	PSUBQ X8, X1
	MOVO X1, X10
	PSLLQ $33, X1
	POR X13, X1
	MOVO X1, 336(BX)
	PSRLQ $31, X10
	PSUBQ X3, X5
	MOVO X5, X14
	PSLLQ $20, X5
	POR X10, X5
	MOVO X5, 352(BX)
	PSRLQ $44, X14
	PSUBQ X2, X11
	PSLLQ $7, X11
	PSUBQ X0, X6
	MOVO X6, X9
	PSLLQ $58, X6
	POR X14, X11
	POR X6, X11
	MOVO X11, 368(BX)
	PSRLQ $6, X9
	MOVO 496(AX), X4
	MOVO 512(AX), X15
	MOVO 528(AX), X7
	MOVO 544(AX), X8
	MOVO X4, X13
	MOVO X15, X1
	MOVO X7, X3
	MOVO X8, X10
	PSUBQ X12, X4
	MOVO X4, X5
	PSLLQ $45, X4
	POR X9, X4
	MOVO X4, 384(BX)
	PSRLQ $19, X5
	PSUBQ X13, X15
	MOVO X15, X2
	PSLLQ $32, X15
	POR X5, X15
	MOVO X15, 400(BX)
	PSRLQ $32, X2
	PSUBQ X1, X7
	MOVO X7, X0
	PSLLQ $19, X7
	POR X2, X7
	MOVO X7, 416(BX)
	PSRLQ $45, X0
	PSUBQ X3, X8
	PSLLQ $6, X8
	MOVO 560(AX), X14
	MOVO 576(AX), X6
	MOVO 592(AX), X11
	MOVO 608(AX), X12
	MOVO X14, X9
	MOVO X6, X4
	MOVO X11, X13
	MOVO X12, X5
	PSUBQ X10, X14
	MOVO X14, X15
	PSLLQ $57, X14
	POR X0, X8
	POR X14, X8
	MOVO X8, 432(BX)
	PSRLQ $7, X15
	PSUBQ X9, X6
	MOVO X6, X1
	PSLLQ $44, X6
	POR X15, X6
	MOVO X6, 448(BX)
	PSRLQ $20, X1
	PSUBQ X4, X11
	MOVO X11, X2
	PSLLQ $31, X11
	POR X1, X11
	MOVO X11, 464(BX)
	PSRLQ $33, X2
	PSUBQ X13, X12
	MOVO X12, X7
	PSLLQ $18, X12
	POR X2, X12
	MOVO X12, 480(BX)
	PSRLQ $46, X7
	MOVO 624(AX), X3
	MOVO 640(AX), X10
	MOVO 656(AX), X0
	MOVO 672(AX), X14
	MOVO X3, X8
	MOVO X10, X9
	MOVO X0, X15
	MOVO X14, X6
	PSUBQ X5, X3
	PSLLQ $5, X3
	PSUBQ X8, X10
	MOVO X10, X4
	PSLLQ $56, X10
	POR X7, X3
	POR X10, X3
	MOVO X3, 496(BX)
	PSRLQ $8, X4
	PSUBQ X9, X0
	MOVO X0, X1
	PSLLQ $43, X0
	POR X4, X0
	MOVO X0, 512(BX)
	PSRLQ $21, X1
	PSUBQ X15, X14
	MOVO X14, X11
	PSLLQ $30, X14
	POR X1, X14
	MOVO X14, 528(BX)
	PSRLQ $34, X11
	MOVO 688(AX), X13
	MOVO 704(AX), X2
	MOVO 720(AX), X12
	MOVO 736(AX), X5
	MOVO X13, X8
	MOVO X2, X7
	MOVO X12, X10
	MOVO X5, X3
	PSUBQ X6, X13
	MOVO X13, X9
	PSLLQ $17, X13
	POR X11, X13
	MOVO X13, 544(BX)
	PSRLQ $47, X9
	PSUBQ X8, X2
	PSLLQ $4, X2
	PSUBQ X7, X12
	MOVO X12, X4
	PSLLQ $55, X12
	POR X9, X2
	POR X12, X2
	MOVO X2, 560(BX)
	PSRLQ $9, X4
	PSUBQ X10, X5
	MOVO X5, X0
	PSLLQ $42, X5
	POR X4, X5
	MOVO X5, 576(BX)
	PSRLQ $22, X0
	MOVO 752(AX), X15
	MOVO 768(AX), X1
	MOVO 784(AX), X14
	MOVO 800(AX), X6
	MOVO X15, X11
	MOVO X1, X13
	MOVO X14, X8
	MOVO X6, X7
	PSUBQ X3, X15
	MOVO X15, X9
	PSLLQ $29, X15
	POR X0, X15
	MOVO X15, 592(BX)
	PSRLQ $35, X9
	PSUBQ X11, X1
	MOVO X1, X12
	PSLLQ $16, X1
	POR X9, X1
	MOVO X1, 608(BX)
	PSRLQ $48, X12
	PSUBQ X13, X14
	PSLLQ $3, X14
	PSUBQ X8, X6
	MOVO X6, X2
	PSLLQ $54, X6
	POR X12, X14
	POR X6, X14
	MOVO X14, 624(BX)
	PSRLQ $10, X2
	MOVO 816(AX), X10
	MOVO 832(AX), X4
	MOVO 848(AX), X5
	MOVO 864(AX), X3
	MOVO X10, X0
	MOVO X4, X15
	MOVO X5, X11
	MOVO X3, X9
	PSUBQ X7, X10
	MOVO X10, X1
	PSLLQ $41, X10
	POR X2, X10
	MOVO X10, 640(BX)
	PSRLQ $23, X1
	PSUBQ X0, X4
	MOVO X4, X13
	PSLLQ $28, X4
	POR X1, X4
	MOVO X4, 656(BX)
	PSRLQ $36, X13
	PSUBQ X15, X5
	MOVO X5, X8
	PSLLQ $15, X5
	POR X13, X5
	MOVO X5, 672(BX)
	PSRLQ $49, X8
	PSUBQ X11, X3
	PSLLQ $2, X3
	MOVO 880(AX), X12
	MOVO 896(AX), X6
	MOVO 912(AX), X14
	MOVO 928(AX), X7
	MOVO X12, X2
	MOVO X6, X10
	MOVO X14, X0
	MOVO X7, X1
	PSUBQ X9, X12
	MOVO X12, X4
	PSLLQ $53, X12
	POR X8, X3
	POR X12, X3
	MOVO X3, 688(BX)
	PSRLQ $11, X4
	PSUBQ X2, X6
	MOVO X6, X15
	PSLLQ $40, X6
	POR X4, X6
	MOVO X6, 704(BX)
	PSRLQ $24, X15
	PSUBQ X10, X14
	MOVO X14, X13
	PSLLQ $27, X14
	POR X15, X14
	MOVO X14, 720(BX)
	PSRLQ $37, X13
	PSUBQ X0, X7
	MOVO X7, X5
	PSLLQ $14, X7
	POR X13, X7
	MOVO X7, 736(BX)
	PSRLQ $50, X5
	MOVO 944(AX), X11
	MOVO 960(AX), X9
	MOVO 976(AX), X8
	MOVO 992(AX), X12
	MOVO X11, X3
	MOVO X9, X2
	MOVO X8, X4
	MOVO X12, X6
	PSUBQ X1, X11
	PSLLQ $1, X11
	PSUBQ X3, X9
	MOVO X9, X10
	PSLLQ $52, X9
	POR X5, X11
	POR X9, X11
	MOVO X11, 752(BX)
	PSRLQ $12, X10
	PSUBQ X2, X8
	MOVO X8, X15
	PSLLQ $39, X8
	POR X10, X8
	MOVO X8, 768(BX)
	PSRLQ $25, X15
	PSUBQ X4, X12
	MOVO X12, X14
	PSLLQ $26, X12
	POR X15, X12
	MOVO X12, 784(BX)
	PSRLQ $38, X14
	MOVO 1008(AX), X0
	MOVO X0, X13
	PSUBQ X6, X0
	PSLLQ $13, X0
	POR X14, X0
	MOVO X0, 800(BX)
	MOVO X13, 0(DX)
	RET

// func dpack64_52(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_52(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $52, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $12, X7
	PSUBQ X5, X3
	MOVO X3, X8
	PSLLQ $40, X3
	POR X7, X3
	MOVO X3, 16(BX)
	PSRLQ $24, X8
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	PSUBQ X6, X9
	MOVO X9, X4
	PSLLQ $28, X9
	POR X8, X9
	MOVO X9, 32(BX)
	PSRLQ $36, X4
	PSUBQ X13, X10
	MOVO X10, X1
	PSLLQ $16, X10
	POR X4, X10
	MOVO X10, 48(BX)
	PSRLQ $48, X1
	PSUBQ X14, X11
	PSLLQ $4, X11
	PSUBQ X15, X12
	MOVO X12, X2
	PSLLQ $56, X12
	POR X1, X11
	POR X12, X11
	MOVO X11, 64(BX)
	PSRLQ $8, X2
	MOVO 112(AX), X5
	MOVO 128(AX), X7
	MOVO 144(AX), X3
	MOVO 160(AX), X6
	MOVO X5, X8
	MOVO X7, X9
	MOVO X3, X13
	MOVO X6, X4
	PSUBQ X0, X5
	MOVO X5, X10
	PSLLQ $44, X5
	POR X2, X5
	MOVO X5, 80(BX)
	PSRLQ $20, X10
	PSUBQ X8, X7
	MOVO X7, X14
	PSLLQ $32, X7
	POR X10, X7
	MOVO X7, 96(BX)
	PSRLQ $32, X14
	PSUBQ X9, X3
	MOVO X3, X15
	PSLLQ $20, X3
	POR X14, X3
	MOVO X3, 112(BX)
	PSRLQ $44, X15
	PSUBQ X13, X6
	PSLLQ $8, X6
	MOVO 176(AX), X1
	MOVO 192(AX), X12
	MOVO 208(AX), X11
	MOVO 224(AX), X0
	MOVO X1, X2
	MOVO X12, X5
	MOVO X11, X8
	MOVO X0, X10
	PSUBQ X4, X1
	MOVO X1, X7
	PSLLQ $60, X1
	POR X15, X6
	POR X1, X6
	MOVO X6, 128(BX)
	PSRLQ $4, X7
	PSUBQ X2, X12
	MOVO X12, X9
	PSLLQ $48, X12
	POR X7, X12
	MOVO X12, 144(BX)
	PSRLQ $16, X9
	PSUBQ X5, X11
	MOVO X11, X14
	PSLLQ $36, X11
	POR X9, X11
	MOVO X11, 160(BX)
	PSRLQ $28, X14
	PSUBQ X8, X0
	MOVO X0, X3
	PSLLQ $24, X0
	POR X14, X0
	MOVO X0, 176(BX)
	PSRLQ $40, X3
	MOVO 240(AX), X13
	MOVO 256(AX), X4
	MOVO 272(AX), X15
	MOVO 288(AX), X1
	MOVO X13, X6
	MOVO X4, X2
	MOVO X15, X7
	MOVO X1, X12
	PSUBQ X10, X13
	PSLLQ $12, X13
	POR X3, X13
	MOVO X13, 192(BX)
	PSUBQ X6, X4
	PSUBQ X2, X15
	MOVO X15, X5
	PSLLQ $52, X15
	POR X4, X15
	MOVO X15, 208(BX)
	PSRLQ $12, X5
	PSUBQ X7, X1
	MOVO X1, X9
	PSLLQ $40, X1
	POR X5, X1
	MOVO X1, 224(BX)
	PSRLQ $24, X9
	MOVO 304(AX), X11
	MOVO 320(AX), X8
	MOVO 336(AX), X14
	MOVO 352(AX), X0
	MOVO X11, X10
	MOVO X8, X3
	MOVO X14, X13
	MOVO X0, X6
	PSUBQ X12, X11
	MOVO X11, X2
	PSLLQ $28, X11
	POR X9, X11
	MOVO X11, 240(BX)
	PSRLQ $36, X2
	PSUBQ X10, X8
	MOVO X8, X4
	PSLLQ $16, X8
	POR X2, X8
	MOVO X8, 256(BX)
	PSRLQ $48, X4
	PSUBQ X3, X14
	PSLLQ $4, X14
	PSUBQ X13, X0
	MOVO X0, X15
	PSLLQ $56, X0
	POR X4, X14
	POR X0, X14
	MOVO X14, 272(BX)
	PSRLQ $8, X15
	MOVO 368(AX), X7
	MOVO 384(AX), X5
	MOVO 400(AX), X1
	MOVO 416(AX), X12
	MOVO X7, X9
	MOVO X5, X11
	MOVO X1, X10
	MOVO X12, X2
	PSUBQ X6, X7
	MOVO X7, X8
	PSLLQ $44, X7
	POR X15, X7
	MOVO X7, 288(BX)
	PSRLQ $20, X8
	PSUBQ X9, X5
	MOVO X5, X3
	PSLLQ $32, X5
	POR X8, X5
	MOVO X5, 304(BX)
	PSRLQ $32, X3
	PSUBQ X11, X1
	MOVO X1, X13
	PSLLQ $20, X1
	POR X3, X1
	MOVO X1, 320(BX)
	PSRLQ $44, X13
	PSUBQ X10, X12
	PSLLQ $8, X12
	MOVO 432(AX), X4
	MOVO 448(AX), X0
	MOVO 464(AX), X14
	MOVO 480(AX), X6
	MOVO X4, X15
	MOVO X0, X7
	MOVO X14, X9
	MOVO X6, X8
	PSUBQ X2, X4
	MOVO X4, X5
	PSLLQ $60, X4
	POR X13, X12
	POR X4, X12
	MOVO X12, 336(BX)
	PSRLQ $4, X5
	PSUBQ X15, X0
	MOVO X0, X11
	PSLLQ $48, X0
	POR X5, X0
	MOVO X0, 352(BX)
	PSRLQ $16, X11
	PSUBQ X7, X14
	MOVO X14, X3
	PSLLQ $36, X14
	POR X11, X14
	MOVO X14, 368(BX)
	PSRLQ $28, X3
	PSUBQ X9, X6
	MOVO X6, X1
	PSLLQ $24, X6
	POR X3, X6
	MOVO X6, 384(BX)
	PSRLQ $40, X1
	MOVO 496(AX), X10
	MOVO 512(AX), X2
	MOVO 528(AX), X13
	MOVO 544(AX), X4
	MOVO X10, X12
	MOVO X2, X15
	MOVO X13, X5
	MOVO X4, X0
	PSUBQ X8, X10
	PSLLQ $12, X10
	POR X1, X10
	MOVO X10, 400(BX)
	PSUBQ X12, X2
	PSUBQ X15, X13
	MOVO X13, X7
	PSLLQ $52, X13
	POR X2, X13
	MOVO X13, 416(BX)
	PSRLQ $12, X7
	PSUBQ X5, X4
	MOVO X4, X11
	PSLLQ $40, X4
	POR X7, X4
	MOVO X4, 432(BX)
	PSRLQ $24, X11
	MOVO 560(AX), X14
	MOVO 576(AX), X9
	MOVO 592(AX), X3
	MOVO 608(AX), X6
	MOVO X14, X8
	MOVO X9, X1
	MOVO X3, X10
	MOVO X6, X12
	PSUBQ X0, X14
	MOVO X14, X15
	PSLLQ $28, X14
	POR X11, X14
	MOVO X14, 448(BX)
	PSRLQ $36, X15
	PSUBQ X8, X9
	MOVO X9, X2
	PSLLQ $16, X9
	POR X15, X9
	MOVO X9, 464(BX)
	PSRLQ $48, X2
	PSUBQ X1, X3
	PSLLQ $4, X3
	PSUBQ X10, X6
	MOVO X6, X13
	PSLLQ $56, X6
	POR X2, X3
	POR X6, X3
	MOVO X3, 480(BX)
	PSRLQ $8, X13
	MOVO 624(AX), X5
	MOVO 640(AX), X7
	MOVO 656(AX), X4
	MOVO 672(AX), X0
	MOVO X5, X11
	MOVO X7, X14
	MOVO X4, X8
	MOVO X0, X15
	PSUBQ X12, X5
	MOVO X5, X9
	PSLLQ $44, X5
	POR X13, X5
	MOVO X5, 496(BX)
	PSRLQ $20, X9
	PSUBQ X11, X7
	MOVO X7, X1
	PSLLQ $32, X7
	POR X9, X7
	MOVO X7, 512(BX)
	PSRLQ $32, X1
	PSUBQ X14, X4
	MOVO X4, X10
	PSLLQ $20, X4
	POR X1, X4
	MOVO X4, 528(BX)
	PSRLQ $44, X10
	PSUBQ X8, X0
	PSLLQ $8, X0
	MOVO 688(AX), X2
	MOVO 704(AX), X6
	MOVO 720(AX), X3
	MOVO 736(AX), X12
	MOVO X2, X13
	MOVO X6, X5
	MOVO X3, X11
	MOVO X12, X9
	PSUBQ X15, X2
	MOVO X2, X7
	PSLLQ $60, X2
	POR X10, X0
	POR X2, X0
	MOVO X0, 544(BX)
	PSRLQ $4, X7
	PSUBQ X13, X6
	MOVO X6, X14
	PSLLQ $48, X6
	POR X7, X6
	MOVO X6, 560(BX)
	PSRLQ $16, X14
	PSUBQ X5, X3
	MOVO X3, X1
	PSLLQ $36, X3
	POR X14, X3
	MOVO X3, 576(BX)
	PSRLQ $28, X1
	PSUBQ X11, X12
	MOVO X12, X4
	PSLLQ $24, X12
	POR X1, X12
	MOVO X12, 592(BX)
	PSRLQ $40, X4
	MOVO 752(AX), X8
	MOVO 768(AX), X15
	MOVO 784(AX), X10
	MOVO 800(AX), X2
	MOVO X8, X0
	MOVO X15, X13
	MOVO X10, X7
	MOVO X2, X6
	PSUBQ X9, X8
	PSLLQ $12, X8
	POR X4, X8
	MOVO X8, 608(BX)
	PSUBQ X0, X15
	PSUBQ X13, X10
	MOVO X10, X5
	PSLLQ $52, X10
	POR X15, X10
	MOVO X10, 624(BX)
	PSRLQ $12, X5
	PSUBQ X7, X2
	MOVO X2, X14
	PSLLQ $40, X2
	POR X5, X2
	MOVO X2, 640(BX)
	PSRLQ $24, X14
	MOVO 816(AX), X3
	MOVO 832(AX), X11
	MOVO 848(AX), X1
	MOVO 864(AX), X12
	MOVO X3, X9
	MOVO X11, X4
	MOVO X1, X8
	MOVO X12, X0
	PSUBQ X6, X3
	MOVO X3, X13
	PSLLQ $28, X3
	POR X14, X3
	MOVO X3, 656(BX)
	PSRLQ $36, X13
	PSUBQ X9, X11
	MOVO X11, X15
	PSLLQ $16, X11
	POR X13, X11
	MOVO X11, 672(BX)
	PSRLQ $48, X15
	PSUBQ X4, X1
	PSLLQ $4, X1
	PSUBQ X8, X12
	MOVO X12, X10
	PSLLQ $56, X12
	POR X15, X1
	POR X12, X1
	MOVO X1, 688(BX)
	PSRLQ $8, X10
	MOVO 880(AX), X7
	MOVO 896(AX), X5
	MOVO 912(AX), X2
	MOVO 928(AX), X6
	MOVO X7, X14
	MOVO X5, X3
	MOVO X2, X9
	MOVO X6, X13
	PSUBQ X0, X7
	MOVO X7, X11
	PSLLQ $44, X7
	POR X10, X7
	MOVO X7, 704(BX)
	PSRLQ $20, X11
	PSUBQ X14, X5
	MOVO X5, X4
	PSLLQ $32, X5
	POR X11, X5
	MOVO X5, 720(BX)
	PSRLQ $32, X4
	PSUBQ X3, X2
	MOVO X2, X8
	PSLLQ $20, X2
	POR X4, X2
	MOVO X2, 736(BX)
	PSRLQ $44, X8
	PSUBQ X9, X6
	PSLLQ $8, X6
	MOVO 944(AX), X15
	MOVO 960(AX), X12
	MOVO 976(AX), X1
	MOVO 992(AX), X0
	MOVO X15, X10
	MOVO X12, X7
	MOVO X1, X14
	MOVO X0, X11
	PSUBQ X13, X15
	MOVO X15, X5
	PSLLQ $60, X15
	POR X8, X6
	POR X15, X6
	MOVO X6, 752(BX)
	PSRLQ $4, X5
	PSUBQ X10, X12
	MOVO X12, X3
	PSLLQ $48, X12
	POR X5, X12
	MOVO X12, 768(BX)
	PSRLQ $16, X3
	PSUBQ X7, X1
	MOVO X1, X4
	PSLLQ $36, X1
	POR X3, X1
	MOVO X1, 784(BX)
	PSRLQ $28, X4
	PSUBQ X14, X0
	MOVO X0, X2
	PSLLQ $24, X0
	POR X4, X0
	MOVO X0, 800(BX)
	PSRLQ $40, X2
	MOVO 1008(AX), X9
	MOVO X9, X13
	PSUBQ X11, X9
	PSLLQ $12, X9
	POR X2, X9
	MOVO X9, 816(BX)
	MOVO X13, 0(DX)
	RET

// func dpack64_53(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_53(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $53, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $11, X7
	PSUBQ X5, X3
	MOVO X3, X8
	PSLLQ $42, X3
	POR X7, X3
	MOVO X3, 16(BX)
	PSRLQ $22, X8
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	PSUBQ X6, X9
	MOVO X9, X4
	PSLLQ $31, X9
	POR X8, X9
	MOVO X9, 32(BX)
	PSRLQ $33, X4
	PSUBQ X13, X10
	MOVO X10, X1
	PSLLQ $20, X10
	POR X4, X10
	MOVO X10, 48(BX)
	PSRLQ $44, X1
	PSUBQ X14, X11
	PSLLQ $9, X11
	PSUBQ X15, X12
	MOVO X12, X2
	PSLLQ $62, X12
	POR X1, X11
	POR X12, X11
	MOVO X11, 64(BX)
	PSRLQ $2, X2
	MOVO 112(AX), X5
	MOVO 128(AX), X7
	MOVO 144(AX), X3
	MOVO 160(AX), X6
	MOVO X5, X8
	MOVO X7, X9
	MOVO X3, X13
	MOVO X6, X4
	PSUBQ X0, X5
	MOVO X5, X10
	PSLLQ $51, X5
	POR X2, X5
	MOVO X5, 80(BX)
	PSRLQ $13, X10
	PSUBQ X8, X7
	MOVO X7, X14
	PSLLQ $40, X7
	POR X10, X7
	MOVO X7, 96(BX)
	PSRLQ $24, X14
	PSUBQ X9, X3
	MOVO X3, X15
	PSLLQ $29, X3
	POR X14, X3
	MOVO X3, 112(BX)
	PSRLQ $35, X15
	PSUBQ X13, X6
	MOVO X6, X1
	PSLLQ $18, X6
	POR X15, X6
	MOVO X6, 128(BX)
	PSRLQ $46, X1
	MOVO 176(AX), X12
	MOVO 192(AX), X11
	MOVO 208(AX), X0
	MOVO 224(AX), X2
	MOVO X12, X5
	MOVO X11, X8
	MOVO X0, X10
	MOVO X2, X7
	PSUBQ X4, X12
	PSLLQ $7, X12
	PSUBQ X5, X11
	MOVO X11, X9
	PSLLQ $60, X11
	POR X1, X12
	POR X11, X12
	MOVO X12, 144(BX)
	PSRLQ $4, X9
	PSUBQ X8, X0
	MOVO X0, X14
	PSLLQ $49, X0
	POR X9, X0
	MOVO X0, 160(BX)
	PSRLQ $15, X14
	PSUBQ X10, X2
	MOVO X2, X3
	PSLLQ $38, X2
	POR X14, X2
	MOVO X2, 176(BX)
	PSRLQ $26, X3
	MOVO 240(AX), X13
	MOVO 256(AX), X15
	MOVO 272(AX), X6
	MOVO 288(AX), X4
	MOVO X13, X5
	MOVO X15, X1
	MOVO X6, X11
	MOVO X4, X12
	PSUBQ X7, X13
	MOVO X13, X8
	PSLLQ $27, X13
	POR X3, X13
	MOVO X13, 192(BX)
	PSRLQ $37, X8
	PSUBQ X5, X15
	MOVO X15, X9
	PSLLQ $16, X15
	POR X8, X15
	MOVO X15, 208(BX)
	PSRLQ $48, X9
	PSUBQ X1, X6
	PSLLQ $5, X6
	PSUBQ X11, X4
	MOVO X4, X0
	PSLLQ $58, X4
	POR X9, X6
	POR X4, X6
	MOVO X6, 224(BX)
	PSRLQ $6, X0
	MOVO 304(AX), X10
	MOVO 320(AX), X14
	MOVO 336(AX), X2
	MOVO 352(AX), X7
	MOVO X10, X3
	MOVO X14, X13
	MOVO X2, X5
	MOVO X7, X8
	PSUBQ X12, X10
	MOVO X10, X15
	PSLLQ $47, X10
	POR X0, X10
	MOVO X10, 240(BX)
	PSRLQ $17, X15
	PSUBQ X3, X14
	MOVO X14, X1
	PSLLQ $36, X14
	POR X15, X14
	MOVO X14, 256(BX)
	PSRLQ $28, X1
	PSUBQ X13, X2
	MOVO X2, X11
	PSLLQ $25, X2
	POR X1, X2
	MOVO X2, 272(BX)
	PSRLQ $39, X11
	PSUBQ X5, X7
	MOVO X7, X9
	PSLLQ $14, X7
	POR X11, X7
	MOVO X7, 288(BX)
	PSRLQ $50, X9
	MOVO 368(AX), X4
	MOVO 384(AX), X6
	MOVO 400(AX), X12
	MOVO 416(AX), X0
	MOVO X4, X10
	MOVO X6, X3
	MOVO X12, X15
	MOVO X0, X14
	PSUBQ X8, X4
	PSLLQ $3, X4
	PSUBQ X10, X6
	MOVO X6, X13
	PSLLQ $56, X6
	POR X9, X4
	POR X6, X4
	MOVO X4, 304(BX)
	PSRLQ $8, X13
	PSUBQ X3, X12
	MOVO X12, X1
	PSLLQ $45, X12
	POR X13, X12
	MOVO X12, 320(BX)
	PSRLQ $19, X1
	PSUBQ X15, X0
	MOVO X0, X2
	PSLLQ $34, X0
	POR X1, X0
	MOVO X0, 336(BX)
	PSRLQ $30, X2
	MOVO 432(AX), X5
	MOVO 448(AX), X11
	MOVO 464(AX), X7
	MOVO 480(AX), X8
	MOVO X5, X10
	MOVO X11, X9
	MOVO X7, X6
	MOVO X8, X4
	PSUBQ X14, X5
	MOVO X5, X3
	PSLLQ $23, X5
	POR X2, X5
	MOVO X5, 352(BX)
	PSRLQ $41, X3
	PSUBQ X10, X11
	MOVO X11, X13
	PSLLQ $12, X11
	POR X3, X11
	MOVO X11, 368(BX)
	PSRLQ $52, X13
	PSUBQ X9, X7
	PSLLQ $1, X7
	PSUBQ X6, X8
	MOVO X8, X12
	PSLLQ $54, X8
	POR X13, X7
	POR X8, X7
	MOVO X7, 384(BX)
	PSRLQ $10, X12
	MOVO 496(AX), X15
	MOVO 512(AX), X1
	MOVO 528(AX), X0
	MOVO 544(AX), X14
	MOVO X15, X2
	MOVO X1, X5
	MOVO X0, X10
	MOVO X14, X3
	PSUBQ X4, X15
	MOVO X15, X11
	PSLLQ $43, X15
	POR X12, X15
	MOVO X15, 400(BX)
	PSRLQ $21, X11
	PSUBQ X2, X1
	MOVO X1, X9
	PSLLQ $32, X1
	POR X11, X1
	MOVO X1, 416(BX)
	PSRLQ $32, X9
	PSUBQ X5, X0
	MOVO X0, X6
	PSLLQ $21, X0
	POR X9, X0
	MOVO X0, 432(BX)
	PSRLQ $43, X6
	PSUBQ X10, X14
	PSLLQ $10, X14
	MOVO 560(AX), X13
	MOVO 576(AX), X8
	MOVO 592(AX), X7
	MOVO 608(AX), X4
	MOVO X13, X12
	MOVO X8, X15
	MOVO X7, X2
	MOVO X4, X11
	PSUBQ X3, X13
	MOVO X13, X1
	PSLLQ $63, X13
	POR X6, X14
	POR X13, X14
	MOVO X14, 448(BX)
	PSRLQ $1, X1
	PSUBQ X12, X8
	MOVO X8, X5
	PSLLQ $52, X8
	POR X1, X8
	MOVO X8, 464(BX)
	PSRLQ $12, X5
	PSUBQ X15, X7
	MOVO X7, X9
	PSLLQ $41, X7
	POR X5, X7
	MOVO X7, 480(BX)
	PSRLQ $23, X9
	PSUBQ X2, X4
	MOVO X4, X0
	PSLLQ $30, X4
	POR X9, X4
	MOVO X4, 496(BX)
	PSRLQ $34, X0
	MOVO 624(AX), X10
	MOVO 640(AX), X3
	MOVO 656(AX), X6
	MOVO 672(AX), X13
	MOVO X10, X14
	MOVO X3, X12
	MOVO X6, X1
	MOVO X13, X8
	PSUBQ X11, X10
	MOVO X10, X15
	PSLLQ $19, X10
	POR X0, X10
	MOVO X10, 512(BX)
	PSRLQ $45, X15
	PSUBQ X14, X3
	PSLLQ $8, X3
	PSUBQ X12, X6
	MOVO X6, X5
	PSLLQ $61, X6
	POR X15, X3
	POR X6, X3
	MOVO X3, 528(BX)
	PSRLQ $3, X5
	PSUBQ X1, X13
	MOVO X13, X7
	PSLLQ $50, X13
	POR X5, X13
	MOVO X13, 544(BX)
	PSRLQ $14, X7
	MOVO 688(AX), X2
	MOVO 704(AX), X9
	MOVO 720(AX), X4
	MOVO 736(AX), X11
	MOVO X2, X0
	MOVO X9, X10
	MOVO X4, X14
	MOVO X11, X12
	PSUBQ X8, X2
	MOVO X2, X15
	PSLLQ $39, X2
	POR X7, X2
	MOVO X2, 560(BX)
	PSRLQ $25, X15
	PSUBQ X0, X9
	MOVO X9, X6
	PSLLQ $28, X9
	POR X15, X9
	MOVO X9, 576(BX)
	PSRLQ $36, X6
	PSUBQ X10, X4
	MOVO X4, X3
	PSLLQ $17, X4
	POR X6, X4
	MOVO X4, 592(BX)
	PSRLQ $47, X3
	PSUBQ X14, X11
	PSLLQ $6, X11
	MOVO 752(AX), X1
	MOVO 768(AX), X5
	MOVO 784(AX), X13
	MOVO 800(AX), X8
	MOVO X1, X7
	MOVO X5, X2
	MOVO X13, X0
	MOVO X8, X15
	PSUBQ X12, X1
	MOVO X1, X9
	PSLLQ $59, X1
	POR X3, X11
	POR X1, X11
	MOVO X11, 608(BX)
	PSRLQ $5, X9
	PSUBQ X7, X5
	MOVO X5, X10
	PSLLQ $48, X5
	POR X9, X5
	MOVO X5, 624(BX)
	PSRLQ $16, X10
	PSUBQ X2, X13
	MOVO X13, X6
	PSLLQ $37, X13
	POR X10, X13
	MOVO X13, 640(BX)
	PSRLQ $27, X6
	PSUBQ X0, X8
	MOVO X8, X4
	PSLLQ $26, X8
	POR X6, X8
	MOVO X8, 656(BX)
	PSRLQ $38, X4
	MOVO 816(AX), X14
	MOVO 832(AX), X12
	MOVO 848(AX), X3
	MOVO 864(AX), X1
	MOVO X14, X11
	MOVO X12, X7
	MOVO X3, X9
	MOVO X1, X5
	PSUBQ X15, X14
	MOVO X14, X2
	PSLLQ $15, X14
	POR X4, X14
	MOVO X14, 672(BX)
	PSRLQ $49, X2
	PSUBQ X11, X12
	PSLLQ $4, X12
	PSUBQ X7, X3
	MOVO X3, X10
	PSLLQ $57, X3
	POR X2, X12
	POR X3, X12
	MOVO X12, 688(BX)
	PSRLQ $7, X10
	PSUBQ X9, X1
	MOVO X1, X13
	PSLLQ $46, X1
	POR X10, X1
	MOVO X1, 704(BX)
	PSRLQ $18, X13
	MOVO 880(AX), X0
	MOVO 896(AX), X6
	MOVO 912(AX), X8
	MOVO 928(AX), X15
	MOVO X0, X4
	MOVO X6, X14
	MOVO X8, X11
	MOVO X15, X7
	PSUBQ X5, X0
	MOVO X0, X2
	PSLLQ $35, X0
	POR X13, X0
	MOVO X0, 720(BX)
	PSRLQ $29, X2
	PSUBQ X4, X6
	MOVO X6, X3
	PSLLQ $24, X6
	POR X2, X6
	MOVO X6, 736(BX)
	PSRLQ $40, X3
	PSUBQ X14, X8
	MOVO X8, X12
	PSLLQ $13, X8
	POR X3, X8
	MOVO X8, 752(BX)
	PSRLQ $51, X12
	PSUBQ X11, X15
	PSLLQ $2, X15
	MOVO 944(AX), X9
	MOVO 960(AX), X10
	MOVO 976(AX), X1
	MOVO 992(AX), X5
	MOVO X9, X13
	MOVO X10, X0
	MOVO X1, X4
	MOVO X5, X2
	PSUBQ X7, X9
	MOVO X9, X6
	PSLLQ $55, X9
	POR X12, X15
	POR X9, X15
	MOVO X15, 768(BX)
	PSRLQ $9, X6
	PSUBQ X13, X10
	MOVO X10, X14
	PSLLQ $44, X10
	POR X6, X10
	MOVO X10, 784(BX)
	PSRLQ $20, X14
	PSUBQ X0, X1
	MOVO X1, X3
	PSLLQ $33, X1
	POR X14, X1
	MOVO X1, 800(BX)
	PSRLQ $31, X3
	PSUBQ X4, X5
	MOVO X5, X8
	PSLLQ $22, X5
	POR X3, X5
	MOVO X5, 816(BX)
	PSRLQ $42, X8
	MOVO 1008(AX), X11
	MOVO X11, X7
	PSUBQ X2, X11
	PSLLQ $11, X11
	POR X8, X11
	MOVO X11, 832(BX)
	MOVO X7, 0(DX)
	RET

// func dpack64_54(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_54(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $54, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $10, X7
	PSUBQ X5, X3
	MOVO X3, X8
	PSLLQ $44, X3
	POR X7, X3
	MOVO X3, 16(BX)
	PSRLQ $20, X8
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	PSUBQ X6, X9
	MOVO X9, X4
	PSLLQ $34, X9
	POR X8, X9
	MOVO X9, 32(BX)
	PSRLQ $30, X4
	PSUBQ X13, X10
	MOVO X10, X1
	PSLLQ $24, X10
	POR X4, X10
	MOVO X10, 48(BX)
	PSRLQ $40, X1
	PSUBQ X14, X11
	MOVO X11, X2
	PSLLQ $14, X11
	POR X1, X11
	MOVO X11, 64(BX)
	PSRLQ $50, X2
	PSUBQ X15, X12
	PSLLQ $4, X12
	MOVO 112(AX), X5
	MOVO 128(AX), X7
	MOVO 144(AX), X3
	MOVO 160(AX), X6
	MOVO X5, X8
	MOVO X7, X9
	MOVO X3, X13
	MOVO X6, X4
	PSUBQ X0, X5
	MOVO X5, X10
	PSLLQ $58, X5
	POR X2, X12
	POR X5, X12
	MOVO X12, 80(BX)
	PSRLQ $6, X10
	PSUBQ X8, X7
	MOVO X7, X14
	PSLLQ $48, X7
	POR X10, X7
	MOVO X7, 96(BX)
	PSRLQ $16, X14
	PSUBQ X9, X3
	MOVO X3, X1
	PSLLQ $38, X3
	POR X14, X3
	MOVO X3, 112(BX)
	PSRLQ $26, X1
	PSUBQ X13, X6
	MOVO X6, X11
	PSLLQ $28, X6
	POR X1, X6
	MOVO X6, 128(BX)
	PSRLQ $36, X11
	MOVO 176(AX), X15
	MOVO 192(AX), X0
	MOVO 208(AX), X2
	MOVO 224(AX), X5
	MOVO X15, X12
	MOVO X0, X8
	MOVO X2, X10
	MOVO X5, X7
	PSUBQ X4, X15
	MOVO X15, X9
	PSLLQ $18, X15
	POR X11, X15
	MOVO X15, 144(BX)
	PSRLQ $46, X9
	PSUBQ X12, X0
	PSLLQ $8, X0
	PSUBQ X8, X2
	MOVO X2, X14
	PSLLQ $62, X2
	POR X9, X0
	POR X2, X0
	MOVO X0, 160(BX)
	PSRLQ $2, X14
	PSUBQ X10, X5
	MOVO X5, X3
	PSLLQ $52, X5
	POR X14, X5
	MOVO X5, 176(BX)
	PSRLQ $12, X3
	MOVO 240(AX), X13
	MOVO 256(AX), X1
	MOVO 272(AX), X6
	MOVO 288(AX), X4
	MOVO X13, X11
	MOVO X1, X15
	MOVO X6, X12
	MOVO X4, X8
	PSUBQ X7, X13
	MOVO X13, X9
	PSLLQ $42, X13
	POR X3, X13
	MOVO X13, 192(BX)
	PSRLQ $22, X9
	PSUBQ X11, X1
	MOVO X1, X2
	PSLLQ $32, X1
	POR X9, X1
	MOVO X1, 208(BX)
	PSRLQ $32, X2
	PSUBQ X15, X6
	MOVO X6, X0
	PSLLQ $22, X6
	POR X2, X6
	MOVO X6, 224(BX)
	PSRLQ $42, X0
	PSUBQ X12, X4
	MOVO X4, X10
	PSLLQ $12, X4
	POR X0, X4
	MOVO X4, 240(BX)
	PSRLQ $52, X10
	MOVO 304(AX), X14
	MOVO 320(AX), X5
	MOVO 336(AX), X7
	MOVO 352(AX), X3
	MOVO X14, X13
	MOVO X5, X11
	MOVO X7, X9
	MOVO X3, X1
	PSUBQ X8, X14
	PSLLQ $2, X14
	PSUBQ X13, X5
	MOVO X5, X15
	PSLLQ $56, X5
	POR X10, X14
	POR X5, X14
	MOVO X14, 256(BX)
	PSRLQ $8, X15
	PSUBQ X11, X7
	MOVO X7, X2
	PSLLQ $46, X7
	POR X15, X7
	MOVO X7, 272(BX)
	PSRLQ $18, X2
	PSUBQ X9, X3
	MOVO X3, X6
	PSLLQ $36, X3
	POR X2, X3
	MOVO X3, 288(BX)
	PSRLQ $28, X6
	MOVO 368(AX), X12
	MOVO 384(AX), X0
	MOVO 400(AX), X4
	MOVO 416(AX), X8
	MOVO X12, X13
	MOVO X0, X10
	MOVO X4, X5
	MOVO X8, X14
	PSUBQ X1, X12
	MOVO X12, X11
	PSLLQ $26, X12
	POR X6, X12
	MOVO X12, 304(BX)
	PSRLQ $38, X11
	PSUBQ X13, X0
	MOVO X0, X15
	PSLLQ $16, X0
	POR X11, X0
	MOVO X0, 320(BX)
	PSRLQ $48, X15
	PSUBQ X10, X4
	PSLLQ $6, X4
	PSUBQ X5, X8
	MOVO X8, X7
	PSLLQ $60, X8
	POR X15, X4
	POR X8, X4
	MOVO X4, 336(BX)
	PSRLQ $4, X7
	MOVO 432(AX), X9
	MOVO 448(AX), X2
	MOVO 464(AX), X3
	MOVO 480(AX), X1
	MOVO X9, X6
	MOVO X2, X12
	MOVO X3, X13
	MOVO X1, X11
	PSUBQ X14, X9
	MOVO X9, X0
	PSLLQ $50, X9
	POR X7, X9
	MOVO X9, 352(BX)
	PSRLQ $14, X0
	PSUBQ X6, X2
	MOVO X2, X10
	PSLLQ $40, X2
	POR X0, X2
	MOVO X2, 368(BX)
	PSRLQ $24, X10
	PSUBQ X12, X3
	MOVO X3, X5
	PSLLQ $30, X3
	POR X10, X3
	MOVO X3, 384(BX)
	PSRLQ $34, X5
	PSUBQ X13, X1
	MOVO X1, X15
	PSLLQ $20, X1
	POR X5, X1
	MOVO X1, 400(BX)
	PSRLQ $44, X15
	MOVO 496(AX), X8
	MOVO 512(AX), X4
	MOVO 528(AX), X14
	MOVO 544(AX), X7
	MOVO X8, X9
	MOVO X4, X6
	MOVO X14, X0
	MOVO X7, X2
	PSUBQ X11, X8
	PSLLQ $10, X8
	POR X15, X8
	MOVO X8, 416(BX)
	PSUBQ X9, X4
	PSUBQ X6, X14
	MOVO X14, X12
	PSLLQ $54, X14
	POR X4, X14
	MOVO X14, 432(BX)
	PSRLQ $10, X12
	PSUBQ X0, X7
	MOVO X7, X10
	PSLLQ $44, X7
	POR X12, X7
	MOVO X7, 448(BX)
	PSRLQ $20, X10
	MOVO 560(AX), X3
	MOVO 576(AX), X13
	MOVO 592(AX), X5
	MOVO 608(AX), X1
	MOVO X3, X11
	MOVO X13, X15
	MOVO X5, X8
	MOVO X1, X9
	PSUBQ X2, X3
	MOVO X3, X6
	PSLLQ $34, X3
	POR X10, X3
	MOVO X3, 464(BX)
	PSRLQ $30, X6
	PSUBQ X11, X13
	MOVO X13, X4
	PSLLQ $24, X13
	POR X6, X13
	MOVO X13, 480(BX)
	PSRLQ $40, X4
	PSUBQ X15, X5
	MOVO X5, X14
	PSLLQ $14, X5
	POR X4, X5
	MOVO X5, 496(BX)
	PSRLQ $50, X14
	PSUBQ X8, X1
	PSLLQ $4, X1
	MOVO 624(AX), X0
	MOVO 640(AX), X12
	MOVO 656(AX), X7
	MOVO 672(AX), X2
	MOVO X0, X10
	MOVO X12, X3
	MOVO X7, X11
	MOVO X2, X6
	PSUBQ X9, X0
	MOVO X0, X13
	PSLLQ $58, X0
	POR X14, X1
	POR X0, X1
	MOVO X1, 512(BX)
	PSRLQ $6, X13
	PSUBQ X10, X12
	MOVO X12, X15
	PSLLQ $48, X12
	POR X13, X12
	MOVO X12, 528(BX)
	PSRLQ $16, X15
	PSUBQ X3, X7
	MOVO X7, X4
	PSLLQ $38, X7
	POR X15, X7
	MOVO X7, 544(BX)
	PSRLQ $26, X4
	PSUBQ X11, X2
	MOVO X2, X5
	PSLLQ $28, X2
	POR X4, X2
	MOVO X2, 560(BX)
	PSRLQ $36, X5
	MOVO 688(AX), X8
	MOVO 704(AX), X9
	MOVO 720(AX), X14
	MOVO 736(AX), X0
	MOVO X8, X1
	MOVO X9, X10
	MOVO X14, X13
	MOVO X0, X12
	PSUBQ X6, X8
	MOVO X8, X3
	PSLLQ $18, X8
	POR X5, X8
	MOVO X8, 576(BX)
	PSRLQ $46, X3
	PSUBQ X1, X9
	PSLLQ $8, X9
	PSUBQ X10, X14
	MOVO X14, X15
	PSLLQ $62, X14
	POR X3, X9
	POR X14, X9
	MOVO X9, 592(BX)
	PSRLQ $2, X15
	PSUBQ X13, X0
	MOVO X0, X7
	PSLLQ $52, X0
	POR X15, X0
	MOVO X0, 608(BX)
	PSRLQ $12, X7
	MOVO 752(AX), X11
	MOVO 768(AX), X4
	MOVO 784(AX), X2
	MOVO 800(AX), X6
	MOVO X11, X5
	MOVO X4, X8
	MOVO X2, X1
	MOVO X6, X10
	PSUBQ X12, X11
	MOVO X11, X3
	PSLLQ $42, X11
	POR X7, X11
	MOVO X11, 624(BX)
	PSRLQ $22, X3
	PSUBQ X5, X4
	MOVO X4, X14
	PSLLQ $32, X4
	POR X3, X4
	MOVO X4, 640(BX)
	PSRLQ $32, X14
	PSUBQ X8, X2
	MOVO X2, X9
	PSLLQ $22, X2
	POR X14, X2
	MOVO X2, 656(BX)
	PSRLQ $42, X9
	PSUBQ X1, X6
	MOVO X6, X13
	PSLLQ $12, X6
	POR X9, X6
	MOVO X6, 672(BX)
	PSRLQ $52, X13
	MOVO 816(AX), X15
	MOVO 832(AX), X0
	MOVO 848(AX), X12
	MOVO 864(AX), X7
	MOVO X15, X11
	MOVO X0, X5
	MOVO X12, X3
	MOVO X7, X4
	PSUBQ X10, X15
	PSLLQ $2, X15
	PSUBQ X11, X0
	MOVO X0, X8
	PSLLQ $56, X0
	POR X13, X15
	POR X0, X15
	MOVO X15, 688(BX)
	PSRLQ $8, X8
	PSUBQ X5, X12
	MOVO X12, X14
	PSLLQ $46, X12
	POR X8, X12
	MOVO X12, 704(BX)
	PSRLQ $18, X14
	PSUBQ X3, X7
	MOVO X7, X2
	PSLLQ $36, X7
	POR X14, X7
	MOVO X7, 720(BX)
	PSRLQ $28, X2
	MOVO 880(AX), X1
	MOVO 896(AX), X9
	MOVO 912(AX), X6
	MOVO 928(AX), X10
	MOVO X1, X11
	MOVO X9, X13
	MOVO X6, X0
	MOVO X10, X15
	PSUBQ X4, X1
	MOVO X1, X5
	PSLLQ $26, X1
	POR X2, X1
	MOVO X1, 736(BX)
	PSRLQ $38, X5
	PSUBQ X11, X9
	MOVO X9, X8
	PSLLQ $16, X9
	POR X5, X9
	MOVO X9, 752(BX)
	PSRLQ $48, X8
	PSUBQ X13, X6
	PSLLQ $6, X6
	PSUBQ X0, X10
	MOVO X10, X12
	PSLLQ $60, X10
	POR X8, X6
	POR X10, X6
	MOVO X6, 768(BX)
	PSRLQ $4, X12
	MOVO 944(AX), X3
	MOVO 960(AX), X14
	MOVO 976(AX), X7
	MOVO 992(AX), X4
	MOVO X3, X2
	MOVO X14, X1
	MOVO X7, X11
	MOVO X4, X5
	PSUBQ X15, X3
	MOVO X3, X9
	PSLLQ $50, X3
	POR X12, X3
	MOVO X3, 784(BX)
	PSRLQ $14, X9
	PSUBQ X2, X14
	MOVO X14, X13
	PSLLQ $40, X14
	POR X9, X14
	MOVO X14, 800(BX)
	PSRLQ $24, X13
	PSUBQ X1, X7
	MOVO X7, X0
	PSLLQ $30, X7
	POR X13, X7
	MOVO X7, 816(BX)
	PSRLQ $34, X0
	PSUBQ X11, X4
	MOVO X4, X8
	PSLLQ $20, X4
	POR X0, X4
	MOVO X4, 832(BX)
	PSRLQ $44, X8
	MOVO 1008(AX), X10
	MOVO X10, X6
	PSUBQ X5, X10
	PSLLQ $10, X10
	POR X8, X10
	MOVO X10, 848(BX)
	MOVO X6, 0(DX)
	RET

// func dpack64_55(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_55(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $55, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $9, X7
	PSUBQ X5, X3
	MOVO X3, X8
	PSLLQ $46, X3
	POR X7, X3
	MOVO X3, 16(BX)
	PSRLQ $18, X8
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	PSUBQ X6, X9
	MOVO X9, X4
	PSLLQ $37, X9
	POR X8, X9
	MOVO X9, 32(BX)
	PSRLQ $27, X4
	PSUBQ X13, X10
	MOVO X10, X1
	PSLLQ $28, X10
	POR X4, X10
	MOVO X10, 48(BX)
	PSRLQ $36, X1
	PSUBQ X14, X11
	MOVO X11, X2
	PSLLQ $19, X11
	POR X1, X11
	MOVO X11, 64(BX)
	PSRLQ $45, X2
	PSUBQ X15, X12
	MOVO X12, X5
	PSLLQ $10, X12
	POR X2, X12
	MOVO X12, 80(BX)
	PSRLQ $54, X5
	MOVO 112(AX), X7
	MOVO 128(AX), X3
	MOVO 144(AX), X6
	MOVO 160(AX), X8
	MOVO X7, X9
	MOVO X3, X13
	MOVO X6, X4
	MOVO X8, X10
	PSUBQ X0, X7
	PSLLQ $1, X7
	PSUBQ X9, X3
	MOVO X3, X14
	PSLLQ $56, X3
	POR X5, X7
	POR X3, X7
	MOVO X7, 96(BX)
	PSRLQ $8, X14
	PSUBQ X13, X6
	MOVO X6, X1
	PSLLQ $47, X6
	POR X14, X6
	MOVO X6, 112(BX)
	PSRLQ $17, X1
	PSUBQ X4, X8
	MOVO X8, X11
	PSLLQ $38, X8
	POR X1, X8
	MOVO X8, 128(BX)
	PSRLQ $26, X11
	MOVO 176(AX), X15
	MOVO 192(AX), X2
	MOVO 208(AX), X12
	MOVO 224(AX), X0
	MOVO X15, X9
	MOVO X2, X5
	MOVO X12, X3
	MOVO X0, X7
	PSUBQ X10, X15
	MOVO X15, X13
	PSLLQ $29, X15
	POR X11, X15
	MOVO X15, 144(BX)
	PSRLQ $35, X13
	PSUBQ X9, X2
	MOVO X2, X14
	PSLLQ $20, X2
	POR X13, X2
	MOVO X2, 160(BX)
	PSRLQ $44, X14
	PSUBQ X5, X12
	MOVO X12, X6
	PSLLQ $11, X12
	POR X14, X12
	MOVO X12, 176(BX)
	PSRLQ $53, X6
	PSUBQ X3, X0
	PSLLQ $2, X0
	MOVO 240(AX), X4
	MOVO 256(AX), X1
	MOVO 272(AX), X8
	MOVO 288(AX), X10
	MOVO X4, X11
	MOVO X1, X15
	MOVO X8, X9
	MOVO X10, X13
	PSUBQ X7, X4
	MOVO X4, X2
	PSLLQ $57, X4
	POR X6, X0
	POR X4, X0
	MOVO X0, 192(BX)
	PSRLQ $7, X2
	PSUBQ X11, X1
	MOVO X1, X5
	PSLLQ $48, X1
	POR X2, X1
	MOVO X1, 208(BX)
	PSRLQ $16, X5
	PSUBQ X15, X8
	MOVO X8, X14
	PSLLQ $39, X8
	POR X5, X8
	MOVO X8, 224(BX)
	PSRLQ $25, X14
	PSUBQ X9, X10
	MOVO X10, X12
	PSLLQ $30, X10
	POR X14, X10
	MOVO X10, 240(BX)
	PSRLQ $34, X12
	MOVO 304(AX), X3
	MOVO 320(AX), X7
	MOVO 336(AX), X6
	MOVO 352(AX), X4
	MOVO X3, X0
	MOVO X7, X11
	MOVO X6, X2
	MOVO X4, X1
	PSUBQ X13, X3
	MOVO X3, X15
	PSLLQ $21, X3
	POR X12, X3
	MOVO X3, 256(BX)
	PSRLQ $43, X15
	PSUBQ X0, X7
	MOVO X7, X5
	PSLLQ $12, X7
	POR X15, X7
	MOVO X7, 272(BX)
	PSRLQ $52, X5
	PSUBQ X11, X6
	PSLLQ $3, X6
	PSUBQ X2, X4
	MOVO X4, X8
	PSLLQ $58, X4
	POR X5, X6
	POR X4, X6
	MOVO X6, 288(BX)
	PSRLQ $6, X8
	MOVO 368(AX), X9
	MOVO 384(AX), X14
	MOVO 400(AX), X10
	MOVO 416(AX), X13
	MOVO X9, X12
	MOVO X14, X3
	MOVO X10, X0
	MOVO X13, X15
	PSUBQ X1, X9
	MOVO X9, X7
	PSLLQ $49, X9
	POR X8, X9
	MOVO X9, 304(BX)
	PSRLQ $15, X7
	PSUBQ X12, X14
	MOVO X14, X11
	PSLLQ $40, X14
	POR X7, X14
	MOVO X14, 320(BX)
	PSRLQ $24, X11
	PSUBQ X3, X10
	MOVO X10, X2
	PSLLQ $31, X10
	POR X11, X10
	MOVO X10, 336(BX)
	PSRLQ $33, X2
	PSUBQ X0, X13
	MOVO X13, X5
	PSLLQ $22, X13
	POR X2, X13
	MOVO X13, 352(BX)
	PSRLQ $42, X5
	MOVO 432(AX), X4
	MOVO 448(AX), X6
	MOVO 464(AX), X1
	MOVO 480(AX), X8
	MOVO X4, X9
	MOVO X6, X12
	MOVO X1, X7
	MOVO X8, X14
	PSUBQ X15, X4
	MOVO X4, X3
	PSLLQ $13, X4
	POR X5, X4
	MOVO X4, 368(BX)
	PSRLQ $51, X3
	PSUBQ X9, X6
	PSLLQ $4, X6
	PSUBQ X12, X1
	MOVO X1, X11
	PSLLQ $59, X1
	POR X3, X6
	POR X1, X6
	MOVO X6, 384(BX)
	PSRLQ $5, X11
	PSUBQ X7, X8
	MOVO X8, X10
	PSLLQ $50, X8
	POR X11, X8
	MOVO X8, 400(BX)
	PSRLQ $14, X10
	MOVO 496(AX), X0
	MOVO 512(AX), X2
	MOVO 528(AX), X13
	MOVO 544(AX), X15
	MOVO X0, X5
	MOVO X2, X4
	MOVO X13, X9
	MOVO X15, X12
	PSUBQ X14, X0
	MOVO X0, X3
	PSLLQ $41, X0
	POR X10, X0
	MOVO X0, 416(BX)
	PSRLQ $23, X3
	PSUBQ X5, X2
	MOVO X2, X1
	PSLLQ $32, X2
	POR X3, X2
	MOVO X2, 432(BX)
	PSRLQ $32, X1
	PSUBQ X4, X13
	MOVO X13, X6
	PSLLQ $23, X13
	POR X1, X13
	MOVO X13, 448(BX)
	PSRLQ $41, X6
	PSUBQ X9, X15
	MOVO X15, X7
	PSLLQ $14, X15
	POR X6, X15
	MOVO X15, 464(BX)
	PSRLQ $50, X7
	MOVO 560(AX), X11
	MOVO 576(AX), X8
	MOVO 592(AX), X14
	MOVO 608(AX), X10
	MOVO X11, X0
	MOVO X8, X5
	MOVO X14, X3
	MOVO X10, X2
	PSUBQ X12, X11
	PSLLQ $5, X11
	PSUBQ X0, X8
	MOVO X8, X4
	PSLLQ $60, X8
	POR X7, X11
	POR X8, X11
	MOVO X11, 480(BX)
	PSRLQ $4, X4
	PSUBQ X5, X14
	MOVO X14, X1
	PSLLQ $51, X14
	POR X4, X14
	MOVO X14, 496(BX)
	PSRLQ $13, X1
	PSUBQ X3, X10
	MOVO X10, X13
	PSLLQ $42, X10
	POR X1, X10
	MOVO X10, 512(BX)
	PSRLQ $22, X13
	MOVO 624(AX), X9
	MOVO 640(AX), X6
	MOVO 656(AX), X15
	MOVO 672(AX), X12
	MOVO X9, X0
	MOVO X6, X7
	MOVO X15, X8
	MOVO X12, X11
	PSUBQ X2, X9
	MOVO X9, X5
	PSLLQ $33, X9
	POR X13, X9
	MOVO X9, 528(BX)
	PSRLQ $31, X5
	PSUBQ X0, X6
	MOVO X6, X4
	PSLLQ $24, X6
	POR X5, X6
	MOVO X6, 544(BX)
	PSRLQ $40, X4
	PSUBQ X7, X15
	MOVO X15, X14
	PSLLQ $15, X15
	POR X4, X15
	MOVO X15, 560(BX)
	PSRLQ $49, X14
	PSUBQ X8, X12
	PSLLQ $6, X12
	MOVO 688(AX), X3
	MOVO 704(AX), X1
	MOVO 720(AX), X10
	MOVO 736(AX), X2
	MOVO X3, X13
	MOVO X1, X9
	MOVO X10, X0
	MOVO X2, X5
	PSUBQ X11, X3
	MOVO X3, X6
	PSLLQ $61, X3
	POR X14, X12
	POR X3, X12
	MOVO X12, 576(BX)
	PSRLQ $3, X6
	PSUBQ X13, X1
	MOVO X1, X7
	PSLLQ $52, X1
	POR X6, X1
	MOVO X1, 592(BX)
	PSRLQ $12, X7
	PSUBQ X9, X10
	MOVO X10, X4
	PSLLQ $43, X10
	POR X7, X10
	MOVO X10, 608(BX)
	PSRLQ $21, X4
	PSUBQ X0, X2
	MOVO X2, X15
	PSLLQ $34, X2
	POR X4, X2
	MOVO X2, 624(BX)
	PSRLQ $30, X15
	MOVO 752(AX), X8
	MOVO 768(AX), X11
	MOVO 784(AX), X14
	MOVO 800(AX), X3
	MOVO X8, X12
	MOVO X11, X13
	MOVO X14, X6
	MOVO X3, X1
	PSUBQ X5, X8
	MOVO X8, X9
	PSLLQ $25, X8
	POR X15, X8
	MOVO X8, 640(BX)
	PSRLQ $39, X9
	PSUBQ X12, X11
	MOVO X11, X7
	PSLLQ $16, X11
	POR X9, X11
	MOVO X11, 656(BX)
	PSRLQ $48, X7
	PSUBQ X13, X14
	PSLLQ $7, X14
	PSUBQ X6, X3
	MOVO X3, X10
	PSLLQ $62, X3
	POR X7, X14
	POR X3, X14
	MOVO X14, 672(BX)
	PSRLQ $2, X10
	MOVO 816(AX), X0
	MOVO 832(AX), X4
	MOVO 848(AX), X2
	MOVO 864(AX), X5
	MOVO X0, X15
	MOVO X4, X8
	MOVO X2, X12
	MOVO X5, X9
	PSUBQ X1, X0
	MOVO X0, X11
	PSLLQ $53, X0
	POR X10, X0
	MOVO X0, 688(BX)
	PSRLQ $11, X11
	PSUBQ X15, X4
	MOVO X4, X13
	PSLLQ $44, X4
	POR X11, X4
	MOVO X4, 704(BX)
	PSRLQ $20, X13
	PSUBQ X8, X2
	MOVO X2, X6
	PSLLQ $35, X2
	POR X13, X2
	MOVO X2, 720(BX)
	PSRLQ $29, X6
	PSUBQ X12, X5
	MOVO X5, X7
	PSLLQ $26, X5
	POR X6, X5
	MOVO X5, 736(BX)
	PSRLQ $38, X7
	MOVO 880(AX), X3
	MOVO 896(AX), X14
	MOVO 912(AX), X1
	MOVO 928(AX), X10
	MOVO X3, X0
	MOVO X14, X15
	MOVO X1, X11
	MOVO X10, X4
	PSUBQ X9, X3
	MOVO X3, X8
	PSLLQ $17, X3
	POR X7, X3
	MOVO X3, 752(BX)
	PSRLQ $47, X8
	PSUBQ X0, X14
	PSLLQ $8, X14
	PSUBQ X15, X1
	MOVO X1, X13
	PSLLQ $63, X1
	POR X8, X14
	POR X1, X14
	MOVO X14, 768(BX)
	PSRLQ $1, X13
	PSUBQ X11, X10
	MOVO X10, X2
	PSLLQ $54, X10
	POR X13, X10
	MOVO X10, 784(BX)
	PSRLQ $10, X2
	MOVO 944(AX), X12
	MOVO 960(AX), X6
	MOVO 976(AX), X5
	MOVO 992(AX), X9
	MOVO X12, X7
	MOVO X6, X3
	MOVO X5, X0
	MOVO X9, X15
	PSUBQ X4, X12
	MOVO X12, X8
	PSLLQ $45, X12
	POR X2, X12
	MOVO X12, 800(BX)
	PSRLQ $19, X8
	PSUBQ X7, X6
	MOVO X6, X1
	PSLLQ $36, X6
	POR X8, X6
	MOVO X6, 816(BX)
	PSRLQ $28, X1
	PSUBQ X3, X5
	MOVO X5, X14
	PSLLQ $27, X5
	POR X1, X5
	MOVO X5, 832(BX)
	PSRLQ $37, X14
	PSUBQ X0, X9
	MOVO X9, X11
	PSLLQ $18, X9
	POR X14, X9
	MOVO X9, 848(BX)
	PSRLQ $46, X11
	MOVO 1008(AX), X13
	MOVO X13, X10
	PSUBQ X15, X13
	PSLLQ $9, X13
	POR X11, X13
	MOVO X13, 864(BX)
	MOVO X10, 0(DX)
	RET

// func dpack64_56(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_56(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $56, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $8, X7
	PSUBQ X5, X3
	MOVO X3, X8
	PSLLQ $48, X3
	POR X7, X3
	MOVO X3, 16(BX)
	PSRLQ $16, X8
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	PSUBQ X6, X9
	MOVO X9, X4
	PSLLQ $40, X9
	POR X8, X9
	MOVO X9, 32(BX)
	PSRLQ $24, X4
	PSUBQ X13, X10
	MOVO X10, X1
	PSLLQ $32, X10
	POR X4, X10
	MOVO X10, 48(BX)
	PSRLQ $32, X1
	PSUBQ X14, X11
	MOVO X11, X2
	PSLLQ $24, X11
	POR X1, X11
	MOVO X11, 64(BX)
	PSRLQ $40, X2
	PSUBQ X15, X12
	MOVO X12, X5
	PSLLQ $16, X12
	POR X2, X12
	MOVO X12, 80(BX)
	PSRLQ $48, X5
	MOVO 112(AX), X7
	MOVO 128(AX), X3
	MOVO 144(AX), X6
	MOVO 160(AX), X8
	MOVO X7, X9
	MOVO X3, X13
	MOVO X6, X4
	MOVO X8, X10
	PSUBQ X0, X7
	PSLLQ $8, X7
	POR X5, X7
	MOVO X7, 96(BX)
	PSUBQ X9, X3
	PSUBQ X13, X6
	MOVO X6, X14
	PSLLQ $56, X6
	POR X3, X6
	MOVO X6, 112(BX)
	PSRLQ $8, X14
	PSUBQ X4, X8
	MOVO X8, X1
	PSLLQ $48, X8
	POR X14, X8
	MOVO X8, 128(BX)
	PSRLQ $16, X1
	MOVO 176(AX), X11
	MOVO 192(AX), X15
	MOVO 208(AX), X2
	MOVO 224(AX), X12
	MOVO X11, X0
	MOVO X15, X5
	MOVO X2, X7
	MOVO X12, X9
	PSUBQ X10, X11
	MOVO X11, X13
	PSLLQ $40, X11
	POR X1, X11
	MOVO X11, 144(BX)
	PSRLQ $24, X13
	PSUBQ X0, X15
	MOVO X15, X3
	PSLLQ $32, X15
	POR X13, X15
	MOVO X15, 160(BX)
	PSRLQ $32, X3
	PSUBQ X5, X2
	MOVO X2, X6
	PSLLQ $24, X2
	POR X3, X2
	MOVO X2, 176(BX)
	PSRLQ $40, X6
	PSUBQ X7, X12
	MOVO X12, X4
	PSLLQ $16, X12
	POR X6, X12
	MOVO X12, 192(BX)
	PSRLQ $48, X4
	MOVO 240(AX), X14
	MOVO 256(AX), X8
	MOVO 272(AX), X10
	MOVO 288(AX), X1
	MOVO X14, X11
	MOVO X8, X0
	MOVO X10, X13
	MOVO X1, X15
	PSUBQ X9, X14
	PSLLQ $8, X14
	POR X4, X14
	MOVO X14, 208(BX)
	PSUBQ X11, X8
	PSUBQ X0, X10
	MOVO X10, X5
	PSLLQ $56, X10
	POR X8, X10
	MOVO X10, 224(BX)
	PSRLQ $8, X5
	PSUBQ X13, X1
	MOVO X1, X3
	PSLLQ $48, X1
	POR X5, X1
	MOVO X1, 240(BX)
	PSRLQ $16, X3
	MOVO 304(AX), X2
	MOVO 320(AX), X7
	MOVO 336(AX), X6
	MOVO 352(AX), X12
	MOVO X2, X9
	MOVO X7, X4
	MOVO X6, X14
	MOVO X12, X11
	PSUBQ X15, X2
	MOVO X2, X0
	PSLLQ $40, X2
	POR X3, X2
	MOVO X2, 256(BX)
	PSRLQ $24, X0
	PSUBQ X9, X7
	MOVO X7, X8
	PSLLQ $32, X7
	POR X0, X7
	MOVO X7, 272(BX)
	PSRLQ $32, X8
	PSUBQ X4, X6
	MOVO X6, X10
	PSLLQ $24, X6
	POR X8, X6
	MOVO X6, 288(BX)
	PSRLQ $40, X10
	PSUBQ X14, X12
	MOVO X12, X13
	PSLLQ $16, X12
	POR X10, X12
	MOVO X12, 304(BX)
	PSRLQ $48, X13
	MOVO 368(AX), X5
	MOVO 384(AX), X1
	MOVO 400(AX), X15
	MOVO 416(AX), X3
	MOVO X5, X2
	MOVO X1, X9
	MOVO X15, X0
	MOVO X3, X7
	PSUBQ X11, X5
	PSLLQ $8, X5
	POR X13, X5
	MOVO X5, 320(BX)
	PSUBQ X2, X1
	PSUBQ X9, X15
	MOVO X15, X4
	PSLLQ $56, X15
	POR X1, X15
	MOVO X15, 336(BX)
	PSRLQ $8, X4
	PSUBQ X0, X3
	MOVO X3, X8
	PSLLQ $48, X3
	POR X4, X3
	MOVO X3, 352(BX)
	PSRLQ $16, X8
	MOVO 432(AX), X6
	MOVO 448(AX), X14
	MOVO 464(AX), X10
	MOVO 480(AX), X12
	MOVO X6, X11
	MOVO X14, X13
	MOVO X10, X5
	MOVO X12, X2
	PSUBQ X7, X6
	MOVO X6, X9
	PSLLQ $40, X6
	POR X8, X6
	MOVO X6, 368(BX)
	PSRLQ $24, X9
	PSUBQ X11, X14
	MOVO X14, X1
	PSLLQ $32, X14
	POR X9, X14
	MOVO X14, 384(BX)
	PSRLQ $32, X1
	PSUBQ X13, X10
	MOVO X10, X15
	PSLLQ $24, X10
	POR X1, X10
	MOVO X10, 400(BX)
	PSRLQ $40, X15
	PSUBQ X5, X12
	MOVO X12, X0
	PSLLQ $16, X12
	POR X15, X12
	MOVO X12, 416(BX)
	PSRLQ $48, X0
	MOVO 496(AX), X4
	MOVO 512(AX), X3
	MOVO 528(AX), X7
	MOVO 544(AX), X8
	MOVO X4, X6
	MOVO X3, X11
	MOVO X7, X9
	MOVO X8, X14
	PSUBQ X2, X4
	PSLLQ $8, X4
	POR X0, X4
	MOVO X4, 432(BX)
	PSUBQ X6, X3
	PSUBQ X11, X7
	MOVO X7, X13
	PSLLQ $56, X7
	POR X3, X7
	MOVO X7, 448(BX)
	PSRLQ $8, X13
	PSUBQ X9, X8
	MOVO X8, X1
	PSLLQ $48, X8
	POR X13, X8
	MOVO X8, 464(BX)
	PSRLQ $16, X1
	MOVO 560(AX), X10
	MOVO 576(AX), X5
	MOVO 592(AX), X15
	MOVO 608(AX), X12
	MOVO X10, X2
	MOVO X5, X0
	MOVO X15, X4
	MOVO X12, X6
	PSUBQ X14, X10
	MOVO X10, X11
	PSLLQ $40, X10
	POR X1, X10
	MOVO X10, 480(BX)
	PSRLQ $24, X11
	PSUBQ X2, X5
	MOVO X5, X3
	PSLLQ $32, X5
	POR X11, X5
	MOVO X5, 496(BX)
	PSRLQ $32, X3
	PSUBQ X0, X15
	MOVO X15, X7
	PSLLQ $24, X15
	POR X3, X15
	MOVO X15, 512(BX)
	PSRLQ $40, X7
	PSUBQ X4, X12
	MOVO X12, X9
	PSLLQ $16, X12
	POR X7, X12
	MOVO X12, 528(BX)
	PSRLQ $48, X9
	MOVO 624(AX), X13
	MOVO 640(AX), X8
	MOVO 656(AX), X14
	MOVO 672(AX), X1
	MOVO X13, X10
	MOVO X8, X2
	MOVO X14, X11
	MOVO X1, X5
	PSUBQ X6, X13
	PSLLQ $8, X13
	POR X9, X13
	MOVO X13, 544(BX)
	PSUBQ X10, X8
	PSUBQ X2, X14
	MOVO X14, X0
	PSLLQ $56, X14
	POR X8, X14
	MOVO X14, 560(BX)
	PSRLQ $8, X0
	PSUBQ X11, X1
	MOVO X1, X3
	PSLLQ $48, X1
	POR X0, X1
	MOVO X1, 576(BX)
	PSRLQ $16, X3
	MOVO 688(AX), X15
	MOVO 704(AX), X4
	MOVO 720(AX), X7
	MOVO 736(AX), X12
	MOVO X15, X6
	MOVO X4, X9
	MOVO X7, X13
	MOVO X12, X10
	PSUBQ X5, X15
	MOVO X15, X2
	PSLLQ $40, X15
	POR X3, X15
	MOVO X15, 592(BX)
	PSRLQ $24, X2
	PSUBQ X6, X4
	MOVO X4, X8
	PSLLQ $32, X4
	POR X2, X4
	MOVO X4, 608(BX)
	PSRLQ $32, X8
	PSUBQ X9, X7
	MOVO X7, X14
	PSLLQ $24, X7
	POR X8, X7
	MOVO X7, 624(BX)
	PSRLQ $40, X14
	PSUBQ X13, X12
	MOVO X12, X11
	PSLLQ $16, X12
	POR X14, X12
	MOVO X12, 640(BX)
	PSRLQ $48, X11
	MOVO 752(AX), X0
	MOVO 768(AX), X1
	MOVO 784(AX), X5
	MOVO 800(AX), X3
	MOVO X0, X15
	MOVO X1, X6
	MOVO X5, X2
	MOVO X3, X4
	PSUBQ X10, X0
	PSLLQ $8, X0
	POR X11, X0
	MOVO X0, 656(BX)
	PSUBQ X15, X1
	PSUBQ X6, X5
	MOVO X5, X9
	PSLLQ $56, X5
	POR X1, X5
	MOVO X5, 672(BX)
	PSRLQ $8, X9
	PSUBQ X2, X3
	MOVO X3, X8
	PSLLQ $48, X3
	POR X9, X3
	MOVO X3, 688(BX)
	PSRLQ $16, X8
	MOVO 816(AX), X7
	MOVO 832(AX), X13
	MOVO 848(AX), X14
	MOVO 864(AX), X12
	MOVO X7, X10
	MOVO X13, X11
	MOVO X14, X0
	MOVO X12, X15
	PSUBQ X4, X7
	MOVO X7, X6
	PSLLQ $40, X7
	POR X8, X7
	MOVO X7, 704(BX)
	PSRLQ $24, X6
	PSUBQ X10, X13
	MOVO X13, X1
	PSLLQ $32, X13
	POR X6, X13
	MOVO X13, 720(BX)
	PSRLQ $32, X1
	PSUBQ X11, X14
	MOVO X14, X5
	PSLLQ $24, X14
	POR X1, X14
	MOVO X14, 736(BX)
	PSRLQ $40, X5
	PSUBQ X0, X12
	MOVO X12, X2
	PSLLQ $16, X12
	POR X5, X12
	MOVO X12, 752(BX)
	PSRLQ $48, X2
	MOVO 880(AX), X9
	MOVO 896(AX), X3
	MOVO 912(AX), X4
	MOVO 928(AX), X8
	MOVO X9, X7
	MOVO X3, X10
	MOVO X4, X6
	MOVO X8, X13
	PSUBQ X15, X9
	PSLLQ $8, X9
	POR X2, X9
	MOVO X9, 768(BX)
	PSUBQ X7, X3
	PSUBQ X10, X4
	MOVO X4, X11
	PSLLQ $56, X4
	POR X3, X4
	MOVO X4, 784(BX)
	PSRLQ $8, X11
	PSUBQ X6, X8
	MOVO X8, X1
	PSLLQ $48, X8
	POR X11, X8
	MOVO X8, 800(BX)
	PSRLQ $16, X1
	MOVO 944(AX), X14
	MOVO 960(AX), X0
	MOVO 976(AX), X5
	MOVO 992(AX), X12
	MOVO X14, X15
	MOVO X0, X2
	MOVO X5, X9
	MOVO X12, X7
	PSUBQ X13, X14
	MOVO X14, X10
	PSLLQ $40, X14
	POR X1, X14
	MOVO X14, 816(BX)
	PSRLQ $24, X10
	PSUBQ X15, X0
	MOVO X0, X3
	PSLLQ $32, X0
	POR X10, X0
	MOVO X0, 832(BX)
	PSRLQ $32, X3
	PSUBQ X2, X5
	MOVO X5, X4
	PSLLQ $24, X5
	POR X3, X5
	MOVO X5, 848(BX)
	PSRLQ $40, X4
	PSUBQ X9, X12
	MOVO X12, X6
	PSLLQ $16, X12
	POR X4, X12
	MOVO X12, 864(BX)
	PSRLQ $48, X6
	MOVO 1008(AX), X11
	MOVO X11, X8
	PSUBQ X7, X11
	PSLLQ $8, X11
	POR X6, X11
	MOVO X11, 880(BX)
	MOVO X8, 0(DX)
	RET

// func dpack64_57(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_57(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $57, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $7, X7
	PSUBQ X5, X3
	MOVO X3, X8
	PSLLQ $50, X3
	POR X7, X3
	MOVO X3, 16(BX)
	PSRLQ $14, X8
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	PSUBQ X6, X9
	MOVO X9, X4
	PSLLQ $43, X9
	POR X8, X9
	MOVO X9, 32(BX)
	PSRLQ $21, X4
	PSUBQ X13, X10
	MOVO X10, X1
	PSLLQ $36, X10
	POR X4, X10
	MOVO X10, 48(BX)
	PSRLQ $28, X1
	PSUBQ X14, X11
	MOVO X11, X2
	PSLLQ $29, X11
	POR X1, X11
	MOVO X11, 64(BX)
	PSRLQ $35, X2
	PSUBQ X15, X12
	MOVO X12, X5
	PSLLQ $22, X12
	POR X2, X12
	MOVO X12, 80(BX)
	PSRLQ $42, X5
	MOVO 112(AX), X7
	MOVO 128(AX), X3
	MOVO 144(AX), X6
	MOVO 160(AX), X8
	MOVO X7, X9
	MOVO X3, X13
	MOVO X6, X4
	MOVO X8, X10
	PSUBQ X0, X7
	MOVO X7, X14
	PSLLQ $15, X7
	POR X5, X7
	MOVO X7, 96(BX)
	PSRLQ $49, X14
	PSUBQ X9, X3
	MOVO X3, X1
	PSLLQ $8, X3
	POR X14, X3
	MOVO X3, 112(BX)
	PSRLQ $56, X1
	PSUBQ X13, X6
	PSLLQ $1, X6
	PSUBQ X4, X8
	MOVO X8, X11
	PSLLQ $58, X8
	POR X1, X6
	POR X8, X6
	MOVO X6, 128(BX)
	PSRLQ $6, X11
	MOVO 176(AX), X15
	MOVO 192(AX), X2
	MOVO 208(AX), X12
	MOVO 224(AX), X0
	MOVO X15, X5
	MOVO X2, X7
	MOVO X12, X9
	MOVO X0, X14
	PSUBQ X10, X15
	MOVO X15, X3
	PSLLQ $51, X15
	POR X11, X15
	MOVO X15, 144(BX)
	PSRLQ $13, X3
	PSUBQ X5, X2
	MOVO X2, X13
	PSLLQ $44, X2
	POR X3, X2
	MOVO X2, 160(BX)
	PSRLQ $20, X13
	PSUBQ X7, X12
	MOVO X12, X4
	PSLLQ $37, X12
	POR X13, X12
	MOVO X12, 176(BX)
	PSRLQ $27, X4
	PSUBQ X9, X0
	MOVO X0, X1
	PSLLQ $30, X0
	POR X4, X0
	MOVO X0, 192(BX)
	PSRLQ $34, X1
	MOVO 240(AX), X8
	MOVO 256(AX), X6
	MOVO 272(AX), X10
	MOVO 288(AX), X11
	MOVO X8, X15
	MOVO X6, X5
	MOVO X10, X3
	MOVO X11, X2
	PSUBQ X14, X8
	MOVO X8, X7
	PSLLQ $23, X8
	POR X1, X8
	MOVO X8, 208(BX)
	PSRLQ $41, X7
	PSUBQ X15, X6
	MOVO X6, X13
	PSLLQ $16, X6
	POR X7, X6
	MOVO X6, 224(BX)
	PSRLQ $48, X13
	PSUBQ X5, X10
	MOVO X10, X12
	PSLLQ $9, X10
	POR X13, X10
	MOVO X10, 240(BX)
	PSRLQ $55, X12
	PSUBQ X3, X11
	PSLLQ $2, X11
	MOVO 304(AX), X9
	MOVO 320(AX), X4
	MOVO 336(AX), X0
	MOVO 352(AX), X14
	MOVO X9, X1
	MOVO X4, X8
	MOVO X0, X15
	MOVO X14, X7
	PSUBQ X2, X9
	MOVO X9, X6
	PSLLQ $59, X9
	POR X12, X11
	POR X9, X11
	MOVO X11, 256(BX)
	PSRLQ $5, X6
	PSUBQ X1, X4
	MOVO X4, X5
	PSLLQ $52, X4
	POR X6, X4
	MOVO X4, 272(BX)
	PSRLQ $12, X5
	PSUBQ X8, X0
	MOVO X0, X13
	PSLLQ $45, X0
	POR X5, X0
	MOVO X0, 288(BX)
	PSRLQ $19, X13
	PSUBQ X15, X14
	MOVO X14, X10
	PSLLQ $38, X14
	POR X13, X14
	MOVO X14, 304(BX)
	PSRLQ $26, X10
	MOVO 368(AX), X3
	MOVO 384(AX), X2
	MOVO 400(AX), X12
	MOVO 416(AX), X9
	MOVO X3, X11
	MOVO X2, X1
	MOVO X12, X6
	MOVO X9, X4
	PSUBQ X7, X3
	MOVO X3, X8
	PSLLQ $31, X3
	POR X10, X3
	MOVO X3, 320(BX)
	PSRLQ $33, X8
	PSUBQ X11, X2
	MOVO X2, X5
	PSLLQ $24, X2
	POR X8, X2
	MOVO X2, 336(BX)
	PSRLQ $40, X5
	PSUBQ X1, X12
	MOVO X12, X0
	PSLLQ $17, X12
	POR X5, X12
	MOVO X12, 352(BX)
	PSRLQ $47, X0
	PSUBQ X6, X9
	MOVO X9, X15
	PSLLQ $10, X9
	POR X0, X9
	MOVO X9, 368(BX)
	PSRLQ $54, X15
	MOVO 432(AX), X13
	MOVO 448(AX), X14
	MOVO 464(AX), X7
	MOVO 480(AX), X10
	MOVO X13, X3
	MOVO X14, X11
	MOVO X7, X8
	MOVO X10, X2
	PSUBQ X4, X13
	PSLLQ $3, X13
	PSUBQ X3, X14
	MOVO X14, X1
	PSLLQ $60, X14
	POR X15, X13
	POR X14, X13
	MOVO X13, 384(BX)
	PSRLQ $4, X1
	PSUBQ X11, X7
	MOVO X7, X5
	PSLLQ $53, X7
	POR X1, X7
	MOVO X7, 400(BX)
	PSRLQ $11, X5
	PSUBQ X8, X10
	MOVO X10, X12
	PSLLQ $46, X10
	POR X5, X10
	MOVO X10, 416(BX)
	PSRLQ $18, X12
	MOVO 496(AX), X6
	MOVO 512(AX), X0
	MOVO 528(AX), X9
	MOVO 544(AX), X4
	MOVO X6, X3
	MOVO X0, X15
	MOVO X9, X14
	MOVO X4, X13
	PSUBQ X2, X6
	MOVO X6, X11
	PSLLQ $39, X6
	POR X12, X6
	MOVO X6, 432(BX)
	PSRLQ $25, X11
	PSUBQ X3, X0
	MOVO X0, X1
	PSLLQ $32, X0
	POR X11, X0
	MOVO X0, 448(BX)
	PSRLQ $32, X1
	PSUBQ X15, X9
	MOVO X9, X7
	PSLLQ $25, X9
	POR X1, X9
	MOVO X9, 464(BX)
	PSRLQ $39, X7
	PSUBQ X14, X4
	MOVO X4, X8
	PSLLQ $18, X4
	POR X7, X4
	MOVO X4, 480(BX)
	PSRLQ $46, X8
	MOVO 560(AX), X5
	MOVO 576(AX), X10
	MOVO 592(AX), X2
	MOVO 608(AX), X12
	MOVO X5, X6
	MOVO X10, X3
	MOVO X2, X11
	MOVO X12, X0
	PSUBQ X13, X5
	MOVO X5, X15
	PSLLQ $11, X5
	POR X8, X5
	MOVO X5, 496(BX)
	PSRLQ $53, X15
	PSUBQ X6, X10
	PSLLQ $4, X10
	PSUBQ X3, X2
	MOVO X2, X1
	PSLLQ $61, X2
	POR X15, X10
	POR X2, X10
	MOVO X10, 512(BX)
	PSRLQ $3, X1
	PSUBQ X11, X12
	MOVO X12, X9
	PSLLQ $54, X12
	POR X1, X12
	MOVO X12, 528(BX)
	PSRLQ $10, X9
	MOVO 624(AX), X14
	MOVO 640(AX), X7
	MOVO 656(AX), X4
	MOVO 672(AX), X13
	MOVO X14, X8
	MOVO X7, X5
	MOVO X4, X6
	MOVO X13, X3
	PSUBQ X0, X14
	MOVO X14, X15
	PSLLQ $47, X14
	POR X9, X14
	MOVO X14, 544(BX)
	PSRLQ $17, X15
	PSUBQ X8, X7
	MOVO X7, X2
	PSLLQ $40, X7
	POR X15, X7
	MOVO X7, 560(BX)
	PSRLQ $24, X2
	PSUBQ X5, X4
	MOVO X4, X10
	PSLLQ $33, X4
	POR X2, X4
	MOVO X4, 576(BX)
	PSRLQ $31, X10
	PSUBQ X6, X13
	MOVO X13, X11
	PSLLQ $26, X13
	POR X10, X13
	MOVO X13, 592(BX)
	PSRLQ $38, X11
	MOVO 688(AX), X1
	MOVO 704(AX), X12
	MOVO 720(AX), X0
	MOVO 736(AX), X9
	MOVO X1, X14
	MOVO X12, X8
	MOVO X0, X15
	MOVO X9, X7
	PSUBQ X3, X1
	MOVO X1, X5
	PSLLQ $19, X1
	POR X11, X1
	MOVO X1, 608(BX)
	PSRLQ $45, X5
	PSUBQ X14, X12
	MOVO X12, X2
	PSLLQ $12, X12
	POR X5, X12
	MOVO X12, 624(BX)
	PSRLQ $52, X2
	PSUBQ X8, X0
	PSLLQ $5, X0
	PSUBQ X15, X9
	MOVO X9, X4
	PSLLQ $62, X9
	POR X2, X0
	POR X9, X0
	MOVO X0, 640(BX)
	PSRLQ $2, X4
	MOVO 752(AX), X6
	MOVO 768(AX), X10
	MOVO 784(AX), X13
	MOVO 800(AX), X3
	MOVO X6, X11
	MOVO X10, X1
	MOVO X13, X14
	MOVO X3, X5
	PSUBQ X7, X6
	MOVO X6, X12
	PSLLQ $55, X6
	POR X4, X6
	MOVO X6, 656(BX)
	PSRLQ $9, X12
	PSUBQ X11, X10
	MOVO X10, X8
	PSLLQ $48, X10
	POR X12, X10
	MOVO X10, 672(BX)
	PSRLQ $16, X8
	PSUBQ X1, X13
	MOVO X13, X15
	PSLLQ $41, X13
	POR X8, X13
	MOVO X13, 688(BX)
	PSRLQ $23, X15
	PSUBQ X14, X3
	MOVO X3, X2
	PSLLQ $34, X3
	POR X15, X3
	MOVO X3, 704(BX)
	PSRLQ $30, X2
	MOVO 816(AX), X9
	MOVO 832(AX), X0
	MOVO 848(AX), X7
	MOVO 864(AX), X4
	MOVO X9, X6
	MOVO X0, X11
	MOVO X7, X12
	MOVO X4, X10
	PSUBQ X5, X9
	MOVO X9, X1
	PSLLQ $27, X9
	POR X2, X9
	MOVO X9, 720(BX)
	PSRLQ $37, X1
	PSUBQ X6, X0
	MOVO X0, X8
	PSLLQ $20, X0
	POR X1, X0
	MOVO X0, 736(BX)
	PSRLQ $44, X8
	PSUBQ X11, X7
	MOVO X7, X13
	PSLLQ $13, X7
	POR X8, X7
	MOVO X7, 752(BX)
	PSRLQ $51, X13
	PSUBQ X12, X4
	PSLLQ $6, X4
	MOVO 880(AX), X14
	MOVO 896(AX), X15
	MOVO 912(AX), X3
	MOVO 928(AX), X5
	MOVO X14, X2
	MOVO X15, X9
	MOVO X3, X6
	MOVO X5, X1
	PSUBQ X10, X14
	MOVO X14, X0
	PSLLQ $63, X14
	POR X13, X4
	POR X14, X4
	MOVO X4, 768(BX)
	PSRLQ $1, X0
	PSUBQ X2, X15
	MOVO X15, X11
	PSLLQ $56, X15
	POR X0, X15
	MOVO X15, 784(BX)
	PSRLQ $8, X11
	PSUBQ X9, X3
	MOVO X3, X8
	PSLLQ $49, X3
	POR X11, X3
	MOVO X3, 800(BX)
	PSRLQ $15, X8
	PSUBQ X6, X5
	MOVO X5, X7
	PSLLQ $42, X5
	POR X8, X5
	MOVO X5, 816(BX)
	PSRLQ $22, X7
	MOVO 944(AX), X12
	MOVO 960(AX), X10
	MOVO 976(AX), X13
	MOVO 992(AX), X14
	MOVO X12, X4
	MOVO X10, X2
	MOVO X13, X0
	MOVO X14, X15
	PSUBQ X1, X12
	MOVO X12, X9
	PSLLQ $35, X12
	POR X7, X12
	MOVO X12, 832(BX)
	PSRLQ $29, X9
	PSUBQ X4, X10
	MOVO X10, X11
	PSLLQ $28, X10
	POR X9, X10
	MOVO X10, 848(BX)
	PSRLQ $36, X11
	PSUBQ X2, X13
	MOVO X13, X3
	PSLLQ $21, X13
	POR X11, X13
	MOVO X13, 864(BX)
	PSRLQ $43, X3
	PSUBQ X0, X14
	MOVO X14, X6
	PSLLQ $14, X14
	POR X3, X14
	MOVO X14, 880(BX)
	PSRLQ $50, X6
	MOVO 1008(AX), X8
	MOVO X8, X5
	PSUBQ X15, X8
	PSLLQ $7, X8
	POR X6, X8
	MOVO X8, 896(BX)
	MOVO X5, 0(DX)
	RET

// func dpack64_58(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_58(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $58, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $6, X7
	PSUBQ X5, X3
	MOVO X3, X8
	PSLLQ $52, X3
	POR X7, X3
	MOVO X3, 16(BX)
	PSRLQ $12, X8
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	PSUBQ X6, X9
	MOVO X9, X4
	PSLLQ $46, X9
	POR X8, X9
	MOVO X9, 32(BX)
	PSRLQ $18, X4
	PSUBQ X13, X10
	MOVO X10, X1
	PSLLQ $40, X10
	POR X4, X10
	MOVO X10, 48(BX)
	PSRLQ $24, X1
	PSUBQ X14, X11
	MOVO X11, X2
	PSLLQ $34, X11
	POR X1, X11
	MOVO X11, 64(BX)
	PSRLQ $30, X2
	PSUBQ X15, X12
	MOVO X12, X5
	PSLLQ $28, X12
	POR X2, X12
	MOVO X12, 80(BX)
	PSRLQ $36, X5
	MOVO 112(AX), X7
	MOVO 128(AX), X3
	MOVO 144(AX), X6
	MOVO 160(AX), X8
	MOVO X7, X9
	MOVO X3, X13
	MOVO X6, X4
	MOVO X8, X10
	PSUBQ X0, X7
	MOVO X7, X14
	PSLLQ $22, X7
	POR X5, X7
	MOVO X7, 96(BX)
	PSRLQ $42, X14
	PSUBQ X9, X3
	MOVO X3, X1
	PSLLQ $16, X3
	POR X14, X3
	MOVO X3, 112(BX)
	PSRLQ $48, X1
	PSUBQ X13, X6
	MOVO X6, X11
	PSLLQ $10, X6
	POR X1, X6
	MOVO X6, 128(BX)
	PSRLQ $54, X11
	PSUBQ X4, X8
	PSLLQ $4, X8
	MOVO 176(AX), X15
	MOVO 192(AX), X2
	MOVO 208(AX), X12
	MOVO 224(AX), X0
	MOVO X15, X5
	MOVO X2, X7
	MOVO X12, X9
	MOVO X0, X14
	PSUBQ X10, X15
	MOVO X15, X3
	PSLLQ $62, X15
	POR X11, X8
	POR X15, X8
	MOVO X8, 144(BX)
	PSRLQ $2, X3
	PSUBQ X5, X2
	MOVO X2, X13
	PSLLQ $56, X2
	POR X3, X2
	MOVO X2, 160(BX)
	PSRLQ $8, X13
	PSUBQ X7, X12
	MOVO X12, X1
	PSLLQ $50, X12
	POR X13, X12
	MOVO X12, 176(BX)
	PSRLQ $14, X1
	PSUBQ X9, X0
	MOVO X0, X6
	PSLLQ $44, X0
	POR X1, X0
	MOVO X0, 192(BX)
	PSRLQ $20, X6
	MOVO 240(AX), X4
	MOVO 256(AX), X10
	MOVO 272(AX), X11
	MOVO 288(AX), X15
	MOVO X4, X8
	MOVO X10, X5
	MOVO X11, X3
	MOVO X15, X2
	PSUBQ X14, X4
	MOVO X4, X7
	PSLLQ $38, X4
	POR X6, X4
	MOVO X4, 208(BX)
	PSRLQ $26, X7
	PSUBQ X8, X10
	MOVO X10, X13
	PSLLQ $32, X10
	POR X7, X10
	MOVO X10, 224(BX)
	PSRLQ $32, X13
	PSUBQ X5, X11
	MOVO X11, X12
	PSLLQ $26, X11
	POR X13, X11
	MOVO X11, 240(BX)
	PSRLQ $38, X12
	PSUBQ X3, X15
	MOVO X15, X9
	PSLLQ $20, X15
	POR X12, X15
	MOVO X15, 256(BX)
	PSRLQ $44, X9
	MOVO 304(AX), X1
	MOVO 320(AX), X0
	MOVO 336(AX), X14
	MOVO 352(AX), X6
	MOVO X1, X4
	MOVO X0, X8
	MOVO X14, X7
	MOVO X6, X10
	PSUBQ X2, X1
	MOVO X1, X5
	PSLLQ $14, X1
	POR X9, X1
	MOVO X1, 272(BX)
	PSRLQ $50, X5
	PSUBQ X4, X0
	MOVO X0, X13
	PSLLQ $8, X0
	POR X5, X0
	MOVO X0, 288(BX)
	PSRLQ $56, X13
	PSUBQ X8, X14
	PSLLQ $2, X14
	PSUBQ X7, X6
	MOVO X6, X11
	PSLLQ $60, X6
	POR X13, X14
	POR X6, X14
	MOVO X14, 304(BX)
	PSRLQ $4, X11
	MOVO 368(AX), X3
	MOVO 384(AX), X12
	MOVO 400(AX), X15
	MOVO 416(AX), X2
	MOVO X3, X9
	MOVO X12, X1
	MOVO X15, X4
	MOVO X2, X5
	PSUBQ X10, X3
	MOVO X3, X0
	PSLLQ $54, X3
	POR X11, X3
	MOVO X3, 320(BX)
	PSRLQ $10, X0
	PSUBQ X9, X12
	MOVO X12, X8
	PSLLQ $48, X12
	POR X0, X12
	MOVO X12, 336(BX)
	PSRLQ $16, X8
	PSUBQ X1, X15
	MOVO X15, X7
	PSLLQ $42, X15
	POR X8, X15
	MOVO X15, 352(BX)
	PSRLQ $22, X7
	PSUBQ X4, X2
	MOVO X2, X13
	PSLLQ $36, X2
	POR X7, X2
	MOVO X2, 368(BX)
	PSRLQ $28, X13
	MOVO 432(AX), X6
	MOVO 448(AX), X14
	MOVO 464(AX), X10
	MOVO 480(AX), X11
	MOVO X6, X3
	MOVO X14, X9
	MOVO X10, X0
	MOVO X11, X12
	PSUBQ X5, X6
	MOVO X6, X1
	PSLLQ $30, X6
	POR X13, X6
	MOVO X6, 384(BX)
	PSRLQ $34, X1
	PSUBQ X3, X14
	MOVO X14, X8
	PSLLQ $24, X14
	POR X1, X14
	MOVO X14, 400(BX)
	PSRLQ $40, X8
	PSUBQ X9, X10
	MOVO X10, X15
	PSLLQ $18, X10
	POR X8, X10
	MOVO X10, 416(BX)
	PSRLQ $46, X15
	PSUBQ X0, X11
	MOVO X11, X4
	PSLLQ $12, X11
	POR X15, X11
	MOVO X11, 432(BX)
	PSRLQ $52, X4
	MOVO 496(AX), X7
	MOVO 512(AX), X2
	MOVO 528(AX), X5
	MOVO 544(AX), X13
	MOVO X7, X6
	MOVO X2, X3
	MOVO X5, X1
	MOVO X13, X14
	PSUBQ X12, X7
	PSLLQ $6, X7
	POR X4, X7
	MOVO X7, 448(BX)
	PSUBQ X6, X2
	PSUBQ X3, X5
	MOVO X5, X9
	PSLLQ $58, X5
	POR X2, X5
	MOVO X5, 464(BX)
	PSRLQ $6, X9
	PSUBQ X1, X13
	MOVO X13, X8
	PSLLQ $52, X13
	POR X9, X13
	MOVO X13, 480(BX)
	PSRLQ $12, X8
	MOVO 560(AX), X10
	MOVO 576(AX), X0
	MOVO 592(AX), X15
	MOVO 608(AX), X11
	MOVO X10, X12
	MOVO X0, X4
	MOVO X15, X7
	MOVO X11, X6
	PSUBQ X14, X10
	MOVO X10, X3
	PSLLQ $46, X10
	POR X8, X10
	MOVO X10, 496(BX)
	PSRLQ $18, X3
	PSUBQ X12, X0
	MOVO X0, X2
	PSLLQ $40, X0
	POR X3, X0
	MOVO X0, 512(BX)
	PSRLQ $24, X2
	PSUBQ X4, X15
	MOVO X15, X5
	PSLLQ $34, X15
	POR X2, X15
	MOVO X15, 528(BX)
	PSRLQ $30, X5
	PSUBQ X7, X11
	MOVO X11, X1
	PSLLQ $28, X11
	POR X5, X11
	MOVO X11, 544(BX)
	PSRLQ $36, X1
	MOVO 624(AX), X9
	MOVO 640(AX), X13
	MOVO 656(AX), X14
	MOVO 672(AX), X8
	MOVO X9, X10
	MOVO X13, X12
	MOVO X14, X3
	MOVO X8, X0
	PSUBQ X6, X9
	MOVO X9, X4
	PSLLQ $22, X9
	POR X1, X9
	MOVO X9, 560(BX)
	PSRLQ $42, X4
	PSUBQ X10, X13
	MOVO X13, X2
	PSLLQ $16, X13
	POR X4, X13
	MOVO X13, 576(BX)
	PSRLQ $48, X2
	PSUBQ X12, X14
	MOVO X14, X15
	PSLLQ $10, X14
	POR X2, X14
	MOVO X14, 592(BX)
	PSRLQ $54, X15
	PSUBQ X3, X8
	PSLLQ $4, X8
	MOVO 688(AX), X7
	MOVO 704(AX), X5
	MOVO 720(AX), X11
	MOVO 736(AX), X6
	MOVO X7, X1
	MOVO X5, X9
	MOVO X11, X10
	MOVO X6, X4
	PSUBQ X0, X7
	MOVO X7, X13
	PSLLQ $62, X7
	POR X15, X8
	POR X7, X8
	MOVO X8, 608(BX)
	PSRLQ $2, X13
	PSUBQ X1, X5
	MOVO X5, X12
	PSLLQ $56, X5
	POR X13, X5
	MOVO X5, 624(BX)
	PSRLQ $8, X12
	PSUBQ X9, X11
	MOVO X11, X2
	PSLLQ $50, X11
	POR X12, X11
	MOVO X11, 640(BX)
	PSRLQ $14, X2
	PSUBQ X10, X6
	MOVO X6, X14
	PSLLQ $44, X6
	POR X2, X6
	MOVO X6, 656(BX)
	PSRLQ $20, X14
	MOVO 752(AX), X3
	MOVO 768(AX), X0
	MOVO 784(AX), X15
	MOVO 800(AX), X7
	MOVO X3, X8
	MOVO X0, X1
	MOVO X15, X13
	MOVO X7, X5
	PSUBQ X4, X3
	MOVO X3, X9
	PSLLQ $38, X3
	POR X14, X3
	MOVO X3, 672(BX)
	PSRLQ $26, X9
	PSUBQ X8, X0
	MOVO X0, X12
	PSLLQ $32, X0
	POR X9, X0
	MOVO X0, 688(BX)
	PSRLQ $32, X12
	PSUBQ X1, X15
	MOVO X15, X11
	PSLLQ $26, X15
	POR X12, X15
	MOVO X15, 704(BX)
	PSRLQ $38, X11
	PSUBQ X13, X7
	MOVO X7, X10
	PSLLQ $20, X7
	POR X11, X7
	MOVO X7, 720(BX)
	PSRLQ $44, X10
	MOVO 816(AX), X2
	MOVO 832(AX), X6
	MOVO 848(AX), X4
	MOVO 864(AX), X14
	MOVO X2, X3
	MOVO X6, X8
	MOVO X4, X9
	MOVO X14, X0
	PSUBQ X5, X2
	MOVO X2, X1
	PSLLQ $14, X2
	POR X10, X2
	MOVO X2, 736(BX)
	PSRLQ $50, X1
	PSUBQ X3, X6
	MOVO X6, X12
	PSLLQ $8, X6
	POR X1, X6
	MOVO X6, 752(BX)
	PSRLQ $56, X12
	PSUBQ X8, X4
	PSLLQ $2, X4
	PSUBQ X9, X14
	MOVO X14, X15
	PSLLQ $60, X14
	POR X12, X4
	POR X14, X4
	MOVO X4, 768(BX)
	PSRLQ $4, X15
	MOVO 880(AX), X13
	MOVO 896(AX), X11
	MOVO 912(AX), X7
	MOVO 928(AX), X5
	MOVO X13, X10
	MOVO X11, X2
	MOVO X7, X3
	MOVO X5, X1
	PSUBQ X0, X13
	MOVO X13, X6
	PSLLQ $54, X13
	POR X15, X13
	MOVO X13, 784(BX)
	PSRLQ $10, X6
	PSUBQ X10, X11
	MOVO X11, X8
	PSLLQ $48, X11
	POR X6, X11
	MOVO X11, 800(BX)
	PSRLQ $16, X8
	PSUBQ X2, X7
	MOVO X7, X9
	PSLLQ $42, X7
	POR X8, X7
	MOVO X7, 816(BX)
	PSRLQ $22, X9
	PSUBQ X3, X5
	MOVO X5, X12
	PSLLQ $36, X5
	POR X9, X5
	MOVO X5, 832(BX)
	PSRLQ $28, X12
	MOVO 944(AX), X14
	MOVO 960(AX), X4
	MOVO 976(AX), X0
	MOVO 992(AX), X15
	MOVO X14, X13
	MOVO X4, X10
	MOVO X0, X6
	MOVO X15, X11
	PSUBQ X1, X14
	MOVO X14, X2
	PSLLQ $30, X14
	POR X12, X14
	MOVO X14, 848(BX)
	PSRLQ $34, X2
	PSUBQ X13, X4
	MOVO X4, X8
	PSLLQ $24, X4
	POR X2, X4
	MOVO X4, 864(BX)
	PSRLQ $40, X8
	PSUBQ X10, X0
	MOVO X0, X7
	PSLLQ $18, X0
	POR X8, X0
	MOVO X0, 880(BX)
	PSRLQ $46, X7
	PSUBQ X6, X15
	MOVO X15, X3
	PSLLQ $12, X15
	POR X7, X15
	MOVO X15, 896(BX)
	PSRLQ $52, X3
	MOVO 1008(AX), X9
	MOVO X9, X5
	PSUBQ X11, X9
	PSLLQ $6, X9
	POR X3, X9
	MOVO X9, 912(BX)
	MOVO X5, 0(DX)
	RET

// func dpack64_59(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_59(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $59, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $5, X7
	PSUBQ X5, X3
	MOVO X3, X8
	PSLLQ $54, X3
	POR X7, X3
	MOVO X3, 16(BX)
	PSRLQ $10, X8
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	PSUBQ X6, X9
	MOVO X9, X4
	PSLLQ $49, X9
	POR X8, X9
	MOVO X9, 32(BX)
	PSRLQ $15, X4
	PSUBQ X13, X10
	MOVO X10, X1
	PSLLQ $44, X10
	POR X4, X10
	MOVO X10, 48(BX)
	PSRLQ $20, X1
	PSUBQ X14, X11
	MOVO X11, X2
	PSLLQ $39, X11
	POR X1, X11
	MOVO X11, 64(BX)
	PSRLQ $25, X2
	PSUBQ X15, X12
	MOVO X12, X5
	PSLLQ $34, X12
	POR X2, X12
	MOVO X12, 80(BX)
	PSRLQ $30, X5
	MOVO 112(AX), X7
	MOVO 128(AX), X3
	MOVO 144(AX), X6
	MOVO 160(AX), X8
	MOVO X7, X9
	MOVO X3, X13
	MOVO X6, X4
	MOVO X8, X10
	PSUBQ X0, X7
	MOVO X7, X14
	PSLLQ $29, X7
	POR X5, X7
	MOVO X7, 96(BX)
	PSRLQ $35, X14
	PSUBQ X9, X3
	MOVO X3, X1
	PSLLQ $24, X3
	POR X14, X3
	MOVO X3, 112(BX)
	PSRLQ $40, X1
	PSUBQ X13, X6
	MOVO X6, X11
	PSLLQ $19, X6
	POR X1, X6
	MOVO X6, 128(BX)
	PSRLQ $45, X11
	PSUBQ X4, X8
	MOVO X8, X15
	PSLLQ $14, X8
	POR X11, X8
	MOVO X8, 144(BX)
	PSRLQ $50, X15
	MOVO 176(AX), X2
	MOVO 192(AX), X12
	MOVO 208(AX), X0
	MOVO 224(AX), X5
	MOVO X2, X7
	MOVO X12, X9
	MOVO X0, X14
	MOVO X5, X3
	PSUBQ X10, X2
	MOVO X2, X13
	PSLLQ $9, X2
	POR X15, X2
	MOVO X2, 160(BX)
	PSRLQ $55, X13
	PSUBQ X7, X12
	PSLLQ $4, X12
	PSUBQ X9, X0
	MOVO X0, X1
	PSLLQ $63, X0
	POR X13, X12
	POR X0, X12
	MOVO X12, 176(BX)
	PSRLQ $1, X1
	PSUBQ X14, X5
	MOVO X5, X6
	PSLLQ $58, X5
	POR X1, X5
	MOVO X5, 192(BX)
	PSRLQ $6, X6
	MOVO 240(AX), X4
	MOVO 256(AX), X11
	MOVO 272(AX), X8
	MOVO 288(AX), X10
	MOVO X4, X15
	MOVO X11, X2
	MOVO X8, X7
	MOVO X10, X9
	PSUBQ X3, X4
	MOVO X4, X13
	PSLLQ $53, X4
	POR X6, X4
	MOVO X4, 208(BX)
	PSRLQ $11, X13
	PSUBQ X15, X11
	MOVO X11, X0
	PSLLQ $48, X11
	POR X13, X11
	MOVO X11, 224(BX)
	PSRLQ $16, X0
	PSUBQ X2, X8
	MOVO X8, X12
	PSLLQ $43, X8
	POR X0, X8
	MOVO X8, 240(BX)
	PSRLQ $21, X12
	PSUBQ X7, X10
	MOVO X10, X14
	PSLLQ $38, X10
	POR X12, X10
	MOVO X10, 256(BX)
	PSRLQ $26, X14
	MOVO 304(AX), X1
	MOVO 320(AX), X5
	MOVO 336(AX), X3
	MOVO 352(AX), X6
	MOVO X1, X4
	MOVO X5, X15
	MOVO X3, X13
	MOVO X6, X11
	PSUBQ X9, X1
	MOVO X1, X2
	PSLLQ $33, X1
	POR X14, X1
	MOVO X1, 272(BX)
	PSRLQ $31, X2
	PSUBQ X4, X5
	MOVO X5, X0
	PSLLQ $28, X5
	POR X2, X5
	MOVO X5, 288(BX)
	PSRLQ $36, X0
	PSUBQ X15, X3
	MOVO X3, X8
	PSLLQ $23, X3
	POR X0, X3
	MOVO X3, 304(BX)
	PSRLQ $41, X8
	PSUBQ X13, X6
	MOVO X6, X7
	PSLLQ $18, X6
	POR X8, X6
	MOVO X6, 320(BX)
	PSRLQ $46, X7
	MOVO 368(AX), X12
	MOVO 384(AX), X10
	MOVO 400(AX), X9
	MOVO 416(AX), X14
	MOVO X12, X1
	MOVO X10, X4
	MOVO X9, X2
	MOVO X14, X5
	PSUBQ X11, X12
	MOVO X12, X15
	PSLLQ $13, X12
	POR X7, X12
	MOVO X12, 336(BX)
	PSRLQ $51, X15
	PSUBQ X1, X10
	MOVO X10, X0
	PSLLQ $8, X10
	POR X15, X10
	MOVO X10, 352(BX)
	PSRLQ $56, X0
	PSUBQ X4, X9
	PSLLQ $3, X9
	PSUBQ X2, X14
	MOVO X14, X3
	PSLLQ $62, X14
	POR X0, X9
	POR X14, X9
	MOVO X9, 368(BX)
	PSRLQ $2, X3
	MOVO 432(AX), X13
	MOVO 448(AX), X8
	MOVO 464(AX), X6
	MOVO 480(AX), X11
	MOVO X13, X7
	MOVO X8, X12
	MOVO X6, X1
	MOVO X11, X15
	PSUBQ X5, X13
	MOVO X13, X10
	PSLLQ $57, X13
	POR X3, X13
	MOVO X13, 384(BX)
	PSRLQ $7, X10
	PSUBQ X7, X8
	MOVO X8, X4
	PSLLQ $52, X8
	POR X10, X8
	MOVO X8, 400(BX)
	PSRLQ $12, X4
	PSUBQ X12, X6
	MOVO X6, X2
	PSLLQ $47, X6
	POR X4, X6
	MOVO X6, 416(BX)
	PSRLQ $17, X2
	PSUBQ X1, X11
	MOVO X11, X0
	PSLLQ $42, X11
	POR X2, X11
	MOVO X11, 432(BX)
	PSRLQ $22, X0
	MOVO 496(AX), X14
	MOVO 512(AX), X9
	MOVO 528(AX), X5
	MOVO 544(AX), X3
	MOVO X14, X13
	MOVO X9, X7
	MOVO X5, X10
	MOVO X3, X8
	PSUBQ X15, X14
	MOVO X14, X12
	PSLLQ $37, X14
	POR X0, X14
	MOVO X14, 448(BX)
	PSRLQ $27, X12
	PSUBQ X13, X9
	MOVO X9, X4
	PSLLQ $32, X9
	POR X12, X9
	MOVO X9, 464(BX)
	PSRLQ $32, X4
	PSUBQ X7, X5
	MOVO X5, X6
	PSLLQ $27, X5
	POR X4, X5
	MOVO X5, 480(BX)
	PSRLQ $37, X6
	PSUBQ X10, X3
	MOVO X3, X1
	PSLLQ $22, X3
	POR X6, X3
	MOVO X3, 496(BX)
	PSRLQ $42, X1
	MOVO 560(AX), X2
	MOVO 576(AX), X11
	MOVO 592(AX), X15
	MOVO 608(AX), X0
	MOVO X2, X14
	MOVO X11, X13
	MOVO X15, X12
	MOVO X0, X9
	PSUBQ X8, X2
	MOVO X2, X7
	PSLLQ $17, X2
	POR X1, X2
	MOVO X2, 512(BX)
	PSRLQ $47, X7
	PSUBQ X14, X11
	MOVO X11, X4
	PSLLQ $12, X11
	POR X7, X11
	MOVO X11, 528(BX)
	PSRLQ $52, X4
	PSUBQ X13, X15
	MOVO X15, X5
	PSLLQ $7, X15
	POR X4, X15
	MOVO X15, 544(BX)
	PSRLQ $57, X5
	PSUBQ X12, X0
	PSLLQ $2, X0
	MOVO 624(AX), X10
	MOVO 640(AX), X6
	MOVO 656(AX), X3
	MOVO 672(AX), X8
	MOVO X10, X1
	MOVO X6, X2
	MOVO X3, X14
	MOVO X8, X7
	PSUBQ X9, X10
	MOVO X10, X11
	PSLLQ $61, X10
	POR X5, X0
	POR X10, X0
	MOVO X0, 560(BX)
	PSRLQ $3, X11
	PSUBQ X1, X6
	MOVO X6, X13
	PSLLQ $56, X6
	POR X11, X6
	MOVO X6, 576(BX)
	PSRLQ $8, X13
	PSUBQ X2, X3
	MOVO X3, X4
	PSLLQ $51, X3
	POR X13, X3
	MOVO X3, 592(BX)
	PSRLQ $13, X4
	PSUBQ X14, X8
	MOVO X8, X15
	PSLLQ $46, X8
	POR X4, X8
	MOVO X8, 608(BX)
	PSRLQ $18, X15
	MOVO 688(AX), X12
	MOVO 704(AX), X9
	MOVO 720(AX), X5
	MOVO 736(AX), X10
	MOVO X12, X0
	MOVO X9, X1
	MOVO X5, X11
	MOVO X10, X6
	PSUBQ X7, X12
	MOVO X12, X2
	PSLLQ $41, X12
	POR X15, X12
	MOVO X12, 624(BX)
	PSRLQ $23, X2
	PSUBQ X0, X9
	MOVO X9, X13
	PSLLQ $36, X9
	POR X2, X9
	MOVO X9, 640(BX)
	PSRLQ $28, X13
	PSUBQ X1, X5
	MOVO X5, X3
	PSLLQ $31, X5
	POR X13, X5
	MOVO X5, 656(BX)
	PSRLQ $33, X3
	PSUBQ X11, X10
	MOVO X10, X14
	PSLLQ $26, X10
	POR X3, X10
	MOVO X10, 672(BX)
	PSRLQ $38, X14
	MOVO 752(AX), X4
	MOVO 768(AX), X8
	MOVO 784(AX), X7
	MOVO 800(AX), X15
	MOVO X4, X12
	MOVO X8, X0
	MOVO X7, X2
	MOVO X15, X9
	PSUBQ X6, X4
	MOVO X4, X1
	PSLLQ $21, X4
	POR X14, X4
	MOVO X4, 688(BX)
	PSRLQ $43, X1
	PSUBQ X12, X8
	MOVO X8, X13
	PSLLQ $16, X8
	POR X1, X8
	MOVO X8, 704(BX)
	PSRLQ $48, X13
	PSUBQ X0, X7
	MOVO X7, X5
	PSLLQ $11, X7
	POR X13, X7
	MOVO X7, 720(BX)
	PSRLQ $53, X5
	PSUBQ X2, X15
	MOVO X15, X11
	PSLLQ $6, X15
	POR X5, X15
	MOVO X15, 736(BX)
	PSRLQ $58, X11
	MOVO 816(AX), X3
	MOVO 832(AX), X10
	MOVO 848(AX), X6
	MOVO 864(AX), X14
	MOVO X3, X4
	MOVO X10, X12
	MOVO X6, X1
	MOVO X14, X8
	PSUBQ X9, X3
	PSLLQ $1, X3
	PSUBQ X4, X10
	MOVO X10, X0
	PSLLQ $60, X10
	POR X11, X3
	POR X10, X3
	MOVO X3, 752(BX)
	PSRLQ $4, X0
	PSUBQ X12, X6
	MOVO X6, X13
	PSLLQ $55, X6
	POR X0, X6
	MOVO X6, 768(BX)
	PSRLQ $9, X13
	PSUBQ X1, X14
	MOVO X14, X7
	PSLLQ $50, X14
	POR X13, X14
	MOVO X14, 784(BX)
	PSRLQ $14, X7
	MOVO 880(AX), X2
	MOVO 896(AX), X5
	MOVO 912(AX), X15
	MOVO 928(AX), X9
	MOVO X2, X4
	MOVO X5, X11
	MOVO X15, X10
	MOVO X9, X3
	PSUBQ X8, X2
	MOVO X2, X12
	PSLLQ $45, X2
	POR X7, X2
	MOVO X2, 800(BX)
	PSRLQ $19, X12
	PSUBQ X4, X5
	MOVO X5, X0
	PSLLQ $40, X5
	POR X12, X5
	MOVO X5, 816(BX)
	PSRLQ $24, X0
	PSUBQ X11, X15
	MOVO X15, X6
	PSLLQ $35, X15
	POR X0, X15
	MOVO X15, 832(BX)
	PSRLQ $29, X6
	PSUBQ X10, X9
	MOVO X9, X1
	PSLLQ $30, X9
	POR X6, X9
	MOVO X9, 848(BX)
	PSRLQ $34, X1
	MOVO 944(AX), X13
	MOVO 960(AX), X14
	MOVO 976(AX), X8
	MOVO 992(AX), X7
	MOVO X13, X2
	MOVO X14, X4
	MOVO X8, X12
	MOVO X7, X5
	PSUBQ X3, X13
	MOVO X13, X11
	PSLLQ $25, X13
	POR X1, X13
	MOVO X13, 864(BX)
	PSRLQ $39, X11
	PSUBQ X2, X14
	MOVO X14, X0
	PSLLQ $20, X14
	POR X11, X14
	MOVO X14, 880(BX)
	PSRLQ $44, X0
	PSUBQ X4, X8
	MOVO X8, X15
	PSLLQ $15, X8
	POR X0, X8
	MOVO X8, 896(BX)
	PSRLQ $49, X15
	PSUBQ X12, X7
	MOVO X7, X10
	PSLLQ $10, X7
	POR X15, X7
	MOVO X7, 912(BX)
	PSRLQ $54, X10
	MOVO 1008(AX), X6
	MOVO X6, X9
	PSUBQ X5, X6
	PSLLQ $5, X6
	POR X10, X6
	MOVO X6, 928(BX)
	MOVO X9, 0(DX)
	RET

// func dpack64_60(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_60(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $60, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $4, X7
	PSUBQ X5, X3
	MOVO X3, X8
	PSLLQ $56, X3
	POR X7, X3
	MOVO X3, 16(BX)
	PSRLQ $8, X8
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	PSUBQ X6, X9
	MOVO X9, X4
	PSLLQ $52, X9
	POR X8, X9
	MOVO X9, 32(BX)
	PSRLQ $12, X4
	PSUBQ X13, X10
	MOVO X10, X1
	PSLLQ $48, X10
	POR X4, X10
	MOVO X10, 48(BX)
	PSRLQ $16, X1
	PSUBQ X14, X11
	MOVO X11, X2
	PSLLQ $44, X11
	POR X1, X11
	MOVO X11, 64(BX)
	PSRLQ $20, X2
	PSUBQ X15, X12
	MOVO X12, X5
	PSLLQ $40, X12
	POR X2, X12
	MOVO X12, 80(BX)
	PSRLQ $24, X5
	MOVO 112(AX), X7
	MOVO 128(AX), X3
	MOVO 144(AX), X6
	MOVO 160(AX), X8
	MOVO X7, X9
	MOVO X3, X13
	MOVO X6, X4
	MOVO X8, X10
	PSUBQ X0, X7
	MOVO X7, X14
	PSLLQ $36, X7
	POR X5, X7
	MOVO X7, 96(BX)
	PSRLQ $28, X14
	PSUBQ X9, X3
	MOVO X3, X1
	PSLLQ $32, X3
	POR X14, X3
	MOVO X3, 112(BX)
	PSRLQ $32, X1
	PSUBQ X13, X6
	MOVO X6, X11
	PSLLQ $28, X6
	POR X1, X6
	MOVO X6, 128(BX)
	PSRLQ $36, X11
	PSUBQ X4, X8
	MOVO X8, X15
	PSLLQ $24, X8
	POR X11, X8
	MOVO X8, 144(BX)
	PSRLQ $40, X15
	MOVO 176(AX), X2
	MOVO 192(AX), X12
	MOVO 208(AX), X0
	MOVO 224(AX), X5
	MOVO X2, X7
	MOVO X12, X9
	MOVO X0, X14
	MOVO X5, X3
	PSUBQ X10, X2
	MOVO X2, X13
	PSLLQ $20, X2
	POR X15, X2
	MOVO X2, 160(BX)
	PSRLQ $44, X13
	PSUBQ X7, X12
	MOVO X12, X1
	PSLLQ $16, X12
	POR X13, X12
	MOVO X12, 176(BX)
	PSRLQ $48, X1
	PSUBQ X9, X0
	MOVO X0, X6
	PSLLQ $12, X0
	POR X1, X0
	MOVO X0, 192(BX)
	PSRLQ $52, X6
	PSUBQ X14, X5
	MOVO X5, X4
	PSLLQ $8, X5
	POR X6, X5
	MOVO X5, 208(BX)
	PSRLQ $56, X4
	MOVO 240(AX), X11
	MOVO 256(AX), X8
	MOVO 272(AX), X10
	MOVO 288(AX), X15
	MOVO X11, X2
	MOVO X8, X7
	MOVO X10, X13
	MOVO X15, X12
	PSUBQ X3, X11
	PSLLQ $4, X11
	POR X4, X11
	MOVO X11, 224(BX)
	PSUBQ X2, X8
	PSUBQ X7, X10
	MOVO X10, X9
	PSLLQ $60, X10
	POR X8, X10
	MOVO X10, 240(BX)
	PSRLQ $4, X9
	PSUBQ X13, X15
	MOVO X15, X1
	PSLLQ $56, X15
	POR X9, X15
	MOVO X15, 256(BX)
	PSRLQ $8, X1
	MOVO 304(AX), X0
	MOVO 320(AX), X14
	MOVO 336(AX), X6
	MOVO 352(AX), X5
	MOVO X0, X3
	MOVO X14, X4
	MOVO X6, X11
	MOVO X5, X2
	PSUBQ X12, X0
	MOVO X0, X7
	PSLLQ $52, X0
	POR X1, X0
	MOVO X0, 272(BX)
	PSRLQ $12, X7
	PSUBQ X3, X14
	MOVO X14, X8
	PSLLQ $48, X14
	POR X7, X14
	MOVO X14, 288(BX)
	PSRLQ $16, X8
	PSUBQ X4, X6
	MOVO X6, X10
	PSLLQ $44, X6
	POR X8, X6
	MOVO X6, 304(BX)
	PSRLQ $20, X10
	PSUBQ X11, X5
	MOVO X5, X13
	PSLLQ $40, X5
	POR X10, X5
	MOVO X5, 320(BX)
	PSRLQ $24, X13
	MOVO 368(AX), X9
	MOVO 384(AX), X15
	MOVO 400(AX), X12
	MOVO 416(AX), X1
	MOVO X9, X0
	MOVO X15, X3
	MOVO X12, X7
	MOVO X1, X14
	PSUBQ X2, X9
	MOVO X9, X4
	PSLLQ $36, X9
	POR X13, X9
	MOVO X9, 336(BX)
	PSRLQ $28, X4
	PSUBQ X0, X15
	MOVO X15, X8
	PSLLQ $32, X15
	POR X4, X15
	MOVO X15, 352(BX)
	PSRLQ $32, X8
	PSUBQ X3, X12
	MOVO X12, X6
	PSLLQ $28, X12
	POR X8, X12
	MOVO X12, 368(BX)
	PSRLQ $36, X6
	PSUBQ X7, X1
	MOVO X1, X11
	PSLLQ $24, X1
	POR X6, X1
	MOVO X1, 384(BX)
	PSRLQ $40, X11
	MOVO 432(AX), X10
	MOVO 448(AX), X5
	MOVO 464(AX), X2
	MOVO 480(AX), X13
	MOVO X10, X9
	MOVO X5, X0
	MOVO X2, X4
	MOVO X13, X15
	PSUBQ X14, X10
	MOVO X10, X3
	PSLLQ $20, X10
	POR X11, X10
	MOVO X10, 400(BX)
	PSRLQ $44, X3
	PSUBQ X9, X5
	MOVO X5, X8
	PSLLQ $16, X5
	POR X3, X5
	MOVO X5, 416(BX)
	PSRLQ $48, X8
	PSUBQ X0, X2
	MOVO X2, X12
	PSLLQ $12, X2
	POR X8, X2
	MOVO X2, 432(BX)
	PSRLQ $52, X12
	PSUBQ X4, X13
	MOVO X13, X7
	PSLLQ $8, X13
	POR X12, X13
	MOVO X13, 448(BX)
	PSRLQ $56, X7
	MOVO 496(AX), X6
	MOVO 512(AX), X1
	MOVO 528(AX), X14
	MOVO 544(AX), X11
	MOVO X6, X10
	MOVO X1, X9
	MOVO X14, X3
	MOVO X11, X5
	PSUBQ X15, X6
	PSLLQ $4, X6
	POR X7, X6
	MOVO X6, 464(BX)
	PSUBQ X10, X1
	PSUBQ X9, X14
	MOVO X14, X0
	PSLLQ $60, X14
	POR X1, X14
	MOVO X14, 480(BX)
	PSRLQ $4, X0
	PSUBQ X3, X11
	MOVO X11, X8
	PSLLQ $56, X11
	POR X0, X11
	MOVO X11, 496(BX)
	PSRLQ $8, X8
	MOVO 560(AX), X2
	MOVO 576(AX), X4
	MOVO 592(AX), X12
	MOVO 608(AX), X13
	MOVO X2, X15
	MOVO X4, X7
	MOVO X12, X6
	MOVO X13, X10
	PSUBQ X5, X2
	MOVO X2, X9
	PSLLQ $52, X2
	POR X8, X2
	MOVO X2, 512(BX)
	PSRLQ $12, X9
	PSUBQ X15, X4
	MOVO X4, X1
	PSLLQ $48, X4
	POR X9, X4
	MOVO X4, 528(BX)
	PSRLQ $16, X1
	PSUBQ X7, X12
	MOVO X12, X14
	PSLLQ $44, X12
	POR X1, X12
	MOVO X12, 544(BX)
	PSRLQ $20, X14
	PSUBQ X6, X13
	MOVO X13, X3
	PSLLQ $40, X13
	POR X14, X13
	MOVO X13, 560(BX)
	PSRLQ $24, X3
	MOVO 624(AX), X0
	MOVO 640(AX), X11
	MOVO 656(AX), X5
	MOVO 672(AX), X8
	MOVO X0, X2
	MOVO X11, X15
	MOVO X5, X9
	MOVO X8, X4
	PSUBQ X10, X0
	MOVO X0, X7
	PSLLQ $36, X0
	POR X3, X0
	MOVO X0, 576(BX)
	PSRLQ $28, X7
	PSUBQ X2, X11
	MOVO X11, X1
	PSLLQ $32, X11
	POR X7, X11
	MOVO X11, 592(BX)
	PSRLQ $32, X1
	PSUBQ X15, X5
	MOVO X5, X12
	PSLLQ $28, X5
	POR X1, X5
	MOVO X5, 608(BX)
	PSRLQ $36, X12
	PSUBQ X9, X8
	MOVO X8, X6
	PSLLQ $24, X8
	POR X12, X8
	MOVO X8, 624(BX)
	PSRLQ $40, X6
	MOVO 688(AX), X14
	MOVO 704(AX), X13
	MOVO 720(AX), X10
	MOVO 736(AX), X3
	MOVO X14, X0
	MOVO X13, X2
	MOVO X10, X7
	MOVO X3, X11
	PSUBQ X4, X14
	MOVO X14, X15
	PSLLQ $20, X14
	POR X6, X14
	MOVO X14, 640(BX)
	PSRLQ $44, X15
	PSUBQ X0, X13
	MOVO X13, X1
	PSLLQ $16, X13
	POR X15, X13
	MOVO X13, 656(BX)
	PSRLQ $48, X1
	PSUBQ X2, X10
	MOVO X10, X5
	PSLLQ $12, X10
	POR X1, X10
	MOVO X10, 672(BX)
	PSRLQ $52, X5
	PSUBQ X7, X3
	MOVO X3, X9
	PSLLQ $8, X3
	POR X5, X3
	MOVO X3, 688(BX)
	PSRLQ $56, X9
	MOVO 752(AX), X12
	MOVO 768(AX), X8
	MOVO 784(AX), X4
	MOVO 800(AX), X6
	MOVO X12, X14
	MOVO X8, X0
	MOVO X4, X15
	MOVO X6, X13
	PSUBQ X11, X12
	PSLLQ $4, X12
	POR X9, X12
	MOVO X12, 704(BX)
	PSUBQ X14, X8
	PSUBQ X0, X4
	MOVO X4, X2
	PSLLQ $60, X4
	POR X8, X4
	MOVO X4, 720(BX)
	PSRLQ $4, X2
	PSUBQ X15, X6
	MOVO X6, X1
	PSLLQ $56, X6
	POR X2, X6
	MOVO X6, 736(BX)
	PSRLQ $8, X1
	MOVO 816(AX), X10
	MOVO 832(AX), X7
	MOVO 848(AX), X5
	MOVO 864(AX), X3
	MOVO X10, X11
	MOVO X7, X9
	MOVO X5, X12
	MOVO X3, X14
	PSUBQ X13, X10
	MOVO X10, X0
	PSLLQ $52, X10
	POR X1, X10
	MOVO X10, 752(BX)
	PSRLQ $12, X0
	PSUBQ X11, X7
	MOVO X7, X8
	PSLLQ $48, X7
	POR X0, X7
	MOVO X7, 768(BX)
	PSRLQ $16, X8
	PSUBQ X9, X5
	MOVO X5, X4
	PSLLQ $44, X5
	POR X8, X5
	MOVO X5, 784(BX)
	PSRLQ $20, X4
	PSUBQ X12, X3
	MOVO X3, X15
	PSLLQ $40, X3
	POR X4, X3
	MOVO X3, 800(BX)
	PSRLQ $24, X15
	MOVO 880(AX), X2
	MOVO 896(AX), X6
	MOVO 912(AX), X13
	MOVO 928(AX), X1
	MOVO X2, X10
	MOVO X6, X11
	MOVO X13, X0
	MOVO X1, X7
	PSUBQ X14, X2
	MOVO X2, X9
	PSLLQ $36, X2
	POR X15, X2
	MOVO X2, 816(BX)
	PSRLQ $28, X9
	PSUBQ X10, X6
	MOVO X6, X8
	PSLLQ $32, X6
	POR X9, X6
	MOVO X6, 832(BX)
	PSRLQ $32, X8
	PSUBQ X11, X13
	MOVO X13, X5
	PSLLQ $28, X13
	POR X8, X13
	MOVO X13, 848(BX)
	PSRLQ $36, X5
	PSUBQ X0, X1
	MOVO X1, X12
	PSLLQ $24, X1
	POR X5, X1
	MOVO X1, 864(BX)
	PSRLQ $40, X12
	MOVO 944(AX), X4
	MOVO 960(AX), X3
	MOVO 976(AX), X14
	MOVO 992(AX), X15
	MOVO X4, X2
	MOVO X3, X10
	MOVO X14, X9
	MOVO X15, X6
	PSUBQ X7, X4
	MOVO X4, X11
	PSLLQ $20, X4
	POR X12, X4
	MOVO X4, 880(BX)
	PSRLQ $44, X11
	PSUBQ X2, X3
	MOVO X3, X8
	PSLLQ $16, X3
	POR X11, X3
	MOVO X3, 896(BX)
	PSRLQ $48, X8
	PSUBQ X10, X14
	MOVO X14, X13
	PSLLQ $12, X14
	POR X8, X14
	MOVO X14, 912(BX)
	PSRLQ $52, X13
	PSUBQ X9, X15
	MOVO X15, X0
	PSLLQ $8, X15
	POR X13, X15
	MOVO X15, 928(BX)
	PSRLQ $56, X0
	MOVO 1008(AX), X5
	MOVO X5, X1
	PSUBQ X6, X5
	PSLLQ $4, X5
	POR X0, X5
	MOVO X5, 944(BX)
	MOVO X1, 0(DX)
	RET

// func dpack64_61(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_61(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $61, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $3, X7
	PSUBQ X5, X3
	MOVO X3, X8
	PSLLQ $58, X3
	POR X7, X3
	MOVO X3, 16(BX)
	PSRLQ $6, X8
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	PSUBQ X6, X9
	MOVO X9, X4
	PSLLQ $55, X9
	POR X8, X9
	MOVO X9, 32(BX)
	PSRLQ $9, X4
	PSUBQ X13, X10
	MOVO X10, X1
	PSLLQ $52, X10
	POR X4, X10
	MOVO X10, 48(BX)
	PSRLQ $12, X1
	PSUBQ X14, X11
	MOVO X11, X2
	PSLLQ $49, X11
	POR X1, X11
	MOVO X11, 64(BX)
	PSRLQ $15, X2
	PSUBQ X15, X12
	MOVO X12, X5
	PSLLQ $46, X12
	POR X2, X12
	MOVO X12, 80(BX)
	PSRLQ $18, X5
	MOVO 112(AX), X7
	MOVO 128(AX), X3
	MOVO 144(AX), X6
	MOVO 160(AX), X8
	MOVO X7, X9
	MOVO X3, X13
	MOVO X6, X4
	MOVO X8, X10
	PSUBQ X0, X7
	MOVO X7, X14
	PSLLQ $43, X7
	POR X5, X7
	MOVO X7, 96(BX)
	PSRLQ $21, X14
	PSUBQ X9, X3
	MOVO X3, X1
	PSLLQ $40, X3
	POR X14, X3
	MOVO X3, 112(BX)
	PSRLQ $24, X1
	PSUBQ X13, X6
	MOVO X6, X11
	PSLLQ $37, X6
	POR X1, X6
	MOVO X6, 128(BX)
	PSRLQ $27, X11
	PSUBQ X4, X8
	MOVO X8, X15
	PSLLQ $34, X8
	POR X11, X8
	MOVO X8, 144(BX)
	PSRLQ $30, X15
	MOVO 176(AX), X2
	MOVO 192(AX), X12
	MOVO 208(AX), X0
	MOVO 224(AX), X5
	MOVO X2, X7
	MOVO X12, X9
	MOVO X0, X14
	MOVO X5, X3
	PSUBQ X10, X2
	MOVO X2, X13
	PSLLQ $31, X2
	POR X15, X2
	MOVO X2, 160(BX)
	PSRLQ $33, X13
	PSUBQ X7, X12
	MOVO X12, X1
	PSLLQ $28, X12
	POR X13, X12
	MOVO X12, 176(BX)
	PSRLQ $36, X1
	PSUBQ X9, X0
	MOVO X0, X6
	PSLLQ $25, X0
	POR X1, X0
	MOVO X0, 192(BX)
	PSRLQ $39, X6
	PSUBQ X14, X5
	MOVO X5, X4
	PSLLQ $22, X5
	POR X6, X5
	MOVO X5, 208(BX)
	PSRLQ $42, X4
	MOVO 240(AX), X11
	MOVO 256(AX), X8
	MOVO 272(AX), X10
	MOVO 288(AX), X15
	MOVO X11, X2
	MOVO X8, X7
	MOVO X10, X13
	MOVO X15, X12
	PSUBQ X3, X11
	MOVO X11, X9
	PSLLQ $19, X11
	POR X4, X11
	MOVO X11, 224(BX)
	PSRLQ $45, X9
	PSUBQ X2, X8
	MOVO X8, X1
	PSLLQ $16, X8
	POR X9, X8
	MOVO X8, 240(BX)
	PSRLQ $48, X1
	PSUBQ X7, X10
	MOVO X10, X0
	PSLLQ $13, X10
	POR X1, X10
	MOVO X10, 256(BX)
	PSRLQ $51, X0
	PSUBQ X13, X15
	MOVO X15, X14
	PSLLQ $10, X15
	POR X0, X15
	MOVO X15, 272(BX)
	PSRLQ $54, X14
	MOVO 304(AX), X6
	MOVO 320(AX), X5
	MOVO 336(AX), X3
	MOVO 352(AX), X4
	MOVO X6, X11
	MOVO X5, X2
	MOVO X3, X9
	MOVO X4, X8
	PSUBQ X12, X6
	MOVO X6, X7
	PSLLQ $7, X6
	POR X14, X6
	MOVO X6, 288(BX)
	PSRLQ $57, X7
	PSUBQ X11, X5
	MOVO X5, X1
	PSLLQ $4, X5
	POR X7, X5
	MOVO X5, 304(BX)
	PSRLQ $60, X1
	PSUBQ X2, X3
	PSLLQ $1, X3
	PSUBQ X9, X4
	MOVO X4, X10
	PSLLQ $62, X4
	POR X1, X3
	POR X4, X3
	MOVO X3, 320(BX)
	PSRLQ $2, X10
	MOVO 368(AX), X13
	MOVO 384(AX), X0
	MOVO 400(AX), X15
	MOVO 416(AX), X12
	MOVO X13, X14
	MOVO X0, X6
	MOVO X15, X11
	MOVO X12, X7
	PSUBQ X8, X13
	MOVO X13, X5
	PSLLQ $59, X13
	POR X10, X13
	MOVO X13, 336(BX)
	PSRLQ $5, X5
	PSUBQ X14, X0
	MOVO X0, X2
	PSLLQ $56, X0
	POR X5, X0
	MOVO X0, 352(BX)
	PSRLQ $8, X2
	PSUBQ X6, X15
	MOVO X15, X9
	PSLLQ $53, X15
	POR X2, X15
	MOVO X15, 368(BX)
	PSRLQ $11, X9
	PSUBQ X11, X12
	MOVO X12, X1
	PSLLQ $50, X12
	POR X9, X12
	MOVO X12, 384(BX)
	PSRLQ $14, X1
	MOVO 432(AX), X4
	MOVO 448(AX), X3
	MOVO 464(AX), X8
	MOVO 480(AX), X10
	MOVO X4, X13
	MOVO X3, X14
	MOVO X8, X5
	MOVO X10, X0
	PSUBQ X7, X4
	MOVO X4, X6
	PSLLQ $47, X4
	POR X1, X4
	MOVO X4, 400(BX)
	PSRLQ $17, X6
	PSUBQ X13, X3
	MOVO X3, X2
	PSLLQ $44, X3
	POR X6, X3
	MOVO X3, 416(BX)
	PSRLQ $20, X2
	PSUBQ X14, X8
	MOVO X8, X15
	PSLLQ $41, X8
	POR X2, X8
	MOVO X8, 432(BX)
	PSRLQ $23, X15
	PSUBQ X5, X10
	MOVO X10, X11
	PSLLQ $38, X10
	POR X15, X10
	MOVO X10, 448(BX)
	PSRLQ $26, X11
	MOVO 496(AX), X9
	MOVO 512(AX), X12
	MOVO 528(AX), X7
	MOVO 544(AX), X1
	MOVO X9, X4
	MOVO X12, X13
	MOVO X7, X6
	MOVO X1, X3
	PSUBQ X0, X9
	MOVO X9, X14
	PSLLQ $35, X9
	POR X11, X9
	MOVO X9, 464(BX)
	PSRLQ $29, X14
	PSUBQ X4, X12
	MOVO X12, X2
	PSLLQ $32, X12
	POR X14, X12
	MOVO X12, 480(BX)
	PSRLQ $32, X2
	PSUBQ X13, X7
	MOVO X7, X8
	PSLLQ $29, X7
	POR X2, X7
	MOVO X7, 496(BX)
	PSRLQ $35, X8
	PSUBQ X6, X1
	MOVO X1, X5
	PSLLQ $26, X1
	POR X8, X1
	MOVO X1, 512(BX)
	PSRLQ $38, X5
	MOVO 560(AX), X15
	MOVO 576(AX), X10
	MOVO 592(AX), X0
	MOVO 608(AX), X11
	MOVO X15, X9
	MOVO X10, X4
	MOVO X0, X14
	MOVO X11, X12
	PSUBQ X3, X15
	MOVO X15, X13
	PSLLQ $23, X15
	POR X5, X15
	MOVO X15, 528(BX)
	PSRLQ $41, X13
	PSUBQ X9, X10
	MOVO X10, X2
	PSLLQ $20, X10
	POR X13, X10
	MOVO X10, 544(BX)
	PSRLQ $44, X2
	PSUBQ X4, X0
	MOVO X0, X7
	PSLLQ $17, X0
	POR X2, X0
	MOVO X0, 560(BX)
	PSRLQ $47, X7
	PSUBQ X14, X11
	MOVO X11, X6
	PSLLQ $14, X11
	POR X7, X11
	MOVO X11, 576(BX)
	PSRLQ $50, X6
	MOVO 624(AX), X8
	MOVO 640(AX), X1
	MOVO 656(AX), X3
	MOVO 672(AX), X5
	MOVO X8, X15
	MOVO X1, X9
	MOVO X3, X13
	MOVO X5, X10
	PSUBQ X12, X8
	MOVO X8, X4
	PSLLQ $11, X8
	POR X6, X8
	MOVO X8, 592(BX)
	PSRLQ $53, X4
	PSUBQ X15, X1
	MOVO X1, X2
	PSLLQ $8, X1
	POR X4, X1
	MOVO X1, 608(BX)
	PSRLQ $56, X2
	PSUBQ X9, X3
	MOVO X3, X0
	PSLLQ $5, X3
	POR X2, X3
	MOVO X3, 624(BX)
	PSRLQ $59, X0
	PSUBQ X13, X5
	PSLLQ $2, X5
	MOVO 688(AX), X14
	MOVO 704(AX), X7
	MOVO 720(AX), X11
	MOVO 736(AX), X12
	MOVO X14, X6
	MOVO X7, X8
	MOVO X11, X15
	MOVO X12, X4
	PSUBQ X10, X14
	MOVO X14, X1
	PSLLQ $63, X14
	POR X0, X5
	POR X14, X5
	MOVO X5, 640(BX)
	PSRLQ $1, X1
	PSUBQ X6, X7
	MOVO X7, X9
	PSLLQ $60, X7
	POR X1, X7
	MOVO X7, 656(BX)
	PSRLQ $4, X9
	PSUBQ X8, X11
	MOVO X11, X2
	PSLLQ $57, X11
	POR X9, X11
	MOVO X11, 672(BX)
	PSRLQ $7, X2
	PSUBQ X15, X12
	MOVO X12, X3
	PSLLQ $54, X12
	POR X2, X12
	MOVO X12, 688(BX)
	PSRLQ $10, X3
	MOVO 752(AX), X13
	MOVO 768(AX), X10
	MOVO 784(AX), X0
	MOVO 800(AX), X14
	MOVO X13, X5
	MOVO X10, X6
	MOVO X0, X1
	MOVO X14, X7
	PSUBQ X4, X13
	MOVO X13, X8
	PSLLQ $51, X13
	POR X3, X13
	MOVO X13, 704(BX)
	PSRLQ $13, X8
	PSUBQ X5, X10
	MOVO X10, X9
	PSLLQ $48, X10
	POR X8, X10
	MOVO X10, 720(BX)
	PSRLQ $16, X9
	PSUBQ X6, X0
	MOVO X0, X11
	PSLLQ $45, X0
	POR X9, X0
	MOVO X0, 736(BX)
	PSRLQ $19, X11
	PSUBQ X1, X14
	MOVO X14, X15
	PSLLQ $42, X14
	POR X11, X14
	MOVO X14, 752(BX)
	PSRLQ $22, X15
	MOVO 816(AX), X2
	MOVO 832(AX), X12
	MOVO 848(AX), X4
	MOVO 864(AX), X3
	MOVO X2, X13
	MOVO X12, X5
	MOVO X4, X8
	MOVO X3, X10
	PSUBQ X7, X2
	MOVO X2, X6
	PSLLQ $39, X2
	POR X15, X2
	MOVO X2, 768(BX)
	PSRLQ $25, X6
	PSUBQ X13, X12
	MOVO X12, X9
	PSLLQ $36, X12
	POR X6, X12
	MOVO X12, 784(BX)
	PSRLQ $28, X9
	PSUBQ X5, X4
	MOVO X4, X0
	PSLLQ $33, X4
	POR X9, X4
	MOVO X4, 800(BX)
	PSRLQ $31, X0
	PSUBQ X8, X3
	MOVO X3, X1
	PSLLQ $30, X3
	POR X0, X3
	MOVO X3, 816(BX)
	PSRLQ $34, X1
	MOVO 880(AX), X11
	MOVO 896(AX), X14
	MOVO 912(AX), X7
	MOVO 928(AX), X15
	MOVO X11, X2
	MOVO X14, X13
	MOVO X7, X6
	MOVO X15, X12
	PSUBQ X10, X11
	MOVO X11, X5
	PSLLQ $27, X11
	POR X1, X11
	MOVO X11, 832(BX)
	PSRLQ $37, X5
	PSUBQ X2, X14
	MOVO X14, X9
	PSLLQ $24, X14
	POR X5, X14
	MOVO X14, 848(BX)
	PSRLQ $40, X9
	PSUBQ X13, X7
	MOVO X7, X4
	PSLLQ $21, X7
	POR X9, X7
	MOVO X7, 864(BX)
	PSRLQ $43, X4
	PSUBQ X6, X15
	MOVO X15, X8
	PSLLQ $18, X15
	POR X4, X15
	MOVO X15, 880(BX)
	PSRLQ $46, X8
	MOVO 944(AX), X0
	MOVO 960(AX), X3
	MOVO 976(AX), X10
	MOVO 992(AX), X1
	MOVO X0, X11
	MOVO X3, X2
	MOVO X10, X5
	MOVO X1, X14
	PSUBQ X12, X0
	MOVO X0, X13
	PSLLQ $15, X0
	POR X8, X0
	MOVO X0, 896(BX)
	PSRLQ $49, X13
	PSUBQ X11, X3
	MOVO X3, X9
	PSLLQ $12, X3
	POR X13, X3
	MOVO X3, 912(BX)
	PSRLQ $52, X9
	PSUBQ X2, X10
	MOVO X10, X7
	PSLLQ $9, X10
	POR X9, X10
	MOVO X10, 928(BX)
	PSRLQ $55, X7
	PSUBQ X5, X1
	MOVO X1, X6
	PSLLQ $6, X1
	POR X7, X1
	MOVO X1, 944(BX)
	PSRLQ $58, X6
	MOVO 1008(AX), X4
	MOVO X4, X15
	PSUBQ X14, X4
	PSLLQ $3, X4
	POR X6, X4
	MOVO X4, 960(BX)
	MOVO X15, 0(DX)
	RET

// func dpack64_62(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_62(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $62, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $2, X7
	PSUBQ X5, X3
	MOVO X3, X8
	PSLLQ $60, X3
	POR X7, X3
	MOVO X3, 16(BX)
	PSRLQ $4, X8
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	PSUBQ X6, X9
	MOVO X9, X4
	PSLLQ $58, X9
	POR X8, X9
	MOVO X9, 32(BX)
	PSRLQ $6, X4
	PSUBQ X13, X10
	MOVO X10, X1
	PSLLQ $56, X10
	POR X4, X10
	MOVO X10, 48(BX)
	PSRLQ $8, X1
	PSUBQ X14, X11
	MOVO X11, X2
	PSLLQ $54, X11
	POR X1, X11
	MOVO X11, 64(BX)
	PSRLQ $10, X2
	PSUBQ X15, X12
	MOVO X12, X5
	PSLLQ $52, X12
	POR X2, X12
	MOVO X12, 80(BX)
	PSRLQ $12, X5
	MOVO 112(AX), X7
	MOVO 128(AX), X3
	MOVO 144(AX), X6
	MOVO 160(AX), X8
	MOVO X7, X9
	MOVO X3, X13
	MOVO X6, X4
	MOVO X8, X10
	PSUBQ X0, X7
	MOVO X7, X14
	PSLLQ $50, X7
	POR X5, X7
	MOVO X7, 96(BX)
	PSRLQ $14, X14
	PSUBQ X9, X3
	MOVO X3, X1
	PSLLQ $48, X3
	POR X14, X3
	MOVO X3, 112(BX)
	PSRLQ $16, X1
	PSUBQ X13, X6
	MOVO X6, X11
	PSLLQ $46, X6
	POR X1, X6
	MOVO X6, 128(BX)
	PSRLQ $18, X11
	PSUBQ X4, X8
	MOVO X8, X15
	PSLLQ $44, X8
	POR X11, X8
	MOVO X8, 144(BX)
	PSRLQ $20, X15
	MOVO 176(AX), X2
	MOVO 192(AX), X12
	MOVO 208(AX), X0
	MOVO 224(AX), X5
	MOVO X2, X7
	MOVO X12, X9
	MOVO X0, X14
	MOVO X5, X3
	PSUBQ X10, X2
	MOVO X2, X13
	PSLLQ $42, X2
	POR X15, X2
	MOVO X2, 160(BX)
	PSRLQ $22, X13
	PSUBQ X7, X12
	MOVO X12, X1
	PSLLQ $40, X12
	POR X13, X12
	MOVO X12, 176(BX)
	PSRLQ $24, X1
	PSUBQ X9, X0
	MOVO X0, X6
	PSLLQ $38, X0
	POR X1, X0
	MOVO X0, 192(BX)
	PSRLQ $26, X6
	PSUBQ X14, X5
	MOVO X5, X4
	PSLLQ $36, X5
	POR X6, X5
	MOVO X5, 208(BX)
	PSRLQ $28, X4
	MOVO 240(AX), X11
	MOVO 256(AX), X8
	MOVO 272(AX), X10
	MOVO 288(AX), X15
	MOVO X11, X2
	MOVO X8, X7
	MOVO X10, X13
	MOVO X15, X12
	PSUBQ X3, X11
	MOVO X11, X9
	PSLLQ $34, X11
	POR X4, X11
	MOVO X11, 224(BX)
	PSRLQ $30, X9
	PSUBQ X2, X8
	MOVO X8, X1
	PSLLQ $32, X8
	POR X9, X8
	MOVO X8, 240(BX)
	PSRLQ $32, X1
	PSUBQ X7, X10
	MOVO X10, X0
	PSLLQ $30, X10
	POR X1, X10
	MOVO X10, 256(BX)
	PSRLQ $34, X0
	PSUBQ X13, X15
	MOVO X15, X14
	PSLLQ $28, X15
	POR X0, X15
	MOVO X15, 272(BX)
	PSRLQ $36, X14
	MOVO 304(AX), X6
	MOVO 320(AX), X5
	MOVO 336(AX), X3
	MOVO 352(AX), X4
	MOVO X6, X11
	MOVO X5, X2
	MOVO X3, X9
	MOVO X4, X8
	PSUBQ X12, X6
	MOVO X6, X7
	PSLLQ $26, X6
	POR X14, X6
	MOVO X6, 288(BX)
	PSRLQ $38, X7
	PSUBQ X11, X5
	MOVO X5, X1
	PSLLQ $24, X5
	POR X7, X5
	MOVO X5, 304(BX)
	PSRLQ $40, X1
	PSUBQ X2, X3
	MOVO X3, X10
	PSLLQ $22, X3
	POR X1, X3
	MOVO X3, 320(BX)
	PSRLQ $42, X10
	PSUBQ X9, X4
	MOVO X4, X13
	PSLLQ $20, X4
	POR X10, X4
	MOVO X4, 336(BX)
	PSRLQ $44, X13
	MOVO 368(AX), X0
	MOVO 384(AX), X15
	MOVO 400(AX), X12
	MOVO 416(AX), X14
	MOVO X0, X6
	MOVO X15, X11
	MOVO X12, X7
	MOVO X14, X5
	PSUBQ X8, X0
	MOVO X0, X2
	PSLLQ $18, X0
	POR X13, X0
	MOVO X0, 352(BX)
	PSRLQ $46, X2
	PSUBQ X6, X15
	MOVO X15, X1
	PSLLQ $16, X15
	POR X2, X15
	MOVO X15, 368(BX)
	PSRLQ $48, X1
	PSUBQ X11, X12
	MOVO X12, X3
	PSLLQ $14, X12
	POR X1, X12
	MOVO X12, 384(BX)
	PSRLQ $50, X3
	PSUBQ X7, X14
	MOVO X14, X9
	PSLLQ $12, X14
	POR X3, X14
	MOVO X14, 400(BX)
	PSRLQ $52, X9
	MOVO 432(AX), X10
	MOVO 448(AX), X4
	MOVO 464(AX), X8
	MOVO 480(AX), X13
	MOVO X10, X0
	MOVO X4, X6
	MOVO X8, X2
	MOVO X13, X15
	PSUBQ X5, X10
	MOVO X10, X11
	PSLLQ $10, X10
	POR X9, X10
	MOVO X10, 416(BX)
	PSRLQ $54, X11
	PSUBQ X0, X4
	MOVO X4, X1
	PSLLQ $8, X4
	POR X11, X4
	MOVO X4, 432(BX)
	PSRLQ $56, X1
	PSUBQ X6, X8
	MOVO X8, X12
	PSLLQ $6, X8
	POR X1, X8
	MOVO X8, 448(BX)
	PSRLQ $58, X12
	PSUBQ X2, X13
	MOVO X13, X7
	PSLLQ $4, X13
	POR X12, X13
	MOVO X13, 464(BX)
	PSRLQ $60, X7
	MOVO 496(AX), X3
	MOVO 512(AX), X14
	MOVO 528(AX), X5
	MOVO 544(AX), X9
	MOVO X3, X10
	MOVO X14, X0
	MOVO X5, X11
	MOVO X9, X4
	PSUBQ X15, X3
	PSLLQ $2, X3
	POR X7, X3
	MOVO X3, 480(BX)
	PSUBQ X10, X14
	PSUBQ X0, X5
	MOVO X5, X6
	PSLLQ $62, X5
	POR X14, X5
	MOVO X5, 496(BX)
	PSRLQ $2, X6
	PSUBQ X11, X9
	MOVO X9, X1
	PSLLQ $60, X9
	POR X6, X9
	MOVO X9, 512(BX)
	PSRLQ $4, X1
	MOVO 560(AX), X8
	MOVO 576(AX), X2
	MOVO 592(AX), X12
	MOVO 608(AX), X13
	MOVO X8, X15
	MOVO X2, X7
	MOVO X12, X3
	MOVO X13, X10
	PSUBQ X4, X8
	MOVO X8, X0
	PSLLQ $58, X8
	POR X1, X8
	MOVO X8, 528(BX)
	PSRLQ $6, X0
	PSUBQ X15, X2
	MOVO X2, X14
	PSLLQ $56, X2
	POR X0, X2
	MOVO X2, 544(BX)
	PSRLQ $8, X14
	PSUBQ X7, X12
	MOVO X12, X5
	PSLLQ $54, X12
	POR X14, X12
	MOVO X12, 560(BX)
	PSRLQ $10, X5
	PSUBQ X3, X13
	MOVO X13, X11
	PSLLQ $52, X13
	POR X5, X13
	MOVO X13, 576(BX)
	PSRLQ $12, X11
	MOVO 624(AX), X6
	MOVO 640(AX), X9
	MOVO 656(AX), X4
	MOVO 672(AX), X1
	MOVO X6, X8
	MOVO X9, X15
	MOVO X4, X0
	MOVO X1, X2
	PSUBQ X10, X6
	MOVO X6, X7
	PSLLQ $50, X6
	POR X11, X6
	MOVO X6, 592(BX)
	PSRLQ $14, X7
	PSUBQ X8, X9
	MOVO X9, X14
	PSLLQ $48, X9
	POR X7, X9
	MOVO X9, 608(BX)
	PSRLQ $16, X14
	PSUBQ X15, X4
	MOVO X4, X12
	PSLLQ $46, X4
	POR X14, X4
	MOVO X4, 624(BX)
	PSRLQ $18, X12
	PSUBQ X0, X1
	MOVO X1, X3
	PSLLQ $44, X1
	POR X12, X1
	MOVO X1, 640(BX)
	PSRLQ $20, X3
	MOVO 688(AX), X5
	MOVO 704(AX), X13
	MOVO 720(AX), X10
	MOVO 736(AX), X11
	MOVO X5, X6
	MOVO X13, X8
	MOVO X10, X7
	MOVO X11, X9
	PSUBQ X2, X5
	MOVO X5, X15
	PSLLQ $42, X5
	POR X3, X5
	MOVO X5, 656(BX)
	PSRLQ $22, X15
	PSUBQ X6, X13
	MOVO X13, X14
	PSLLQ $40, X13
	POR X15, X13
	MOVO X13, 672(BX)
	PSRLQ $24, X14
	PSUBQ X8, X10
	MOVO X10, X4
	PSLLQ $38, X10
	POR X14, X10
	MOVO X10, 688(BX)
	PSRLQ $26, X4
	PSUBQ X7, X11
	MOVO X11, X0
	PSLLQ $36, X11
	POR X4, X11
	MOVO X11, 704(BX)
	PSRLQ $28, X0
	MOVO 752(AX), X12
	MOVO 768(AX), X1
	MOVO 784(AX), X2
	MOVO 800(AX), X3
	MOVO X12, X5
	MOVO X1, X6
	MOVO X2, X15
	MOVO X3, X13
	PSUBQ X9, X12
	MOVO X12, X8
	PSLLQ $34, X12
	POR X0, X12
	MOVO X12, 720(BX)
	PSRLQ $30, X8
	PSUBQ X5, X1
	MOVO X1, X14
	PSLLQ $32, X1
	POR X8, X1
	MOVO X1, 736(BX)
	PSRLQ $32, X14
	PSUBQ X6, X2
	MOVO X2, X10
	PSLLQ $30, X2
	POR X14, X2
	MOVO X2, 752(BX)
	PSRLQ $34, X10
	PSUBQ X15, X3
	MOVO X3, X7
	PSLLQ $28, X3
	POR X10, X3
	MOVO X3, 768(BX)
	PSRLQ $36, X7
	MOVO 816(AX), X4
	MOVO 832(AX), X11
	MOVO 848(AX), X9
	MOVO 864(AX), X0
	MOVO X4, X12
	MOVO X11, X5
	MOVO X9, X8
	MOVO X0, X1
	PSUBQ X13, X4
	MOVO X4, X6
	PSLLQ $26, X4
	POR X7, X4
	MOVO X4, 784(BX)
	PSRLQ $38, X6
	PSUBQ X12, X11
	MOVO X11, X14
	PSLLQ $24, X11
	POR X6, X11
	MOVO X11, 800(BX)
	PSRLQ $40, X14
	PSUBQ X5, X9
	MOVO X9, X2
	PSLLQ $22, X9
	POR X14, X9
	MOVO X9, 816(BX)
	PSRLQ $42, X2
	PSUBQ X8, X0
	MOVO X0, X15
	PSLLQ $20, X0
	POR X2, X0
	MOVO X0, 832(BX)
	PSRLQ $44, X15
	MOVO 880(AX), X10
	MOVO 896(AX), X3
	MOVO 912(AX), X13
	MOVO 928(AX), X7
	MOVO X10, X4
	MOVO X3, X12
	MOVO X13, X6
	MOVO X7, X11
	PSUBQ X1, X10
	MOVO X10, X5
	PSLLQ $18, X10
	POR X15, X10
	MOVO X10, 848(BX)
	PSRLQ $46, X5
	PSUBQ X4, X3
	MOVO X3, X14
	PSLLQ $16, X3
	POR X5, X3
	MOVO X3, 864(BX)
	PSRLQ $48, X14
	PSUBQ X12, X13
	MOVO X13, X9
	PSLLQ $14, X13
	POR X14, X13
	MOVO X13, 880(BX)
	PSRLQ $50, X9
	PSUBQ X6, X7
	MOVO X7, X8
	PSLLQ $12, X7
	POR X9, X7
	MOVO X7, 896(BX)
	PSRLQ $52, X8
	MOVO 944(AX), X2
	MOVO 960(AX), X0
	MOVO 976(AX), X1
	MOVO 992(AX), X15
	MOVO X2, X10
	MOVO X0, X4
	MOVO X1, X5
	MOVO X15, X3
	PSUBQ X11, X2
	MOVO X2, X12
	PSLLQ $10, X2
	POR X8, X2
	MOVO X2, 912(BX)
	PSRLQ $54, X12
	PSUBQ X10, X0
	MOVO X0, X14
	PSLLQ $8, X0
	POR X12, X0
	MOVO X0, 928(BX)
	PSRLQ $56, X14
	PSUBQ X4, X1
	MOVO X1, X13
	PSLLQ $6, X1
	POR X14, X1
	MOVO X1, 944(BX)
	PSRLQ $58, X13
	PSUBQ X5, X15
	MOVO X15, X6
	PSLLQ $4, X15
	POR X13, X15
	MOVO X15, 960(BX)
	PSRLQ $60, X6
	MOVO 1008(AX), X9
	MOVO X9, X7
	PSUBQ X3, X9
	PSLLQ $2, X9
	POR X6, X9
	MOVO X9, 976(BX)
	MOVO X7, 0(DX)
	RET

// func dpack64_63(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_63(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $63, X2
	POR X1, X2
	MOVO X2, 0(BX)
	PSRLQ $1, X7
	PSUBQ X5, X3
	MOVO X3, X8
	PSLLQ $62, X3
	POR X7, X3
	MOVO X3, 16(BX)
	PSRLQ $2, X8
	MOVO 48(AX), X9
	MOVO 64(AX), X10
	MOVO 80(AX), X11
	MOVO 96(AX), X12
	MOVO X9, X13
	MOVO X10, X14
	MOVO X11, X15
	MOVO X12, X0
	PSUBQ X6, X9
	MOVO X9, X4
	PSLLQ $61, X9
	POR X8, X9
	MOVO X9, 32(BX)
	PSRLQ $3, X4
	PSUBQ X13, X10
	MOVO X10, X1
	PSLLQ $60, X10
	POR X4, X10
	MOVO X10, 48(BX)
	PSRLQ $4, X1
	PSUBQ X14, X11
	MOVO X11, X2
	PSLLQ $59, X11
	POR X1, X11
	MOVO X11, 64(BX)
	PSRLQ $5, X2
	PSUBQ X15, X12
	MOVO X12, X5
	PSLLQ $58, X12
	POR X2, X12
	MOVO X12, 80(BX)
	PSRLQ $6, X5
	MOVO 112(AX), X7
	MOVO 128(AX), X3
	MOVO 144(AX), X6
	MOVO 160(AX), X8
	MOVO X7, X9
	MOVO X3, X13
	MOVO X6, X4
	MOVO X8, X10
	PSUBQ X0, X7
	MOVO X7, X14
	PSLLQ $57, X7
	POR X5, X7
	MOVO X7, 96(BX)
	PSRLQ $7, X14
	PSUBQ X9, X3
	MOVO X3, X1
	PSLLQ $56, X3
	POR X14, X3
	MOVO X3, 112(BX)
	PSRLQ $8, X1
	PSUBQ X13, X6
	MOVO X6, X11
	PSLLQ $55, X6
	POR X1, X6
	MOVO X6, 128(BX)
	PSRLQ $9, X11
	PSUBQ X4, X8
	MOVO X8, X15
	PSLLQ $54, X8
	POR X11, X8
	MOVO X8, 144(BX)
	PSRLQ $10, X15
	MOVO 176(AX), X2
	MOVO 192(AX), X12
	MOVO 208(AX), X0
	MOVO 224(AX), X5
	MOVO X2, X7
	MOVO X12, X9
	MOVO X0, X14
	MOVO X5, X3
	PSUBQ X10, X2
	MOVO X2, X13
	PSLLQ $53, X2
	POR X15, X2
	MOVO X2, 160(BX)
	PSRLQ $11, X13
	PSUBQ X7, X12
	MOVO X12, X1
	PSLLQ $52, X12
	POR X13, X12
	MOVO X12, 176(BX)
	PSRLQ $12, X1
	PSUBQ X9, X0
	MOVO X0, X6
	PSLLQ $51, X0
	POR X1, X0
	MOVO X0, 192(BX)
	PSRLQ $13, X6
	PSUBQ X14, X5
	MOVO X5, X4
	PSLLQ $50, X5
	POR X6, X5
	MOVO X5, 208(BX)
	PSRLQ $14, X4
	MOVO 240(AX), X11
	MOVO 256(AX), X8
	MOVO 272(AX), X10
	MOVO 288(AX), X15
	MOVO X11, X2
	MOVO X8, X7
	MOVO X10, X13
	MOVO X15, X12
	PSUBQ X3, X11
	MOVO X11, X9
	PSLLQ $49, X11
	POR X4, X11
	MOVO X11, 224(BX)
	PSRLQ $15, X9
	PSUBQ X2, X8
	MOVO X8, X1
	PSLLQ $48, X8
	POR X9, X8
	MOVO X8, 240(BX)
	PSRLQ $16, X1
	PSUBQ X7, X10
	MOVO X10, X0
	PSLLQ $47, X10
	POR X1, X10
	MOVO X10, 256(BX)
	PSRLQ $17, X0
	PSUBQ X13, X15
	MOVO X15, X14
	PSLLQ $46, X15
	POR X0, X15
	MOVO X15, 272(BX)
	PSRLQ $18, X14
	MOVO 304(AX), X6
	MOVO 320(AX), X5
	MOVO 336(AX), X3
	MOVO 352(AX), X4
	MOVO X6, X11
	MOVO X5, X2
	MOVO X3, X9
	MOVO X4, X8
	PSUBQ X12, X6
	MOVO X6, X7
	PSLLQ $45, X6
	POR X14, X6
	MOVO X6, 288(BX)
	PSRLQ $19, X7
	PSUBQ X11, X5
	MOVO X5, X1
	PSLLQ $44, X5
	POR X7, X5
	MOVO X5, 304(BX)
	PSRLQ $20, X1
	PSUBQ X2, X3
	MOVO X3, X10
	PSLLQ $43, X3
	POR X1, X3
	MOVO X3, 320(BX)
	PSRLQ $21, X10
	PSUBQ X9, X4
	MOVO X4, X13
	PSLLQ $42, X4
	POR X10, X4
	MOVO X4, 336(BX)
	PSRLQ $22, X13
	MOVO 368(AX), X0
	MOVO 384(AX), X15
	MOVO 400(AX), X12
	MOVO 416(AX), X14
	MOVO X0, X6
	MOVO X15, X11
	MOVO X12, X7
	MOVO X14, X5
	PSUBQ X8, X0
	MOVO X0, X2
	PSLLQ $41, X0
	POR X13, X0
	MOVO X0, 352(BX)
	PSRLQ $23, X2
	PSUBQ X6, X15
	MOVO X15, X1
	PSLLQ $40, X15
	POR X2, X15
	MOVO X15, 368(BX)
	PSRLQ $24, X1
	PSUBQ X11, X12
	MOVO X12, X3
	PSLLQ $39, X12
	POR X1, X12
	MOVO X12, 384(BX)
	PSRLQ $25, X3
	PSUBQ X7, X14
	MOVO X14, X9
	PSLLQ $38, X14
	POR X3, X14
	MOVO X14, 400(BX)
	PSRLQ $26, X9
	MOVO 432(AX), X10
	MOVO 448(AX), X4
	MOVO 464(AX), X8
	MOVO 480(AX), X13
	MOVO X10, X0
	MOVO X4, X6
	MOVO X8, X2
	MOVO X13, X15
	PSUBQ X5, X10
	MOVO X10, X11
	PSLLQ $37, X10
	POR X9, X10
	MOVO X10, 416(BX)
	PSRLQ $27, X11
	PSUBQ X0, X4
	MOVO X4, X1
	PSLLQ $36, X4
	POR X11, X4
	MOVO X4, 432(BX)
	PSRLQ $28, X1
	PSUBQ X6, X8
	MOVO X8, X12
	PSLLQ $35, X8
	POR X1, X8
	MOVO X8, 448(BX)
	PSRLQ $29, X12
	PSUBQ X2, X13
	MOVO X13, X7
	PSLLQ $34, X13
	POR X12, X13
	MOVO X13, 464(BX)
	PSRLQ $30, X7
	MOVO 496(AX), X3
	MOVO 512(AX), X14
	MOVO 528(AX), X5
	MOVO 544(AX), X9
	MOVO X3, X10
	MOVO X14, X0
	MOVO X5, X11
	MOVO X9, X4
	PSUBQ X15, X3
	MOVO X3, X6
	PSLLQ $33, X3
	POR X7, X3
	MOVO X3, 480(BX)
	PSRLQ $31, X6
	PSUBQ X10, X14
	MOVO X14, X1
	PSLLQ $32, X14
	POR X6, X14
	MOVO X14, 496(BX)
	PSRLQ $32, X1
	PSUBQ X0, X5
	MOVO X5, X8
	PSLLQ $31, X5
	POR X1, X5
	MOVO X5, 512(BX)
	PSRLQ $33, X8
	PSUBQ X11, X9
	MOVO X9, X2
	PSLLQ $30, X9
	POR X8, X9
	MOVO X9, 528(BX)
	PSRLQ $34, X2
	MOVO 560(AX), X12
	MOVO 576(AX), X13
	MOVO 592(AX), X15
	MOVO 608(AX), X7
	MOVO X12, X3
	MOVO X13, X10
	MOVO X15, X6
	MOVO X7, X14
	PSUBQ X4, X12
	MOVO X12, X0
	PSLLQ $29, X12
	POR X2, X12
	MOVO X12, 544(BX)
	PSRLQ $35, X0
	PSUBQ X3, X13
	MOVO X13, X1
	PSLLQ $28, X13
	POR X0, X13
	MOVO X13, 560(BX)
	PSRLQ $36, X1
	PSUBQ X10, X15
	MOVO X15, X5
	PSLLQ $27, X15
	POR X1, X15
	MOVO X15, 576(BX)
	PSRLQ $37, X5
	PSUBQ X6, X7
	MOVO X7, X11
	PSLLQ $26, X7
	POR X5, X7
	MOVO X7, 592(BX)
	PSRLQ $38, X11
	MOVO 624(AX), X8
	MOVO 640(AX), X9
	MOVO 656(AX), X4
	MOVO 672(AX), X2
	MOVO X8, X12
	MOVO X9, X3
	MOVO X4, X0
	MOVO X2, X13
	PSUBQ X14, X8
	MOVO X8, X10
	PSLLQ $25, X8
	POR X11, X8
	MOVO X8, 608(BX)
	PSRLQ $39, X10
	PSUBQ X12, X9
	MOVO X9, X1
	PSLLQ $24, X9
	POR X10, X9
	MOVO X9, 624(BX)
	PSRLQ $40, X1
	PSUBQ X3, X4
	MOVO X4, X15
	PSLLQ $23, X4
	POR X1, X4
	MOVO X4, 640(BX)
	PSRLQ $41, X15
	PSUBQ X0, X2
	MOVO X2, X6
	PSLLQ $22, X2
	POR X15, X2
	MOVO X2, 656(BX)
	PSRLQ $42, X6
	MOVO 688(AX), X5
	MOVO 704(AX), X7
	MOVO 720(AX), X14
	MOVO 736(AX), X11
	MOVO X5, X8
	MOVO X7, X12
	MOVO X14, X10
	MOVO X11, X9
	PSUBQ X13, X5
	MOVO X5, X3
	PSLLQ $21, X5
	POR X6, X5
	MOVO X5, 672(BX)
	PSRLQ $43, X3
	PSUBQ X8, X7
	MOVO X7, X1
	PSLLQ $20, X7
	POR X3, X7
	MOVO X7, 688(BX)
	PSRLQ $44, X1
	PSUBQ X12, X14
	MOVO X14, X4
	PSLLQ $19, X14
	POR X1, X14
	MOVO X14, 704(BX)
	PSRLQ $45, X4
	PSUBQ X10, X11
	MOVO X11, X0
	PSLLQ $18, X11
	POR X4, X11
	MOVO X11, 720(BX)
	PSRLQ $46, X0
	MOVO 752(AX), X15
	MOVO 768(AX), X2
	MOVO 784(AX), X13
	MOVO 800(AX), X6
	MOVO X15, X5
	MOVO X2, X8
	MOVO X13, X3
	MOVO X6, X7
	PSUBQ X9, X15
	MOVO X15, X12
	PSLLQ $17, X15
	POR X0, X15
	MOVO X15, 736(BX)
	PSRLQ $47, X12
	PSUBQ X5, X2
	MOVO X2, X1
	PSLLQ $16, X2
	POR X12, X2
	MOVO X2, 752(BX)
	PSRLQ $48, X1
	PSUBQ X8, X13
	MOVO X13, X14
	PSLLQ $15, X13
	POR X1, X13
	MOVO X13, 768(BX)
	PSRLQ $49, X14
	PSUBQ X3, X6
	MOVO X6, X10
	PSLLQ $14, X6
	POR X14, X6
	MOVO X6, 784(BX)
	PSRLQ $50, X10
	MOVO 816(AX), X4
	MOVO 832(AX), X11
	MOVO 848(AX), X9
	MOVO 864(AX), X0
	MOVO X4, X15
	MOVO X11, X5
	MOVO X9, X12
	MOVO X0, X2
	PSUBQ X7, X4
	MOVO X4, X8
	PSLLQ $13, X4
	POR X10, X4
	MOVO X4, 800(BX)
	PSRLQ $51, X8
	PSUBQ X15, X11
	MOVO X11, X1
	PSLLQ $12, X11
	POR X8, X11
	MOVO X11, 816(BX)
	PSRLQ $52, X1
	PSUBQ X5, X9
	MOVO X9, X13
	PSLLQ $11, X9
	POR X1, X9
	MOVO X9, 832(BX)
	PSRLQ $53, X13
	PSUBQ X12, X0
	MOVO X0, X3
	PSLLQ $10, X0
	POR X13, X0
	MOVO X0, 848(BX)
	PSRLQ $54, X3
	MOVO 880(AX), X14
	MOVO 896(AX), X6
	MOVO 912(AX), X7
	MOVO 928(AX), X10
	MOVO X14, X4
	MOVO X6, X15
	MOVO X7, X8
	MOVO X10, X11
	PSUBQ X2, X14
	MOVO X14, X5
	PSLLQ $9, X14
	POR X3, X14
	MOVO X14, 864(BX)
	PSRLQ $55, X5
	PSUBQ X4, X6
	MOVO X6, X1
	PSLLQ $8, X6
	POR X5, X6
	MOVO X6, 880(BX)
	PSRLQ $56, X1
	PSUBQ X15, X7
	MOVO X7, X9
	PSLLQ $7, X7
	POR X1, X7
	MOVO X7, 896(BX)
	PSRLQ $57, X9
	PSUBQ X8, X10
	MOVO X10, X12
	PSLLQ $6, X10
	POR X9, X10
	MOVO X10, 912(BX)
	PSRLQ $58, X12
	MOVO 944(AX), X13
	MOVO 960(AX), X0
	MOVO 976(AX), X2
	MOVO 992(AX), X3
	MOVO X13, X14
	MOVO X0, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X11, X13
	MOVO X13, X15
	PSLLQ $5, X13
	POR X12, X13
	MOVO X13, 928(BX)
	PSRLQ $59, X15
	PSUBQ X14, X0
	MOVO X0, X1
	PSLLQ $4, X0
	POR X15, X0
	MOVO X0, 944(BX)
	PSRLQ $60, X1
	PSUBQ X4, X2
	MOVO X2, X7
	PSLLQ $3, X2
	POR X1, X2
	MOVO X2, 960(BX)
	PSRLQ $61, X7
	PSUBQ X5, X3
	MOVO X3, X8
	PSLLQ $2, X3
	POR X7, X3
	MOVO X3, 976(BX)
	PSRLQ $62, X8
	MOVO 1008(AX), X9
	MOVO X9, X10
	PSUBQ X6, X9
	PSLLQ $1, X9
	POR X8, X9
	MOVO X9, 992(BX)
	MOVO X10, 0(DX)
	RET

// func dpack64_64(in *uint, out *uint8, inOffset int, seed *uint8)
TEXT ·dpack64_64(SB),4,$0-32
	MOVQ in+0(FP), AX
	MOVQ out+8(FP), BX
	MOVQ inOffset+16(FP), CX
	MOVQ seed+24(FP), DX
	SHLQ $3, CX
	ADDQ CX, AX
	MOVO 0(DX), X0
	MOVO 0(AX), X1
	MOVO 16(AX), X2
	MOVO 32(AX), X3
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X0, X1
	MOVO X1, 0(BX)
	PSUBQ X4, X2
	MOVO X2, 16(BX)
	PSUBQ X5, X3
	MOVO X3, 32(BX)
	MOVO 48(AX), X7
	MOVO 64(AX), X8
	MOVO 80(AX), X9
	MOVO 96(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	PSUBQ X6, X7
	MOVO X7, 48(BX)
	PSUBQ X11, X8
	MOVO X8, 64(BX)
	PSUBQ X12, X9
	MOVO X9, 80(BX)
	PSUBQ X13, X10
	MOVO X10, 96(BX)
	MOVO 112(AX), X15
	MOVO 128(AX), X0
	MOVO 144(AX), X1
	MOVO 160(AX), X4
	MOVO X15, X2
	MOVO X0, X5
	MOVO X1, X3
	MOVO X4, X6
	PSUBQ X14, X15
	MOVO X15, 112(BX)
	PSUBQ X2, X0
	MOVO X0, 128(BX)
	PSUBQ X5, X1
	MOVO X1, 144(BX)
	PSUBQ X3, X4
	MOVO X4, 160(BX)
	MOVO 176(AX), X7
	MOVO 192(AX), X11
	MOVO 208(AX), X8
	MOVO 224(AX), X12
	MOVO X7, X9
	MOVO X11, X13
	MOVO X8, X10
	MOVO X12, X14
	PSUBQ X6, X7
	MOVO X7, 176(BX)
	PSUBQ X9, X11
	MOVO X11, 192(BX)
	PSUBQ X13, X8
	MOVO X8, 208(BX)
	PSUBQ X10, X12
	MOVO X12, 224(BX)
	MOVO 240(AX), X15
	MOVO 256(AX), X2
	MOVO 272(AX), X0
	MOVO 288(AX), X5
	MOVO X15, X1
	MOVO X2, X3
	MOVO X0, X4
	MOVO X5, X6
	PSUBQ X14, X15
	MOVO X15, 240(BX)
	PSUBQ X1, X2
	MOVO X2, 256(BX)
	PSUBQ X3, X0
	MOVO X0, 272(BX)
	PSUBQ X4, X5
	MOVO X5, 288(BX)
	MOVO 304(AX), X7
	MOVO 320(AX), X9
	MOVO 336(AX), X11
	MOVO 352(AX), X13
	MOVO X7, X8
	MOVO X9, X10
	MOVO X11, X12
	MOVO X13, X14
	PSUBQ X6, X7
	MOVO X7, 304(BX)
	PSUBQ X8, X9
	MOVO X9, 320(BX)
	PSUBQ X10, X11
	MOVO X11, 336(BX)
	PSUBQ X12, X13
	MOVO X13, 352(BX)
	MOVO 368(AX), X15
	MOVO 384(AX), X1
	MOVO 400(AX), X2
	MOVO 416(AX), X3
	MOVO X15, X0
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X14, X15
	MOVO X15, 368(BX)
	PSUBQ X0, X1
	MOVO X1, 384(BX)
	PSUBQ X4, X2
	MOVO X2, 400(BX)
	PSUBQ X5, X3
	MOVO X3, 416(BX)
	MOVO 432(AX), X7
	MOVO 448(AX), X8
	MOVO 464(AX), X9
	MOVO 480(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	PSUBQ X6, X7
	MOVO X7, 432(BX)
	PSUBQ X11, X8
	MOVO X8, 448(BX)
	PSUBQ X12, X9
	MOVO X9, 464(BX)
	PSUBQ X13, X10
	MOVO X10, 480(BX)
	MOVO 496(AX), X15
	MOVO 512(AX), X0
	MOVO 528(AX), X1
	MOVO 544(AX), X4
	MOVO X15, X2
	MOVO X0, X5
	MOVO X1, X3
	MOVO X4, X6
	PSUBQ X14, X15
	MOVO X15, 496(BX)
	PSUBQ X2, X0
	MOVO X0, 512(BX)
	PSUBQ X5, X1
	MOVO X1, 528(BX)
	PSUBQ X3, X4
	MOVO X4, 544(BX)
	MOVO 560(AX), X7
	MOVO 576(AX), X11
	MOVO 592(AX), X8
	MOVO 608(AX), X12
	MOVO X7, X9
	MOVO X11, X13
	MOVO X8, X10
	MOVO X12, X14
	PSUBQ X6, X7
	MOVO X7, 560(BX)
	PSUBQ X9, X11
	MOVO X11, 576(BX)
	PSUBQ X13, X8
	MOVO X8, 592(BX)
	PSUBQ X10, X12
	MOVO X12, 608(BX)
	MOVO 624(AX), X15
	MOVO 640(AX), X2
	MOVO 656(AX), X0
	MOVO 672(AX), X5
	MOVO X15, X1
	MOVO X2, X3
	MOVO X0, X4
	MOVO X5, X6
	PSUBQ X14, X15
	MOVO X15, 624(BX)
	PSUBQ X1, X2
	MOVO X2, 640(BX)
	PSUBQ X3, X0
	MOVO X0, 656(BX)
	PSUBQ X4, X5
	MOVO X5, 672(BX)
	MOVO 688(AX), X7
	MOVO 704(AX), X9
	MOVO 720(AX), X11
	MOVO 736(AX), X13
	MOVO X7, X8
	MOVO X9, X10
	MOVO X11, X12
	MOVO X13, X14
	PSUBQ X6, X7
	MOVO X7, 688(BX)
	PSUBQ X8, X9
	MOVO X9, 704(BX)
	PSUBQ X10, X11
	MOVO X11, 720(BX)
	PSUBQ X12, X13
	MOVO X13, 736(BX)
	MOVO 752(AX), X15
	MOVO 768(AX), X1
	MOVO 784(AX), X2
	MOVO 800(AX), X3
	MOVO X15, X0
	MOVO X1, X4
	MOVO X2, X5
	MOVO X3, X6
	PSUBQ X14, X15
	MOVO X15, 752(BX)
	PSUBQ X0, X1
	MOVO X1, 768(BX)
	PSUBQ X4, X2
	MOVO X2, 784(BX)
	PSUBQ X5, X3
	MOVO X3, 800(BX)
	MOVO 816(AX), X7
	MOVO 832(AX), X8
	MOVO 848(AX), X9
	MOVO 864(AX), X10
	MOVO X7, X11
	MOVO X8, X12
	MOVO X9, X13
	MOVO X10, X14
	PSUBQ X6, X7
	MOVO X7, 816(BX)
	PSUBQ X11, X8
	MOVO X8, 832(BX)
	PSUBQ X12, X9
	MOVO X9, 848(BX)
	PSUBQ X13, X10
	MOVO X10, 864(BX)
	MOVO 880(AX), X15
	MOVO 896(AX), X0
	MOVO 912(AX), X1
	MOVO 928(AX), X4
	MOVO X15, X2
	MOVO X0, X5
	MOVO X1, X3
	MOVO X4, X6
	PSUBQ X14, X15
	MOVO X15, 880(BX)
	PSUBQ X2, X0
	MOVO X0, 896(BX)
	PSUBQ X5, X1
	MOVO X1, 912(BX)
	PSUBQ X3, X4
	MOVO X4, 928(BX)
	MOVO 944(AX), X7
	MOVO 960(AX), X11
	MOVO 976(AX), X8
	MOVO 992(AX), X12
	MOVO X7, X9
	MOVO X11, X13
	MOVO X8, X10
	MOVO X12, X14
	PSUBQ X6, X7
	MOVO X7, 944(BX)
	PSUBQ X9, X11
	MOVO X11, 960(BX)
	PSUBQ X13, X8
	MOVO X8, 976(BX)
	PSUBQ X10, X12
	MOVO X12, 992(BX)
	MOVO 1008(AX), X15
	MOVO X15, X2
	PSUBQ X14, X15
	MOVO X15, 1008(BX)
	MOVO X2, 0(DX)
	RET

